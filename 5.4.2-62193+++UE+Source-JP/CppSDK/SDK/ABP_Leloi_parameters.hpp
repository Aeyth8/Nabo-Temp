#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Leloi

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_LeloiStates_structs.hpp"
#include "ELeloiIdleStates_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ELeloiStates_structs.hpp"


namespace SDK::Params
{

// Function ABP_Leloi.ABP_Leloi_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Leloi_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Leloi_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Leloi_C_AnimGraph");
static_assert(sizeof(ABP_Leloi_C_AnimGraph) == 0x000010, "Wrong size on ABP_Leloi_C_AnimGraph");
static_assert(offsetof(ABP_Leloi_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Leloi_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.base
// 0x0010 (0x0010 - 0x0000)
struct ABP_Leloi_C_base final
{
public:
	struct FPoseLink                              base_0;                                            // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Leloi_C_base) == 0x000008, "Wrong alignment on ABP_Leloi_C_base");
static_assert(sizeof(ABP_Leloi_C_base) == 0x000010, "Wrong size on ABP_Leloi_C_base");
static_assert(offsetof(ABP_Leloi_C_base, base_0) == 0x000000, "Member 'ABP_Leloi_C_base::base_0' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Leloi_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Leloi_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_Leloi_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on ABP_Leloi_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_Leloi_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_Leloi_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Leloi_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Leloi_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_Leloi_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_Leloi_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_Leloi_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_Leloi_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.Calc Lean
// 0x0070 (0x0070 - 0x0000)
struct ABP_Leloi_C_Calc_Lean final
{
public:
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_Calc_Lean) == 0x000008, "Wrong alignment on ABP_Leloi_C_Calc_Lean");
static_assert(sizeof(ABP_Leloi_C_Calc_Lean) == 0x000070, "Wrong size on ABP_Leloi_C_Calc_Lean");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000000, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_GetOwningActor_ReturnValue) == 0x000008, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000010, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000028, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_BreakRotator_Roll) == 0x000040, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_BreakRotator_Pitch) == 0x000044, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_BreakRotator_Yaw) == 0x000048, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000050, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_FInterpTo_ReturnValue) == 0x000058, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_FClamp_ReturnValue) == 0x000060, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Calc_Lean, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000068, "Member 'ABP_Leloi_C_Calc_Lean::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.ExecuteUbergraph_ABP_Leloi
// 0x0150 (0x0150 - 0x0000)
struct ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bBeingPet;                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InView;                               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELeloiStates                                  K2Node_Event_State;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELeloiIdleStates                              K2Node_Event_IdleState;                            // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Barking;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Breathing;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Sitting;                              // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue_2;                  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_GuardDog_V2_C*                      K2Node_DynamicCast_AsBP_Guard_Dog_V2;              // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_LeloiStates                                 K2Node_Event_BehaviourState;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Leloi_C*                            K2Node_DynamicCast_AsBP_Leloi;                     // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_LeloiFootstep_C>    K2Node_DynamicCast_AsI_Leloi_Footstep;             // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_1; // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_2;     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MovementCharacter_C*                K2Node_Event_PlayerRef;                            // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast;         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast_1;       // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BarkingAlpha_ImplicitCast;      // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast_2;       // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast;           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BreathingAlpha_ImplicitCast;    // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1;  // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi) == 0x000008, "Wrong alignment on ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi");
static_assert(sizeof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi) == 0x000150, "Wrong size on ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, EntryPoint) == 0x000000, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_Event_bBeingPet) == 0x000004, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_Event_bBeingPet' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000005, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue) == 0x000008, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00000E, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_GetSocketLocation_ReturnValue) == 0x000010, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000028, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_Event_DeltaTimeX) == 0x00002C, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_RandomFloatInRange_ReturnValue) == 0x000030, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_Event_InView) == 0x000038, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_Event_InView' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_FInterpTo_ReturnValue) == 0x000040, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_Event_State) == 0x000048, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_Event_State' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_Event_IdleState) == 0x00004A, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_Event_IdleState' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000050, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_Event_Barking) == 0x000068, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_Event_Barking' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_Event_Breathing) == 0x000070, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_Event_Breathing' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_FClamp_ReturnValue) == 0x000078, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000080, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_FInterpTo_ReturnValue_1) == 0x000088, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000090, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000091, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_Event_Sitting) == 0x000092, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_Event_Sitting' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000093, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_FInterpTo_ReturnValue_2) == 0x000098, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_GetOwningActor_ReturnValue) == 0x0000A0, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_DynamicCast_AsBP_Guard_Dog_V2) == 0x0000A8, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_DynamicCast_AsBP_Guard_Dog_V2' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_TryGetPawnOwner_ReturnValue) == 0x0000B8, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_Event_BehaviourState) == 0x0000C0, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_Event_BehaviourState' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_DynamicCast_AsBP_Leloi) == 0x0000C8, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_DynamicCast_AsBP_Leloi' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_DynamicCast_bSuccess_1) == 0x0000D0, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x0000D8, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_DynamicCast_AsI_Leloi_Footstep) == 0x0000E0, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_DynamicCast_AsI_Leloi_Footstep' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_DynamicCast_bSuccess_2) == 0x0000F0, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0000F1, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_1) == 0x0000F4, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_NearlyEqual_FloatFloat_ReturnValue_2) == 0x0000F8, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_NearlyEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x0000F9, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_Event_PlayerRef) == 0x000100, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_Event_PlayerRef' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000108, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_Delay_Duration_ImplicitCast) == 0x000110, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_FInterpTo_DeltaTime_ImplicitCast) == 0x000118, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_FInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_FInterpTo_DeltaTime_ImplicitCast_1) == 0x000120, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_FInterpTo_DeltaTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_VariableSet_BarkingAlpha_ImplicitCast) == 0x000128, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_VariableSet_BarkingAlpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_FInterpTo_DeltaTime_ImplicitCast_2) == 0x000130, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_FInterpTo_DeltaTime_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_FInterpTo_Current_ImplicitCast) == 0x000138, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_FInterpTo_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, K2Node_VariableSet_BreathingAlpha_ImplicitCast) == 0x000140, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::K2Node_VariableSet_BreathingAlpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1) == 0x000148, "Member 'ABP_Leloi_C_ExecuteUbergraph_ABP_Leloi::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.GetMovementComponent
// 0x0018 (0x0018 - 0x0000)
struct ABP_Leloi_C_GetMovementComponent final
{
public:
	class UCharacterMovementComponent*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            K2Node_DynamicCast_AsCharacter_Movement_Component; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_GetMovementComponent) == 0x000008, "Wrong alignment on ABP_Leloi_C_GetMovementComponent");
static_assert(sizeof(ABP_Leloi_C_GetMovementComponent) == 0x000018, "Wrong size on ABP_Leloi_C_GetMovementComponent");
static_assert(offsetof(ABP_Leloi_C_GetMovementComponent, ReturnValue) == 0x000000, "Member 'ABP_Leloi_C_GetMovementComponent::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_GetMovementComponent, K2Node_DynamicCast_AsCharacter_Movement_Component) == 0x000008, "Member 'ABP_Leloi_C_GetMovementComponent::K2Node_DynamicCast_AsCharacter_Movement_Component' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_GetMovementComponent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_Leloi_C_GetMovementComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.GetPlayerRef
// 0x0018 (0x0018 - 0x0000)
struct ABP_Leloi_C_GetPlayerRef final
{
public:
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_MovementCharacter_C*                K2Node_DynamicCast_AsBP_Movement_Character;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_GetPlayerRef) == 0x000008, "Wrong alignment on ABP_Leloi_C_GetPlayerRef");
static_assert(sizeof(ABP_Leloi_C_GetPlayerRef) == 0x000018, "Wrong size on ABP_Leloi_C_GetPlayerRef");
static_assert(offsetof(ABP_Leloi_C_GetPlayerRef, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000000, "Member 'ABP_Leloi_C_GetPlayerRef::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_GetPlayerRef, K2Node_DynamicCast_AsBP_Movement_Character) == 0x000008, "Member 'ABP_Leloi_C_GetPlayerRef::K2Node_DynamicCast_AsBP_Movement_Character' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_GetPlayerRef, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_Leloi_C_GetPlayerRef::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_GetPlayerRef, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'ABP_Leloi_C_GetPlayerRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.SetBarkingAlpha
// 0x0008 (0x0008 - 0x0000)
struct ABP_Leloi_C_SetBarkingAlpha final
{
public:
	double                                        Barking;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_SetBarkingAlpha) == 0x000008, "Wrong alignment on ABP_Leloi_C_SetBarkingAlpha");
static_assert(sizeof(ABP_Leloi_C_SetBarkingAlpha) == 0x000008, "Wrong size on ABP_Leloi_C_SetBarkingAlpha");
static_assert(offsetof(ABP_Leloi_C_SetBarkingAlpha, Barking) == 0x000000, "Member 'ABP_Leloi_C_SetBarkingAlpha::Barking' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.SetBehaviourState
// 0x0001 (0x0001 - 0x0000)
struct ABP_Leloi_C_SetBehaviourState final
{
public:
	E_LeloiStates                                 BehaviourState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_SetBehaviourState) == 0x000001, "Wrong alignment on ABP_Leloi_C_SetBehaviourState");
static_assert(sizeof(ABP_Leloi_C_SetBehaviourState) == 0x000001, "Wrong size on ABP_Leloi_C_SetBehaviourState");
static_assert(offsetof(ABP_Leloi_C_SetBehaviourState, BehaviourState) == 0x000000, "Member 'ABP_Leloi_C_SetBehaviourState::BehaviourState' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.SetBeingPet
// 0x0001 (0x0001 - 0x0000)
struct ABP_Leloi_C_SetBeingPet final
{
public:
	bool                                          bBeingPet_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_SetBeingPet) == 0x000001, "Wrong alignment on ABP_Leloi_C_SetBeingPet");
static_assert(sizeof(ABP_Leloi_C_SetBeingPet) == 0x000001, "Wrong size on ABP_Leloi_C_SetBeingPet");
static_assert(offsetof(ABP_Leloi_C_SetBeingPet, bBeingPet_0) == 0x000000, "Member 'ABP_Leloi_C_SetBeingPet::bBeingPet_0' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.SetBreathingAlpha
// 0x0008 (0x0008 - 0x0000)
struct ABP_Leloi_C_SetBreathingAlpha final
{
public:
	double                                        Breathing;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_SetBreathingAlpha) == 0x000008, "Wrong alignment on ABP_Leloi_C_SetBreathingAlpha");
static_assert(sizeof(ABP_Leloi_C_SetBreathingAlpha) == 0x000008, "Wrong size on ABP_Leloi_C_SetBreathingAlpha");
static_assert(offsetof(ABP_Leloi_C_SetBreathingAlpha, Breathing) == 0x000000, "Member 'ABP_Leloi_C_SetBreathingAlpha::Breathing' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.SetIdleState
// 0x0001 (0x0001 - 0x0000)
struct ABP_Leloi_C_SetIdleState final
{
public:
	ELeloiIdleStates                              IdleState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_SetIdleState) == 0x000001, "Wrong alignment on ABP_Leloi_C_SetIdleState");
static_assert(sizeof(ABP_Leloi_C_SetIdleState) == 0x000001, "Wrong size on ABP_Leloi_C_SetIdleState");
static_assert(offsetof(ABP_Leloi_C_SetIdleState, IdleState) == 0x000000, "Member 'ABP_Leloi_C_SetIdleState::IdleState' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.SetInteractablePlayer
// 0x0008 (0x0008 - 0x0000)
struct ABP_Leloi_C_SetInteractablePlayer final
{
public:
	class ABP_MovementCharacter_C*                PlayerRef_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_SetInteractablePlayer) == 0x000008, "Wrong alignment on ABP_Leloi_C_SetInteractablePlayer");
static_assert(sizeof(ABP_Leloi_C_SetInteractablePlayer) == 0x000008, "Wrong size on ABP_Leloi_C_SetInteractablePlayer");
static_assert(offsetof(ABP_Leloi_C_SetInteractablePlayer, PlayerRef_0) == 0x000000, "Member 'ABP_Leloi_C_SetInteractablePlayer::PlayerRef_0' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.SetPlayerInView
// 0x0001 (0x0001 - 0x0000)
struct ABP_Leloi_C_SetPlayerInView final
{
public:
	bool                                          InView;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_SetPlayerInView) == 0x000001, "Wrong alignment on ABP_Leloi_C_SetPlayerInView");
static_assert(sizeof(ABP_Leloi_C_SetPlayerInView) == 0x000001, "Wrong size on ABP_Leloi_C_SetPlayerInView");
static_assert(offsetof(ABP_Leloi_C_SetPlayerInView, InView) == 0x000000, "Member 'ABP_Leloi_C_SetPlayerInView::InView' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.SetSitting
// 0x0001 (0x0001 - 0x0000)
struct ABP_Leloi_C_SetSitting final
{
public:
	bool                                          Sitting_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_SetSitting) == 0x000001, "Wrong alignment on ABP_Leloi_C_SetSitting");
static_assert(sizeof(ABP_Leloi_C_SetSitting) == 0x000001, "Wrong size on ABP_Leloi_C_SetSitting");
static_assert(offsetof(ABP_Leloi_C_SetSitting, Sitting_0) == 0x000000, "Member 'ABP_Leloi_C_SetSitting::Sitting_0' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.SetState
// 0x0001 (0x0001 - 0x0000)
struct ABP_Leloi_C_SetState final
{
public:
	ELeloiStates                                  State_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_SetState) == 0x000001, "Wrong alignment on ABP_Leloi_C_SetState");
static_assert(sizeof(ABP_Leloi_C_SetState) == 0x000001, "Wrong size on ABP_Leloi_C_SetState");
static_assert(offsetof(ABP_Leloi_C_SetState, State_0) == 0x000000, "Member 'ABP_Leloi_C_SetState::State_0' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.Update Pawn Info
// 0x0010 (0x0010 - 0x0000)
struct ABP_Leloi_C_Update_Pawn_Info final
{
public:
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_Update_Pawn_Info) == 0x000008, "Wrong alignment on ABP_Leloi_C_Update_Pawn_Info");
static_assert(sizeof(ABP_Leloi_C_Update_Pawn_Info) == 0x000010, "Wrong size on ABP_Leloi_C_Update_Pawn_Info");
static_assert(offsetof(ABP_Leloi_C_Update_Pawn_Info, CallFunc_VSize_ReturnValue) == 0x000000, "Member 'ABP_Leloi_C_Update_Pawn_Info::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_Update_Pawn_Info, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000008, "Member 'ABP_Leloi_C_Update_Pawn_Info::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_Leloi.ABP_Leloi_C.UpdatePlayerStateData
// 0x0028 (0x0028 - 0x0000)
struct ABP_Leloi_C_UpdatePlayerStateData final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Leloi_C_UpdatePlayerStateData) == 0x000008, "Wrong alignment on ABP_Leloi_C_UpdatePlayerStateData");
static_assert(sizeof(ABP_Leloi_C_UpdatePlayerStateData) == 0x000028, "Wrong size on ABP_Leloi_C_UpdatePlayerStateData");
static_assert(offsetof(ABP_Leloi_C_UpdatePlayerStateData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'ABP_Leloi_C_UpdatePlayerStateData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_UpdatePlayerStateData, CallFunc_BreakVector_X) == 0x000008, "Member 'ABP_Leloi_C_UpdatePlayerStateData::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_UpdatePlayerStateData, CallFunc_BreakVector_Y) == 0x000010, "Member 'ABP_Leloi_C_UpdatePlayerStateData::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_UpdatePlayerStateData, CallFunc_BreakVector_Z) == 0x000018, "Member 'ABP_Leloi_C_UpdatePlayerStateData::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Leloi_C_UpdatePlayerStateData, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000020, "Member 'ABP_Leloi_C_UpdatePlayerStateData::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

}

