#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWTwitch

#include "Basic.hpp"

#include "IWTwitch_structs.hpp"


namespace SDK::Params
{

// Function IWTwitch.TwitchApi.SetChatMode
// 0x0001 (0x0001 - 0x0000)
struct TwitchApi_SetChatMode final
{
public:
	ETwitchChatMode                               ChatMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchApi_SetChatMode) == 0x000001, "Wrong alignment on TwitchApi_SetChatMode");
static_assert(sizeof(TwitchApi_SetChatMode) == 0x000001, "Wrong size on TwitchApi_SetChatMode");
static_assert(offsetof(TwitchApi_SetChatMode, ChatMode) == 0x000000, "Member 'TwitchApi_SetChatMode::ChatMode' has a wrong offset!");

// Function IWTwitch.TwitchApi.SetTwitchAuth
// 0x0008 (0x0008 - 0x0000)
struct TwitchApi_SetTwitchAuth final
{
public:
	class UTwitchAuth*                            TwitchAuthIn;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchApi_SetTwitchAuth) == 0x000008, "Wrong alignment on TwitchApi_SetTwitchAuth");
static_assert(sizeof(TwitchApi_SetTwitchAuth) == 0x000008, "Wrong size on TwitchApi_SetTwitchAuth");
static_assert(offsetof(TwitchApi_SetTwitchAuth, TwitchAuthIn) == 0x000000, "Member 'TwitchApi_SetTwitchAuth::TwitchAuthIn' has a wrong offset!");

// Function IWTwitch.TwitchApi.TwitchAuthFailed
// 0x0070 (0x0070 - 0x0000)
struct TwitchApi_TwitchAuthFailed final
{
public:
	struct FTwitchAuthResponse                    AuthResponse;                                      // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FTwitchError                           TwitchError;                                       // 0x0048(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchApi_TwitchAuthFailed) == 0x000008, "Wrong alignment on TwitchApi_TwitchAuthFailed");
static_assert(sizeof(TwitchApi_TwitchAuthFailed) == 0x000070, "Wrong size on TwitchApi_TwitchAuthFailed");
static_assert(offsetof(TwitchApi_TwitchAuthFailed, AuthResponse) == 0x000000, "Member 'TwitchApi_TwitchAuthFailed::AuthResponse' has a wrong offset!");
static_assert(offsetof(TwitchApi_TwitchAuthFailed, TwitchError) == 0x000048, "Member 'TwitchApi_TwitchAuthFailed::TwitchError' has a wrong offset!");

// Function IWTwitch.TwitchApi.TwitchAuthValidated
// 0x0070 (0x0070 - 0x0000)
struct TwitchApi_TwitchAuthValidated final
{
public:
	struct FTwitchAuthResponse                    AuthResponse;                                      // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FTwitchError                           TwitchError;                                       // 0x0048(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchApi_TwitchAuthValidated) == 0x000008, "Wrong alignment on TwitchApi_TwitchAuthValidated");
static_assert(sizeof(TwitchApi_TwitchAuthValidated) == 0x000070, "Wrong size on TwitchApi_TwitchAuthValidated");
static_assert(offsetof(TwitchApi_TwitchAuthValidated, AuthResponse) == 0x000000, "Member 'TwitchApi_TwitchAuthValidated::AuthResponse' has a wrong offset!");
static_assert(offsetof(TwitchApi_TwitchAuthValidated, TwitchError) == 0x000048, "Member 'TwitchApi_TwitchAuthValidated::TwitchError' has a wrong offset!");

// Function IWTwitch.TwitchApi.GetAccessTokenAsText
// 0x0010 (0x0010 - 0x0000)
struct TwitchApi_GetAccessTokenAsText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchApi_GetAccessTokenAsText) == 0x000008, "Wrong alignment on TwitchApi_GetAccessTokenAsText");
static_assert(sizeof(TwitchApi_GetAccessTokenAsText) == 0x000010, "Wrong size on TwitchApi_GetAccessTokenAsText");
static_assert(offsetof(TwitchApi_GetAccessTokenAsText, ReturnValue) == 0x000000, "Member 'TwitchApi_GetAccessTokenAsText::ReturnValue' has a wrong offset!");

// Function IWTwitch.TwitchApi.GetTwitchAuth
// 0x0008 (0x0008 - 0x0000)
struct TwitchApi_GetTwitchAuth final
{
public:
	class UTwitchAuth*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchApi_GetTwitchAuth) == 0x000008, "Wrong alignment on TwitchApi_GetTwitchAuth");
static_assert(sizeof(TwitchApi_GetTwitchAuth) == 0x000008, "Wrong size on TwitchApi_GetTwitchAuth");
static_assert(offsetof(TwitchApi_GetTwitchAuth, ReturnValue) == 0x000000, "Member 'TwitchApi_GetTwitchAuth::ReturnValue' has a wrong offset!");

// Function IWTwitch.TwitchApi.GetTwitchIrc
// 0x0008 (0x0008 - 0x0000)
struct TwitchApi_GetTwitchIrc final
{
public:
	class UTwitchIRC*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchApi_GetTwitchIrc) == 0x000008, "Wrong alignment on TwitchApi_GetTwitchIrc");
static_assert(sizeof(TwitchApi_GetTwitchIrc) == 0x000008, "Wrong size on TwitchApi_GetTwitchIrc");
static_assert(offsetof(TwitchApi_GetTwitchIrc, ReturnValue) == 0x000000, "Member 'TwitchApi_GetTwitchIrc::ReturnValue' has a wrong offset!");

// Function IWTwitch.TwitchDropEntitlementsAsyncDelegate.GetTwitchDropsEntitlements
// 0x0020 (0x0020 - 0x0000)
struct TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Cursor;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTwitchDropEntitlementsAsyncDelegate*   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements) == 0x000008, "Wrong alignment on TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements");
static_assert(sizeof(TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements) == 0x000020, "Wrong size on TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements");
static_assert(offsetof(TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements, WorldContextObject) == 0x000000, "Member 'TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements, Cursor) == 0x000008, "Member 'TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements::Cursor' has a wrong offset!");
static_assert(offsetof(TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements, ReturnValue) == 0x000018, "Member 'TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements::ReturnValue' has a wrong offset!");

// Function IWTwitch.TwitchAuthValidateAsyncDelegate.ValidateTwitchAccessToken
// 0x0010 (0x0010 - 0x0000)
struct TwitchAuthValidateAsyncDelegate_ValidateTwitchAccessToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTwitchAuthValidateAsyncDelegate*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchAuthValidateAsyncDelegate_ValidateTwitchAccessToken) == 0x000008, "Wrong alignment on TwitchAuthValidateAsyncDelegate_ValidateTwitchAccessToken");
static_assert(sizeof(TwitchAuthValidateAsyncDelegate_ValidateTwitchAccessToken) == 0x000010, "Wrong size on TwitchAuthValidateAsyncDelegate_ValidateTwitchAccessToken");
static_assert(offsetof(TwitchAuthValidateAsyncDelegate_ValidateTwitchAccessToken, WorldContextObject) == 0x000000, "Member 'TwitchAuthValidateAsyncDelegate_ValidateTwitchAccessToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TwitchAuthValidateAsyncDelegate_ValidateTwitchAccessToken, ReturnValue) == 0x000008, "Member 'TwitchAuthValidateAsyncDelegate_ValidateTwitchAccessToken::ReturnValue' has a wrong offset!");

// Function IWTwitch.TwitchRefreshTokenAsyncDelegate.SetAndRefreshTwitchAccessToken
// 0x0030 (0x0030 - 0x0000)
struct TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccessToken;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RefreshToken;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTwitchRefreshTokenAsyncDelegate*       ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken) == 0x000008, "Wrong alignment on TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken");
static_assert(sizeof(TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken) == 0x000030, "Wrong size on TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken");
static_assert(offsetof(TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken, WorldContextObject) == 0x000000, "Member 'TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken, AccessToken) == 0x000008, "Member 'TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken::AccessToken' has a wrong offset!");
static_assert(offsetof(TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken, RefreshToken) == 0x000018, "Member 'TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken::RefreshToken' has a wrong offset!");
static_assert(offsetof(TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken, ReturnValue) == 0x000028, "Member 'TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken::ReturnValue' has a wrong offset!");

// Function IWTwitch.TwitchAuth.EndAuth
// 0x0008 (0x0008 - 0x0000)
struct TwitchAuth_EndAuth final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchAuth_EndAuth) == 0x000008, "Wrong alignment on TwitchAuth_EndAuth");
static_assert(sizeof(TwitchAuth_EndAuth) == 0x000008, "Wrong size on TwitchAuth_EndAuth");
static_assert(offsetof(TwitchAuth_EndAuth, WorldContextObject) == 0x000000, "Member 'TwitchAuth_EndAuth::WorldContextObject' has a wrong offset!");

// Function IWTwitch.TwitchAuth.StartAuth
// 0x0008 (0x0008 - 0x0000)
struct TwitchAuth_StartAuth final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchAuth_StartAuth) == 0x000008, "Wrong alignment on TwitchAuth_StartAuth");
static_assert(sizeof(TwitchAuth_StartAuth) == 0x000008, "Wrong size on TwitchAuth_StartAuth");
static_assert(offsetof(TwitchAuth_StartAuth, WorldContextObject) == 0x000000, "Member 'TwitchAuth_StartAuth::WorldContextObject' has a wrong offset!");

// Function IWTwitch.TwitchIRC.Connect
// 0x0018 (0x0018 - 0x0000)
struct TwitchIRC_Connect final
{
public:
	class FString                                 ErrorOut;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TwitchIRC_Connect) == 0x000008, "Wrong alignment on TwitchIRC_Connect");
static_assert(sizeof(TwitchIRC_Connect) == 0x000018, "Wrong size on TwitchIRC_Connect");
static_assert(offsetof(TwitchIRC_Connect, ErrorOut) == 0x000000, "Member 'TwitchIRC_Connect::ErrorOut' has a wrong offset!");
static_assert(offsetof(TwitchIRC_Connect, ReturnValue) == 0x000010, "Member 'TwitchIRC_Connect::ReturnValue' has a wrong offset!");

// Function IWTwitch.TwitchIRC.SendIRCMessage
// 0x0030 (0x0030 - 0x0000)
struct TwitchIRC_SendIRCMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSendTo;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InChannel;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TwitchIRC_SendIRCMessage) == 0x000008, "Wrong alignment on TwitchIRC_SendIRCMessage");
static_assert(sizeof(TwitchIRC_SendIRCMessage) == 0x000030, "Wrong size on TwitchIRC_SendIRCMessage");
static_assert(offsetof(TwitchIRC_SendIRCMessage, Message) == 0x000000, "Member 'TwitchIRC_SendIRCMessage::Message' has a wrong offset!");
static_assert(offsetof(TwitchIRC_SendIRCMessage, bSendTo) == 0x000010, "Member 'TwitchIRC_SendIRCMessage::bSendTo' has a wrong offset!");
static_assert(offsetof(TwitchIRC_SendIRCMessage, InChannel) == 0x000018, "Member 'TwitchIRC_SendIRCMessage::InChannel' has a wrong offset!");
static_assert(offsetof(TwitchIRC_SendIRCMessage, ReturnValue) == 0x000028, "Member 'TwitchIRC_SendIRCMessage::ReturnValue' has a wrong offset!");

// Function IWTwitch.TwitchIRC.SetUserInfo
// 0x0030 (0x0030 - 0x0000)
struct TwitchIRC_SetUserInfo final
{
public:
	class FString                                 OAuth;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InUsername;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InChannel;                                         // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwitchIRC_SetUserInfo) == 0x000008, "Wrong alignment on TwitchIRC_SetUserInfo");
static_assert(sizeof(TwitchIRC_SetUserInfo) == 0x000030, "Wrong size on TwitchIRC_SetUserInfo");
static_assert(offsetof(TwitchIRC_SetUserInfo, OAuth) == 0x000000, "Member 'TwitchIRC_SetUserInfo::OAuth' has a wrong offset!");
static_assert(offsetof(TwitchIRC_SetUserInfo, InUsername) == 0x000010, "Member 'TwitchIRC_SetUserInfo::InUsername' has a wrong offset!");
static_assert(offsetof(TwitchIRC_SetUserInfo, InChannel) == 0x000020, "Member 'TwitchIRC_SetUserInfo::InChannel' has a wrong offset!");

}

