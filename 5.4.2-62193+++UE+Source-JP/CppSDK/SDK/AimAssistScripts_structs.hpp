#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AimAssistScripts

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AimAssistScripts.ECollisionSelectionMethod
// NumValues: 0x0003
enum class ECollisionSelectionMethod : uint8
{
	UseCollisionChannel                      = 0,
	UseCollisionProfile                      = 1,
	ECollisionSelectionMethod_MAX            = 2,
};

// Enum AimAssistScripts.ECastType
// NumValues: 0x0003
enum class ECastType : uint8
{
	Sphere                                   = 0,
	Cone                                     = 1,
	ECastType_MAX                            = 2,
};

// ScriptStruct AimAssistScripts.AimAssistSettings
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FAimAssistSettings
{
};
#pragma pack(pop)
static_assert(alignof(FAimAssistSettings) == 0x000001, "Wrong alignment on FAimAssistSettings");
static_assert(sizeof(FAimAssistSettings) == 0x000001, "Wrong size on FAimAssistSettings");

// ScriptStruct AimAssistScripts.AimCompensatorSettings
// 0x0010 (0x0010 - 0x0000)
struct FAimCompensatorSettings final : public FAimAssistSettings
{
public:
	float                                         DeadZoneMultiplier;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimAngleThreshold;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrengthAtEdge;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrengthAtCenter;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimCompensatorSettings) == 0x000004, "Wrong alignment on FAimCompensatorSettings");
static_assert(sizeof(FAimCompensatorSettings) == 0x000010, "Wrong size on FAimCompensatorSettings");
static_assert(offsetof(FAimCompensatorSettings, DeadZoneMultiplier) == 0x000000, "Member 'FAimCompensatorSettings::DeadZoneMultiplier' has a wrong offset!");
static_assert(offsetof(FAimCompensatorSettings, AimAngleThreshold) == 0x000004, "Member 'FAimCompensatorSettings::AimAngleThreshold' has a wrong offset!");
static_assert(offsetof(FAimCompensatorSettings, StrengthAtEdge) == 0x000008, "Member 'FAimCompensatorSettings::StrengthAtEdge' has a wrong offset!");
static_assert(offsetof(FAimCompensatorSettings, StrengthAtCenter) == 0x00000C, "Member 'FAimCompensatorSettings::StrengthAtCenter' has a wrong offset!");

// ScriptStruct AimAssistScripts.AimAssistTarget
// 0x0060 (0x0060 - 0x0000)
struct FAimAssistTarget final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComponentExtent;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorLocation;                                     // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimAssistTarget) == 0x000008, "Wrong alignment on FAimAssistTarget");
static_assert(sizeof(FAimAssistTarget) == 0x000060, "Wrong size on FAimAssistTarget");
static_assert(offsetof(FAimAssistTarget, HitActor) == 0x000000, "Member 'FAimAssistTarget::HitActor' has a wrong offset!");
static_assert(offsetof(FAimAssistTarget, ComponentExtent) == 0x000008, "Member 'FAimAssistTarget::ComponentExtent' has a wrong offset!");
static_assert(offsetof(FAimAssistTarget, Location) == 0x000010, "Member 'FAimAssistTarget::Location' has a wrong offset!");
static_assert(offsetof(FAimAssistTarget, ActorLocation) == 0x000028, "Member 'FAimAssistTarget::ActorLocation' has a wrong offset!");
static_assert(offsetof(FAimAssistTarget, Velocity) == 0x000040, "Member 'FAimAssistTarget::Velocity' has a wrong offset!");
static_assert(offsetof(FAimAssistTarget, Tag) == 0x000058, "Member 'FAimAssistTarget::Tag' has a wrong offset!");

// ScriptStruct AimAssistScripts.AimAssistedLookInput
// 0x0008 (0x0008 - 0x0000)
struct FAimAssistedLookInput final
{
public:
	float                                         LookInputYaw;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookInputPitch;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAimAssistedLookInput) == 0x000004, "Wrong alignment on FAimAssistedLookInput");
static_assert(sizeof(FAimAssistedLookInput) == 0x000008, "Wrong size on FAimAssistedLookInput");
static_assert(offsetof(FAimAssistedLookInput, LookInputYaw) == 0x000000, "Member 'FAimAssistedLookInput::LookInputYaw' has a wrong offset!");
static_assert(offsetof(FAimAssistedLookInput, LookInputPitch) == 0x000004, "Member 'FAimAssistedLookInput::LookInputPitch' has a wrong offset!");

// ScriptStruct AimAssistScripts.MagnetismSettings
// 0x0014 (0x0014 - 0x0000)
struct FMagnetismSettings final : public FAimAssistSettings
{
public:
	float                                         HorizontalSmoothnessAwayFromTarget;                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalSmoothnessTowardsTarget;                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalSmoothnessGranularity;                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVerticalCompensation;                             // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VerticalSmoothness;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMagnetismSettings) == 0x000004, "Wrong alignment on FMagnetismSettings");
static_assert(sizeof(FMagnetismSettings) == 0x000014, "Wrong size on FMagnetismSettings");
static_assert(offsetof(FMagnetismSettings, HorizontalSmoothnessAwayFromTarget) == 0x000000, "Member 'FMagnetismSettings::HorizontalSmoothnessAwayFromTarget' has a wrong offset!");
static_assert(offsetof(FMagnetismSettings, HorizontalSmoothnessTowardsTarget) == 0x000004, "Member 'FMagnetismSettings::HorizontalSmoothnessTowardsTarget' has a wrong offset!");
static_assert(offsetof(FMagnetismSettings, HorizontalSmoothnessGranularity) == 0x000008, "Member 'FMagnetismSettings::HorizontalSmoothnessGranularity' has a wrong offset!");
static_assert(offsetof(FMagnetismSettings, bVerticalCompensation) == 0x00000C, "Member 'FMagnetismSettings::bVerticalCompensation' has a wrong offset!");
static_assert(offsetof(FMagnetismSettings, VerticalSmoothness) == 0x000010, "Member 'FMagnetismSettings::VerticalSmoothness' has a wrong offset!");

// ScriptStruct AimAssistScripts.MotionTrackerSettings
// 0x0010 (0x0010 - 0x0000)
struct FMotionTrackerSettings final : public FAimAssistSettings
{
public:
	float                                         WalkIntoCrosshairMultiplier;                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkOutCrosshairMultiplier;                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplierLerpDistance;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableWhenStrafeDirectionsMatch;                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMotionTrackerSettings) == 0x000004, "Wrong alignment on FMotionTrackerSettings");
static_assert(sizeof(FMotionTrackerSettings) == 0x000010, "Wrong size on FMotionTrackerSettings");
static_assert(offsetof(FMotionTrackerSettings, WalkIntoCrosshairMultiplier) == 0x000000, "Member 'FMotionTrackerSettings::WalkIntoCrosshairMultiplier' has a wrong offset!");
static_assert(offsetof(FMotionTrackerSettings, WalkOutCrosshairMultiplier) == 0x000004, "Member 'FMotionTrackerSettings::WalkOutCrosshairMultiplier' has a wrong offset!");
static_assert(offsetof(FMotionTrackerSettings, MultiplierLerpDistance) == 0x000008, "Member 'FMotionTrackerSettings::MultiplierLerpDistance' has a wrong offset!");
static_assert(offsetof(FMotionTrackerSettings, DisableWhenStrafeDirectionsMatch) == 0x00000C, "Member 'FMotionTrackerSettings::DisableWhenStrafeDirectionsMatch' has a wrong offset!");

// ScriptStruct AimAssistScripts.FrictionSettings
// 0x000C (0x000C - 0x0000)
struct FFrictionSettings final : public FAimAssistSettings
{
public:
	float                                         SensitivityMultiplierAtCenter;                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensitivityMultiplierAtEdge;                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToRegainOriginalInputSensitivity;              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFrictionSettings) == 0x000004, "Wrong alignment on FFrictionSettings");
static_assert(sizeof(FFrictionSettings) == 0x00000C, "Wrong size on FFrictionSettings");
static_assert(offsetof(FFrictionSettings, SensitivityMultiplierAtCenter) == 0x000000, "Member 'FFrictionSettings::SensitivityMultiplierAtCenter' has a wrong offset!");
static_assert(offsetof(FFrictionSettings, SensitivityMultiplierAtEdge) == 0x000004, "Member 'FFrictionSettings::SensitivityMultiplierAtEdge' has a wrong offset!");
static_assert(offsetof(FFrictionSettings, TimeToRegainOriginalInputSensitivity) == 0x000008, "Member 'FFrictionSettings::TimeToRegainOriginalInputSensitivity' has a wrong offset!");

}

