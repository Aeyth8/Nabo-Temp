#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lamp

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_LightTypes_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Lamp.BP_Lamp_C
// 0x0098 (0x0328 - 0x0290)
class ABP_Lamp_C : public AActor
{
public:
	class UStaticMeshComponent*                   Cone;                                              // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   AmbPoint;                                          // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   BulbLight;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    FakeBounce;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    AmbSpot;                                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attenuation_Radius;                                // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Shadows;                                      // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAmbLight;                                       // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AmbIntensity;                                      // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFakeBounce;                                     // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseBulbLight;                                      // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lamp_Mesh_Cast_Shadows;                            // 0x0302(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LightTypes                                  LightType;                                         // 0x0303(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalLightComponent*                   MainLightComponent;                                // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ULocalLightComponent*                   AmbLightComponent;                                 // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTextureLightProfile*                   IES_Profile;                                       // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLightCone;                                      // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Lamp_C">();
	}
	static class ABP_Lamp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Lamp_C>();
	}
};
static_assert(alignof(ABP_Lamp_C) == 0x000008, "Wrong alignment on ABP_Lamp_C");
static_assert(sizeof(ABP_Lamp_C) == 0x000328, "Wrong size on ABP_Lamp_C");
static_assert(offsetof(ABP_Lamp_C, Cone) == 0x000290, "Member 'ABP_Lamp_C::Cone' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, AmbPoint) == 0x000298, "Member 'ABP_Lamp_C::AmbPoint' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, PointLight) == 0x0002A0, "Member 'ABP_Lamp_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, BulbLight) == 0x0002A8, "Member 'ABP_Lamp_C::BulbLight' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, FakeBounce) == 0x0002B0, "Member 'ABP_Lamp_C::FakeBounce' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, AmbSpot) == 0x0002B8, "Member 'ABP_Lamp_C::AmbSpot' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, SpotLight) == 0x0002C0, "Member 'ABP_Lamp_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, StaticMesh) == 0x0002C8, "Member 'ABP_Lamp_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, DefaultSceneRoot) == 0x0002D0, "Member 'ABP_Lamp_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, Intensity) == 0x0002D8, "Member 'ABP_Lamp_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, Attenuation_Radius) == 0x0002DC, "Member 'ABP_Lamp_C::Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, LightColor) == 0x0002E0, "Member 'ABP_Lamp_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, Cast_Shadows) == 0x0002F0, "Member 'ABP_Lamp_C::Cast_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, UseAmbLight) == 0x0002F1, "Member 'ABP_Lamp_C::UseAmbLight' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, AmbIntensity) == 0x0002F8, "Member 'ABP_Lamp_C::AmbIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, UseFakeBounce) == 0x000300, "Member 'ABP_Lamp_C::UseFakeBounce' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, UseBulbLight) == 0x000301, "Member 'ABP_Lamp_C::UseBulbLight' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, Lamp_Mesh_Cast_Shadows) == 0x000302, "Member 'ABP_Lamp_C::Lamp_Mesh_Cast_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, LightType) == 0x000303, "Member 'ABP_Lamp_C::LightType' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, MainLightComponent) == 0x000308, "Member 'ABP_Lamp_C::MainLightComponent' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, AmbLightComponent) == 0x000310, "Member 'ABP_Lamp_C::AmbLightComponent' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, IES_Profile) == 0x000318, "Member 'ABP_Lamp_C::IES_Profile' has a wrong offset!");
static_assert(offsetof(ABP_Lamp_C, UseLightCone) == 0x000320, "Member 'ABP_Lamp_C::UseLightCone' has a wrong offset!");

}

