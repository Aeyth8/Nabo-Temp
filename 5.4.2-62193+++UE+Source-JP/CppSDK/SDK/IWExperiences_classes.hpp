#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWExperiences

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameFeatures_classes.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// Class IWExperiences.AsyncAction_ExperienceReady
// 0x0018 (0x0048 - 0x0030)
class UAsyncAction_ExperienceReady final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnReady;                                           // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAsyncAction_ExperienceReady* WaitForExperienceReady(class UObject* WorldContextObject);

	void Step2_HandleExperienceLoaded(const class UExperienceDefinition* CurrentExperience);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncAction_ExperienceReady">();
	}
	static class UAsyncAction_ExperienceReady* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncAction_ExperienceReady>();
	}
};
static_assert(alignof(UAsyncAction_ExperienceReady) == 0x000008, "Wrong alignment on UAsyncAction_ExperienceReady");
static_assert(sizeof(UAsyncAction_ExperienceReady) == 0x000048, "Wrong size on UAsyncAction_ExperienceReady");
static_assert(offsetof(UAsyncAction_ExperienceReady, OnReady) == 0x000030, "Member 'UAsyncAction_ExperienceReady::OnReady' has a wrong offset!");

// Class IWExperiences.ExperienceActionSet
// 0x0020 (0x0050 - 0x0030)
class UExperienceActionSet final : public UPrimaryDataAsset
{
public:
	TArray<class UGameFeatureAction*>             Actions;                                           // 0x0030(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FString>                         GameFeaturesToEnable;                              // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExperienceActionSet">();
	}
	static class UExperienceActionSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExperienceActionSet>();
	}
};
static_assert(alignof(UExperienceActionSet) == 0x000008, "Wrong alignment on UExperienceActionSet");
static_assert(sizeof(UExperienceActionSet) == 0x000050, "Wrong size on UExperienceActionSet");
static_assert(offsetof(UExperienceActionSet, Actions) == 0x000030, "Member 'UExperienceActionSet::Actions' has a wrong offset!");
static_assert(offsetof(UExperienceActionSet, GameFeaturesToEnable) == 0x000040, "Member 'UExperienceActionSet::GameFeaturesToEnable' has a wrong offset!");

// Class IWExperiences.ExperienceCharacter
// 0x0000 (0x0670 - 0x0670)
class AExperienceCharacter final : public ACharacter
{
public:
	class UPawnExtensionComponent*                PawnExtension;                                     // 0x0668(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExperienceCharacter">();
	}
	static class AExperienceCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AExperienceCharacter>();
	}
};
static_assert(alignof(AExperienceCharacter) == 0x000010, "Wrong alignment on AExperienceCharacter");
static_assert(sizeof(AExperienceCharacter) == 0x000670, "Wrong size on AExperienceCharacter");
static_assert(offsetof(AExperienceCharacter, PawnExtension) == 0x000668, "Member 'AExperienceCharacter::PawnExtension' has a wrong offset!");

// Class IWExperiences.ExperienceDefinition
// 0x0058 (0x0088 - 0x0030)
class UExperienceDefinition : public UPrimaryDataAsset
{
public:
	TArray<class FString>                         GameFeaturesToEnable;                              // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPawnDefinition>         DefaultPawnDefinition;                             // 0x0040(0x0028)(Edit, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGameFeatureAction*>             Actions;                                           // 0x0068(0x0010)(Edit, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UExperienceActionSet*>           ActionSets;                                        // 0x0078(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExperienceDefinition">();
	}
	static class UExperienceDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExperienceDefinition>();
	}
};
static_assert(alignof(UExperienceDefinition) == 0x000008, "Wrong alignment on UExperienceDefinition");
static_assert(sizeof(UExperienceDefinition) == 0x000088, "Wrong size on UExperienceDefinition");
static_assert(offsetof(UExperienceDefinition, GameFeaturesToEnable) == 0x000030, "Member 'UExperienceDefinition::GameFeaturesToEnable' has a wrong offset!");
static_assert(offsetof(UExperienceDefinition, DefaultPawnDefinition) == 0x000040, "Member 'UExperienceDefinition::DefaultPawnDefinition' has a wrong offset!");
static_assert(offsetof(UExperienceDefinition, Actions) == 0x000068, "Member 'UExperienceDefinition::Actions' has a wrong offset!");
static_assert(offsetof(UExperienceDefinition, ActionSets) == 0x000078, "Member 'UExperienceDefinition::ActionSets' has a wrong offset!");

// Class IWExperiences.ExperienceFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UExperienceFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FPrimaryAssetId GetPrimaryAssetIdFromUserFacingExperienceName(const class FString& AdvertisedExperienceID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExperienceFunctionLibrary">();
	}
	static class UExperienceFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExperienceFunctionLibrary>();
	}
};
static_assert(alignof(UExperienceFunctionLibrary) == 0x000008, "Wrong alignment on UExperienceFunctionLibrary");
static_assert(sizeof(UExperienceFunctionLibrary) == 0x000028, "Wrong size on UExperienceFunctionLibrary");

// Class IWExperiences.ExperienceWorldSettingsInterface
// 0x0000 (0x0028 - 0x0028)
class IExperienceWorldSettingsInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExperienceWorldSettingsInterface">();
	}
	static class IExperienceWorldSettingsInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IExperienceWorldSettingsInterface>();
	}
};
static_assert(alignof(IExperienceWorldSettingsInterface) == 0x000008, "Wrong alignment on IExperienceWorldSettingsInterface");
static_assert(sizeof(IExperienceWorldSettingsInterface) == 0x000028, "Wrong size on IExperienceWorldSettingsInterface");

// Class IWExperiences.ExperienceWorldSubsystem
// 0x0038 (0x0068 - 0x0030)
class UExperienceWorldSubsystem final : public UWorldSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnExperienceLoaded_HighPriority;                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnExperienceLoaded;                                // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnExperienceLoaded_LowPriority;                    // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExperienceLoaded(const class UExperienceDefinition* Experience);
	void ExperienceLoaded_HighPriority(const class UExperienceDefinition* Experience);
	void ExperienceLoaded_LowPriority(const class UExperienceDefinition* Experience);
	void InitializeNextFrame();

	const class UExperienceDefinition* GetCurrentDefinition() const;
	bool HasExperienceLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExperienceWorldSubsystem">();
	}
	static class UExperienceWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExperienceWorldSubsystem>();
	}
};
static_assert(alignof(UExperienceWorldSubsystem) == 0x000008, "Wrong alignment on UExperienceWorldSubsystem");
static_assert(sizeof(UExperienceWorldSubsystem) == 0x000068, "Wrong size on UExperienceWorldSubsystem");
static_assert(offsetof(UExperienceWorldSubsystem, OnExperienceLoaded_HighPriority) == 0x000030, "Member 'UExperienceWorldSubsystem::OnExperienceLoaded_HighPriority' has a wrong offset!");
static_assert(offsetof(UExperienceWorldSubsystem, OnExperienceLoaded) == 0x000040, "Member 'UExperienceWorldSubsystem::OnExperienceLoaded' has a wrong offset!");
static_assert(offsetof(UExperienceWorldSubsystem, OnExperienceLoaded_LowPriority) == 0x000050, "Member 'UExperienceWorldSubsystem::OnExperienceLoaded_LowPriority' has a wrong offset!");

// Class IWExperiences.GameFeatureAction_WorldActionBase
// 0x0050 (0x0078 - 0x0028)
class UGameFeatureAction_WorldActionBase : public UGameFeatureAction
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameFeatureAction_WorldActionBase">();
	}
	static class UGameFeatureAction_WorldActionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameFeatureAction_WorldActionBase>();
	}
};
static_assert(alignof(UGameFeatureAction_WorldActionBase) == 0x000008, "Wrong alignment on UGameFeatureAction_WorldActionBase");
static_assert(sizeof(UGameFeatureAction_WorldActionBase) == 0x000078, "Wrong size on UGameFeatureAction_WorldActionBase");

// Class IWExperiences.IWExperiencesDeveloperSettings
// 0x0008 (0x0030 - 0x0028)
class UIWExperiencesDeveloperSettings final : public UObject
{
public:
	TSubclassOf<class UExperienceDefinition>      ExperienceOverride;                                // 0x0028(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IWExperiencesDeveloperSettings">();
	}
	static class UIWExperiencesDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIWExperiencesDeveloperSettings>();
	}
};
static_assert(alignof(UIWExperiencesDeveloperSettings) == 0x000008, "Wrong alignment on UIWExperiencesDeveloperSettings");
static_assert(sizeof(UIWExperiencesDeveloperSettings) == 0x000030, "Wrong size on UIWExperiencesDeveloperSettings");
static_assert(offsetof(UIWExperiencesDeveloperSettings, ExperienceOverride) == 0x000028, "Member 'UIWExperiencesDeveloperSettings::ExperienceOverride' has a wrong offset!");

// Class IWExperiences.IWExperiencesSettings
// 0x0008 (0x0030 - 0x0028)
class UIWExperiencesSettings final : public UObject
{
public:
	TSubclassOf<class UExperienceDefinition>      DefaultExperience;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IWExperiencesSettings">();
	}
	static class UIWExperiencesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIWExperiencesSettings>();
	}
};
static_assert(alignof(UIWExperiencesSettings) == 0x000008, "Wrong alignment on UIWExperiencesSettings");
static_assert(sizeof(UIWExperiencesSettings) == 0x000030, "Wrong size on UIWExperiencesSettings");
static_assert(offsetof(UIWExperiencesSettings, DefaultExperience) == 0x000028, "Member 'UIWExperiencesSettings::DefaultExperience' has a wrong offset!");

// Class IWExperiences.IWPawnComponent
// 0x0008 (0x00A8 - 0x00A0)
class UIWPawnComponent : public UPawnComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IWPawnComponent">();
	}
	static class UIWPawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIWPawnComponent>();
	}
};
static_assert(alignof(UIWPawnComponent) == 0x000008, "Wrong alignment on UIWPawnComponent");
static_assert(sizeof(UIWPawnComponent) == 0x0000A8, "Wrong size on UIWPawnComponent");

// Class IWExperiences.PawnComponentReadyInterface
// 0x0000 (0x0028 - 0x0028)
class IPawnComponentReadyInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PawnComponentReadyInterface">();
	}
	static class IPawnComponentReadyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPawnComponentReadyInterface>();
	}
};
static_assert(alignof(IPawnComponentReadyInterface) == 0x000008, "Wrong alignment on IPawnComponentReadyInterface");
static_assert(sizeof(IPawnComponentReadyInterface) == 0x000028, "Wrong size on IPawnComponentReadyInterface");

// Class IWExperiences.PawnDefinition
// 0x0030 (0x0060 - 0x0030)
class UPawnDefinition : public UPrimaryDataAsset
{
public:
	TSubclassOf<class APawn>                      PawnClass;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGameplaySet*>                   AbilitySets;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   CharacterStatsRowName;                             // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputConfig*                           InputConfig;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CharacterTag;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PawnDefinition">();
	}
	static class UPawnDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPawnDefinition>();
	}
};
static_assert(alignof(UPawnDefinition) == 0x000008, "Wrong alignment on UPawnDefinition");
static_assert(sizeof(UPawnDefinition) == 0x000060, "Wrong size on UPawnDefinition");
static_assert(offsetof(UPawnDefinition, PawnClass) == 0x000030, "Member 'UPawnDefinition::PawnClass' has a wrong offset!");
static_assert(offsetof(UPawnDefinition, AbilitySets) == 0x000038, "Member 'UPawnDefinition::AbilitySets' has a wrong offset!");
static_assert(offsetof(UPawnDefinition, CharacterStatsRowName) == 0x000048, "Member 'UPawnDefinition::CharacterStatsRowName' has a wrong offset!");
static_assert(offsetof(UPawnDefinition, InputConfig) == 0x000050, "Member 'UPawnDefinition::InputConfig' has a wrong offset!");
static_assert(offsetof(UPawnDefinition, CharacterTag) == 0x000058, "Member 'UPawnDefinition::CharacterTag' has a wrong offset!");

// Class IWExperiences.PawnExtensionComponent
// 0x0000 (0x00A8 - 0x00A8)
class UPawnExtensionComponent final : public UIWPawnComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PawnExtensionComponent">();
	}
	static class UPawnExtensionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPawnExtensionComponent>();
	}
};
static_assert(alignof(UPawnExtensionComponent) == 0x000008, "Wrong alignment on UPawnExtensionComponent");
static_assert(sizeof(UPawnExtensionComponent) == 0x0000A8, "Wrong size on UPawnExtensionComponent");

// Class IWExperiences.PlayerControllerExtensionComponent
// 0x0000 (0x00A0 - 0x00A0)
class UPlayerControllerExtensionComponent : public UControllerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerControllerExtensionComponent">();
	}
	static class UPlayerControllerExtensionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerControllerExtensionComponent>();
	}
};
static_assert(alignof(UPlayerControllerExtensionComponent) == 0x000008, "Wrong alignment on UPlayerControllerExtensionComponent");
static_assert(sizeof(UPlayerControllerExtensionComponent) == 0x0000A0, "Wrong size on UPlayerControllerExtensionComponent");

// Class IWExperiences.PlayerStateExtensionComponent
// 0x0000 (0x00A0 - 0x00A0)
class UPlayerStateExtensionComponent : public UPlayerStateComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerStateExtensionComponent">();
	}
	static class UPlayerStateExtensionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerStateExtensionComponent>();
	}
};
static_assert(alignof(UPlayerStateExtensionComponent) == 0x000008, "Wrong alignment on UPlayerStateExtensionComponent");
static_assert(sizeof(UPlayerStateExtensionComponent) == 0x0000A0, "Wrong size on UPlayerStateExtensionComponent");

// Class IWExperiences.UserFacingExperienceDefinition
// 0x00D8 (0x0108 - 0x0030)
class UUserFacingExperienceDefinition final : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetId                        MapID;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ExperienceID;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraArgs;                                         // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TileTitle;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TileSubTitle;                                      // 0x00B0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TileDescription;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             TileIcon;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   LoadingScreenWidget;                               // 0x00D8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefaultExperience;                              // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInFrontEnd;                                   // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordReplay;                                     // 0x0102(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103[0x1];                                      // 0x0103(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlayerCount;                                    // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UCommonSession_HostSessionRequest* CreateHostingRequest() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserFacingExperienceDefinition">();
	}
	static class UUserFacingExperienceDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserFacingExperienceDefinition>();
	}
};
static_assert(alignof(UUserFacingExperienceDefinition) == 0x000008, "Wrong alignment on UUserFacingExperienceDefinition");
static_assert(sizeof(UUserFacingExperienceDefinition) == 0x000108, "Wrong size on UUserFacingExperienceDefinition");
static_assert(offsetof(UUserFacingExperienceDefinition, MapID) == 0x000030, "Member 'UUserFacingExperienceDefinition::MapID' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, ExperienceID) == 0x000040, "Member 'UUserFacingExperienceDefinition::ExperienceID' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, ExtraArgs) == 0x000050, "Member 'UUserFacingExperienceDefinition::ExtraArgs' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, TileTitle) == 0x0000A0, "Member 'UUserFacingExperienceDefinition::TileTitle' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, TileSubTitle) == 0x0000B0, "Member 'UUserFacingExperienceDefinition::TileSubTitle' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, TileDescription) == 0x0000C0, "Member 'UUserFacingExperienceDefinition::TileDescription' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, TileIcon) == 0x0000D0, "Member 'UUserFacingExperienceDefinition::TileIcon' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, LoadingScreenWidget) == 0x0000D8, "Member 'UUserFacingExperienceDefinition::LoadingScreenWidget' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, bIsDefaultExperience) == 0x000100, "Member 'UUserFacingExperienceDefinition::bIsDefaultExperience' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, bShowInFrontEnd) == 0x000101, "Member 'UUserFacingExperienceDefinition::bShowInFrontEnd' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, bRecordReplay) == 0x000102, "Member 'UUserFacingExperienceDefinition::bRecordReplay' has a wrong offset!");
static_assert(offsetof(UUserFacingExperienceDefinition, MaxPlayerCount) == 0x000104, "Member 'UUserFacingExperienceDefinition::MaxPlayerCount' has a wrong offset!");

// Class IWExperiences.ExperienceManagerComponent
// 0x0060 (0x0100 - 0x00A0)
class UExperienceManagerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UExperienceDefinition*                  CurrentExperience;                                 // 0x00A8(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x50];                                      // 0x00B0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_CurrentExperience();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExperienceManagerComponent">();
	}
	static class UExperienceManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExperienceManagerComponent>();
	}
};
static_assert(alignof(UExperienceManagerComponent) == 0x000008, "Wrong alignment on UExperienceManagerComponent");
static_assert(sizeof(UExperienceManagerComponent) == 0x000100, "Wrong size on UExperienceManagerComponent");
static_assert(offsetof(UExperienceManagerComponent, CurrentExperience) == 0x0000A8, "Member 'UExperienceManagerComponent::CurrentExperience' has a wrong offset!");

}

