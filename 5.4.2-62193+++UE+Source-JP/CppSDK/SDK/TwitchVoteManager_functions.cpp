#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TwitchVoteManager

#include "Basic.hpp"

#include "TwitchVoteManager_classes.hpp"
#include "TwitchVoteManager_parameters.hpp"


namespace SDK
{

// Function TwitchVoteManager.TwitchVoteManager_C.AddPlayerController
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerControllerJP_MatchBP_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ATwitchVoteManager_C::AddPlayerController(class APlayerControllerJP_MatchBP_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "AddPlayerController");

	Params::TwitchVoteManager_C_AddPlayerController Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.CreateWidget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             VoteName                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void ATwitchVoteManager_C::CreateWidget(const class FText& VoteName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "CreateWidget");

	Params::TwitchVoteManager_C_CreateWidget Parms{};

	Parms.VoteName = std::move(VoteName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.EndVote
// (BlueprintCallable, BlueprintEvent)

void ATwitchVoteManager_C::EndVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "EndVote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TwitchVoteManager.TwitchVoteManager_C.ExecuteUbergraph_TwitchVoteManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATwitchVoteManager_C::ExecuteUbergraph_TwitchVoteManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "ExecuteUbergraph_TwitchVoteManager");

	Params::TwitchVoteManager_C_ExecuteUbergraph_TwitchVoteManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.FormatWinMessage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTeam                            WinningTeam                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class FText                             Message                                                (Parm, OutParm)

void ATwitchVoteManager_C::FormatWinMessage(const struct FTeam& WinningTeam, class FText* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "FormatWinMessage");

	Params::TwitchVoteManager_C_FormatWinMessage Parms{};

	Parms.WinningTeam = std::move(WinningTeam);

	UObject::ProcessEvent(Func, &Parms);

	if (Message != nullptr)
		*Message = std::move(Parms.Message);
}


// Function TwitchVoteManager.TwitchVoteManager_C.GetWinningTeam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTeam                            Team                                                   (Parm, OutParm, NoDestructor)

void ATwitchVoteManager_C::GetWinningTeam(struct FTeam* Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "GetWinningTeam");

	Params::TwitchVoteManager_C_GetWinningTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team != nullptr)
		*Team = std::move(Parms.Team);
}


// Function TwitchVoteManager.TwitchVoteManager_C.IsDraw
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Draw                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATwitchVoteManager_C::IsDraw(bool* Draw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "IsDraw");

	Params::TwitchVoteManager_C_IsDraw Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Draw != nullptr)
		*Draw = Parms.Draw;
}


// Function TwitchVoteManager.TwitchVoteManager_C.Multi_UpdateWidget
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamType                               Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Votes                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATwitchVoteManager_C::Multi_UpdateWidget(ETeamType Team, int32 Votes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "Multi_UpdateWidget");

	Params::TwitchVoteManager_C_Multi_UpdateWidget Parms{};

	Parms.Team = Team;
	Parms.Votes = Votes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.OnEnded_9432BB71462ECDDA1C10C7BF77BE2C69
// (BlueprintCallable, BlueprintEvent)

void ATwitchVoteManager_C::OnEnded_9432BB71462ECDDA1C10C7BF77BE2C69()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "OnEnded_9432BB71462ECDDA1C10C7BF77BE2C69");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TwitchVoteManager.TwitchVoteManager_C.OnFailure_D403CAE34F215B98F9EC60B91F41EDD9
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTwitchAuthResponse              AuthResponse                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FTwitchError                     TwitchError                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void ATwitchVoteManager_C::OnFailure_D403CAE34F215B98F9EC60B91F41EDD9(const struct FTwitchAuthResponse& AuthResponse, const struct FTwitchError& TwitchError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "OnFailure_D403CAE34F215B98F9EC60B91F41EDD9");

	Params::TwitchVoteManager_C_OnFailure_D403CAE34F215B98F9EC60B91F41EDD9 Parms{};

	Parms.AuthResponse = std::move(AuthResponse);
	Parms.TwitchError = std::move(TwitchError);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.OnSuccess_D403CAE34F215B98F9EC60B91F41EDD9
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTwitchAuthResponse              AuthResponse                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FTwitchError                     TwitchError                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void ATwitchVoteManager_C::OnSuccess_D403CAE34F215B98F9EC60B91F41EDD9(const struct FTwitchAuthResponse& AuthResponse, const struct FTwitchError& TwitchError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "OnSuccess_D403CAE34F215B98F9EC60B91F41EDD9");

	Params::TwitchVoteManager_C_OnSuccess_D403CAE34F215B98F9EC60B91F41EDD9 Parms{};

	Parms.AuthResponse = std::move(AuthResponse);
	Parms.TwitchError = std::move(TwitchError);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.OnTwitchConnected__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerControllerJP_MatchBP_C*    Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ATwitchVoteManager_C::OnTwitchConnected__DelegateSignature(class APlayerControllerJP_MatchBP_C* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "OnTwitchConnected__DelegateSignature");

	Params::TwitchVoteManager_C_OnTwitchConnected__DelegateSignature Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.PrintThePlayerWhoHadAVoteStarted
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   InInt                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATwitchVoteManager_C::PrintThePlayerWhoHadAVoteStarted(const class UObject* Object, int32 InInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "PrintThePlayerWhoHadAVoteStarted");

	Params::TwitchVoteManager_C_PrintThePlayerWhoHadAVoteStarted Parms{};

	Parms.Object = Object;
	Parms.InInt = InInt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.ProcessTwitchVote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Username                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ATwitchVoteManager_C::ProcessTwitchVote(const class FString& Message, const class FString& Username)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "ProcessTwitchVote");

	Params::TwitchVoteManager_C_ProcessTwitchVote Parms{};

	Parms.Message = std::move(Message);
	Parms.Username = std::move(Username);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ATwitchVoteManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TwitchVoteManager.TwitchVoteManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATwitchVoteManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "ReceiveEndPlay");

	Params::TwitchVoteManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.RemoveVoteWidget
// (BlueprintCallable, BlueprintEvent)

void ATwitchVoteManager_C::RemoveVoteWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "RemoveVoteWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TwitchVoteManager.TwitchVoteManager_C.RunVote
// (BlueprintCallable, BlueprintEvent)

void ATwitchVoteManager_C::RunVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "RunVote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TwitchVoteManager.TwitchVoteManager_C.Server_SetRewardIndex
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ATwitchVoteManager_C::Server_SetRewardIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "Server_SetRewardIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TwitchVoteManager.TwitchVoteManager_C.SetRewardAndMessage
// (Public, BlueprintCallable, BlueprintEvent)

void ATwitchVoteManager_C::SetRewardAndMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "SetRewardAndMessage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TwitchVoteManager.TwitchVoteManager_C.StartChatIntegration
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ATwitchVoteManager_C::StartChatIntegration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "StartChatIntegration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TwitchVoteManager.TwitchVoteManager_C.StartVoteEvent
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TimeOfDay                             TimeOfDay                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ATwitchVoteManager_C::StartVoteEvent(E_TimeOfDay TimeOfDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "StartVoteEvent");

	Params::TwitchVoteManager_C_StartVoteEvent Parms{};

	Parms.TimeOfDay = TimeOfDay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TwitchVoteManager.TwitchVoteManager_C.VoteMessageReceived
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Username                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ATwitchVoteManager_C::VoteMessageReceived(const class FString& Message, const class FString& Username)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchVoteManager_C", "VoteMessageReceived");

	Params::TwitchVoteManager_C_VoteMessageReceived Parms{};

	Parms.Message = std::move(Message);
	Parms.Username = std::move(Username);

	UObject::ProcessEvent(Func, &Parms);
}

}

