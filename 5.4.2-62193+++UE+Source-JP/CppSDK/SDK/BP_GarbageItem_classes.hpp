#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GarbageItem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_MaterialTypes_structs.hpp"
#include "Bp_ThrowableProp_Small_classes.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GarbageItem.BP_GarbageItem_C
// 0x0130 (0x0670 - 0x0540)
class ABP_GarbageItem_C : public ABp_ThrowableProp_Small_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GarbageItem_C;                   // 0x0540(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SeeThrough;                                        // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       ContextWidget;                                     // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHighlightAC_C*                         HighlightAC;                                       // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponentIW*              AbilitySystemComponentIW;                          // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AnimTimeline_Location_F8DF25154E4803BB16BF1397F8602976; // 0x0570(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AnimTimeline__Direction_F8DF25154E4803BB16BF1397F8602976; // 0x0574(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_575[0x3];                                      // 0x0575(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AnimTimeline;                                      // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         CurrentTeamOwner;                                  // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnNeutralGround;                                   // 0x0581(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInGarbageCan;                                    // 0x0582(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BeingPickedUp;                                     // 0x0583(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroyAfterCollect;                               // 0x0584(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTrashbag;                                        // 0x0585(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_586[0x2];                                      // 0x0586(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PointWorth;                                        // 0x0588(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0590(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartScale;                                        // 0x05A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x05C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndScale;                                          // 0x05D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    MeshesToUse;                                       // 0x05F0(0x0010)(Edit, BlueprintVisible)
	int32                                         RandomSeed;                                        // 0x0600(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObjectiveBase*                         ObjectiveOwner;                                    // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                CurrentUser;                                       // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CollectTimer;                                      // 0x0618(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          StartWithPhysics;                                  // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ChangeScoreOnSleep;                                // 0x0621(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LaunchOnSpawn;                                     // 0x0622(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_623[0x5];                                      // 0x0623(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaunchVelocity;                                    // 0x0628(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Damage;                                            // 0x0640(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        LaunchedDamageMultiplier;                          // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Trashbag_Equipable_C*               CurrentTrashBag;                                   // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CollectRotation;                                   // 0x0658(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void AddToHighlight();
	void AnimTimeline__FinishedFunc();
	void AnimTimeline__UpdateFunc();
	void Apply_Perfectness_Team(bool Withdraw_Perfectness);
	void BndEvt__BP_GarbageItem_StaticMeshComponent_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	void CheckHandDistance(bool* InRange);
	void Collect(bool DestroyAfterCollect_0, double LerpSpeedScale);
	void ExecuteUbergraph_BP_GarbageItem(int32 EntryPoint);
	void FindTeamIndoorTrashcan(class ABP_IndoorTrashcan_C** IndoorTrashcan);
	void FindTeamTrashCan(TArray<class ABP_Trashcan_C*>* TrashCan);
	void GetValidASC(class AActor* Actor, class UAbilitySystemComponent** ASC, bool* Valid);
	void HandleDamageEvent(class AActor* Actor);
	void Multi_GenerateRandomMesh(int32 Seed);
	void MulticastLaunch(const struct FVector& Impulse);
	void On_Pickup(const struct FVector& EndLocation_0, class ABP_Trashbag_Equipable_C* Trashbag);
	void PlayLerp(double PlayRate);
	void ReactivatePhysicsAfterPlay();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void Server_SetSeed();
	void SetContextName();
	void SetLerpValues(const struct FVector& EndLocation_0);
	void SetSeethroughMeshParams();
	void ShootTrash(const struct FVector& Impulse);
	void ToggleMeshOverlay(bool Visible);
	void TogglePhysicsOnTrash(bool Active);
	void ServerPush(class AActor* TargetActor, const struct FVector& LaunchVelocity_0);
	void GetDurabilityCostWhenHit(double* Amount);
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void GrippedLocal(class ACharacter* GrippingCharacter);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void IsInFocus(class AActor* Focusing_Actor);
	void Knockback(const struct FVector& Velocity, bool XYOverride, bool ZOverride, double AirControlMultiplier, bool* Void);
	void Released_Local(class ACharacter* ReleasingCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GarbageItem_C">();
	}
	static class ABP_GarbageItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GarbageItem_C>();
	}
};
static_assert(alignof(ABP_GarbageItem_C) == 0x000010, "Wrong alignment on ABP_GarbageItem_C");
static_assert(sizeof(ABP_GarbageItem_C) == 0x000670, "Wrong size on ABP_GarbageItem_C");
static_assert(offsetof(ABP_GarbageItem_C, UberGraphFrame_BP_GarbageItem_C) == 0x000540, "Member 'ABP_GarbageItem_C::UberGraphFrame_BP_GarbageItem_C' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, SeeThrough) == 0x000548, "Member 'ABP_GarbageItem_C::SeeThrough' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, ContextWidget) == 0x000550, "Member 'ABP_GarbageItem_C::ContextWidget' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, HighlightAC) == 0x000558, "Member 'ABP_GarbageItem_C::HighlightAC' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, Box) == 0x000560, "Member 'ABP_GarbageItem_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, AbilitySystemComponentIW) == 0x000568, "Member 'ABP_GarbageItem_C::AbilitySystemComponentIW' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, AnimTimeline_Location_F8DF25154E4803BB16BF1397F8602976) == 0x000570, "Member 'ABP_GarbageItem_C::AnimTimeline_Location_F8DF25154E4803BB16BF1397F8602976' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, AnimTimeline__Direction_F8DF25154E4803BB16BF1397F8602976) == 0x000574, "Member 'ABP_GarbageItem_C::AnimTimeline__Direction_F8DF25154E4803BB16BF1397F8602976' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, AnimTimeline) == 0x000578, "Member 'ABP_GarbageItem_C::AnimTimeline' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, CurrentTeamOwner) == 0x000580, "Member 'ABP_GarbageItem_C::CurrentTeamOwner' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, OnNeutralGround) == 0x000581, "Member 'ABP_GarbageItem_C::OnNeutralGround' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, IsInGarbageCan) == 0x000582, "Member 'ABP_GarbageItem_C::IsInGarbageCan' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, BeingPickedUp) == 0x000583, "Member 'ABP_GarbageItem_C::BeingPickedUp' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, DestroyAfterCollect) == 0x000584, "Member 'ABP_GarbageItem_C::DestroyAfterCollect' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, IsTrashbag) == 0x000585, "Member 'ABP_GarbageItem_C::IsTrashbag' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, PointWorth) == 0x000588, "Member 'ABP_GarbageItem_C::PointWorth' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, StartLocation) == 0x000590, "Member 'ABP_GarbageItem_C::StartLocation' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, StartScale) == 0x0005A8, "Member 'ABP_GarbageItem_C::StartScale' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, EndLocation) == 0x0005C0, "Member 'ABP_GarbageItem_C::EndLocation' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, EndScale) == 0x0005D8, "Member 'ABP_GarbageItem_C::EndScale' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, MeshesToUse) == 0x0005F0, "Member 'ABP_GarbageItem_C::MeshesToUse' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, RandomSeed) == 0x000600, "Member 'ABP_GarbageItem_C::RandomSeed' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, ObjectiveOwner) == 0x000608, "Member 'ABP_GarbageItem_C::ObjectiveOwner' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, CurrentUser) == 0x000610, "Member 'ABP_GarbageItem_C::CurrentUser' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, CollectTimer) == 0x000618, "Member 'ABP_GarbageItem_C::CollectTimer' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, StartWithPhysics) == 0x000620, "Member 'ABP_GarbageItem_C::StartWithPhysics' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, ChangeScoreOnSleep) == 0x000621, "Member 'ABP_GarbageItem_C::ChangeScoreOnSleep' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, LaunchOnSpawn) == 0x000622, "Member 'ABP_GarbageItem_C::LaunchOnSpawn' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, LaunchVelocity) == 0x000628, "Member 'ABP_GarbageItem_C::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, Damage) == 0x000640, "Member 'ABP_GarbageItem_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, LaunchedDamageMultiplier) == 0x000648, "Member 'ABP_GarbageItem_C::LaunchedDamageMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, CurrentTrashBag) == 0x000650, "Member 'ABP_GarbageItem_C::CurrentTrashBag' has a wrong offset!");
static_assert(offsetof(ABP_GarbageItem_C, CollectRotation) == 0x000658, "Member 'ABP_GarbageItem_C::CollectRotation' has a wrong offset!");

}

