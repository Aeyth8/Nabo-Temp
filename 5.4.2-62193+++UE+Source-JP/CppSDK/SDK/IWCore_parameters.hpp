#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWCore

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function IWCore.ArrayLibraryCore.ArraySortFloat
// 0x0020 (0x0020 - 0x0000)
struct ArrayLibraryCore_ArraySortFloat final
{
public:
	TArray<float>                                 TargetArray;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArrayLibraryCore_ArraySortFloat) == 0x000008, "Wrong alignment on ArrayLibraryCore_ArraySortFloat");
static_assert(sizeof(ArrayLibraryCore_ArraySortFloat) == 0x000020, "Wrong size on ArrayLibraryCore_ArraySortFloat");
static_assert(offsetof(ArrayLibraryCore_ArraySortFloat, TargetArray) == 0x000000, "Member 'ArrayLibraryCore_ArraySortFloat::TargetArray' has a wrong offset!");
static_assert(offsetof(ArrayLibraryCore_ArraySortFloat, ReturnValue) == 0x000010, "Member 'ArrayLibraryCore_ArraySortFloat::ReturnValue' has a wrong offset!");

// Function IWCore.ArrayLibraryCore.ArraySortInteger
// 0x0020 (0x0020 - 0x0000)
struct ArrayLibraryCore_ArraySortInteger final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArrayLibraryCore_ArraySortInteger) == 0x000008, "Wrong alignment on ArrayLibraryCore_ArraySortInteger");
static_assert(sizeof(ArrayLibraryCore_ArraySortInteger) == 0x000020, "Wrong size on ArrayLibraryCore_ArraySortInteger");
static_assert(offsetof(ArrayLibraryCore_ArraySortInteger, TargetArray) == 0x000000, "Member 'ArrayLibraryCore_ArraySortInteger::TargetArray' has a wrong offset!");
static_assert(offsetof(ArrayLibraryCore_ArraySortInteger, ReturnValue) == 0x000010, "Member 'ArrayLibraryCore_ArraySortInteger::ReturnValue' has a wrong offset!");

// Function IWCore.ArrayLibraryCore.ArraySortString
// 0x0020 (0x0020 - 0x0000)
struct ArrayLibraryCore_ArraySortString final
{
public:
	TArray<class FString>                         TargetArray;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArrayLibraryCore_ArraySortString) == 0x000008, "Wrong alignment on ArrayLibraryCore_ArraySortString");
static_assert(sizeof(ArrayLibraryCore_ArraySortString) == 0x000020, "Wrong size on ArrayLibraryCore_ArraySortString");
static_assert(offsetof(ArrayLibraryCore_ArraySortString, TargetArray) == 0x000000, "Member 'ArrayLibraryCore_ArraySortString::TargetArray' has a wrong offset!");
static_assert(offsetof(ArrayLibraryCore_ArraySortString, ReturnValue) == 0x000010, "Member 'ArrayLibraryCore_ArraySortString::ReturnValue' has a wrong offset!");

// Function IWCore.FunctionLibraryCore.AddTimespanToDateTime
// 0x0018 (0x0018 - 0x0000)
struct FunctionLibraryCore_AddTimespanToDateTime final
{
public:
	struct FDateTime                              DateTimeIn;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TimespanIn;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionLibraryCore_AddTimespanToDateTime) == 0x000008, "Wrong alignment on FunctionLibraryCore_AddTimespanToDateTime");
static_assert(sizeof(FunctionLibraryCore_AddTimespanToDateTime) == 0x000018, "Wrong size on FunctionLibraryCore_AddTimespanToDateTime");
static_assert(offsetof(FunctionLibraryCore_AddTimespanToDateTime, DateTimeIn) == 0x000000, "Member 'FunctionLibraryCore_AddTimespanToDateTime::DateTimeIn' has a wrong offset!");
static_assert(offsetof(FunctionLibraryCore_AddTimespanToDateTime, TimespanIn) == 0x000008, "Member 'FunctionLibraryCore_AddTimespanToDateTime::TimespanIn' has a wrong offset!");
static_assert(offsetof(FunctionLibraryCore_AddTimespanToDateTime, ReturnValue) == 0x000010, "Member 'FunctionLibraryCore_AddTimespanToDateTime::ReturnValue' has a wrong offset!");

// Function IWCore.FunctionLibraryCore.GetBuildDateTime
// 0x0010 (0x0010 - 0x0000)
struct FunctionLibraryCore_GetBuildDateTime final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionLibraryCore_GetBuildDateTime) == 0x000008, "Wrong alignment on FunctionLibraryCore_GetBuildDateTime");
static_assert(sizeof(FunctionLibraryCore_GetBuildDateTime) == 0x000010, "Wrong size on FunctionLibraryCore_GetBuildDateTime");
static_assert(offsetof(FunctionLibraryCore_GetBuildDateTime, ReturnValue) == 0x000000, "Member 'FunctionLibraryCore_GetBuildDateTime::ReturnValue' has a wrong offset!");

// Function IWCore.FunctionLibraryCore.GetProjectVersion
// 0x0010 (0x0010 - 0x0000)
struct FunctionLibraryCore_GetProjectVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FunctionLibraryCore_GetProjectVersion) == 0x000008, "Wrong alignment on FunctionLibraryCore_GetProjectVersion");
static_assert(sizeof(FunctionLibraryCore_GetProjectVersion) == 0x000010, "Wrong size on FunctionLibraryCore_GetProjectVersion");
static_assert(offsetof(FunctionLibraryCore_GetProjectVersion, ReturnValue) == 0x000000, "Member 'FunctionLibraryCore_GetProjectVersion::ReturnValue' has a wrong offset!");

// Function IWCore.TagLookupPrimaryDataAsset.GetTaggedAsset
// 0x0030 (0x0030 - 0x0000)
struct TagLookupPrimaryDataAsset_GetTaggedAsset final
{
public:
	struct FGameplayTag                           AssetIdentifier_0;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTagLookupPrimaryDataAsset> ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagLookupPrimaryDataAsset_GetTaggedAsset) == 0x000008, "Wrong alignment on TagLookupPrimaryDataAsset_GetTaggedAsset");
static_assert(sizeof(TagLookupPrimaryDataAsset_GetTaggedAsset) == 0x000030, "Wrong size on TagLookupPrimaryDataAsset_GetTaggedAsset");
static_assert(offsetof(TagLookupPrimaryDataAsset_GetTaggedAsset, AssetIdentifier_0) == 0x000000, "Member 'TagLookupPrimaryDataAsset_GetTaggedAsset::AssetIdentifier_0' has a wrong offset!");
static_assert(offsetof(TagLookupPrimaryDataAsset_GetTaggedAsset, ReturnValue) == 0x000008, "Member 'TagLookupPrimaryDataAsset_GetTaggedAsset::ReturnValue' has a wrong offset!");

// Function IWCore.TagLookupPrimaryDataAsset.GetAssetIdentifier
// 0x0008 (0x0008 - 0x0000)
struct TagLookupPrimaryDataAsset_GetAssetIdentifier final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TagLookupPrimaryDataAsset_GetAssetIdentifier) == 0x000004, "Wrong alignment on TagLookupPrimaryDataAsset_GetAssetIdentifier");
static_assert(sizeof(TagLookupPrimaryDataAsset_GetAssetIdentifier) == 0x000008, "Wrong size on TagLookupPrimaryDataAsset_GetAssetIdentifier");
static_assert(offsetof(TagLookupPrimaryDataAsset_GetAssetIdentifier, ReturnValue) == 0x000000, "Member 'TagLookupPrimaryDataAsset_GetAssetIdentifier::ReturnValue' has a wrong offset!");

}

