#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_XPBar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WI_XPBar.WI_XPBar_C.ExecuteUbergraph_WI_XPBar
// 0x0130 (0x0130 - 0x0000)
struct WI_XPBar_C_ExecuteUbergraph_WI_XPBar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_LowerBound;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_UpperBound;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_PreviouslyGrantedXP;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StartingValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_TargetValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0018(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_ReturnValue;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValueAsPercentage_Percentage;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueAsPercentage_Percentage_1;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0070(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPercentageAsValue_Value;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0108(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast;         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_Current_ImplicitCast;   // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_DisplayJumpOffset_ImplicitCast; // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar) == 0x000008, "Wrong alignment on WI_XPBar_C_ExecuteUbergraph_WI_XPBar");
static_assert(sizeof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar) == 0x000130, "Wrong size on WI_XPBar_C_ExecuteUbergraph_WI_XPBar");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, EntryPoint) == 0x000000, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, K2Node_CustomEvent_LowerBound) == 0x000004, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::K2Node_CustomEvent_LowerBound' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, K2Node_CustomEvent_UpperBound) == 0x000008, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::K2Node_CustomEvent_UpperBound' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, K2Node_CustomEvent_PreviouslyGrantedXP) == 0x00000C, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::K2Node_CustomEvent_PreviouslyGrantedXP' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, K2Node_CustomEvent_StartingValue) == 0x000010, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::K2Node_CustomEvent_StartingValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, K2Node_CustomEvent_TargetValue) == 0x000014, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::K2Node_CustomEvent_TargetValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, K2Node_Event_MyGeometry) == 0x000018, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, K2Node_Event_InDeltaTime) == 0x000050, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_FloatSpringInterp_ReturnValue) == 0x000054, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_FloatSpringInterp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, K2Node_Event_IsDesignTime) == 0x000058, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_GetValueAsPercentage_Percentage) == 0x000060, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_GetValueAsPercentage_Percentage' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_GetValueAsPercentage_Percentage_1) == 0x000068, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_GetValueAsPercentage_Percentage_1' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, K2Node_CreateDelegate_OutputDelegate) == 0x000070, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000080, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000088, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000090, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000098, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_GetPercentageAsValue_Value) == 0x0000A0, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_GetPercentageAsValue_Value' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000A8, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0000B0, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_FInterpTo_ReturnValue) == 0x0000B8, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_Round_ReturnValue) == 0x0000C0, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000C4, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_PlayAnimationForward_ReturnValue) == 0x0000C8, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_MakeVector2D_ReturnValue) == 0x0000D8, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000E8, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000F0, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000F8, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000108, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x000110, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_FInterpTo_DeltaTime_ImplicitCast) == 0x000118, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_FInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000120, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, CallFunc_FloatSpringInterp_Current_ImplicitCast) == 0x000124, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::CallFunc_FloatSpringInterp_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_ExecuteUbergraph_WI_XPBar, K2Node_VariableSet_DisplayJumpOffset_ImplicitCast) == 0x000128, "Member 'WI_XPBar_C_ExecuteUbergraph_WI_XPBar::K2Node_VariableSet_DisplayJumpOffset_ImplicitCast' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.GetPercentageAsValue
// 0x0038 (0x0038 - 0x0000)
struct WI_XPBar_C_GetPercentageAsValue final
{
public:
	double                                        Percentage;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_GetPercentageAsValue) == 0x000008, "Wrong alignment on WI_XPBar_C_GetPercentageAsValue");
static_assert(sizeof(WI_XPBar_C_GetPercentageAsValue) == 0x000038, "Wrong size on WI_XPBar_C_GetPercentageAsValue");
static_assert(offsetof(WI_XPBar_C_GetPercentageAsValue, Percentage) == 0x000000, "Member 'WI_XPBar_C_GetPercentageAsValue::Percentage' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetPercentageAsValue, Value) == 0x000008, "Member 'WI_XPBar_C_GetPercentageAsValue::Value' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetPercentageAsValue, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000010, "Member 'WI_XPBar_C_GetPercentageAsValue::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetPercentageAsValue, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000018, "Member 'WI_XPBar_C_GetPercentageAsValue::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetPercentageAsValue, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'WI_XPBar_C_GetPercentageAsValue::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetPercentageAsValue, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'WI_XPBar_C_GetPercentageAsValue::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetPercentageAsValue, CallFunc_Round_ReturnValue) == 0x000030, "Member 'WI_XPBar_C_GetPercentageAsValue::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetPercentageAsValue, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'WI_XPBar_C_GetPercentageAsValue::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.GetValueAsPercentage
// 0x0040 (0x0040 - 0x0000)
struct WI_XPBar_C_GetValueAsPercentage final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Percentage;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_GetValueAsPercentage) == 0x000008, "Wrong alignment on WI_XPBar_C_GetValueAsPercentage");
static_assert(sizeof(WI_XPBar_C_GetValueAsPercentage) == 0x000040, "Wrong size on WI_XPBar_C_GetValueAsPercentage");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, Value) == 0x000000, "Member 'WI_XPBar_C_GetValueAsPercentage::Value' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, Percentage) == 0x000008, "Member 'WI_XPBar_C_GetValueAsPercentage::Percentage' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'WI_XPBar_C_GetValueAsPercentage::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, CallFunc_Greater_IntInt_ReturnValue) == 0x000011, "Member 'WI_XPBar_C_GetValueAsPercentage::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000012, "Member 'WI_XPBar_C_GetValueAsPercentage::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'WI_XPBar_C_GetValueAsPercentage::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, CallFunc_BooleanAND_ReturnValue_1) == 0x000014, "Member 'WI_XPBar_C_GetValueAsPercentage::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'WI_XPBar_C_GetValueAsPercentage::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000020, "Member 'WI_XPBar_C_GetValueAsPercentage::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000028, "Member 'WI_XPBar_C_GetValueAsPercentage::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000030, "Member 'WI_XPBar_C_GetValueAsPercentage::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_GetValueAsPercentage, CallFunc_SafeDivide_ReturnValue) == 0x000038, "Member 'WI_XPBar_C_GetValueAsPercentage::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WI_XPBar_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_PreConstruct) == 0x000001, "Wrong alignment on WI_XPBar_C_PreConstruct");
static_assert(sizeof(WI_XPBar_C_PreConstruct) == 0x000001, "Wrong size on WI_XPBar_C_PreConstruct");
static_assert(offsetof(WI_XPBar_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WI_XPBar_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.SetAnimatingValue
// 0x0010 (0x0010 - 0x0000)
struct WI_XPBar_C_SetAnimatingValue final
{
public:
	int32                                         AnimatingValue_0;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValueAsPercentage_Percentage;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_SetAnimatingValue) == 0x000008, "Wrong alignment on WI_XPBar_C_SetAnimatingValue");
static_assert(sizeof(WI_XPBar_C_SetAnimatingValue) == 0x000010, "Wrong size on WI_XPBar_C_SetAnimatingValue");
static_assert(offsetof(WI_XPBar_C_SetAnimatingValue, AnimatingValue_0) == 0x000000, "Member 'WI_XPBar_C_SetAnimatingValue::AnimatingValue_0' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetAnimatingValue, CallFunc_GetValueAsPercentage_Percentage) == 0x000008, "Member 'WI_XPBar_C_SetAnimatingValue::CallFunc_GetValueAsPercentage_Percentage' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.SetBarPercentage
// 0x0030 (0x0030 - 0x0000)
struct WI_XPBar_C_SetBarPercentage final
{
public:
	double                                        InputPin;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_SetBarPercentage) == 0x000008, "Wrong alignment on WI_XPBar_C_SetBarPercentage");
static_assert(sizeof(WI_XPBar_C_SetBarPercentage) == 0x000030, "Wrong size on WI_XPBar_C_SetBarPercentage");
static_assert(offsetof(WI_XPBar_C_SetBarPercentage, InputPin) == 0x000000, "Member 'WI_XPBar_C_SetBarPercentage::InputPin' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetBarPercentage, Target) == 0x000008, "Member 'WI_XPBar_C_SetBarPercentage::Target' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetBarPercentage, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'WI_XPBar_C_SetBarPercentage::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetBarPercentage, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'WI_XPBar_C_SetBarPercentage::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetBarPercentage, CallFunc_MakeVector2D_ReturnValue) == 0x000020, "Member 'WI_XPBar_C_SetBarPercentage::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.SetPreviouslyGrantedXP
// 0x0004 (0x0004 - 0x0000)
struct WI_XPBar_C_SetPreviouslyGrantedXP final
{
public:
	int32                                         PreviouslyGrantedXP_0;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_SetPreviouslyGrantedXP) == 0x000004, "Wrong alignment on WI_XPBar_C_SetPreviouslyGrantedXP");
static_assert(sizeof(WI_XPBar_C_SetPreviouslyGrantedXP) == 0x000004, "Wrong size on WI_XPBar_C_SetPreviouslyGrantedXP");
static_assert(offsetof(WI_XPBar_C_SetPreviouslyGrantedXP, PreviouslyGrantedXP_0) == 0x000000, "Member 'WI_XPBar_C_SetPreviouslyGrantedXP::PreviouslyGrantedXP_0' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.SetStartingValue
// 0x0004 (0x0004 - 0x0000)
struct WI_XPBar_C_SetStartingValue final
{
public:
	int32                                         StartingValue_0;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_SetStartingValue) == 0x000004, "Wrong alignment on WI_XPBar_C_SetStartingValue");
static_assert(sizeof(WI_XPBar_C_SetStartingValue) == 0x000004, "Wrong size on WI_XPBar_C_SetStartingValue");
static_assert(offsetof(WI_XPBar_C_SetStartingValue, StartingValue_0) == 0x000000, "Member 'WI_XPBar_C_SetStartingValue::StartingValue_0' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.SetTargetValue
// 0x0010 (0x0010 - 0x0000)
struct WI_XPBar_C_SetTargetValue final
{
public:
	int32                                         TargetValue_0;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValueAsPercentage_Percentage;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_SetTargetValue) == 0x000008, "Wrong alignment on WI_XPBar_C_SetTargetValue");
static_assert(sizeof(WI_XPBar_C_SetTargetValue) == 0x000010, "Wrong size on WI_XPBar_C_SetTargetValue");
static_assert(offsetof(WI_XPBar_C_SetTargetValue, TargetValue_0) == 0x000000, "Member 'WI_XPBar_C_SetTargetValue::TargetValue_0' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetTargetValue, CallFunc_GetValueAsPercentage_Percentage) == 0x000008, "Member 'WI_XPBar_C_SetTargetValue::CallFunc_GetValueAsPercentage_Percentage' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.SetTextValue
// 0x0078 (0x0078 - 0x0000)
struct WI_XPBar_C_SetTextValue final
{
public:
	int32                                         XP;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0010(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0068(0x0010)()
};
static_assert(alignof(WI_XPBar_C_SetTextValue) == 0x000008, "Wrong alignment on WI_XPBar_C_SetTextValue");
static_assert(sizeof(WI_XPBar_C_SetTextValue) == 0x000078, "Wrong size on WI_XPBar_C_SetTextValue");
static_assert(offsetof(WI_XPBar_C_SetTextValue, XP) == 0x000000, "Member 'WI_XPBar_C_SetTextValue::XP' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetTextValue, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000008, "Member 'WI_XPBar_C_SetTextValue::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetTextValue, K2Node_MakeStruct_FormatArgumentData) == 0x000010, "Member 'WI_XPBar_C_SetTextValue::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetTextValue, K2Node_MakeArray_Array) == 0x000058, "Member 'WI_XPBar_C_SetTextValue::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetTextValue, CallFunc_Format_ReturnValue) == 0x000068, "Member 'WI_XPBar_C_SetTextValue::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.SetValues
// 0x0014 (0x0014 - 0x0000)
struct WI_XPBar_C_SetValues final
{
public:
	int32                                         LowerBound_0;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpperBound_0;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviouslyGrantedXP_0;                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartingValue_0;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetValue_0;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_SetValues) == 0x000004, "Wrong alignment on WI_XPBar_C_SetValues");
static_assert(sizeof(WI_XPBar_C_SetValues) == 0x000014, "Wrong size on WI_XPBar_C_SetValues");
static_assert(offsetof(WI_XPBar_C_SetValues, LowerBound_0) == 0x000000, "Member 'WI_XPBar_C_SetValues::LowerBound_0' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetValues, UpperBound_0) == 0x000004, "Member 'WI_XPBar_C_SetValues::UpperBound_0' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetValues, PreviouslyGrantedXP_0) == 0x000008, "Member 'WI_XPBar_C_SetValues::PreviouslyGrantedXP_0' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetValues, StartingValue_0) == 0x00000C, "Member 'WI_XPBar_C_SetValues::StartingValue_0' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_SetValues, TargetValue_0) == 0x000010, "Member 'WI_XPBar_C_SetValues::TargetValue_0' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.Tick
// 0x003C (0x003C - 0x0000)
struct WI_XPBar_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_Tick) == 0x000004, "Wrong alignment on WI_XPBar_C_Tick");
static_assert(sizeof(WI_XPBar_C_Tick) == 0x00003C, "Wrong size on WI_XPBar_C_Tick");
static_assert(offsetof(WI_XPBar_C_Tick, MyGeometry) == 0x000000, "Member 'WI_XPBar_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_Tick, InDeltaTime) == 0x000038, "Member 'WI_XPBar_C_Tick::InDeltaTime' has a wrong offset!");

// Function WI_XPBar.WI_XPBar_C.UpdateTextValue
// 0x0008 (0x0008 - 0x0000)
struct WI_XPBar_C_UpdateTextValue final
{
public:
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_XPBar_C_UpdateTextValue) == 0x000004, "Wrong alignment on WI_XPBar_C_UpdateTextValue");
static_assert(sizeof(WI_XPBar_C_UpdateTextValue) == 0x000008, "Wrong size on WI_XPBar_C_UpdateTextValue");
static_assert(offsetof(WI_XPBar_C_UpdateTextValue, CallFunc_Subtract_IntInt_ReturnValue) == 0x000000, "Member 'WI_XPBar_C_UpdateTextValue::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_XPBar_C_UpdateTextValue, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'WI_XPBar_C_UpdateTextValue::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

