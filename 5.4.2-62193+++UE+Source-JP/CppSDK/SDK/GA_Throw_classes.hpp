#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Throw

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GA_ThrowProjectile_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Throw.GA_Throw_C
// 0x0050 (0x0630 - 0x05E0)
class UGA_Throw_C : public UGA_ThrowProjectile_C
{
public:
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Throw_C;                         // 0x05D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTag                           ThrowAnimationCue;                                 // 0x05E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABp_Trajectory_C*                       TrajectoryActor;                                   // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CreateLocalProjectile;                             // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitDelay*                 Async_Task;                                        // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityAsync_WaitGameplayTagAdded*     Async_Action;                                      // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time_Held;                                         // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChargeStartedTime;                                 // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeAnimationPlayRate;                           // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GravityScale;                                      // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChargeDamageMultiplier;                            // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Added_A1CA24F94ED79BE97BDE748C2F99A013();
	struct FGameplayCueParameters CreateCosmeticProjectileCueParameters();
	void DisableTrajectory();
	void EnableTrajectory();
	void EndWaitDelayTaskIfExists();
	void EndWaitTagTaskIfExists();
	void ExecuteUbergraph_GA_Throw(int32 EntryPoint);
	void GetGravityScale(double* GravityScale_0);
	void GetProjectileData(double TimeHeld, struct FTransform* Spawn_Transform, class ABP_ResidentCharacter_C** Owner, struct FVector* LocalSpaceVelocity, class UClass** ProjectileClass, double* Damage, double* Speed, double* GravityScale_0);
	class UClass* GetProjectileToSpawn();
	double GetSpeed(double TimeHeld);
	void GetStartPositionTransform(struct FTransform* StartTransform);
	void GetVelocity(struct FVector* Velocity);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnFinish_2A63F9CA49CC36BC6B754CA3AD87B053();
	void OnRelease_EFDD387045E1DDF87B0A23B5B15587B5(float TimeHeld);
	void OnUnequipped();
	void Server_SpawnProjectile(const struct FTransform& Spawn_Transform, class APawn* Owner, const struct FVector& LocalVelocity, class UClass* Projectile_Class, double Damage, double Speed, double StructureDamageMultiplier, double GravityScale_0);
	void SpawnCosmeticProjectile();
	void SpawnDebugSphere(const struct FVector& HitLocation);

	void Calculate_Throw_Transform(struct FTransform* Spawn_Transform) const;
	double GetDamage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Throw_C">();
	}
	static class UGA_Throw_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Throw_C>();
	}
};
static_assert(alignof(UGA_Throw_C) == 0x000010, "Wrong alignment on UGA_Throw_C");
static_assert(sizeof(UGA_Throw_C) == 0x000630, "Wrong size on UGA_Throw_C");
static_assert(offsetof(UGA_Throw_C, UberGraphFrame_GA_Throw_C) == 0x0005D8, "Member 'UGA_Throw_C::UberGraphFrame_GA_Throw_C' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, ThrowAnimationCue) == 0x0005E0, "Member 'UGA_Throw_C::ThrowAnimationCue' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, TrajectoryActor) == 0x0005E8, "Member 'UGA_Throw_C::TrajectoryActor' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, CreateLocalProjectile) == 0x0005F0, "Member 'UGA_Throw_C::CreateLocalProjectile' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, Async_Task) == 0x0005F8, "Member 'UGA_Throw_C::Async_Task' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, Async_Action) == 0x000600, "Member 'UGA_Throw_C::Async_Action' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, Debug) == 0x000608, "Member 'UGA_Throw_C::Debug' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, Time_Held) == 0x00060C, "Member 'UGA_Throw_C::Time_Held' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, ChargeStartedTime) == 0x000610, "Member 'UGA_Throw_C::ChargeStartedTime' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, ChargeAnimationPlayRate) == 0x000618, "Member 'UGA_Throw_C::ChargeAnimationPlayRate' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, GravityScale) == 0x000620, "Member 'UGA_Throw_C::GravityScale' has a wrong offset!");
static_assert(offsetof(UGA_Throw_C, ChargeDamageMultiplier) == 0x000628, "Member 'UGA_Throw_C::ChargeDamageMultiplier' has a wrong offset!");

}

