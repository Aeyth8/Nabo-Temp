#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Throw

#include "Basic.hpp"

#include "GA_Throw_classes.hpp"
#include "GA_Throw_parameters.hpp"


namespace SDK
{

// Function GA_Throw.GA_Throw_C.Added_A1CA24F94ED79BE97BDE748C2F99A013
// (BlueprintCallable, BlueprintEvent)

void UGA_Throw_C::Added_A1CA24F94ED79BE97BDE748C2F99A013()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "Added_A1CA24F94ED79BE97BDE748C2F99A013");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Throw.GA_Throw_C.CreateCosmeticProjectileCueParameters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayCueParameters           ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference)

struct FGameplayCueParameters UGA_Throw_C::CreateCosmeticProjectileCueParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "CreateCosmeticProjectileCueParameters");

	Params::GA_Throw_C_CreateCosmeticProjectileCueParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_Throw.GA_Throw_C.DisableTrajectory
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_Throw_C::DisableTrajectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "DisableTrajectory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Throw.GA_Throw_C.EnableTrajectory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_Throw_C::EnableTrajectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "EnableTrajectory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Throw.GA_Throw_C.EndWaitDelayTaskIfExists
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_Throw_C::EndWaitDelayTaskIfExists()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "EndWaitDelayTaskIfExists");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Throw.GA_Throw_C.EndWaitTagTaskIfExists
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_Throw_C::EndWaitTagTaskIfExists()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "EndWaitTagTaskIfExists");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Throw.GA_Throw_C.ExecuteUbergraph_GA_Throw
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Throw_C::ExecuteUbergraph_GA_Throw(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "ExecuteUbergraph_GA_Throw");

	Params::GA_Throw_C_ExecuteUbergraph_GA_Throw Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Throw.GA_Throw_C.GetGravityScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  GravityScale_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Throw_C::GetGravityScale(double* GravityScale_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "GetGravityScale");

	Params::GA_Throw_C_GetGravityScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GravityScale_0 != nullptr)
		*GravityScale_0 = Parms.GravityScale_0;
}


// Function GA_Throw.GA_Throw_C.GetProjectileData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  TimeHeld                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Spawn_Transform                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_ResidentCharacter_C*          Owner                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LocalSpaceVelocity                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ProjectileClass                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GravityScale_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Throw_C::GetProjectileData(double TimeHeld, struct FTransform* Spawn_Transform, class ABP_ResidentCharacter_C** Owner, struct FVector* LocalSpaceVelocity, class UClass** ProjectileClass, double* Damage, double* Speed, double* GravityScale_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "GetProjectileData");

	Params::GA_Throw_C_GetProjectileData Parms{};

	Parms.TimeHeld = TimeHeld;

	UObject::ProcessEvent(Func, &Parms);

	if (Spawn_Transform != nullptr)
		*Spawn_Transform = std::move(Parms.Spawn_Transform);

	if (Owner != nullptr)
		*Owner = Parms.Owner;

	if (LocalSpaceVelocity != nullptr)
		*LocalSpaceVelocity = std::move(Parms.LocalSpaceVelocity);

	if (ProjectileClass != nullptr)
		*ProjectileClass = Parms.ProjectileClass;

	if (Damage != nullptr)
		*Damage = Parms.Damage;

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (GravityScale_0 != nullptr)
		*GravityScale_0 = Parms.GravityScale_0;
}


// Function GA_Throw.GA_Throw_C.GetProjectileToSpawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UClass* UGA_Throw_C::GetProjectileToSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "GetProjectileToSpawn");

	Params::GA_Throw_C_GetProjectileToSpawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_Throw.GA_Throw_C.GetSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  TimeHeld                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UGA_Throw_C::GetSpeed(double TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "GetSpeed");

	Params::GA_Throw_C_GetSpeed Parms{};

	Parms.TimeHeld = TimeHeld;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_Throw.GA_Throw_C.GetStartPositionTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       StartTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Throw_C::GetStartPositionTransform(struct FTransform* StartTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "GetStartPositionTransform");

	Params::GA_Throw_C_GetStartPositionTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StartTransform != nullptr)
		*StartTransform = std::move(Parms.StartTransform);
}


// Function GA_Throw.GA_Throw_C.GetVelocity
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Throw_C::GetVelocity(struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "GetVelocity");

	Params::GA_Throw_C_GetVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function GA_Throw.GA_Throw_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_Throw_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Throw.GA_Throw_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Throw_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "K2_OnEndAbility");

	Params::GA_Throw_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Throw.GA_Throw_C.OnFinish_2A63F9CA49CC36BC6B754CA3AD87B053
// (BlueprintCallable, BlueprintEvent)

void UGA_Throw_C::OnFinish_2A63F9CA49CC36BC6B754CA3AD87B053()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "OnFinish_2A63F9CA49CC36BC6B754CA3AD87B053");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Throw.GA_Throw_C.OnRelease_EFDD387045E1DDF87B0A23B5B15587B5
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TimeHeld                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Throw_C::OnRelease_EFDD387045E1DDF87B0A23B5B15587B5(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "OnRelease_EFDD387045E1DDF87B0A23B5B15587B5");

	Params::GA_Throw_C_OnRelease_EFDD387045E1DDF87B0A23B5B15587B5 Parms{};

	Parms.TimeHeld = TimeHeld;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Throw.GA_Throw_C.OnUnequipped
// (BlueprintCallable, BlueprintEvent)

void UGA_Throw_C::OnUnequipped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "OnUnequipped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Throw.GA_Throw_C.Server_SpawnProjectile
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Spawn_Transform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LocalVelocity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Projectile_Class                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  StructureDamageMultiplier                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GravityScale_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Throw_C::Server_SpawnProjectile(const struct FTransform& Spawn_Transform, class APawn* Owner, const struct FVector& LocalVelocity, class UClass* Projectile_Class, double Damage, double Speed, double StructureDamageMultiplier, double GravityScale_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "Server_SpawnProjectile");

	Params::GA_Throw_C_Server_SpawnProjectile Parms{};

	Parms.Spawn_Transform = std::move(Spawn_Transform);
	Parms.Owner = Owner;
	Parms.LocalVelocity = std::move(LocalVelocity);
	Parms.Projectile_Class = Projectile_Class;
	Parms.Damage = Damage;
	Parms.Speed = Speed;
	Parms.StructureDamageMultiplier = StructureDamageMultiplier;
	Parms.GravityScale_0 = GravityScale_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Throw.GA_Throw_C.SpawnCosmeticProjectile
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_Throw_C::SpawnCosmeticProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "SpawnCosmeticProjectile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Throw.GA_Throw_C.SpawnDebugSphere
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Throw_C::SpawnDebugSphere(const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "SpawnDebugSphere");

	Params::GA_Throw_C_SpawnDebugSphere Parms{};

	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Throw.GA_Throw_C.Calculate Throw Transform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTransform                       Spawn_Transform                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Throw_C::Calculate_Throw_Transform(struct FTransform* Spawn_Transform) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "Calculate Throw Transform");

	Params::GA_Throw_C_Calculate_Throw_Transform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Spawn_Transform != nullptr)
		*Spawn_Transform = std::move(Parms.Spawn_Transform);
}


// Function GA_Throw.GA_Throw_C.GetDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UGA_Throw_C::GetDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Throw_C", "GetDamage");

	Params::GA_Throw_C_GetDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

