#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_AmmoGranter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EAmmoState_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_AmmoGranter.AC_AmmoGranter_C
// 0x0130 (0x01D0 - 0x00A0)
class UAC_AmmoGranter_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTag                           MaxTagToLookFor;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TagToGrant;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UItemDefinition>         ItemToRecieveAmmo;                                 // 0x00B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         AmmoAmountToGrant;                                 // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             IconToUseForWidget;                                // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         StartingCharges;                                   // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCharges;                                    // 0x00F4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          CanGrantItemIfNoneInInventory;                     // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeDestroyed;                                    // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxCharges;                                        // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChargesToRestoreOnRecharge;                        // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanRecharge;                                       // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RechargeTime;                                      // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWI_ObjectContext_C*                    ContextWidget;                                     // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   AmmoName;                                          // 0x0118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          OnlyUsableForTeam;                                 // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ItemTag;                                           // 0x012C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     Attribute;                                         // 0x0138(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayAttribute                     AttributeMax;                                      // 0x0170(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UItemDefinition*                        CachedItemToReceiveAmmo;                           // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdateMesh;                                        // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             On_ChargesUpdated;                                 // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          LastUpdateWasIncrement;                            // 0x01C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddAmmoGameplayEffectToTarget(class AActor* Target);
	void AddAmmoTagStackToItem(int32 Amount, class UItemInstance* Item);
	void AddCharge();
	void AddItemToInventory(class AActor* TargetActor);
	void CheckAmmoGrantingState(class AActor* InterractingActor, bool* Success, EAmmoState* State);
	void CheckStackToAdd(class AActor* Actor, bool* Allowed, int32* StacksAllowedToAdd);
	void CheckTeam(class AActor* InterractingCharacter, bool* CanUse);
	void Context_Widget_Not_Valid();
	void CreateWidget(class AActor* Character, int32 AmmoCountToDisplay);
	void ExecuteUbergraph_AC_AmmoGranter(int32 EntryPoint);
	void GetGameplayEffectFromTag(const struct FGameplayTag& Tag, class UClass** GameplayEffect);
	void GetOrLoadCachedItemToReceiveAmmo();
	void HasItem(class AActor* TargetActor, bool* Return);
	bool IsInventoryNotFull(class AActor* InteractingActor);
	void LoadNewItemToReceive(TSoftObjectPtr<class UItemDefinition> NewItemDefinition);
	void MultiSpawnWidget(class AActor* Character, int32 Ammo);
	void On_ChargesUpdated__DelegateSignature(int32 NewChargeAmount, bool Increment);
	void OnLoaded_E4DD28A14D17DC8F04F4138C80839136(class UObject* Loaded);
	void OnRep_CurrentCharges();
	void ReceiveBeginPlay();
	void ReduceChargeCheckDestroy(bool* Destroy);
	void SetContextWidget(class UWI_ObjectContext_C* ContextWidget_0);
	void Try_Grant_Ammo(class AActor* InterractingActor, bool* Success, EAmmoState* State);
	void UpdateText();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_AmmoGranter_C">();
	}
	static class UAC_AmmoGranter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_AmmoGranter_C>();
	}
};
static_assert(alignof(UAC_AmmoGranter_C) == 0x000008, "Wrong alignment on UAC_AmmoGranter_C");
static_assert(sizeof(UAC_AmmoGranter_C) == 0x0001D0, "Wrong size on UAC_AmmoGranter_C");
static_assert(offsetof(UAC_AmmoGranter_C, UberGraphFrame) == 0x0000A0, "Member 'UAC_AmmoGranter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, MaxTagToLookFor) == 0x0000A8, "Member 'UAC_AmmoGranter_C::MaxTagToLookFor' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, TagToGrant) == 0x0000B0, "Member 'UAC_AmmoGranter_C::TagToGrant' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, ItemToRecieveAmmo) == 0x0000B8, "Member 'UAC_AmmoGranter_C::ItemToRecieveAmmo' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, AmmoAmountToGrant) == 0x0000E0, "Member 'UAC_AmmoGranter_C::AmmoAmountToGrant' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, IconToUseForWidget) == 0x0000E8, "Member 'UAC_AmmoGranter_C::IconToUseForWidget' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, StartingCharges) == 0x0000F0, "Member 'UAC_AmmoGranter_C::StartingCharges' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, CurrentCharges) == 0x0000F4, "Member 'UAC_AmmoGranter_C::CurrentCharges' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, CanGrantItemIfNoneInInventory) == 0x0000F8, "Member 'UAC_AmmoGranter_C::CanGrantItemIfNoneInInventory' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, CanBeDestroyed) == 0x0000F9, "Member 'UAC_AmmoGranter_C::CanBeDestroyed' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, MaxCharges) == 0x0000FC, "Member 'UAC_AmmoGranter_C::MaxCharges' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, ChargesToRestoreOnRecharge) == 0x000100, "Member 'UAC_AmmoGranter_C::ChargesToRestoreOnRecharge' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, CanRecharge) == 0x000104, "Member 'UAC_AmmoGranter_C::CanRecharge' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, RechargeTime) == 0x000108, "Member 'UAC_AmmoGranter_C::RechargeTime' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, ContextWidget) == 0x000110, "Member 'UAC_AmmoGranter_C::ContextWidget' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, AmmoName) == 0x000118, "Member 'UAC_AmmoGranter_C::AmmoName' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, OnlyUsableForTeam) == 0x000128, "Member 'UAC_AmmoGranter_C::OnlyUsableForTeam' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, ItemTag) == 0x00012C, "Member 'UAC_AmmoGranter_C::ItemTag' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, Attribute) == 0x000138, "Member 'UAC_AmmoGranter_C::Attribute' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, AttributeMax) == 0x000170, "Member 'UAC_AmmoGranter_C::AttributeMax' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, CachedItemToReceiveAmmo) == 0x0001A8, "Member 'UAC_AmmoGranter_C::CachedItemToReceiveAmmo' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, UpdateMesh) == 0x0001B0, "Member 'UAC_AmmoGranter_C::UpdateMesh' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, On_ChargesUpdated) == 0x0001B8, "Member 'UAC_AmmoGranter_C::On_ChargesUpdated' has a wrong offset!");
static_assert(offsetof(UAC_AmmoGranter_C, LastUpdateWasIncrement) == 0x0001C8, "Member 'UAC_AmmoGranter_C::LastUpdateWasIncrement' has a wrong offset!");

}

