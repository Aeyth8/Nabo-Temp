#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AimAssistScripts

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AimAssistScripts_structs.hpp"


namespace SDK::Params
{

// Function AimAssistScripts.AAInputIntegratorComponent.AssistAim
// 0x0028 (0x0028 - 0x0000)
struct AAInputIntegratorComponent_AssistAim final
{
public:
	double                                        YawInput;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PitchInput;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertYaw;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertPitch;                                       // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AAInputIntegratorComponent_AssistAim) == 0x000008, "Wrong alignment on AAInputIntegratorComponent_AssistAim");
static_assert(sizeof(AAInputIntegratorComponent_AssistAim) == 0x000028, "Wrong size on AAInputIntegratorComponent_AssistAim");
static_assert(offsetof(AAInputIntegratorComponent_AssistAim, YawInput) == 0x000000, "Member 'AAInputIntegratorComponent_AssistAim::YawInput' has a wrong offset!");
static_assert(offsetof(AAInputIntegratorComponent_AssistAim, PitchInput) == 0x000008, "Member 'AAInputIntegratorComponent_AssistAim::PitchInput' has a wrong offset!");
static_assert(offsetof(AAInputIntegratorComponent_AssistAim, InvertYaw) == 0x000010, "Member 'AAInputIntegratorComponent_AssistAim::InvertYaw' has a wrong offset!");
static_assert(offsetof(AAInputIntegratorComponent_AssistAim, InvertPitch) == 0x000011, "Member 'AAInputIntegratorComponent_AssistAim::InvertPitch' has a wrong offset!");
static_assert(offsetof(AAInputIntegratorComponent_AssistAim, ReturnValue) == 0x000018, "Member 'AAInputIntegratorComponent_AssistAim::ReturnValue' has a wrong offset!");

// Function AimAssistScripts.AimAssistComponent.CanTargetActor
// 0x0010 (0x0010 - 0x0000)
struct AimAssistComponent_CanTargetActor final
{
public:
	const class AActor*                           HitActor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AimAssistComponent_CanTargetActor) == 0x000008, "Wrong alignment on AimAssistComponent_CanTargetActor");
static_assert(sizeof(AimAssistComponent_CanTargetActor) == 0x000010, "Wrong size on AimAssistComponent_CanTargetActor");
static_assert(offsetof(AimAssistComponent_CanTargetActor, HitActor) == 0x000000, "Member 'AimAssistComponent_CanTargetActor::HitActor' has a wrong offset!");
static_assert(offsetof(AimAssistComponent_CanTargetActor, ReturnValue) == 0x000008, "Member 'AimAssistComponent_CanTargetActor::ReturnValue' has a wrong offset!");

// Function AimAssistScripts.AimAssistComponent.GetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct AimAssistComponent_GetPlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistComponent_GetPlayerController) == 0x000008, "Wrong alignment on AimAssistComponent_GetPlayerController");
static_assert(sizeof(AimAssistComponent_GetPlayerController) == 0x000008, "Wrong size on AimAssistComponent_GetPlayerController");
static_assert(offsetof(AimAssistComponent_GetPlayerController, ReturnValue) == 0x000000, "Member 'AimAssistComponent_GetPlayerController::ReturnValue' has a wrong offset!");

// Function AimAssistScripts.AimAssistComponent.ShouldEnableAssist
// 0x0001 (0x0001 - 0x0000)
struct AimAssistComponent_ShouldEnableAssist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistComponent_ShouldEnableAssist) == 0x000001, "Wrong alignment on AimAssistComponent_ShouldEnableAssist");
static_assert(sizeof(AimAssistComponent_ShouldEnableAssist) == 0x000001, "Wrong size on AimAssistComponent_ShouldEnableAssist");
static_assert(offsetof(AimAssistComponent_ShouldEnableAssist, ReturnValue) == 0x000000, "Member 'AimAssistComponent_ShouldEnableAssist::ReturnValue' has a wrong offset!");

// Function AimAssistScripts.AimAssistReticleBase.CalculateConeProjectionAtDistance
// 0x000C (0x000C - 0x0000)
struct AimAssistReticleBase_CalculateConeProjectionAtDistance final
{
public:
	float                                         SpreadAngle;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearClipDistance;                                  // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistReticleBase_CalculateConeProjectionAtDistance) == 0x000004, "Wrong alignment on AimAssistReticleBase_CalculateConeProjectionAtDistance");
static_assert(sizeof(AimAssistReticleBase_CalculateConeProjectionAtDistance) == 0x00000C, "Wrong size on AimAssistReticleBase_CalculateConeProjectionAtDistance");
static_assert(offsetof(AimAssistReticleBase_CalculateConeProjectionAtDistance, SpreadAngle) == 0x000000, "Member 'AimAssistReticleBase_CalculateConeProjectionAtDistance::SpreadAngle' has a wrong offset!");
static_assert(offsetof(AimAssistReticleBase_CalculateConeProjectionAtDistance, NearClipDistance) == 0x000004, "Member 'AimAssistReticleBase_CalculateConeProjectionAtDistance::NearClipDistance' has a wrong offset!");
static_assert(offsetof(AimAssistReticleBase_CalculateConeProjectionAtDistance, ReturnValue) == 0x000008, "Member 'AimAssistReticleBase_CalculateConeProjectionAtDistance::ReturnValue' has a wrong offset!");

// Function AimAssistScripts.AimAssistReticleBase.CalculateSphericalProjectionRadiusAtDistance
// 0x000C (0x000C - 0x0000)
struct AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance) == 0x000004, "Wrong alignment on AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance");
static_assert(sizeof(AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance) == 0x00000C, "Wrong size on AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance");
static_assert(offsetof(AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance, Radius) == 0x000000, "Member 'AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance::Radius' has a wrong offset!");
static_assert(offsetof(AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance, Distance) == 0x000004, "Member 'AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance::Distance' has a wrong offset!");
static_assert(offsetof(AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance, ReturnValue) == 0x000008, "Member 'AimAssistReticleBase_CalculateSphericalProjectionRadiusAtDistance::ReturnValue' has a wrong offset!");

// Function AimAssistScripts.AimCompensatorComponent.AssistAim
// 0x0028 (0x0028 - 0x0000)
struct AimCompensatorComponent_AssistAim final
{
public:
	double                                        YawInput;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PitchInput;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertYaw;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertPitch;                                       // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimCompensatorComponent_AssistAim) == 0x000008, "Wrong alignment on AimCompensatorComponent_AssistAim");
static_assert(sizeof(AimCompensatorComponent_AssistAim) == 0x000028, "Wrong size on AimCompensatorComponent_AssistAim");
static_assert(offsetof(AimCompensatorComponent_AssistAim, YawInput) == 0x000000, "Member 'AimCompensatorComponent_AssistAim::YawInput' has a wrong offset!");
static_assert(offsetof(AimCompensatorComponent_AssistAim, PitchInput) == 0x000008, "Member 'AimCompensatorComponent_AssistAim::PitchInput' has a wrong offset!");
static_assert(offsetof(AimCompensatorComponent_AssistAim, InvertYaw) == 0x000010, "Member 'AimCompensatorComponent_AssistAim::InvertYaw' has a wrong offset!");
static_assert(offsetof(AimCompensatorComponent_AssistAim, InvertPitch) == 0x000011, "Member 'AimCompensatorComponent_AssistAim::InvertPitch' has a wrong offset!");
static_assert(offsetof(AimCompensatorComponent_AssistAim, ReturnValue) == 0x000018, "Member 'AimCompensatorComponent_AssistAim::ReturnValue' has a wrong offset!");

// Function AimAssistScripts.AimEaseInComponent.AssistAim
// 0x0020 (0x0020 - 0x0000)
struct AimEaseInComponent_AssistAim final
{
public:
	double                                        YawInput;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PitchInput;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimEaseInComponent_AssistAim) == 0x000008, "Wrong alignment on AimEaseInComponent_AssistAim");
static_assert(sizeof(AimEaseInComponent_AssistAim) == 0x000020, "Wrong size on AimEaseInComponent_AssistAim");
static_assert(offsetof(AimEaseInComponent_AssistAim, YawInput) == 0x000000, "Member 'AimEaseInComponent_AssistAim::YawInput' has a wrong offset!");
static_assert(offsetof(AimEaseInComponent_AssistAim, PitchInput) == 0x000008, "Member 'AimEaseInComponent_AssistAim::PitchInput' has a wrong offset!");
static_assert(offsetof(AimEaseInComponent_AssistAim, ReturnValue) == 0x000010, "Member 'AimEaseInComponent_AssistAim::ReturnValue' has a wrong offset!");

// Function AimAssistScripts.FrictionComponent.AssistAim
// 0x0020 (0x0020 - 0x0000)
struct FrictionComponent_AssistAim final
{
public:
	double                                        YawInput;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PitchInput;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrictionComponent_AssistAim) == 0x000008, "Wrong alignment on FrictionComponent_AssistAim");
static_assert(sizeof(FrictionComponent_AssistAim) == 0x000020, "Wrong size on FrictionComponent_AssistAim");
static_assert(offsetof(FrictionComponent_AssistAim, YawInput) == 0x000000, "Member 'FrictionComponent_AssistAim::YawInput' has a wrong offset!");
static_assert(offsetof(FrictionComponent_AssistAim, PitchInput) == 0x000008, "Member 'FrictionComponent_AssistAim::PitchInput' has a wrong offset!");
static_assert(offsetof(FrictionComponent_AssistAim, ReturnValue) == 0x000010, "Member 'FrictionComponent_AssistAim::ReturnValue' has a wrong offset!");

// Function AimAssistScripts.FrictionComponent.StartEaseOut
// 0x0068 (0x0068 - 0x0000)
struct FrictionComponent_StartEaseOut final
{
public:
	const class UAimAssistComponent*              Sender;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAimAssistTarget                       Target;                                            // 0x0008(0x0060)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrictionComponent_StartEaseOut) == 0x000008, "Wrong alignment on FrictionComponent_StartEaseOut");
static_assert(sizeof(FrictionComponent_StartEaseOut) == 0x000068, "Wrong size on FrictionComponent_StartEaseOut");
static_assert(offsetof(FrictionComponent_StartEaseOut, Sender) == 0x000000, "Member 'FrictionComponent_StartEaseOut::Sender' has a wrong offset!");
static_assert(offsetof(FrictionComponent_StartEaseOut, Target) == 0x000008, "Member 'FrictionComponent_StartEaseOut::Target' has a wrong offset!");

// Function AimAssistScripts.RotationalAimAssist.AssistAim
// 0x0020 (0x0020 - 0x0000)
struct RotationalAimAssist_AssistAim final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationalAimAssist_AssistAim) == 0x000008, "Wrong alignment on RotationalAimAssist_AssistAim");
static_assert(sizeof(RotationalAimAssist_AssistAim) == 0x000020, "Wrong size on RotationalAimAssist_AssistAim");
static_assert(offsetof(RotationalAimAssist_AssistAim, DeltaTime) == 0x000000, "Member 'RotationalAimAssist_AssistAim::DeltaTime' has a wrong offset!");
static_assert(offsetof(RotationalAimAssist_AssistAim, ReturnValue) == 0x000008, "Member 'RotationalAimAssist_AssistAim::ReturnValue' has a wrong offset!");

// Function AimAssistScripts.RotationalAimAssist.AssistAimAuto
// 0x0018 (0x0018 - 0x0000)
struct RotationalAimAssist_AssistAimAuto final
{
public:
	struct FRotator                               AimAssistResult;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RotationalAimAssist_AssistAimAuto) == 0x000008, "Wrong alignment on RotationalAimAssist_AssistAimAuto");
static_assert(sizeof(RotationalAimAssist_AssistAimAuto) == 0x000018, "Wrong size on RotationalAimAssist_AssistAimAuto");
static_assert(offsetof(RotationalAimAssist_AssistAimAuto, AimAssistResult) == 0x000000, "Member 'RotationalAimAssist_AssistAimAuto::AimAssistResult' has a wrong offset!");

}

