#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_BlockTrashCanLid

#include "Basic.hpp"

#include "GA_BlockTrashCanLid_classes.hpp"
#include "GA_BlockTrashCanLid_parameters.hpp"


namespace SDK
{

// Function GA_BlockTrashCanLid.GA_BlockTrashCanLid_C.ExecuteUbergraph_GA_BlockTrashCanLid
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_BlockTrashCanLid_C::ExecuteUbergraph_GA_BlockTrashCanLid(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BlockTrashCanLid_C", "ExecuteUbergraph_GA_BlockTrashCanLid");

	Params::GA_BlockTrashCanLid_C_ExecuteUbergraph_GA_BlockTrashCanLid Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_BlockTrashCanLid.GA_BlockTrashCanLid_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_BlockTrashCanLid_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BlockTrashCanLid_C", "K2_OnEndAbility");

	Params::GA_BlockTrashCanLid_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_BlockTrashCanLid.GA_BlockTrashCanLid_C.UpdateBlockingVolume
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_BlockTrashCanLid_C::UpdateBlockingVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BlockTrashCanLid_C", "UpdateBlockingVolume");

	UObject::ProcessEvent(Func, nullptr);
}

}

