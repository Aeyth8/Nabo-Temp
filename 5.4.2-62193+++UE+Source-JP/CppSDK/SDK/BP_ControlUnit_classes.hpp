#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ControlUnit

#include "Basic.hpp"

#include "InteractableBase_classes.hpp"
#include "Engine_structs.hpp"
#include "E_MaterialTypes_structs.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ControlUnit.BP_ControlUnit_C
// 0x0070 (0x0350 - 0x02E0)
class ABP_ControlUnit_C : public AInteractableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ControlUnit_C;                   // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMeshBounceComponent_C*                 MeshBounceComponent;                               // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereDistanceScalingWidget;                       // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneBreak;                                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDistanceScalingWidgetComponent*        DistanceScalingWidget;                             // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_ControlUnit;                                    // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneControlUnitMeshesRoot;                        // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxCollision;                                      // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponentIW*              AbilitySystemComponentIW;                          // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RotationSpeedModifier;                             // 0x0330(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemCompatibleInfoWI_C*                HealthBarWidget;                                   // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Team;                                              // 0x0340(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          InUse;                                             // 0x0341(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_342[0x6];                                      // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEconomyDefinition*                     DestroyedReward;                                   // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddCollision();
	void BndEvt__HouseActorBase_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__HouseActorBase_Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CheckAchievement(double Distance, class AActor* Causer);
	void ExecuteUbergraph_BP_ControlUnit(int32 EntryPoint);
	void GetDurabilityCostWhenHit(double* Amount);
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void HitInterface(const struct FVector& Direction);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void InitHealthBar();
	void InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InUseCosmetics(bool InUse_0);
	bool LethalDamageTaken();
	void MeleeHit(const class AActor*& AttackingActor);
	void Multi_AddCollision();
	void Multi_RemoveCollision();
	void OnDamaged(float Delta, class AActor* Causer, const struct FCombatParticipant& CombatParticipant, const struct FKillMethod& KillMethod, const struct FVector_NetQuantize& Location);
	void OnHealthChanged(float Health, float MaxHealth);
	void OnRep_InUse();
	void Owner_EnterControlUnit(class AActor* InteractingActor_0);
	void Owner_LeaveControlUnit();
	void PlayCameraFade(class AActor* InteractingActor_0);
	void ReceiveDestroyed();
	void RemoveCollision();
	void RemoveControlUnit();
	void Server_Destroy();
	void Server_Set_Server_As_Owner();
	void SetChatContextIfLocallyCharacterControlled(class AActor* Actor, bool Add);
	void Successful_Interaction();
	void TakeDamage();
	void TryGrantReward(class AActor* Causer);
	void UpdateHealthBar(double Value, double Max);
	void UserConstructionScript();
	void PostInteract(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent);
	void ReceiveBeginPlay();

	struct FTeam GetTeam() const;
	uint8 GetTeamID() const;
	bool HasTeam() const;
	bool TakeDamageFromAllTeams() const;
	bool IsAvailableForInteraction(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ControlUnit_C">();
	}
	static class ABP_ControlUnit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ControlUnit_C>();
	}
};
static_assert(alignof(ABP_ControlUnit_C) == 0x000008, "Wrong alignment on ABP_ControlUnit_C");
static_assert(sizeof(ABP_ControlUnit_C) == 0x000350, "Wrong size on ABP_ControlUnit_C");
static_assert(offsetof(ABP_ControlUnit_C, UberGraphFrame_BP_ControlUnit_C) == 0x0002E0, "Member 'ABP_ControlUnit_C::UberGraphFrame_BP_ControlUnit_C' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, MeshBounceComponent) == 0x0002E8, "Member 'ABP_ControlUnit_C::MeshBounceComponent' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, SphereDistanceScalingWidget) == 0x0002F0, "Member 'ABP_ControlUnit_C::SphereDistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, SceneBreak) == 0x0002F8, "Member 'ABP_ControlUnit_C::SceneBreak' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, DistanceScalingWidget) == 0x000300, "Member 'ABP_ControlUnit_C::DistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, SK_ControlUnit) == 0x000308, "Member 'ABP_ControlUnit_C::SK_ControlUnit' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, SceneControlUnitMeshesRoot) == 0x000310, "Member 'ABP_ControlUnit_C::SceneControlUnitMeshesRoot' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, BoxCollision) == 0x000318, "Member 'ABP_ControlUnit_C::BoxCollision' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, Box) == 0x000320, "Member 'ABP_ControlUnit_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, AbilitySystemComponentIW) == 0x000328, "Member 'ABP_ControlUnit_C::AbilitySystemComponentIW' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, RotationSpeedModifier) == 0x000330, "Member 'ABP_ControlUnit_C::RotationSpeedModifier' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, HealthBarWidget) == 0x000338, "Member 'ABP_ControlUnit_C::HealthBarWidget' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, Team) == 0x000340, "Member 'ABP_ControlUnit_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, InUse) == 0x000341, "Member 'ABP_ControlUnit_C::InUse' has a wrong offset!");
static_assert(offsetof(ABP_ControlUnit_C, DestroyedReward) == 0x000348, "Member 'ABP_ControlUnit_C::DestroyedReward' has a wrong offset!");

}

