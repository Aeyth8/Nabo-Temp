#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GarbageItem

#include "Basic.hpp"

#include "BP_GarbageItem_classes.hpp"
#include "BP_GarbageItem_parameters.hpp"


namespace SDK
{

// Function BP_GarbageItem.BP_GarbageItem_C.AddToHighlight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GarbageItem_C::AddToHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "AddToHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GarbageItem.BP_GarbageItem_C.AnimTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_GarbageItem_C::AnimTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "AnimTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GarbageItem.BP_GarbageItem_C.AnimTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_GarbageItem_C::AnimTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "AnimTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GarbageItem.BP_GarbageItem_C.Apply Perfectness Team
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Withdraw_Perfectness                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::Apply_Perfectness_Team(bool Withdraw_Perfectness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "Apply Perfectness Team");

	Params::BP_GarbageItem_C_Apply_Perfectness_Team Parms{};

	Parms.Withdraw_Perfectness = Withdraw_Perfectness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.BndEvt__BP_GarbageItem_StaticMeshComponent_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              SleepingComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::BndEvt__BP_GarbageItem_StaticMeshComponent_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature(class UPrimitiveComponent* SleepingComponent, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "BndEvt__BP_GarbageItem_StaticMeshComponent_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature");

	Params::BP_GarbageItem_C_BndEvt__BP_GarbageItem_StaticMeshComponent_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature Parms{};

	Parms.SleepingComponent = SleepingComponent;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.CheckHandDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    InRange                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::CheckHandDistance(bool* InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "CheckHandDistance");

	Params::BP_GarbageItem_C_CheckHandDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InRange != nullptr)
		*InRange = Parms.InRange;
}


// Function BP_GarbageItem.BP_GarbageItem_C.Collect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DestroyAfterCollect_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LerpSpeedScale                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::Collect(bool DestroyAfterCollect_0, double LerpSpeedScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "Collect");

	Params::BP_GarbageItem_C_Collect Parms{};

	Parms.DestroyAfterCollect_0 = DestroyAfterCollect_0;
	Parms.LerpSpeedScale = LerpSpeedScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.ExecuteUbergraph_BP_GarbageItem
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::ExecuteUbergraph_BP_GarbageItem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "ExecuteUbergraph_BP_GarbageItem");

	Params::BP_GarbageItem_C_ExecuteUbergraph_BP_GarbageItem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.FindTeamIndoorTrashcan
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_IndoorTrashcan_C*             IndoorTrashcan                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::FindTeamIndoorTrashcan(class ABP_IndoorTrashcan_C** IndoorTrashcan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "FindTeamIndoorTrashcan");

	Params::BP_GarbageItem_C_FindTeamIndoorTrashcan Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IndoorTrashcan != nullptr)
		*IndoorTrashcan = Parms.IndoorTrashcan;
}


// Function BP_GarbageItem.BP_GarbageItem_C.FindTeamTrashCan
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_Trashcan_C*>           TrashCan                                               (Parm, OutParm)

void ABP_GarbageItem_C::FindTeamTrashCan(TArray<class ABP_Trashcan_C*>* TrashCan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "FindTeamTrashCan");

	Params::BP_GarbageItem_C_FindTeamTrashCan Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TrashCan != nullptr)
		*TrashCan = std::move(Parms.TrashCan);
}


// Function BP_GarbageItem.BP_GarbageItem_C.GetValidASC
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAbilitySystemComponent*          ASC                                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::GetValidASC(class AActor* Actor, class UAbilitySystemComponent** ASC, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "GetValidASC");

	Params::BP_GarbageItem_C_GetValidASC Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (ASC != nullptr)
		*ASC = Parms.ASC;

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BP_GarbageItem.BP_GarbageItem_C.HandleDamageEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::HandleDamageEvent(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "HandleDamageEvent");

	Params::BP_GarbageItem_C_HandleDamageEvent Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.Multi_GenerateRandomMesh
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Seed                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::Multi_GenerateRandomMesh(int32 Seed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "Multi_GenerateRandomMesh");

	Params::BP_GarbageItem_C_Multi_GenerateRandomMesh Parms{};

	Parms.Seed = Seed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.MulticastLaunch
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::MulticastLaunch(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "MulticastLaunch");

	Params::BP_GarbageItem_C_MulticastLaunch Parms{};

	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.On Pickup
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          EndLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Trashbag_Equipable_C*         Trashbag                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::On_Pickup(const struct FVector& EndLocation_0, class ABP_Trashbag_Equipable_C* Trashbag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "On Pickup");

	Params::BP_GarbageItem_C_On_Pickup Parms{};

	Parms.EndLocation_0 = std::move(EndLocation_0);
	Parms.Trashbag = Trashbag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.PlayLerp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::PlayLerp(double PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "PlayLerp");

	Params::BP_GarbageItem_C_PlayLerp Parms{};

	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.ReactivatePhysicsAfterPlay
// (BlueprintCallable, BlueprintEvent)

void ABP_GarbageItem_C::ReactivatePhysicsAfterPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "ReactivatePhysicsAfterPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GarbageItem.BP_GarbageItem_C.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "ReceiveActorBeginOverlap");

	Params::BP_GarbageItem_C_ReceiveActorBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.ReceiveActorEndOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "ReceiveActorEndOverlap");

	Params::BP_GarbageItem_C_ReceiveActorEndOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.Server_SetSeed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_GarbageItem_C::Server_SetSeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "Server_SetSeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GarbageItem.BP_GarbageItem_C.SetContextName
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GarbageItem_C::SetContextName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "SetContextName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GarbageItem.BP_GarbageItem_C.SetLerpValues
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          EndLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::SetLerpValues(const struct FVector& EndLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "SetLerpValues");

	Params::BP_GarbageItem_C_SetLerpValues Parms{};

	Parms.EndLocation_0 = std::move(EndLocation_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.SetSeethroughMeshParams
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GarbageItem_C::SetSeethroughMeshParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "SetSeethroughMeshParams");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GarbageItem.BP_GarbageItem_C.ShootTrash
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::ShootTrash(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "ShootTrash");

	Params::BP_GarbageItem_C_ShootTrash Parms{};

	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.ToggleMeshOverlay
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::ToggleMeshOverlay(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "ToggleMeshOverlay");

	Params::BP_GarbageItem_C_ToggleMeshOverlay Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.TogglePhysicsOnTrash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::TogglePhysicsOnTrash(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "TogglePhysicsOnTrash");

	Params::BP_GarbageItem_C_TogglePhysicsOnTrash Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.ServerPush
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LaunchVelocity_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::ServerPush(class AActor* TargetActor, const struct FVector& LaunchVelocity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "ServerPush");

	Params::BP_GarbageItem_C_ServerPush Parms{};

	Parms.TargetActor = TargetActor;
	Parms.LaunchVelocity_0 = std::move(LaunchVelocity_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.GetDurabilityCostWhenHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Amount                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::GetDurabilityCostWhenHit(double* Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "GetDurabilityCostWhenHit");

	Params::BP_GarbageItem_C_GetDurabilityCostWhenHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Amount != nullptr)
		*Amount = Parms.Amount;
}


// Function BP_GarbageItem.BP_GarbageItem_C.GetMaterialType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MaterialTypes                         MaterialType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::GetMaterialType(E_MaterialTypes* MaterialType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "GetMaterialType");

	Params::BP_GarbageItem_C_GetMaterialType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaterialType != nullptr)
		*MaterialType = Parms.MaterialType;
}


// Function BP_GarbageItem.BP_GarbageItem_C.GrippedLocal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       GrippingCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::GrippedLocal(class ACharacter* GrippingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "GrippedLocal");

	Params::BP_GarbageItem_C_GrippedLocal Parms{};

	Parms.GrippingCharacter = GrippingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.ImpactCosmetics
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ImpactCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitImpulse                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ImpactEffect                          ImpactEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangedAttributes                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "ImpactCosmetics");

	Params::BP_GarbageItem_C_ImpactCosmetics Parms{};

	Parms.ImpactCauser = ImpactCauser;
	Parms.Location = std::move(Location);
	Parms.HitImpulse = std::move(HitImpulse);
	Parms.ImpactEffect = ImpactEffect;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangedAttributes != nullptr)
		*ChangedAttributes = Parms.ChangedAttributes;
}


// Function BP_GarbageItem.BP_GarbageItem_C.IsInFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Focusing_Actor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::IsInFocus(class AActor* Focusing_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "IsInFocus");

	Params::BP_GarbageItem_C_IsInFocus Parms{};

	Parms.Focusing_Actor = Focusing_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GarbageItem.BP_GarbageItem_C.Knockback
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    XYOverride                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ZOverride                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AirControlMultiplier                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Void                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::Knockback(const struct FVector& Velocity, bool XYOverride, bool ZOverride, double AirControlMultiplier, bool* Void)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "Knockback");

	Params::BP_GarbageItem_C_Knockback Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.XYOverride = XYOverride;
	Parms.ZOverride = ZOverride;
	Parms.AirControlMultiplier = AirControlMultiplier;

	UObject::ProcessEvent(Func, &Parms);

	if (Void != nullptr)
		*Void = Parms.Void;
}


// Function BP_GarbageItem.BP_GarbageItem_C.Released Local
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       ReleasingCharacter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GarbageItem_C::Released_Local(class ACharacter* ReleasingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GarbageItem_C", "Released Local");

	Params::BP_GarbageItem_C_Released_Local Parms{};

	Parms.ReleasingCharacter = ReleasingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}

}

