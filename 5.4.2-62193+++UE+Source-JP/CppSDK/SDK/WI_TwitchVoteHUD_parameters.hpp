#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_TwitchVoteHUD

#include "Basic.hpp"

#include "JP_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.ExecuteUbergraph_WI_TwitchVoteHUD
// 0x0028 (0x0028 - 0x0000)
struct WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlay*                               K2Node_CustomEvent_OverlayIntro;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD) == 0x000008, "Wrong alignment on WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD");
static_assert(sizeof(WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD) == 0x000028, "Wrong size on WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD");
static_assert(offsetof(WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD, EntryPoint) == 0x000000, "Member 'WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD, K2Node_CustomEvent_OverlayIntro) == 0x000008, "Member 'WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD::K2Node_CustomEvent_OverlayIntro' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD, K2Node_Event_IsDesignTime) == 0x000018, "Member 'WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD, CallFunc_PlayAnimation_ReturnValue_1) == 0x000020, "Member 'WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.GetVoteTeamWidgetForTeamType
// 0x0030 (0x0030 - 0x0000)
struct WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_TwitchVoteHUDTeam_C*                VoteTeamWidget;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_TwitchVoteHUDTeam_C*                Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_TwitchVoteHUDTeam_C*                Temp_object_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_TwitchVoteHUDTeam_C*                K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType) == 0x000008, "Wrong alignment on WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType");
static_assert(sizeof(WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType) == 0x000030, "Wrong size on WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType");
static_assert(offsetof(WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType, TeamType) == 0x000000, "Member 'WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType::TeamType' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType, VoteTeamWidget) == 0x000008, "Member 'WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType::VoteTeamWidget' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType, Temp_byte_Variable) == 0x000010, "Member 'WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType, Temp_object_Variable) == 0x000018, "Member 'WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType, Temp_object_Variable_1) == 0x000020, "Member 'WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType, K2Node_Select_Default) == 0x000028, "Member 'WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType::K2Node_Select_Default' has a wrong offset!");

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.OverlayIntro_FadeInComplete
// 0x0008 (0x0008 - 0x0000)
struct WI_TwitchVoteHUD_C_OverlayIntro_FadeInComplete final
{
public:
	class UOverlay*                               OverlayIntro;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_TwitchVoteHUD_C_OverlayIntro_FadeInComplete) == 0x000008, "Wrong alignment on WI_TwitchVoteHUD_C_OverlayIntro_FadeInComplete");
static_assert(sizeof(WI_TwitchVoteHUD_C_OverlayIntro_FadeInComplete) == 0x000008, "Wrong size on WI_TwitchVoteHUD_C_OverlayIntro_FadeInComplete");
static_assert(offsetof(WI_TwitchVoteHUD_C_OverlayIntro_FadeInComplete, OverlayIntro) == 0x000000, "Member 'WI_TwitchVoteHUD_C_OverlayIntro_FadeInComplete::OverlayIntro' has a wrong offset!");

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WI_TwitchVoteHUD_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_TwitchVoteHUD_C_PreConstruct) == 0x000001, "Wrong alignment on WI_TwitchVoteHUD_C_PreConstruct");
static_assert(sizeof(WI_TwitchVoteHUD_C_PreConstruct) == 0x000001, "Wrong size on WI_TwitchVoteHUD_C_PreConstruct");
static_assert(offsetof(WI_TwitchVoteHUD_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WI_TwitchVoteHUD_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD
// 0x0008 (0x0008 - 0x0000)
struct WI_TwitchVoteHUD_C_SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD final
{
public:
	class UOverlay*                               OverlayIntro;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_TwitchVoteHUD_C_SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD) == 0x000008, "Wrong alignment on WI_TwitchVoteHUD_C_SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD");
static_assert(sizeof(WI_TwitchVoteHUD_C_SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD) == 0x000008, "Wrong size on WI_TwitchVoteHUD_C_SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD");
static_assert(offsetof(WI_TwitchVoteHUD_C_SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD, OverlayIntro) == 0x000000, "Member 'WI_TwitchVoteHUD_C_SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD::OverlayIntro' has a wrong offset!");

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SetChatInfo
// 0x0020 (0x0020 - 0x0000)
struct WI_TwitchVoteHUD_C_SetChatInfo final
{
public:
	class FText                                   Subject;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Description;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WI_TwitchVoteHUD_C_SetChatInfo) == 0x000008, "Wrong alignment on WI_TwitchVoteHUD_C_SetChatInfo");
static_assert(sizeof(WI_TwitchVoteHUD_C_SetChatInfo) == 0x000020, "Wrong size on WI_TwitchVoteHUD_C_SetChatInfo");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetChatInfo, Subject) == 0x000000, "Member 'WI_TwitchVoteHUD_C_SetChatInfo::Subject' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetChatInfo, Description) == 0x000010, "Member 'WI_TwitchVoteHUD_C_SetChatInfo::Description' has a wrong offset!");

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SetTeamVisible
// 0x0018 (0x0018 - 0x0000)
struct WI_TwitchVoteHUD_C_SetTeamVisible final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Visible;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_TwitchVoteHUDTeam_C*                CallFunc_GetVoteTeamWidgetForTeamType_VoteTeamWidget; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_TwitchVoteHUD_C_SetTeamVisible) == 0x000008, "Wrong alignment on WI_TwitchVoteHUD_C_SetTeamVisible");
static_assert(sizeof(WI_TwitchVoteHUD_C_SetTeamVisible) == 0x000018, "Wrong size on WI_TwitchVoteHUD_C_SetTeamVisible");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetTeamVisible, TeamType) == 0x000000, "Member 'WI_TwitchVoteHUD_C_SetTeamVisible::TeamType' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetTeamVisible, Visible) == 0x000001, "Member 'WI_TwitchVoteHUD_C_SetTeamVisible::Visible' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetTeamVisible, Temp_bool_Variable) == 0x000002, "Member 'WI_TwitchVoteHUD_C_SetTeamVisible::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetTeamVisible, CallFunc_GetVoteTeamWidgetForTeamType_VoteTeamWidget) == 0x000008, "Member 'WI_TwitchVoteHUD_C_SetTeamVisible::CallFunc_GetVoteTeamWidgetForTeamType_VoteTeamWidget' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetTeamVisible, Temp_byte_Variable) == 0x000010, "Member 'WI_TwitchVoteHUD_C_SetTeamVisible::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetTeamVisible, Temp_byte_Variable_1) == 0x000011, "Member 'WI_TwitchVoteHUD_C_SetTeamVisible::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetTeamVisible, K2Node_Select_Default) == 0x000012, "Member 'WI_TwitchVoteHUD_C_SetTeamVisible::K2Node_Select_Default' has a wrong offset!");

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SetTeamVotes
// 0x0010 (0x0010 - 0x0000)
struct WI_TwitchVoteHUD_C_SetTeamVotes final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Votes;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWI_TwitchVoteHUDTeam_C*                CallFunc_GetVoteTeamWidgetForTeamType_VoteTeamWidget; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_TwitchVoteHUD_C_SetTeamVotes) == 0x000008, "Wrong alignment on WI_TwitchVoteHUD_C_SetTeamVotes");
static_assert(sizeof(WI_TwitchVoteHUD_C_SetTeamVotes) == 0x000010, "Wrong size on WI_TwitchVoteHUD_C_SetTeamVotes");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetTeamVotes, TeamType) == 0x000000, "Member 'WI_TwitchVoteHUD_C_SetTeamVotes::TeamType' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetTeamVotes, Votes) == 0x000004, "Member 'WI_TwitchVoteHUD_C_SetTeamVotes::Votes' has a wrong offset!");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetTeamVotes, CallFunc_GetVoteTeamWidgetForTeamType_VoteTeamWidget) == 0x000008, "Member 'WI_TwitchVoteHUD_C_SetTeamVotes::CallFunc_GetVoteTeamWidgetForTeamType_VoteTeamWidget' has a wrong offset!");

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SetVoteDescription
// 0x0010 (0x0010 - 0x0000)
struct WI_TwitchVoteHUD_C_SetVoteDescription final
{
public:
	class FText                                   VoteDescription_0;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WI_TwitchVoteHUD_C_SetVoteDescription) == 0x000008, "Wrong alignment on WI_TwitchVoteHUD_C_SetVoteDescription");
static_assert(sizeof(WI_TwitchVoteHUD_C_SetVoteDescription) == 0x000010, "Wrong size on WI_TwitchVoteHUD_C_SetVoteDescription");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetVoteDescription, VoteDescription_0) == 0x000000, "Member 'WI_TwitchVoteHUD_C_SetVoteDescription::VoteDescription_0' has a wrong offset!");

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SetVoteSubject
// 0x0010 (0x0010 - 0x0000)
struct WI_TwitchVoteHUD_C_SetVoteSubject final
{
public:
	class FText                                   VoteSubject_0;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WI_TwitchVoteHUD_C_SetVoteSubject) == 0x000008, "Wrong alignment on WI_TwitchVoteHUD_C_SetVoteSubject");
static_assert(sizeof(WI_TwitchVoteHUD_C_SetVoteSubject) == 0x000010, "Wrong size on WI_TwitchVoteHUD_C_SetVoteSubject");
static_assert(offsetof(WI_TwitchVoteHUD_C_SetVoteSubject, VoteSubject_0) == 0x000000, "Member 'WI_TwitchVoteHUD_C_SetVoteSubject::VoteSubject_0' has a wrong offset!");

}

