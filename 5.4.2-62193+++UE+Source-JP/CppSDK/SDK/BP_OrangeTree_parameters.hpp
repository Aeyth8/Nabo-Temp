#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OrangeTree

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EAmmoState_structs.hpp"
#include "SlateCore_structs.hpp"
#include "JP_structs.hpp"


namespace SDK::Params
{

// Function BP_OrangeTree.BP_OrangeTree_C.CheckIfItemInInventory
// 0x0050 (0x0050 - 0x0000)
struct BP_OrangeTree_C_CheckIfItemInInventory final
{
public:
	class AActor*                                 InteractingActor_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ItemAlreadyInInventory;                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryComponent*                    CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UItemDefinition>         CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0020(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UItemInstance*                          CallFunc_GetFirstItemOfType_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeTree_C_CheckIfItemInInventory) == 0x000008, "Wrong alignment on BP_OrangeTree_C_CheckIfItemInInventory");
static_assert(sizeof(BP_OrangeTree_C_CheckIfItemInInventory) == 0x000050, "Wrong size on BP_OrangeTree_C_CheckIfItemInInventory");
static_assert(offsetof(BP_OrangeTree_C_CheckIfItemInInventory, InteractingActor_0) == 0x000000, "Member 'BP_OrangeTree_C_CheckIfItemInInventory::InteractingActor_0' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_CheckIfItemInInventory, ItemAlreadyInInventory) == 0x000008, "Member 'BP_OrangeTree_C_CheckIfItemInInventory::ItemAlreadyInInventory' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_CheckIfItemInInventory, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'BP_OrangeTree_C_CheckIfItemInInventory::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_CheckIfItemInInventory, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_OrangeTree_C_CheckIfItemInInventory::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_CheckIfItemInInventory, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000020, "Member 'BP_OrangeTree_C_CheckIfItemInInventory::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_CheckIfItemInInventory, CallFunc_GetFirstItemOfType_ReturnValue) == 0x000048, "Member 'BP_OrangeTree_C_CheckIfItemInInventory::CallFunc_GetFirstItemOfType_ReturnValue' has a wrong offset!");

// Function BP_OrangeTree.BP_OrangeTree_C.DisplayInventoryWidget
// 0x0110 (0x0110 - 0x0000)
struct BP_OrangeTree_C_DisplayInventoryWidget final
{
public:
	class AActor*                                 InteractingActor_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0010(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm)
	bool                                          CallFunc_CheckIfItemInInventory_ItemAlreadyInInventory; // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0070(0x0010)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0080(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0090(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x00D8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x00E8(0x0010)()
	class FText                                   CallFunc_TextToUpper_ReturnValue_1;                // 0x00F8(0x0010)()
	bool                                          CallFunc_CheckAmmoGrantingState_Success;           // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAmmoState                                    CallFunc_CheckAmmoGrantingState_State;             // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeTree_C_DisplayInventoryWidget) == 0x000008, "Wrong alignment on BP_OrangeTree_C_DisplayInventoryWidget");
static_assert(sizeof(BP_OrangeTree_C_DisplayInventoryWidget) == 0x000110, "Wrong size on BP_OrangeTree_C_DisplayInventoryWidget");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, InteractingActor_0) == 0x000000, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::InteractingActor_0' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, CallFunc_DoesImplementInterface_ReturnValue) == 0x000008, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, K2Node_MakeStruct_FormatArgumentData) == 0x000010, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, K2Node_MakeArray_Array) == 0x000058, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, CallFunc_CheckIfItemInInventory_ItemAlreadyInInventory) == 0x000068, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::CallFunc_CheckIfItemInInventory_ItemAlreadyInInventory' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, CallFunc_Format_ReturnValue) == 0x000070, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, CallFunc_TextToUpper_ReturnValue) == 0x000080, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, K2Node_MakeStruct_FormatArgumentData_1) == 0x000090, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, K2Node_MakeArray_Array_1) == 0x0000D8, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, CallFunc_Format_ReturnValue_1) == 0x0000E8, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, CallFunc_TextToUpper_ReturnValue_1) == 0x0000F8, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::CallFunc_TextToUpper_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, CallFunc_CheckAmmoGrantingState_Success) == 0x000108, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::CallFunc_CheckAmmoGrantingState_Success' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, CallFunc_CheckAmmoGrantingState_State) == 0x000109, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::CallFunc_CheckAmmoGrantingState_State' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_DisplayInventoryWidget, K2Node_SwitchEnum_CmpSuccess) == 0x00010A, "Member 'BP_OrangeTree_C_DisplayInventoryWidget::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_OrangeTree.BP_OrangeTree_C.ExecuteUbergraph_BP_OrangeTree
// 0x0158 (0x0158 - 0x0000)
struct BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0008(0x0010)()
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_InteractionComponent;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Try_Grant_Ammo_Success;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAmmoState                                    CallFunc_Try_Grant_Ammo_State;                     // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerMessage                         K2Node_MakeStruct_PlayerMessage;                   // 0x0058(0x0058)()
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_ObjectContext_C*                    K2Node_DynamicCast_AsWI_Object_Context;            // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Focusing_Actor;                       // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x00E0(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FPlayerMessage                         K2Node_MakeStruct_PlayerMessage_1;                 // 0x0100(0x0058)()
};
static_assert(alignof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree) == 0x000008, "Wrong alignment on BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree");
static_assert(sizeof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree) == 0x000158, "Wrong size on BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, EntryPoint) == 0x000000, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, CallFunc_MakeLiteralText_ReturnValue) == 0x000008, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_Event_InteractingActor) == 0x000018, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_Event_InteractionComponent) == 0x000020, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_Event_InteractionComponent' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, CallFunc_Conv_TextToString_ReturnValue) == 0x000028, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000038, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, CallFunc_Try_Grant_Ammo_Success) == 0x000041, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::CallFunc_Try_Grant_Ammo_Success' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, CallFunc_Try_Grant_Ammo_State) == 0x000042, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::CallFunc_Try_Grant_Ammo_State' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, CallFunc_GetPlayerController_ReturnValue) == 0x000048, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_SwitchEnum_CmpSuccess) == 0x000050, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_MakeStruct_PlayerMessage) == 0x000058, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_MakeStruct_PlayerMessage' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_SwitchEnum_CmpSuccess_1) == 0x0000B0, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, CallFunc_GetUserWidgetObject_ReturnValue) == 0x0000B8, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_DynamicCast_AsWI_Object_Context) == 0x0000C0, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_DynamicCast_AsWI_Object_Context' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_DynamicCast_bSuccess_1) == 0x0000C8, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_Event_Focusing_Actor) == 0x0000D0, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_Event_Focusing_Actor' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, CallFunc_HasAuthority_ReturnValue) == 0x0000D8, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, CallFunc_HasAuthority_ReturnValue_1) == 0x0000D9, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, CallFunc_MakeLiteralText_ReturnValue_1) == 0x0000E0, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, CallFunc_Conv_TextToString_ReturnValue_1) == 0x0000F0, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree, K2Node_MakeStruct_PlayerMessage_1) == 0x000100, "Member 'BP_OrangeTree_C_ExecuteUbergraph_BP_OrangeTree::K2Node_MakeStruct_PlayerMessage_1' has a wrong offset!");

// Function BP_OrangeTree.BP_OrangeTree_C.GetNewWidgetColor
// 0x0014 (0x0014 - 0x0000)
struct BP_OrangeTree_C_GetNewWidgetColor final
{
public:
	struct FSlateColor                            NewColor;                                          // 0x0000(0x0014)(Parm, OutParm)
};
static_assert(alignof(BP_OrangeTree_C_GetNewWidgetColor) == 0x000004, "Wrong alignment on BP_OrangeTree_C_GetNewWidgetColor");
static_assert(sizeof(BP_OrangeTree_C_GetNewWidgetColor) == 0x000014, "Wrong size on BP_OrangeTree_C_GetNewWidgetColor");
static_assert(offsetof(BP_OrangeTree_C_GetNewWidgetColor, NewColor) == 0x000000, "Member 'BP_OrangeTree_C_GetNewWidgetColor::NewColor' has a wrong offset!");

// Function BP_OrangeTree.BP_OrangeTree_C.GetOptionalText
// 0x0020 (0x0020 - 0x0000)
struct BP_OrangeTree_C_GetOptionalText final
{
public:
	class FText                                   Return;                                            // 0x0000(0x0010)(Parm, OutParm)
	class FText                                   Optional_Second_Line;                              // 0x0010(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_OrangeTree_C_GetOptionalText) == 0x000008, "Wrong alignment on BP_OrangeTree_C_GetOptionalText");
static_assert(sizeof(BP_OrangeTree_C_GetOptionalText) == 0x000020, "Wrong size on BP_OrangeTree_C_GetOptionalText");
static_assert(offsetof(BP_OrangeTree_C_GetOptionalText, Return) == 0x000000, "Member 'BP_OrangeTree_C_GetOptionalText::Return' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_GetOptionalText, Optional_Second_Line) == 0x000010, "Member 'BP_OrangeTree_C_GetOptionalText::Optional_Second_Line' has a wrong offset!");

// Function BP_OrangeTree.BP_OrangeTree_C.IsInFocus
// 0x0008 (0x0008 - 0x0000)
struct BP_OrangeTree_C_IsInFocus final
{
public:
	class AActor*                                 Focusing_Actor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeTree_C_IsInFocus) == 0x000008, "Wrong alignment on BP_OrangeTree_C_IsInFocus");
static_assert(sizeof(BP_OrangeTree_C_IsInFocus) == 0x000008, "Wrong size on BP_OrangeTree_C_IsInFocus");
static_assert(offsetof(BP_OrangeTree_C_IsInFocus, Focusing_Actor) == 0x000000, "Member 'BP_OrangeTree_C_IsInFocus::Focusing_Actor' has a wrong offset!");

// Function BP_OrangeTree.BP_OrangeTree_C.PlayCosmetics
// 0x0038 (0x0038 - 0x0000)
struct BP_OrangeTree_C_PlayCosmetics final
{
public:
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeTree_C_PlayCosmetics) == 0x000008, "Wrong alignment on BP_OrangeTree_C_PlayCosmetics");
static_assert(sizeof(BP_OrangeTree_C_PlayCosmetics) == 0x000038, "Wrong size on BP_OrangeTree_C_PlayCosmetics");
static_assert(offsetof(BP_OrangeTree_C_PlayCosmetics, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000000, "Member 'BP_OrangeTree_C_PlayCosmetics::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_PlayCosmetics, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000018, "Member 'BP_OrangeTree_C_PlayCosmetics::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_PlayCosmetics, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x000030, "Member 'BP_OrangeTree_C_PlayCosmetics::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");

// Function BP_OrangeTree.BP_OrangeTree_C.PostInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_OrangeTree_C_PostInteract final
{
public:
	class AActor*                                 InteractingActor_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeTree_C_PostInteract) == 0x000008, "Wrong alignment on BP_OrangeTree_C_PostInteract");
static_assert(sizeof(BP_OrangeTree_C_PostInteract) == 0x000010, "Wrong size on BP_OrangeTree_C_PostInteract");
static_assert(offsetof(BP_OrangeTree_C_PostInteract, InteractingActor_0) == 0x000000, "Member 'BP_OrangeTree_C_PostInteract::InteractingActor_0' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_PostInteract, InteractionComponent) == 0x000008, "Member 'BP_OrangeTree_C_PostInteract::InteractionComponent' has a wrong offset!");

// Function BP_OrangeTree.BP_OrangeTree_C.ReloadAfterHousesLoaded
// 0x0001 (0x0001 - 0x0000)
struct BP_OrangeTree_C_ReloadAfterHousesLoaded final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeTree_C_ReloadAfterHousesLoaded) == 0x000001, "Wrong alignment on BP_OrangeTree_C_ReloadAfterHousesLoaded");
static_assert(sizeof(BP_OrangeTree_C_ReloadAfterHousesLoaded) == 0x000001, "Wrong size on BP_OrangeTree_C_ReloadAfterHousesLoaded");
static_assert(offsetof(BP_OrangeTree_C_ReloadAfterHousesLoaded, Return) == 0x000000, "Member 'BP_OrangeTree_C_ReloadAfterHousesLoaded::Return' has a wrong offset!");

// Function BP_OrangeTree.BP_OrangeTree_C.SetWidgetTextAndColor
// 0x0018 (0x0018 - 0x0000)
struct BP_OrangeTree_C_SetWidgetTextAndColor final
{
public:
	bool                                          AmmoFull;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OptionalSecondText;                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_OrangeTree_C_SetWidgetTextAndColor) == 0x000008, "Wrong alignment on BP_OrangeTree_C_SetWidgetTextAndColor");
static_assert(sizeof(BP_OrangeTree_C_SetWidgetTextAndColor) == 0x000018, "Wrong size on BP_OrangeTree_C_SetWidgetTextAndColor");
static_assert(offsetof(BP_OrangeTree_C_SetWidgetTextAndColor, AmmoFull) == 0x000000, "Member 'BP_OrangeTree_C_SetWidgetTextAndColor::AmmoFull' has a wrong offset!");
static_assert(offsetof(BP_OrangeTree_C_SetWidgetTextAndColor, OptionalSecondText) == 0x000008, "Member 'BP_OrangeTree_C_SetWidgetTextAndColor::OptionalSecondText' has a wrong offset!");

// Function BP_OrangeTree.BP_OrangeTree_C.UserConstructionScript
// 0x0010 (0x0010 - 0x0000)
struct BP_OrangeTree_C_UserConstructionScript final
{
public:
	TArray<class UMeshComponent*>                 K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_OrangeTree_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_OrangeTree_C_UserConstructionScript");
static_assert(sizeof(BP_OrangeTree_C_UserConstructionScript) == 0x000010, "Wrong size on BP_OrangeTree_C_UserConstructionScript");
static_assert(offsetof(BP_OrangeTree_C_UserConstructionScript, K2Node_MakeArray_Array) == 0x000000, "Member 'BP_OrangeTree_C_UserConstructionScript::K2Node_MakeArray_Array' has a wrong offset!");

}

