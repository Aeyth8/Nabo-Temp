#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LobbyCharacterWorldSlot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "JP_structs.hpp"
#include "Engine_structs.hpp"
#include "S_LobbyCharacterWorldSlotInfo_structs.hpp"


namespace SDK::Params
{

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.ClearCharacter
// 0x0002 (0x0002 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_ClearCharacter final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_ClearCharacter) == 0x000001, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_ClearCharacter");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_ClearCharacter) == 0x000002, "Wrong size on BP_LobbyCharacterWorldSlot_C_ClearCharacter");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ClearCharacter, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_ClearCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ClearCharacter, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'BP_LobbyCharacterWorldSlot_C_ClearCharacter::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.ExecuteUbergraph_BP_LobbyCharacterWorldSlot
// 0x0004 (0x0004 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_ExecuteUbergraph_BP_LobbyCharacterWorldSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_ExecuteUbergraph_BP_LobbyCharacterWorldSlot) == 0x000004, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_ExecuteUbergraph_BP_LobbyCharacterWorldSlot");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_ExecuteUbergraph_BP_LobbyCharacterWorldSlot) == 0x000004, "Wrong size on BP_LobbyCharacterWorldSlot_C_ExecuteUbergraph_BP_LobbyCharacterWorldSlot");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ExecuteUbergraph_BP_LobbyCharacterWorldSlot, EntryPoint) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_ExecuteUbergraph_BP_LobbyCharacterWorldSlot::EntryPoint' has a wrong offset!");

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.GetResidentCharacterFromCharacterName
// 0x0048 (0x0048 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName final
{
public:
	ECharacterName                                CharacterName;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ResidentCharacter;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 L_MatchingResidentCharacter;                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UPawnDefinitionJP*                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Resident_Character;   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName) == 0x000008, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName) == 0x000048, "Wrong size on BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, CharacterName) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::CharacterName' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, ResidentCharacter) == 0x000008, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::ResidentCharacter' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, L_MatchingResidentCharacter) == 0x000010, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::L_MatchingResidentCharacter' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, K2Node_ClassDynamicCast_AsBP_Resident_Character) == 0x000038, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::K2Node_ClassDynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, K2Node_ClassDynamicCast_bSuccess) == 0x000040, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000041, "Member 'BP_LobbyCharacterWorldSlot_C_GetResidentCharacterFromCharacterName::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.InitializePreviewCharacter
// 0x0050 (0x0050 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter final
{
public:
	class ABP_NeighborPreviewActor_C*             PreviewActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_JP_TPP_Preview_C*                  K2Node_DynamicCast_AsABP_JP_TPP_Preview;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UItemSkinDefinition>     CallFunc_GetUniqueItemSkinDefinitionForNeighbor_ReturnValue; // 0x0028(0x0028)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter) == 0x000008, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter) == 0x000050, "Wrong size on BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter, PreviewActor) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter::PreviewActor' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter, K2Node_DynamicCast_AsABP_JP_TPP_Preview) == 0x000018, "Member 'BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter::K2Node_DynamicCast_AsABP_JP_TPP_Preview' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter, CallFunc_GetUniqueItemSkinDefinitionForNeighbor_ReturnValue) == 0x000028, "Member 'BP_LobbyCharacterWorldSlot_C_InitializePreviewCharacter::CallFunc_GetUniqueItemSkinDefinitionForNeighbor_ReturnValue' has a wrong offset!");

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.OffsetCharacterLocation
// 0x0180 (0x0180 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddRelativeLocation_SweepHitResult;    // 0x0088(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation) == 0x000008, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation) == 0x000180, "Wrong size on BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, Character) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::Character' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_BreakVector_X) == 0x000038, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_BreakVector_Y) == 0x000040, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_BreakVector_Z) == 0x000048, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_BreakVector_X_1) == 0x000050, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_BreakVector_Y_1) == 0x000058, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_BreakVector_Z_1) == 0x000060, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation, CallFunc_K2_AddRelativeLocation_SweepHitResult) == 0x000088, "Member 'BP_LobbyCharacterWorldSlot_C_OffsetCharacterLocation::CallFunc_K2_AddRelativeLocation_SweepHitResult' has a wrong offset!");

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.PlayAnimation
// 0x0038 (0x0038 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_PlayAnimation final
{
public:
	struct FGameplayTag                           Animation_Context;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FNeighborLoadout                       CallFunc_GetSelectedNeighborLoadout_ReturnValue;   // 0x0008(0x0030)()
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_PlayAnimation) == 0x000008, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_PlayAnimation");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_PlayAnimation) == 0x000038, "Wrong size on BP_LobbyCharacterWorldSlot_C_PlayAnimation");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_PlayAnimation, Animation_Context) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_PlayAnimation::Animation_Context' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_PlayAnimation, CallFunc_GetSelectedNeighborLoadout_ReturnValue) == 0x000008, "Member 'BP_LobbyCharacterWorldSlot_C_PlayAnimation::CallFunc_GetSelectedNeighborLoadout_ReturnValue' has a wrong offset!");

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.Set Character
// 0x0028 (0x0028 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_Set_Character final
{
public:
	ETeamType                                     InTeamType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_LobbyCharacterWorldSlotInfo         SlotInfo;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class ABP_NeighborPreviewActor_C*             CallFunc_SpawnNeighborPreview_SpawnedActor;        // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_Set_Character) == 0x000008, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_Set_Character");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_Set_Character) == 0x000028, "Wrong size on BP_LobbyCharacterWorldSlot_C_Set_Character");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_Set_Character, InTeamType) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_Set_Character::InTeamType' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_Set_Character, SlotInfo) == 0x000008, "Member 'BP_LobbyCharacterWorldSlot_C_Set_Character::SlotInfo' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_Set_Character, CallFunc_SpawnNeighborPreview_SpawnedActor) == 0x000020, "Member 'BP_LobbyCharacterWorldSlot_C_Set_Character::CallFunc_SpawnNeighborPreview_SpawnedActor' has a wrong offset!");

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.Set Skeletal Mesh in Preview
// 0x0018 (0x0018 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview final
{
public:
	ECharacterName                                CharacterName;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SkinIdentifier;                                    // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          TPPSkeletal_Mesh;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview) == 0x000008, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview) == 0x000018, "Wrong size on BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview, CharacterName) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview::CharacterName' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview, SkinIdentifier) == 0x000004, "Member 'BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview::SkinIdentifier' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview, TPPSkeletal_Mesh) == 0x000010, "Member 'BP_LobbyCharacterWorldSlot_C_Set_Skeletal_Mesh_in_Preview::TPPSkeletal_Mesh' has a wrong offset!");

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.SetMaterialValues
// 0x0060 (0x0060 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_SetMaterialValues final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     Index_0;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Blue_Team;                                         // 0x000C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Red_Team;                                          // 0x001C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Yellow_Team;                                       // 0x002C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     Temp_byte_Variable;                                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_SetMaterialValues) == 0x000004, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_SetMaterialValues");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_SetMaterialValues) == 0x000060, "Wrong size on BP_LobbyCharacterWorldSlot_C_SetMaterialValues");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SetMaterialValues, ParameterName) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_SetMaterialValues::ParameterName' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SetMaterialValues, Index_0) == 0x000008, "Member 'BP_LobbyCharacterWorldSlot_C_SetMaterialValues::Index_0' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SetMaterialValues, Blue_Team) == 0x00000C, "Member 'BP_LobbyCharacterWorldSlot_C_SetMaterialValues::Blue_Team' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SetMaterialValues, Red_Team) == 0x00001C, "Member 'BP_LobbyCharacterWorldSlot_C_SetMaterialValues::Red_Team' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SetMaterialValues, Yellow_Team) == 0x00002C, "Member 'BP_LobbyCharacterWorldSlot_C_SetMaterialValues::Yellow_Team' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SetMaterialValues, Temp_byte_Variable) == 0x00003C, "Member 'BP_LobbyCharacterWorldSlot_C_SetMaterialValues::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SetMaterialValues, Temp_struct_Variable) == 0x000040, "Member 'BP_LobbyCharacterWorldSlot_C_SetMaterialValues::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SetMaterialValues, K2Node_Select_Default) == 0x000050, "Member 'BP_LobbyCharacterWorldSlot_C_SetMaterialValues::K2Node_Select_Default' has a wrong offset!");

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.ShowOccupiedCosmetics
// 0x0038 (0x0038 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     Team;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics) == 0x000008, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics) == 0x000038, "Wrong size on BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics, bNewVisibility) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics::bNewVisibility' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics, Team) == 0x000001, "Member 'BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics::Team' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics, Temp_byte_Variable) == 0x000002, "Member 'BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics, Temp_object_Variable) == 0x000008, "Member 'BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics, Temp_object_Variable_1) == 0x000010, "Member 'BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics, Temp_object_Variable_2) == 0x000018, "Member 'BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics, Temp_object_Variable_3) == 0x000020, "Member 'BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000028, "Member 'BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics, K2Node_Select_Default) == 0x000030, "Member 'BP_LobbyCharacterWorldSlot_C_ShowOccupiedCosmetics::K2Node_Select_Default' has a wrong offset!");

// Function BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C.SpawnNeighborPreview
// 0x0100 (0x0100 - 0x0000)
struct BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview final
{
public:
	class ABP_NeighborPreviewActor_C*             SpawnedActor;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           NeighborIdentifier;                                // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UNeighborSkinDefinition> CallFunc_GetSkinDefinitionForNeighbor_ReturnValue; // 0x0010(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNeighborSkinDefinition*                K2Node_DynamicCast_AsNeighbor_Skin_Definition;     // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue;      // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsActor;                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0080(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_NeighborPreviewActor_C*             K2Node_DynamicCast_AsBP_Neighbor_Preview_Actor;    // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview) == 0x000010, "Wrong alignment on BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview");
static_assert(sizeof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview) == 0x000100, "Wrong size on BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, SpawnedActor) == 0x000000, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::SpawnedActor' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, NeighborIdentifier) == 0x000008, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::NeighborIdentifier' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, CallFunc_GetSkinDefinitionForNeighbor_ReturnValue) == 0x000010, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::CallFunc_GetSkinDefinitionForNeighbor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000038, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000040, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, K2Node_DynamicCast_AsNeighbor_Skin_Definition) == 0x000048, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::K2Node_DynamicCast_AsNeighbor_Skin_Definition' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, CallFunc_LoadClassAsset_Blocking_ReturnValue) == 0x000058, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::CallFunc_LoadClassAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, K2Node_ClassDynamicCast_AsActor) == 0x000060, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::K2Node_ClassDynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, K2Node_ClassDynamicCast_bSuccess) == 0x000068, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000070, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000080, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000E0, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000E8, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, K2Node_DynamicCast_AsBP_Neighbor_Preview_Actor) == 0x0000F0, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::K2Node_DynamicCast_AsBP_Neighbor_Preview_Actor' has a wrong offset!");
static_assert(offsetof(BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview, K2Node_DynamicCast_bSuccess_1) == 0x0000F8, "Member 'BP_LobbyCharacterWorldSlot_C_SpawnNeighborPreview::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

}

