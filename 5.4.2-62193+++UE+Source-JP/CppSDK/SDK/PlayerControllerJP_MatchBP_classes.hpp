#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerControllerJP_MatchBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "JP_structs.hpp"
#include "JP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerControllerJP_MatchBP.PlayerControllerJP_MatchBP_C
// 0x0100 (0x0B40 - 0x0A40)
class APlayerControllerJP_MatchBP_C final : public APlayerControllerJP_Match
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAC_AnnouncerListener_C*                AC_AnnouncerListener;                              // 0x0A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AimAssistDelegateTester_C*          BP_AimAssistDelegateTester;                        // 0x0A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FrictionComponent_C*                BP_FrictionComponentInput;                         // 0x0A58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AimCompensatorComponent_C*          BP_AimCompensatorComponent;                        // 0x0A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharacterEmoteComponent*               CharacterEmote;                                    // 0x0A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPlayerControllerJP_MatchBPComponent_C* PlayerControllerJP_MatchBPComponent;               // 0x0A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PingControllerComponent_C*          BP_PingControllerComponent;                        // 0x0A78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPrintMessageWI_C*                      PrintMessageWI;                                    // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerStartJP_C*                       PlayerStart;                                       // 0x0A88(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Item_Tutorials_seen;                               // 0x0A90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector2D                              LookStickValue;                                    // 0x0AA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWI_IngameScoreboard_C*                 WI_IngameScoreboard;                               // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ToBecomeSpectatorTimerHandle;                      // 0x0AB8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UUserWidget*>                    AffectedWidgets;                                   // 0x0AC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FTimerHandle                           EmoteTimer;                                        // 0x0AD0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_3rdPersonCamera_C*                  EmoteCamera;                                       // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           MontageEmotes;                                     // 0x0AE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayAbilitySpecHandle             CurrentMontage;                                    // 0x0AF0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF4[0x4];                                      // 0x0AF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ResidentCharacter_C*                LastResidentCharacter;                             // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             IndicatorsHidden;                                  // 0x0B00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             InventoryOpened;                                   // 0x0B10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CurrentVoiceChannelIsTeam;                         // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideIndicatorsChat;                                // 0x0B21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B22[0x6];                                      // 0x0B22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeSinceProximityVoiceChatTriggered;              // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeSinceTeamVoiceChatTriggered;                   // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsProximityVoiceChatPressed;                       // 0x0B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTeamVoiceChatPressed;                            // 0x0B39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateVoiceChatUponDeath();
	void AddSelfToTwitchVoteManager();
	void AddToTwitchVoteManager();
	void ApplyHighlight(class ABP_HouseEssential_Cube_C* NewParam);
	void ApplyStamina(double StaminaAmount);
	void CheatBecomeSpectator();
	void Cheattoggleoutlines();
	void CheckIfProximityVoiceChatWasPressed();
	void CheckIfProximityVoiceChatWasReleased();
	void CheckIfTeamVoiceChatWasPressed();
	void CheckIfTeamVoiceChatWasReleased();
	void ClearChat();
	void ClearChatCheat();
	void DisableVans();
	void EndBowie();
	void EndlessDay();
	void EndProximityVoiceChat();
	void EndTeamVoiceChat();
	void ExecuteCommandOnServer(const class FString& Command);
	void ExecuteUbergraph_PlayerControllerJP_MatchBP(int32 EntryPoint);
	void GetFirstVisibleChatWidget(class UWI_Chat_C** Return);
	void GiveAmmoToPlayer();
	void Hide_Water_Tap_Marker();
	void HideHUDAndWidgets();
	void HideIndicatorsAndChat();
	void IndicatorsHidden__DelegateSignature();
	void InpActEvt_IA_ActivateVoice_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_ActivateVoiceTeam_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_FocusTextChat_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_HideUI_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_ItemWheel_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_ItemWheel_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_LookStickUI_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_LookStickUI_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_NumPadFour_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_NumPadSeven_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_O_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_T_K2Node_InputDebugKeyEvent_1(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_Y_K2Node_InputDebugKeyEvent_0(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InstantRespawnResources();
	void IntroHasFinished(bool* Active);
	void InventoryOpened__DelegateSignature(class APlayerController* PlayerController);
	bool IsHousesLoaded();
	bool IsPlayingAsResidentCharacter();
	void IsTutorialSeen(const class FText& Title, bool* Already_Seen);
	bool IsVoiceChatToggle();
	void KillPlayer();
	void LocallySetViewTarget(class AActor* NewViewTarget, float BlendTime, EViewTargetBlendFunction BlendFunc);
	void LoginTwitch();
	void Multicast_Cheat_HideDeliveryWidget();
	void MultiplyAttackDamage(double New_Attack_Damage_Multiplier);
	void OnDefaultFOVChanged();
	void OnEnded_51B04FC04DE09657FF5FDCB12676D1BD();
	void OnEnded_CBCD68FE45099CFB60FD048DDFC3F22C();
	void OnGameEnded();
	void OnLoaded_4E970563495BF36528E877A0AA3D66B4(TSubclassOf<class UObject> Loaded);
	void OnLoaded_B6C4566948EA4BE690600D9559E672DA(TSubclassOf<class UObject> Loaded);
	void OverrideAllCooldowns(double NewCooldown);
	void Owner_CheatClearChat();
	void Owner_Send_Item_Pick_Up_Message(const struct FGameplayTag& ItemTag);
	void Owner_Send_Player_Left_Message(class APlayerState* PlayerWhoLeft);
	void Owner_SendEvent(const struct FS_EventMessageParams& Message);
	void Owner_SendImportantNotification(const struct FS_ImportantNotificationReceivedMessage& ImportantNotification);
	void Owner_SendMessage(const struct FPlayerMessage& Message_Specification);
	void Owner_SetResourceForlateJoin(double ResourceAmount);
	void Owner_ToggleOutlines();
	void Owner_UpdateResourcesInTeamBar(int32 ResourceCount, uint8 Team);
	void OwnerSendItemPickUpMessageToPlayerController(const struct FGameplayTag& ItemTag);
	void OwnerSendMessageToPlayerController(const struct FPlayerMessage& Message);
	void OwnerSendPlayerLeftMessage(class APlayerState* PlayerWhoLeft);
	void PlayMontage(class UClass* MontageEmote);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveTick(float DeltaSeconds);
	void RemoveHighlight(class ABP_HouseEssential_Cube_C* NewParam);
	void RestartChatIntegration();
	void RunTwitchLogin();
	void Server_Add_Self_to_Twitch_Vote_Manager();
	void Server_DisableVans();
	void Server_Flush_Net_Dormancy_For_Actor_Instance(class AActor* ActorClass);
	void Server_Flush_Net_Dormancy_For_All_Actors_Of_Class(TSubclassOf<class AActor> ActorClass);
	void Server_InventoryOpened(class APlayerController* PC);
	void Server_Play_Montage(class UClass* MontageEmote);
	void Server_RunTwitchIntegration();
	void Server_RunTwitchVote();
	void Server_SpawnTwitchReward(const TArray<class UClass*>& Rewards, const struct FTeam& Team);
	void Server_Stop_Montage();
	void Server_UpdateTwitchVotes(int32 Votes, ETeamType Team);
	void SpawnTwitchReward(const TArray<class UClass*>& Rewards, const struct FTeam& Team);
	void StartBalloonDrop();
	void StartDelivery();
	void StartDriveBy(const class FString& TeamToAttackString);
	void StartProximityVoiceChat();
	void StartSuddenDeathEvent();
	void StartTeamVoiceChat();
	void StartTwitchIntegration();
	void StartTwitchVote();
	void StartTwitchVoteFromVoteManager();
	void StopMontage();
	void TakeDamage(double DamageAmount);
	void TeamVoiceChatPressed();
	void TeamVoiceChatReleased();
	void Toggle_Decal_Highlight(class UAC_POI_C* Decal, bool Show);
	void Toggle_Flower_Highlight(class ABP_Flower_C* Flower, bool Show);
	void Toggle_Garbage_Highlight(class ABP_GarbageItem_C* Garbage, bool Show);
	void Toggle_Hedge_Highlight(class ABP_Hedge_Branch_C* Hedge, bool Show);
	void Toggle_POI_Marker(class UAC_POI_C* Marker, bool Hide);
	void ToggleEffect(class UClass* Type);
	void ToggleInfiniteHealth();
	void ToggleInfiniteStamina();
	void ToggleSafeHighlight(class ABP_CaptureTheFlagDeedSafe_C* Safe, bool Show);
	void ToggleTimeOfDay();
	void ToggleWatertapHighlight(class ABP_WaterTap_C* WaterTap, bool Show);
	void VoiceChatPressed();
	void VoiceChatReleased();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerControllerJP_MatchBP_C">();
	}
	static class APlayerControllerJP_MatchBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerControllerJP_MatchBP_C>();
	}
};
static_assert(alignof(APlayerControllerJP_MatchBP_C) == 0x000008, "Wrong alignment on APlayerControllerJP_MatchBP_C");
static_assert(sizeof(APlayerControllerJP_MatchBP_C) == 0x000B40, "Wrong size on APlayerControllerJP_MatchBP_C");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, UberGraphFrame) == 0x000A40, "Member 'APlayerControllerJP_MatchBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, AC_AnnouncerListener) == 0x000A48, "Member 'APlayerControllerJP_MatchBP_C::AC_AnnouncerListener' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, BP_AimAssistDelegateTester) == 0x000A50, "Member 'APlayerControllerJP_MatchBP_C::BP_AimAssistDelegateTester' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, BP_FrictionComponentInput) == 0x000A58, "Member 'APlayerControllerJP_MatchBP_C::BP_FrictionComponentInput' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, BP_AimCompensatorComponent) == 0x000A60, "Member 'APlayerControllerJP_MatchBP_C::BP_AimCompensatorComponent' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, CharacterEmote) == 0x000A68, "Member 'APlayerControllerJP_MatchBP_C::CharacterEmote' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, PlayerControllerJP_MatchBPComponent) == 0x000A70, "Member 'APlayerControllerJP_MatchBP_C::PlayerControllerJP_MatchBPComponent' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, BP_PingControllerComponent) == 0x000A78, "Member 'APlayerControllerJP_MatchBP_C::BP_PingControllerComponent' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, PrintMessageWI) == 0x000A80, "Member 'APlayerControllerJP_MatchBP_C::PrintMessageWI' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, PlayerStart) == 0x000A88, "Member 'APlayerControllerJP_MatchBP_C::PlayerStart' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, Item_Tutorials_seen) == 0x000A90, "Member 'APlayerControllerJP_MatchBP_C::Item_Tutorials_seen' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, LookStickValue) == 0x000AA0, "Member 'APlayerControllerJP_MatchBP_C::LookStickValue' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, WI_IngameScoreboard) == 0x000AB0, "Member 'APlayerControllerJP_MatchBP_C::WI_IngameScoreboard' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, ToBecomeSpectatorTimerHandle) == 0x000AB8, "Member 'APlayerControllerJP_MatchBP_C::ToBecomeSpectatorTimerHandle' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, AffectedWidgets) == 0x000AC0, "Member 'APlayerControllerJP_MatchBP_C::AffectedWidgets' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, EmoteTimer) == 0x000AD0, "Member 'APlayerControllerJP_MatchBP_C::EmoteTimer' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, EmoteCamera) == 0x000AD8, "Member 'APlayerControllerJP_MatchBP_C::EmoteCamera' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, MontageEmotes) == 0x000AE0, "Member 'APlayerControllerJP_MatchBP_C::MontageEmotes' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, CurrentMontage) == 0x000AF0, "Member 'APlayerControllerJP_MatchBP_C::CurrentMontage' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, LastResidentCharacter) == 0x000AF8, "Member 'APlayerControllerJP_MatchBP_C::LastResidentCharacter' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, IndicatorsHidden) == 0x000B00, "Member 'APlayerControllerJP_MatchBP_C::IndicatorsHidden' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, InventoryOpened) == 0x000B10, "Member 'APlayerControllerJP_MatchBP_C::InventoryOpened' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, CurrentVoiceChannelIsTeam) == 0x000B20, "Member 'APlayerControllerJP_MatchBP_C::CurrentVoiceChannelIsTeam' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, HideIndicatorsChat) == 0x000B21, "Member 'APlayerControllerJP_MatchBP_C::HideIndicatorsChat' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, TimeSinceProximityVoiceChatTriggered) == 0x000B28, "Member 'APlayerControllerJP_MatchBP_C::TimeSinceProximityVoiceChatTriggered' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, TimeSinceTeamVoiceChatTriggered) == 0x000B30, "Member 'APlayerControllerJP_MatchBP_C::TimeSinceTeamVoiceChatTriggered' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, IsProximityVoiceChatPressed) == 0x000B38, "Member 'APlayerControllerJP_MatchBP_C::IsProximityVoiceChatPressed' has a wrong offset!");
static_assert(offsetof(APlayerControllerJP_MatchBP_C, IsTeamVoiceChatPressed) == 0x000B39, "Member 'APlayerControllerJP_MatchBP_C::IsTeamVoiceChatPressed' has a wrong offset!");

}

