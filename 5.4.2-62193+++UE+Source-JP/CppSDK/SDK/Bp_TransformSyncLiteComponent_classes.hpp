#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bp_TransformSyncLiteComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Bp_TransformSyncLiteComponent.Bp_TransformSyncLiteComponent_C
// 0x0230 (0x02D0 - 0x00A0)
class UBp_TransformSyncLiteComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPrimitiveComponent*                    OwningComponent;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize10                  WorldLocation;                                     // 0x00B0(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize10                  WorldRotation;                                     // 0x00C8(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocal;                                           // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    WorldLinearVelocity;                               // 0x00E8(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize                    WorldAngularVelocity;                              // 0x0100(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Disabled;                                          // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InterpolationSpeed;                                // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    RelativeComponent;                                 // 0x0128(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SendPhysicsDataFPS;                                // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReceivePhysicsDataFPS;                             // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SyncSimulatingState;                               // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SnapToLocationOnSleep;                             // 0x0141(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SleepDelayAuthority;                               // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SleepDelayClients;                                 // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentWorldLinearVelocity;                        // 0x0158(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentWorldAngularVelocity;                       // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize10                  RelativeLocation;                                  // 0x0188(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize10                  RelativeRotation;                                  // 0x01A0(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    RelativeAngularVelocity;                           // 0x01C0(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize                    RelativeLinearVelocity;                            // 0x01D8(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentRelativeLinearVelocity;                     // 0x01F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentRelativeAngularVelocity;                    // 0x0208(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentRelativeLocation;                           // 0x0220(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRelativeRotation;                           // 0x0238(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseUpdateRateOptimization;                         // 0x0250(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        UpdateRateInterval;                                // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UpdateRateStepDistance;                            // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpdateRateSteps;                                   // 0x0268(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SendPhysicsData1FPS;                               // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SendPhysicsData2FPS;                               // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SendPhysicsData3FPS;                               // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SendPhysicsData4FPS;                               // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentTickGroup;                                  // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReceivePhysicsData1FPS;                            // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReceivePhysicsData2FPS;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReceivePhysicsData3FPS;                            // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReceivePhysicsData4FPS;                            // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocalDeltaSeconds;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSimulating;                                      // 0x02C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreNextSleepEvent;                              // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C2[0x6];                                      // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinDistanceSquaredToSync;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActualSleep();
	void BindSleepEvent();
	void BindUpdateRate();
	void BindWakeEvent();
	int32 CalculateTickGroup(double Distance);
	void ClearSleepTimer();
	void ComponentSleep(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	void ComponentWake(class UPrimitiveComponent* WakingComponent, class FName BoneName);
	void Enable_Sync(bool Enabled_0);
	void EnableRelativeSync(class UPrimitiveComponent* RelativeComponent_0);
	void ExecuteUbergraph_Bp_TransformSyncLiteComponent(int32 EntryPoint);
	double GetDefaultTickRate();
	bool IsLocallyControlled();
	void OnRep_IsSimulating();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ResetCoordinates(class UPrimitiveComponent* RelativeComponent_0);
	void SelectReceivePhysicsDataFPS(int32 TickGroup, double* TickInterval);
	void SelectSendPhysicsDataFPS(int32 TickGroup, double* TickInterval);
	void SendTransforms();
	void SetAngularVelocity(const struct FVector& Velocity);
	void SetLinearVelocity(const struct FVector& Velocity);
	void SetOwner(class AActor* NewOwner);
	void SetRelativeModeServer(class UPrimitiveComponent* RelativeComponent_0);
	void SetSimulatingServer(bool IsSimulating_0);
	void Sleep_Function();
	void UnbindSleepEvent();
	void UnbindUpdateRate();
	void UnbindWakeEvent();
	void UpdateRateOptimization();
	void UpdateRelativeTransformsServer(const struct FVector_NetQuantize10& InLocation, const struct FVector_NetQuantize10& InRotation, const struct FVector_NetQuantize& LinearVelocity, const struct FVector_NetQuantize& AngularVelocity);
	void UpdateTransforms();
	void UpdateWorldTransformsServer(const struct FVector_NetQuantize10& InLocation, const struct FVector_NetQuantize10& InRotation, const struct FVector_NetQuantize& LinearVelocity, const struct FVector_NetQuantize& AngularVelocity);
	void WakeFunction();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Bp_TransformSyncLiteComponent_C">();
	}
	static class UBp_TransformSyncLiteComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBp_TransformSyncLiteComponent_C>();
	}
};
static_assert(alignof(UBp_TransformSyncLiteComponent_C) == 0x000008, "Wrong alignment on UBp_TransformSyncLiteComponent_C");
static_assert(sizeof(UBp_TransformSyncLiteComponent_C) == 0x0002D0, "Wrong size on UBp_TransformSyncLiteComponent_C");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBp_TransformSyncLiteComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, OwningComponent) == 0x0000A8, "Member 'UBp_TransformSyncLiteComponent_C::OwningComponent' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, WorldLocation) == 0x0000B0, "Member 'UBp_TransformSyncLiteComponent_C::WorldLocation' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, WorldRotation) == 0x0000C8, "Member 'UBp_TransformSyncLiteComponent_C::WorldRotation' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, IsLocal) == 0x0000E0, "Member 'UBp_TransformSyncLiteComponent_C::IsLocal' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, WorldLinearVelocity) == 0x0000E8, "Member 'UBp_TransformSyncLiteComponent_C::WorldLinearVelocity' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, WorldAngularVelocity) == 0x000100, "Member 'UBp_TransformSyncLiteComponent_C::WorldAngularVelocity' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, Disabled) == 0x000118, "Member 'UBp_TransformSyncLiteComponent_C::Disabled' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, InterpolationSpeed) == 0x000120, "Member 'UBp_TransformSyncLiteComponent_C::InterpolationSpeed' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, RelativeComponent) == 0x000128, "Member 'UBp_TransformSyncLiteComponent_C::RelativeComponent' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, SendPhysicsDataFPS) == 0x000130, "Member 'UBp_TransformSyncLiteComponent_C::SendPhysicsDataFPS' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, ReceivePhysicsDataFPS) == 0x000138, "Member 'UBp_TransformSyncLiteComponent_C::ReceivePhysicsDataFPS' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, SyncSimulatingState) == 0x000140, "Member 'UBp_TransformSyncLiteComponent_C::SyncSimulatingState' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, SnapToLocationOnSleep) == 0x000141, "Member 'UBp_TransformSyncLiteComponent_C::SnapToLocationOnSleep' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, SleepDelayAuthority) == 0x000148, "Member 'UBp_TransformSyncLiteComponent_C::SleepDelayAuthority' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, SleepDelayClients) == 0x000150, "Member 'UBp_TransformSyncLiteComponent_C::SleepDelayClients' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, CurrentWorldLinearVelocity) == 0x000158, "Member 'UBp_TransformSyncLiteComponent_C::CurrentWorldLinearVelocity' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, CurrentWorldAngularVelocity) == 0x000170, "Member 'UBp_TransformSyncLiteComponent_C::CurrentWorldAngularVelocity' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, RelativeLocation) == 0x000188, "Member 'UBp_TransformSyncLiteComponent_C::RelativeLocation' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, RelativeRotation) == 0x0001A0, "Member 'UBp_TransformSyncLiteComponent_C::RelativeRotation' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, Enabled) == 0x0001B8, "Member 'UBp_TransformSyncLiteComponent_C::Enabled' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, RelativeAngularVelocity) == 0x0001C0, "Member 'UBp_TransformSyncLiteComponent_C::RelativeAngularVelocity' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, RelativeLinearVelocity) == 0x0001D8, "Member 'UBp_TransformSyncLiteComponent_C::RelativeLinearVelocity' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, CurrentRelativeLinearVelocity) == 0x0001F0, "Member 'UBp_TransformSyncLiteComponent_C::CurrentRelativeLinearVelocity' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, CurrentRelativeAngularVelocity) == 0x000208, "Member 'UBp_TransformSyncLiteComponent_C::CurrentRelativeAngularVelocity' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, CurrentRelativeLocation) == 0x000220, "Member 'UBp_TransformSyncLiteComponent_C::CurrentRelativeLocation' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, CurrentRelativeRotation) == 0x000238, "Member 'UBp_TransformSyncLiteComponent_C::CurrentRelativeRotation' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, UseUpdateRateOptimization) == 0x000250, "Member 'UBp_TransformSyncLiteComponent_C::UseUpdateRateOptimization' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, UpdateRateInterval) == 0x000258, "Member 'UBp_TransformSyncLiteComponent_C::UpdateRateInterval' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, UpdateRateStepDistance) == 0x000260, "Member 'UBp_TransformSyncLiteComponent_C::UpdateRateStepDistance' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, UpdateRateSteps) == 0x000268, "Member 'UBp_TransformSyncLiteComponent_C::UpdateRateSteps' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, SendPhysicsData1FPS) == 0x000270, "Member 'UBp_TransformSyncLiteComponent_C::SendPhysicsData1FPS' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, SendPhysicsData2FPS) == 0x000278, "Member 'UBp_TransformSyncLiteComponent_C::SendPhysicsData2FPS' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, SendPhysicsData3FPS) == 0x000280, "Member 'UBp_TransformSyncLiteComponent_C::SendPhysicsData3FPS' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, SendPhysicsData4FPS) == 0x000288, "Member 'UBp_TransformSyncLiteComponent_C::SendPhysicsData4FPS' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, CurrentTickGroup) == 0x000290, "Member 'UBp_TransformSyncLiteComponent_C::CurrentTickGroup' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, ReceivePhysicsData1FPS) == 0x000298, "Member 'UBp_TransformSyncLiteComponent_C::ReceivePhysicsData1FPS' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, ReceivePhysicsData2FPS) == 0x0002A0, "Member 'UBp_TransformSyncLiteComponent_C::ReceivePhysicsData2FPS' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, ReceivePhysicsData3FPS) == 0x0002A8, "Member 'UBp_TransformSyncLiteComponent_C::ReceivePhysicsData3FPS' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, ReceivePhysicsData4FPS) == 0x0002B0, "Member 'UBp_TransformSyncLiteComponent_C::ReceivePhysicsData4FPS' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, LocalDeltaSeconds) == 0x0002B8, "Member 'UBp_TransformSyncLiteComponent_C::LocalDeltaSeconds' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, IsSimulating) == 0x0002C0, "Member 'UBp_TransformSyncLiteComponent_C::IsSimulating' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, IgnoreNextSleepEvent) == 0x0002C1, "Member 'UBp_TransformSyncLiteComponent_C::IgnoreNextSleepEvent' has a wrong offset!");
static_assert(offsetof(UBp_TransformSyncLiteComponent_C, MinDistanceSquaredToSync) == 0x0002C8, "Member 'UBp_TransformSyncLiteComponent_C::MinDistanceSquaredToSync' has a wrong offset!");

}

