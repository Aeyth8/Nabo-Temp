#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bp_ThrowableProp_Small

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Bp_ThrowableProp_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Bp_ThrowableProp_Small.Bp_ThrowableProp_Small_C
// 0x0040 (0x0540 - 0x0500)
class ABp_ThrowableProp_Small_C : public ABp_ThrowableProp_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Bp_ThrowableProp_Small_C;           // 0x04F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   PlayerCollider;                                    // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          BeingFired;                                        // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CenterOfMassOffset;                                // 0x0510(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviewCenterOfMass;                               // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideInteractableMeshSize;                      // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReleaseToggle;                                     // 0x052A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnablePlayerCollision;                             // 0x052B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReleasingCharacterTemp;                            // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            PawnCollisionResponseAfterRelease;                 // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Bp_ThrowableProp_Small_StaticMeshComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Bp_ThrowableProp_Small_StaticMeshComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	bool CanActivateTrap();
	void CheckPlayerCollision();
	void ClearForgetReleaser();
	void ClearWakeCollisionTimer();
	void Drop_Object();
	void ExecuteUbergraph_Bp_ThrowableProp_Small(int32 EntryPoint);
	void ForgetReleaser();
	struct FVector GetLocalExtent(class UStaticMeshComponent* InputValue);
	bool IsOverlappingPlayer();
	void Multi_Push_Audio();
	void PlayerCollision(bool Enabled);
	void ResetCollisionDoOnce();
	void ServerPush(class AActor* TargetActor, const struct FVector& LaunchVelocity);
	void SetDefaultCenterOfMass();
	void SetReleaserTemp(class UObject* Character);
	void Sleep(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	void Try_Drop_Object(class ACharacter* Character);
	void UserConstructionScript();
	void Wake(class UPrimitiveComponent* WakingComponent, class FName BoneName);
	void GrippedLocal(class ACharacter* GrippingCharacter);
	void ReceiveBeginPlay();
	void Released_Local(class ACharacter* ReleasingCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Bp_ThrowableProp_Small_C">();
	}
	static class ABp_ThrowableProp_Small_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABp_ThrowableProp_Small_C>();
	}
};
static_assert(alignof(ABp_ThrowableProp_Small_C) == 0x000010, "Wrong alignment on ABp_ThrowableProp_Small_C");
static_assert(sizeof(ABp_ThrowableProp_Small_C) == 0x000540, "Wrong size on ABp_ThrowableProp_Small_C");
static_assert(offsetof(ABp_ThrowableProp_Small_C, UberGraphFrame_Bp_ThrowableProp_Small_C) == 0x0004F8, "Member 'ABp_ThrowableProp_Small_C::UberGraphFrame_Bp_ThrowableProp_Small_C' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Small_C, PlayerCollider) == 0x000500, "Member 'ABp_ThrowableProp_Small_C::PlayerCollider' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Small_C, BeingFired) == 0x000508, "Member 'ABp_ThrowableProp_Small_C::BeingFired' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Small_C, CenterOfMassOffset) == 0x000510, "Member 'ABp_ThrowableProp_Small_C::CenterOfMassOffset' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Small_C, PreviewCenterOfMass) == 0x000528, "Member 'ABp_ThrowableProp_Small_C::PreviewCenterOfMass' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Small_C, OverrideInteractableMeshSize) == 0x000529, "Member 'ABp_ThrowableProp_Small_C::OverrideInteractableMeshSize' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Small_C, ReleaseToggle) == 0x00052A, "Member 'ABp_ThrowableProp_Small_C::ReleaseToggle' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Small_C, EnablePlayerCollision) == 0x00052B, "Member 'ABp_ThrowableProp_Small_C::EnablePlayerCollision' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Small_C, ReleasingCharacterTemp) == 0x000530, "Member 'ABp_ThrowableProp_Small_C::ReleasingCharacterTemp' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Small_C, PawnCollisionResponseAfterRelease) == 0x000538, "Member 'ABp_ThrowableProp_Small_C::PawnCollisionResponseAfterRelease' has a wrong offset!");

}

