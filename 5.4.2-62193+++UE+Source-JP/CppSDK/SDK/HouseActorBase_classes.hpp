#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HouseActorBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "JP_structs.hpp"
#include "E_ImpactEffect_structs.hpp"
#include "E_Tools_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "E_MaterialTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass HouseActorBase.HouseActorBase_C
// 0x0160 (0x03F0 - 0x0290)
class AHouseActorBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWC_FixableObject_C*                    WC_FixableObject;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereDistanceScalingWidget;                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDistanceScalingWidgetComponent*        DistanceScalingWidget;                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAssisterTrackingComponent_C*           AssisterTrackingComponent;                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_Indicator_C*                        AC_Indicator;                                      // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioBrokenState;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioImpact1;                                      // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponentIW*              AbilitySystemComponentIW;                          // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMeshBounceComponent_C*                 MeshBounceComponent;                               // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTeam                                  Team;                                              // 0x02E8(0x0038)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor)
	bool                                          Broken;                                            // 0x0320(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	E_Tools                                       ToolRequiredToSabotage;                            // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Tools                                       ToolRequiredToRepair;                              // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323[0x5];                                      // 0x0323(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemCompatibleInfoWI_C*                ItemCompatibleWI;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        DurabilityCostForTool;                             // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DurabilityCostWhenHit;                             // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnlyVisibleToTeam;                                 // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewTeamID;                                         // 0x0341(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_342[0x6];                                      // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         ImpactParticleSystem;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         LastSetHealth;                                     // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             BrokenSound;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RepairedSound;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RepairSound;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DamageSound;                                       // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_Tools                                       RequiredTool;                                      // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Score;                                             // 0x0380(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MorphTarget;                                       // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         SkeletalMeshsToMorph;                              // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class FName                                   MorphTargetName;                                   // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         RepairParticleSystem;                              // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AttributeChanged;                                  // 0x03B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CombatParticipantTag;                              // 0x03B4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CombatParticipantName;                             // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UEconomyDefinition*                     Economy_Reward_On_Sabotaged;                       // 0x03D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Grant_Reward_on_Sabotaged;                         // 0x03D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasInteractOutline;                                // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DA[0x6];                                      // 0x03DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DisableSkeletalMeshesTickTimer;                    // 0x03E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyTeamColors;                                   // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddRepairness(float Magnitude);
	void Audio_Damage_Impact();
	void Audio_Repair_Impact();
	void BndEvt__HouseActorBase_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__HouseActorBase_Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CancelInteraction(class UPrimitiveComponent* InteractionComponent);
	void Cosmetics_State_Repaired();
	void Cosmetics_State_Sabotaged();
	void CreateKillInfo(const struct FCombatParticipant& Killer, const struct FKillMethod& Method, struct FKillGameplayMessage* KillGameplayMessage);
	void DebugPrintHealth(double MinHealth, double MaxHealth, double Normalized);
	void Event_On_Team_Replicated_Cosmetic(const struct FTeam& New_Team);
	void ExecuteUbergraph_HouseActorBase(int32 EntryPoint);
	void GetDurabilityCostWhenHit(double* Amount);
	void GetInteractSound();
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void GetNewWidgetColor(struct FSlateColor* NewColor);
	void GetOptionalText(class FText* Return, class FText* Optional_Second_Line);
	void GetPriority(int32* Priority);
	void GetWidgetLocation(struct FVector* Location);
	void HideInteractionWidget(bool* Return);
	void HitInterface(const struct FVector& Direction);
	void House_Actor_Impact_Cosmetics(const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void InteractableCancelInteraction(class UPrimitiveComponent* InteractionComponent);
	void InteractPressed(class AActor* InteractingActor);
	void InteractReleased(class AActor* InteractingActor);
	void IsInFocus(class AActor* Focusing_Actor);
	void IsInteractable(bool* Interactable);
	void IsSabotaged(bool* Return, class AActor** SabotagingActor, E_Tools* RequiredTool_0, double* DurabilityCost);
	void ItemHighlight();
	void LocalSetTeamColor(bool IsEnemyTeam);
	void MeleeHit(const class AActor*& AttackingActor);
	void Morph_Target(double Amount, class USkeletalMeshComponent* Target);
	void Multi_Cosmetic_Break();
	void Multi_Cosmetics_Repair();
	void Multicast_BroadcastKill(const struct FKillGameplayMessage& Message);
	void OnDamaged(float Delta, class AActor* Causer, const struct FCombatParticipant& CombatParticipant, const struct FKillMethod& KillMethod, const struct FVector_NetQuantize& Location);
	void OnEnded_23C032E44EBD8AE657F639BBDCE00F59();
	void OnEnded_249C5323452A6DFA7426E483A8F850BB();
	void OnEnded_3D4C06E64CEAE3AFDB663BB915BE23B7();
	void OnHealthChanged(float Health, float MaxHealth);
	void OnRep_Broken();
	void OnRep_NewTeamID();
	void OnRep_Team();
	void PostInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void PreInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void ReceiveBeginPlay();
	void RegisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor);
	void ReloadAfterHousesLoaded(bool* Return);
	void Repair();
	void Sabotage(class AActor* SabotagingActor);
	void SetActorReferenceInHealthbar();
	void SetHoveredComponent(class UInteractionComponent_C* HoveredComponent, bool* Void);
	void SetInteractable(bool Interactable);
	void SetOutlineVisibility(bool InVisible);
	void SetRepairWidgetVisibility(bool Visible);
	void TakeDamage();
	void Toggle_Focus_Highlight(bool Show);
	void Toggle_Item_Highlight(bool Show);
	void TryGrantSabotageReward(class AActor* RecipientActor);
	void UnregisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor);
	void UpdateProgressbar(double Value, double Max);
	void UpdateTeamAndID();

	float GetInteractionDuration(class UPrimitiveComponent* InteractionComponent) const;
	void GetPostInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	void GetPreInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	struct FTeam GetTeam() const;
	uint8 GetTeamID() const;
	bool HasTeam() const;
	bool IsAvailableForEnemyTeam(class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForInteraction(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent) const;
	bool IsLocalTeam() const;
	bool IsNotLocalTeam() const;
	bool TakeDamageFromAllTeams() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HouseActorBase_C">();
	}
	static class AHouseActorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHouseActorBase_C>();
	}
};
static_assert(alignof(AHouseActorBase_C) == 0x000008, "Wrong alignment on AHouseActorBase_C");
static_assert(sizeof(AHouseActorBase_C) == 0x0003F0, "Wrong size on AHouseActorBase_C");
static_assert(offsetof(AHouseActorBase_C, UberGraphFrame) == 0x000290, "Member 'AHouseActorBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, WC_FixableObject) == 0x000298, "Member 'AHouseActorBase_C::WC_FixableObject' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, SphereDistanceScalingWidget) == 0x0002A0, "Member 'AHouseActorBase_C::SphereDistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, DistanceScalingWidget) == 0x0002A8, "Member 'AHouseActorBase_C::DistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, AssisterTrackingComponent) == 0x0002B0, "Member 'AHouseActorBase_C::AssisterTrackingComponent' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, AC_Indicator) == 0x0002B8, "Member 'AHouseActorBase_C::AC_Indicator' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, AudioBrokenState) == 0x0002C0, "Member 'AHouseActorBase_C::AudioBrokenState' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, AudioImpact1) == 0x0002C8, "Member 'AHouseActorBase_C::AudioImpact1' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, AbilitySystemComponentIW) == 0x0002D0, "Member 'AHouseActorBase_C::AbilitySystemComponentIW' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, MeshBounceComponent) == 0x0002D8, "Member 'AHouseActorBase_C::MeshBounceComponent' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, DefaultSceneRoot) == 0x0002E0, "Member 'AHouseActorBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, Team) == 0x0002E8, "Member 'AHouseActorBase_C::Team' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, Broken) == 0x000320, "Member 'AHouseActorBase_C::Broken' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, ToolRequiredToSabotage) == 0x000321, "Member 'AHouseActorBase_C::ToolRequiredToSabotage' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, ToolRequiredToRepair) == 0x000322, "Member 'AHouseActorBase_C::ToolRequiredToRepair' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, ItemCompatibleWI) == 0x000328, "Member 'AHouseActorBase_C::ItemCompatibleWI' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, DurabilityCostForTool) == 0x000330, "Member 'AHouseActorBase_C::DurabilityCostForTool' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, DurabilityCostWhenHit) == 0x000338, "Member 'AHouseActorBase_C::DurabilityCostWhenHit' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, OnlyVisibleToTeam) == 0x000340, "Member 'AHouseActorBase_C::OnlyVisibleToTeam' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, NewTeamID) == 0x000341, "Member 'AHouseActorBase_C::NewTeamID' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, ImpactParticleSystem) == 0x000348, "Member 'AHouseActorBase_C::ImpactParticleSystem' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, LastSetHealth) == 0x000350, "Member 'AHouseActorBase_C::LastSetHealth' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, BrokenSound) == 0x000358, "Member 'AHouseActorBase_C::BrokenSound' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, RepairedSound) == 0x000360, "Member 'AHouseActorBase_C::RepairedSound' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, RepairSound) == 0x000368, "Member 'AHouseActorBase_C::RepairSound' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, DamageSound) == 0x000370, "Member 'AHouseActorBase_C::DamageSound' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, RequiredTool) == 0x000378, "Member 'AHouseActorBase_C::RequiredTool' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, Score) == 0x000380, "Member 'AHouseActorBase_C::Score' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, MorphTarget) == 0x000388, "Member 'AHouseActorBase_C::MorphTarget' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, SkeletalMeshsToMorph) == 0x000390, "Member 'AHouseActorBase_C::SkeletalMeshsToMorph' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, MorphTargetName) == 0x0003A0, "Member 'AHouseActorBase_C::MorphTargetName' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, RepairParticleSystem) == 0x0003A8, "Member 'AHouseActorBase_C::RepairParticleSystem' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, AttributeChanged) == 0x0003B0, "Member 'AHouseActorBase_C::AttributeChanged' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, CombatParticipantTag) == 0x0003B4, "Member 'AHouseActorBase_C::CombatParticipantTag' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, CombatParticipantName) == 0x0003C0, "Member 'AHouseActorBase_C::CombatParticipantName' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, Economy_Reward_On_Sabotaged) == 0x0003D0, "Member 'AHouseActorBase_C::Economy_Reward_On_Sabotaged' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, Grant_Reward_on_Sabotaged) == 0x0003D8, "Member 'AHouseActorBase_C::Grant_Reward_on_Sabotaged' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, HasInteractOutline) == 0x0003D9, "Member 'AHouseActorBase_C::HasInteractOutline' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, DisableSkeletalMeshesTickTimer) == 0x0003E0, "Member 'AHouseActorBase_C::DisableSkeletalMeshesTickTimer' has a wrong offset!");
static_assert(offsetof(AHouseActorBase_C, ApplyTeamColors) == 0x0003E8, "Member 'AHouseActorBase_C::ApplyTeamColors' has a wrong offset!");

}

