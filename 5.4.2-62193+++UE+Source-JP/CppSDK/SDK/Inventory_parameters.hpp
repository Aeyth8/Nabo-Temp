#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Inventory

#include "Basic.hpp"

#include "Inventory_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Inventory.InventoryComponent.AddItemDefinition
// 0x0038 (0x0038 - 0x0000)
struct InventoryComponent_AddItemDefinition final
{
public:
	TSoftObjectPtr<class UItemDefinition>         Definition;                                        // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemInstance*                          ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_AddItemDefinition) == 0x000008, "Wrong alignment on InventoryComponent_AddItemDefinition");
static_assert(sizeof(InventoryComponent_AddItemDefinition) == 0x000038, "Wrong size on InventoryComponent_AddItemDefinition");
static_assert(offsetof(InventoryComponent_AddItemDefinition, Definition) == 0x000000, "Member 'InventoryComponent_AddItemDefinition::Definition' has a wrong offset!");
static_assert(offsetof(InventoryComponent_AddItemDefinition, StackCount) == 0x000028, "Member 'InventoryComponent_AddItemDefinition::StackCount' has a wrong offset!");
static_assert(offsetof(InventoryComponent_AddItemDefinition, ReturnValue) == 0x000030, "Member 'InventoryComponent_AddItemDefinition::ReturnValue' has a wrong offset!");

// Function Inventory.InventoryComponent.BroadcastItemChanged
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_BroadcastItemChanged final
{
public:
	const class UItemInstance*                    ItemInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_BroadcastItemChanged) == 0x000008, "Wrong alignment on InventoryComponent_BroadcastItemChanged");
static_assert(sizeof(InventoryComponent_BroadcastItemChanged) == 0x000008, "Wrong size on InventoryComponent_BroadcastItemChanged");
static_assert(offsetof(InventoryComponent_BroadcastItemChanged, ItemInstance) == 0x000000, "Member 'InventoryComponent_BroadcastItemChanged::ItemInstance' has a wrong offset!");

// Function Inventory.InventoryComponent.ClientReactToInventoryChange
// 0x0020 (0x0020 - 0x0000)
struct InventoryComponent_ClientReactToInventoryChange final
{
public:
	struct FItemInstanceArrayEntry                ItemInstanceArrayEntry;                            // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ClientReactToInventoryChange) == 0x000008, "Wrong alignment on InventoryComponent_ClientReactToInventoryChange");
static_assert(sizeof(InventoryComponent_ClientReactToInventoryChange) == 0x000020, "Wrong size on InventoryComponent_ClientReactToInventoryChange");
static_assert(offsetof(InventoryComponent_ClientReactToInventoryChange, ItemInstanceArrayEntry) == 0x000000, "Member 'InventoryComponent_ClientReactToInventoryChange::ItemInstanceArrayEntry' has a wrong offset!");

// Function Inventory.InventoryComponent.ClientReactToInventoryItemRemoved
// 0x0028 (0x0028 - 0x0000)
struct InventoryComponent_ClientReactToInventoryItemRemoved final
{
public:
	TSoftObjectPtr<class UItemDefinition>         ItemDefinition;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ClientReactToInventoryItemRemoved) == 0x000008, "Wrong alignment on InventoryComponent_ClientReactToInventoryItemRemoved");
static_assert(sizeof(InventoryComponent_ClientReactToInventoryItemRemoved) == 0x000028, "Wrong size on InventoryComponent_ClientReactToInventoryItemRemoved");
static_assert(offsetof(InventoryComponent_ClientReactToInventoryItemRemoved, ItemDefinition) == 0x000000, "Member 'InventoryComponent_ClientReactToInventoryItemRemoved::ItemDefinition' has a wrong offset!");

// Function Inventory.InventoryComponent.CopyInventoryTo
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_CopyInventoryTo final
{
public:
	class UInventoryComponent*                    InventoryComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_CopyInventoryTo) == 0x000008, "Wrong alignment on InventoryComponent_CopyInventoryTo");
static_assert(sizeof(InventoryComponent_CopyInventoryTo) == 0x000008, "Wrong size on InventoryComponent_CopyInventoryTo");
static_assert(offsetof(InventoryComponent_CopyInventoryTo, InventoryComponent) == 0x000000, "Member 'InventoryComponent_CopyInventoryTo::InventoryComponent' has a wrong offset!");

// Function Inventory.InventoryComponent.GetAllItemsOfType
// 0x0038 (0x0038 - 0x0000)
struct InventoryComponent_GetAllItemsOfType final
{
public:
	TSoftObjectPtr<class UItemDefinition>         Definition;                                        // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UItemInstance*>                  ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetAllItemsOfType) == 0x000008, "Wrong alignment on InventoryComponent_GetAllItemsOfType");
static_assert(sizeof(InventoryComponent_GetAllItemsOfType) == 0x000038, "Wrong size on InventoryComponent_GetAllItemsOfType");
static_assert(offsetof(InventoryComponent_GetAllItemsOfType, Definition) == 0x000000, "Member 'InventoryComponent_GetAllItemsOfType::Definition' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetAllItemsOfType, ReturnValue) == 0x000028, "Member 'InventoryComponent_GetAllItemsOfType::ReturnValue' has a wrong offset!");

// Function Inventory.InventoryComponent.GetAllItemsWithAction
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_GetAllItemsWithAction final
{
public:
	TSubclassOf<class UItemAction>                Definition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UItemInstance*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetAllItemsWithAction) == 0x000008, "Wrong alignment on InventoryComponent_GetAllItemsWithAction");
static_assert(sizeof(InventoryComponent_GetAllItemsWithAction) == 0x000018, "Wrong size on InventoryComponent_GetAllItemsWithAction");
static_assert(offsetof(InventoryComponent_GetAllItemsWithAction, Definition) == 0x000000, "Member 'InventoryComponent_GetAllItemsWithAction::Definition' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetAllItemsWithAction, ReturnValue) == 0x000008, "Member 'InventoryComponent_GetAllItemsWithAction::ReturnValue' has a wrong offset!");

// Function Inventory.InventoryComponent.GetAllItemsWithoutAction
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_GetAllItemsWithoutAction final
{
public:
	TSubclassOf<class UItemAction>                Definition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UItemInstance*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetAllItemsWithoutAction) == 0x000008, "Wrong alignment on InventoryComponent_GetAllItemsWithoutAction");
static_assert(sizeof(InventoryComponent_GetAllItemsWithoutAction) == 0x000018, "Wrong size on InventoryComponent_GetAllItemsWithoutAction");
static_assert(offsetof(InventoryComponent_GetAllItemsWithoutAction, Definition) == 0x000000, "Member 'InventoryComponent_GetAllItemsWithoutAction::Definition' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetAllItemsWithoutAction, ReturnValue) == 0x000008, "Member 'InventoryComponent_GetAllItemsWithoutAction::ReturnValue' has a wrong offset!");

// Function Inventory.InventoryComponent.GetFirstItemOfType
// 0x0030 (0x0030 - 0x0000)
struct InventoryComponent_GetFirstItemOfType final
{
public:
	TSoftObjectPtr<class UItemDefinition>         Definition;                                        // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemInstance*                          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetFirstItemOfType) == 0x000008, "Wrong alignment on InventoryComponent_GetFirstItemOfType");
static_assert(sizeof(InventoryComponent_GetFirstItemOfType) == 0x000030, "Wrong size on InventoryComponent_GetFirstItemOfType");
static_assert(offsetof(InventoryComponent_GetFirstItemOfType, Definition) == 0x000000, "Member 'InventoryComponent_GetFirstItemOfType::Definition' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetFirstItemOfType, ReturnValue) == 0x000028, "Member 'InventoryComponent_GetFirstItemOfType::ReturnValue' has a wrong offset!");

// DelegateFunction Inventory.InventoryComponent.InventoryChangedClient__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct InventoryComponent_InventoryChangedClient__DelegateSignature final
{
public:
	struct FItemInstanceArrayEntry                ItemInstanceArrayEntry;                            // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_InventoryChangedClient__DelegateSignature) == 0x000008, "Wrong alignment on InventoryComponent_InventoryChangedClient__DelegateSignature");
static_assert(sizeof(InventoryComponent_InventoryChangedClient__DelegateSignature) == 0x000020, "Wrong size on InventoryComponent_InventoryChangedClient__DelegateSignature");
static_assert(offsetof(InventoryComponent_InventoryChangedClient__DelegateSignature, ItemInstanceArrayEntry) == 0x000000, "Member 'InventoryComponent_InventoryChangedClient__DelegateSignature::ItemInstanceArrayEntry' has a wrong offset!");

// DelegateFunction Inventory.InventoryComponent.InventoryChangedDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_InventoryChangedDelegate__DelegateSignature final
{
public:
	class UItemInstance*                          ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_InventoryChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on InventoryComponent_InventoryChangedDelegate__DelegateSignature");
static_assert(sizeof(InventoryComponent_InventoryChangedDelegate__DelegateSignature) == 0x000008, "Wrong size on InventoryComponent_InventoryChangedDelegate__DelegateSignature");
static_assert(offsetof(InventoryComponent_InventoryChangedDelegate__DelegateSignature, ItemInstance) == 0x000000, "Member 'InventoryComponent_InventoryChangedDelegate__DelegateSignature::ItemInstance' has a wrong offset!");

// DelegateFunction Inventory.InventoryComponent.InventoryItemRemovedClient__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct InventoryComponent_InventoryItemRemovedClient__DelegateSignature final
{
public:
	TSoftObjectPtr<class UItemDefinition>         ItemDefinition;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_InventoryItemRemovedClient__DelegateSignature) == 0x000008, "Wrong alignment on InventoryComponent_InventoryItemRemovedClient__DelegateSignature");
static_assert(sizeof(InventoryComponent_InventoryItemRemovedClient__DelegateSignature) == 0x000028, "Wrong size on InventoryComponent_InventoryItemRemovedClient__DelegateSignature");
static_assert(offsetof(InventoryComponent_InventoryItemRemovedClient__DelegateSignature, ItemDefinition) == 0x000000, "Member 'InventoryComponent_InventoryItemRemovedClient__DelegateSignature::ItemDefinition' has a wrong offset!");

// Function Inventory.InventoryComponent.PlayItemDestroyAudio
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_PlayItemDestroyAudio final
{
public:
	class UItemInstance*                          ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_PlayItemDestroyAudio) == 0x000008, "Wrong alignment on InventoryComponent_PlayItemDestroyAudio");
static_assert(sizeof(InventoryComponent_PlayItemDestroyAudio) == 0x000008, "Wrong size on InventoryComponent_PlayItemDestroyAudio");
static_assert(offsetof(InventoryComponent_PlayItemDestroyAudio, ItemInstance) == 0x000000, "Member 'InventoryComponent_PlayItemDestroyAudio::ItemInstance' has a wrong offset!");

// Function Inventory.InventoryComponent.RemoveItem
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_RemoveItem final
{
public:
	class UItemInstance*                          Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_RemoveItem) == 0x000008, "Wrong alignment on InventoryComponent_RemoveItem");
static_assert(sizeof(InventoryComponent_RemoveItem) == 0x000008, "Wrong size on InventoryComponent_RemoveItem");
static_assert(offsetof(InventoryComponent_RemoveItem, Item) == 0x000000, "Member 'InventoryComponent_RemoveItem::Item' has a wrong offset!");

// Function Inventory.InventoryComponent.GetAllItems
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_GetAllItems final
{
public:
	TArray<class UItemInstance*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetAllItems) == 0x000008, "Wrong alignment on InventoryComponent_GetAllItems");
static_assert(sizeof(InventoryComponent_GetAllItems) == 0x000010, "Wrong size on InventoryComponent_GetAllItems");
static_assert(offsetof(InventoryComponent_GetAllItems, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetAllItems::ReturnValue' has a wrong offset!");

// Function Inventory.ItemDefinition.TryGetItemDefinition
// 0x0038 (0x0038 - 0x0000)
struct ItemDefinition_TryGetItemDefinition final
{
public:
	struct FGameplayTag                           ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Succeeded;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UItemDefinition>         ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDefinition_TryGetItemDefinition) == 0x000008, "Wrong alignment on ItemDefinition_TryGetItemDefinition");
static_assert(sizeof(ItemDefinition_TryGetItemDefinition) == 0x000038, "Wrong size on ItemDefinition_TryGetItemDefinition");
static_assert(offsetof(ItemDefinition_TryGetItemDefinition, ItemId) == 0x000000, "Member 'ItemDefinition_TryGetItemDefinition::ItemId' has a wrong offset!");
static_assert(offsetof(ItemDefinition_TryGetItemDefinition, Succeeded) == 0x000008, "Member 'ItemDefinition_TryGetItemDefinition::Succeeded' has a wrong offset!");
static_assert(offsetof(ItemDefinition_TryGetItemDefinition, ReturnValue) == 0x000010, "Member 'ItemDefinition_TryGetItemDefinition::ReturnValue' has a wrong offset!");

// Function Inventory.ItemDefinition.FindActionByType
// 0x0010 (0x0010 - 0x0000)
struct ItemDefinition_FindActionByType final
{
public:
	TSubclassOf<class UItemAction>                ActionType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemAction*                      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemDefinition_FindActionByType) == 0x000008, "Wrong alignment on ItemDefinition_FindActionByType");
static_assert(sizeof(ItemDefinition_FindActionByType) == 0x000010, "Wrong size on ItemDefinition_FindActionByType");
static_assert(offsetof(ItemDefinition_FindActionByType, ActionType) == 0x000000, "Member 'ItemDefinition_FindActionByType::ActionType' has a wrong offset!");
static_assert(offsetof(ItemDefinition_FindActionByType, ReturnValue) == 0x000008, "Member 'ItemDefinition_FindActionByType::ReturnValue' has a wrong offset!");

// Function Inventory.ItemInstance.AddTagStacks
// 0x000C (0x000C - 0x0000)
struct ItemInstance_AddTagStacks final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountToAdd;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInstance_AddTagStacks) == 0x000004, "Wrong alignment on ItemInstance_AddTagStacks");
static_assert(sizeof(ItemInstance_AddTagStacks) == 0x00000C, "Wrong size on ItemInstance_AddTagStacks");
static_assert(offsetof(ItemInstance_AddTagStacks, Tag) == 0x000000, "Member 'ItemInstance_AddTagStacks::Tag' has a wrong offset!");
static_assert(offsetof(ItemInstance_AddTagStacks, AmountToAdd) == 0x000008, "Member 'ItemInstance_AddTagStacks::AmountToAdd' has a wrong offset!");

// Function Inventory.ItemInstance.GetItemIconBlocking
// 0x0008 (0x0008 - 0x0000)
struct ItemInstance_GetItemIconBlocking final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInstance_GetItemIconBlocking) == 0x000008, "Wrong alignment on ItemInstance_GetItemIconBlocking");
static_assert(sizeof(ItemInstance_GetItemIconBlocking) == 0x000008, "Wrong size on ItemInstance_GetItemIconBlocking");
static_assert(offsetof(ItemInstance_GetItemIconBlocking, ReturnValue) == 0x000000, "Member 'ItemInstance_GetItemIconBlocking::ReturnValue' has a wrong offset!");

// Function Inventory.ItemInstance.GetItemName
// 0x0018 (0x0018 - 0x0000)
struct ItemInstance_GetItemName final
{
public:
	bool                                          NameFound;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInstance_GetItemName) == 0x000008, "Wrong alignment on ItemInstance_GetItemName");
static_assert(sizeof(ItemInstance_GetItemName) == 0x000018, "Wrong size on ItemInstance_GetItemName");
static_assert(offsetof(ItemInstance_GetItemName, NameFound) == 0x000000, "Member 'ItemInstance_GetItemName::NameFound' has a wrong offset!");
static_assert(offsetof(ItemInstance_GetItemName, ReturnValue) == 0x000008, "Member 'ItemInstance_GetItemName::ReturnValue' has a wrong offset!");

// Function Inventory.ItemInstance.RemoveTag
// 0x0008 (0x0008 - 0x0000)
struct ItemInstance_RemoveTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInstance_RemoveTag) == 0x000004, "Wrong alignment on ItemInstance_RemoveTag");
static_assert(sizeof(ItemInstance_RemoveTag) == 0x000008, "Wrong size on ItemInstance_RemoveTag");
static_assert(offsetof(ItemInstance_RemoveTag, Tag) == 0x000000, "Member 'ItemInstance_RemoveTag::Tag' has a wrong offset!");

// Function Inventory.ItemInstance.SetTagStacks
// 0x000C (0x000C - 0x0000)
struct ItemInstance_SetTagStacks final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAmount;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInstance_SetTagStacks) == 0x000004, "Wrong alignment on ItemInstance_SetTagStacks");
static_assert(sizeof(ItemInstance_SetTagStacks) == 0x00000C, "Wrong size on ItemInstance_SetTagStacks");
static_assert(offsetof(ItemInstance_SetTagStacks, Tag) == 0x000000, "Member 'ItemInstance_SetTagStacks::Tag' has a wrong offset!");
static_assert(offsetof(ItemInstance_SetTagStacks, NewAmount) == 0x000008, "Member 'ItemInstance_SetTagStacks::NewAmount' has a wrong offset!");

// Function Inventory.ItemInstance.SubtractTagStacks
// 0x000C (0x000C - 0x0000)
struct ItemInstance_SubtractTagStacks final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountToRemove;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInstance_SubtractTagStacks) == 0x000004, "Wrong alignment on ItemInstance_SubtractTagStacks");
static_assert(sizeof(ItemInstance_SubtractTagStacks) == 0x00000C, "Wrong size on ItemInstance_SubtractTagStacks");
static_assert(offsetof(ItemInstance_SubtractTagStacks, Tag) == 0x000000, "Member 'ItemInstance_SubtractTagStacks::Tag' has a wrong offset!");
static_assert(offsetof(ItemInstance_SubtractTagStacks, AmountToRemove) == 0x000008, "Member 'ItemInstance_SubtractTagStacks::AmountToRemove' has a wrong offset!");

// Function Inventory.ItemInstance.ContainsTag
// 0x000C (0x000C - 0x0000)
struct ItemInstance_ContainsTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemInstance_ContainsTag) == 0x000004, "Wrong alignment on ItemInstance_ContainsTag");
static_assert(sizeof(ItemInstance_ContainsTag) == 0x00000C, "Wrong size on ItemInstance_ContainsTag");
static_assert(offsetof(ItemInstance_ContainsTag, Tag) == 0x000000, "Member 'ItemInstance_ContainsTag::Tag' has a wrong offset!");
static_assert(offsetof(ItemInstance_ContainsTag, ReturnValue) == 0x000008, "Member 'ItemInstance_ContainsTag::ReturnValue' has a wrong offset!");

// Function Inventory.ItemInstance.FindActionByType
// 0x0010 (0x0010 - 0x0000)
struct ItemInstance_FindActionByType final
{
public:
	TSubclassOf<class UItemAction>                ActionType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemAction*                      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInstance_FindActionByType) == 0x000008, "Wrong alignment on ItemInstance_FindActionByType");
static_assert(sizeof(ItemInstance_FindActionByType) == 0x000010, "Wrong size on ItemInstance_FindActionByType");
static_assert(offsetof(ItemInstance_FindActionByType, ActionType) == 0x000000, "Member 'ItemInstance_FindActionByType::ActionType' has a wrong offset!");
static_assert(offsetof(ItemInstance_FindActionByType, ReturnValue) == 0x000008, "Member 'ItemInstance_FindActionByType::ReturnValue' has a wrong offset!");

// Function Inventory.ItemInstance.GetTagStackCount
// 0x000C (0x000C - 0x0000)
struct ItemInstance_GetTagStackCount final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInstance_GetTagStackCount) == 0x000004, "Wrong alignment on ItemInstance_GetTagStackCount");
static_assert(sizeof(ItemInstance_GetTagStackCount) == 0x00000C, "Wrong size on ItemInstance_GetTagStackCount");
static_assert(offsetof(ItemInstance_GetTagStackCount, Tag) == 0x000000, "Member 'ItemInstance_GetTagStackCount::Tag' has a wrong offset!");
static_assert(offsetof(ItemInstance_GetTagStackCount, ReturnValue) == 0x000008, "Member 'ItemInstance_GetTagStackCount::ReturnValue' has a wrong offset!");

// Function Inventory.ItemInstance.HasDefinitionTag
// 0x000C (0x000C - 0x0000)
struct ItemInstance_HasDefinitionTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemInstance_HasDefinitionTag) == 0x000004, "Wrong alignment on ItemInstance_HasDefinitionTag");
static_assert(sizeof(ItemInstance_HasDefinitionTag) == 0x00000C, "Wrong size on ItemInstance_HasDefinitionTag");
static_assert(offsetof(ItemInstance_HasDefinitionTag, Tag) == 0x000000, "Member 'ItemInstance_HasDefinitionTag::Tag' has a wrong offset!");
static_assert(offsetof(ItemInstance_HasDefinitionTag, ReturnValue) == 0x000008, "Member 'ItemInstance_HasDefinitionTag::ReturnValue' has a wrong offset!");

// Function Inventory.ItemInstance.OnTagStackChanged
// 0x000C (0x000C - 0x0000)
struct ItemInstance_OnTagStackChanged final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewStacks;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInstance_OnTagStackChanged) == 0x000004, "Wrong alignment on ItemInstance_OnTagStackChanged");
static_assert(sizeof(ItemInstance_OnTagStackChanged) == 0x00000C, "Wrong size on ItemInstance_OnTagStackChanged");
static_assert(offsetof(ItemInstance_OnTagStackChanged, Tag) == 0x000000, "Member 'ItemInstance_OnTagStackChanged::Tag' has a wrong offset!");
static_assert(offsetof(ItemInstance_OnTagStackChanged, NewStacks) == 0x000008, "Member 'ItemInstance_OnTagStackChanged::NewStacks' has a wrong offset!");

}

