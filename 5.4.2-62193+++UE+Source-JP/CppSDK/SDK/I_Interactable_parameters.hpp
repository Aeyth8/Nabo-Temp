#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Interactable

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function I_Interactable.I_Interactable_C.GetNewWidgetColor
// 0x0014 (0x0014 - 0x0000)
struct I_Interactable_C_GetNewWidgetColor final
{
public:
	struct FSlateColor                            NewColor;                                          // 0x0000(0x0014)(Parm, OutParm)
};
static_assert(alignof(I_Interactable_C_GetNewWidgetColor) == 0x000004, "Wrong alignment on I_Interactable_C_GetNewWidgetColor");
static_assert(sizeof(I_Interactable_C_GetNewWidgetColor) == 0x000014, "Wrong size on I_Interactable_C_GetNewWidgetColor");
static_assert(offsetof(I_Interactable_C_GetNewWidgetColor, NewColor) == 0x000000, "Member 'I_Interactable_C_GetNewWidgetColor::NewColor' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.GetOptionalText
// 0x0020 (0x0020 - 0x0000)
struct I_Interactable_C_GetOptionalText final
{
public:
	class FText                                   Return;                                            // 0x0000(0x0010)(Parm, OutParm)
	class FText                                   Optional_Second_Line;                              // 0x0010(0x0010)(Parm, OutParm)
};
static_assert(alignof(I_Interactable_C_GetOptionalText) == 0x000008, "Wrong alignment on I_Interactable_C_GetOptionalText");
static_assert(sizeof(I_Interactable_C_GetOptionalText) == 0x000020, "Wrong size on I_Interactable_C_GetOptionalText");
static_assert(offsetof(I_Interactable_C_GetOptionalText, Return) == 0x000000, "Member 'I_Interactable_C_GetOptionalText::Return' has a wrong offset!");
static_assert(offsetof(I_Interactable_C_GetOptionalText, Optional_Second_Line) == 0x000010, "Member 'I_Interactable_C_GetOptionalText::Optional_Second_Line' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.GetPriority
// 0x0004 (0x0004 - 0x0000)
struct I_Interactable_C_GetPriority final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_GetPriority) == 0x000004, "Wrong alignment on I_Interactable_C_GetPriority");
static_assert(sizeof(I_Interactable_C_GetPriority) == 0x000004, "Wrong size on I_Interactable_C_GetPriority");
static_assert(offsetof(I_Interactable_C_GetPriority, Priority) == 0x000000, "Member 'I_Interactable_C_GetPriority::Priority' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.GetWidgetLocation
// 0x0018 (0x0018 - 0x0000)
struct I_Interactable_C_GetWidgetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_GetWidgetLocation) == 0x000008, "Wrong alignment on I_Interactable_C_GetWidgetLocation");
static_assert(sizeof(I_Interactable_C_GetWidgetLocation) == 0x000018, "Wrong size on I_Interactable_C_GetWidgetLocation");
static_assert(offsetof(I_Interactable_C_GetWidgetLocation, Location) == 0x000000, "Member 'I_Interactable_C_GetWidgetLocation::Location' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.HideInteractionWidget
// 0x0001 (0x0001 - 0x0000)
struct I_Interactable_C_HideInteractionWidget final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_HideInteractionWidget) == 0x000001, "Wrong alignment on I_Interactable_C_HideInteractionWidget");
static_assert(sizeof(I_Interactable_C_HideInteractionWidget) == 0x000001, "Wrong size on I_Interactable_C_HideInteractionWidget");
static_assert(offsetof(I_Interactable_C_HideInteractionWidget, Return) == 0x000000, "Member 'I_Interactable_C_HideInteractionWidget::Return' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.InteractPressed
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_InteractPressed final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_InteractPressed) == 0x000008, "Wrong alignment on I_Interactable_C_InteractPressed");
static_assert(sizeof(I_Interactable_C_InteractPressed) == 0x000008, "Wrong size on I_Interactable_C_InteractPressed");
static_assert(offsetof(I_Interactable_C_InteractPressed, InteractingActor) == 0x000000, "Member 'I_Interactable_C_InteractPressed::InteractingActor' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.InteractReleased
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_InteractReleased final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_InteractReleased) == 0x000008, "Wrong alignment on I_Interactable_C_InteractReleased");
static_assert(sizeof(I_Interactable_C_InteractReleased) == 0x000008, "Wrong size on I_Interactable_C_InteractReleased");
static_assert(offsetof(I_Interactable_C_InteractReleased, InteractingActor) == 0x000000, "Member 'I_Interactable_C_InteractReleased::InteractingActor' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.IsInFocus
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_IsInFocus final
{
public:
	class AActor*                                 Focusing_Actor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_IsInFocus) == 0x000008, "Wrong alignment on I_Interactable_C_IsInFocus");
static_assert(sizeof(I_Interactable_C_IsInFocus) == 0x000008, "Wrong size on I_Interactable_C_IsInFocus");
static_assert(offsetof(I_Interactable_C_IsInFocus, Focusing_Actor) == 0x000000, "Member 'I_Interactable_C_IsInFocus::Focusing_Actor' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.IsInteractable
// 0x0001 (0x0001 - 0x0000)
struct I_Interactable_C_IsInteractable final
{
public:
	bool                                          Interactable;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_IsInteractable) == 0x000001, "Wrong alignment on I_Interactable_C_IsInteractable");
static_assert(sizeof(I_Interactable_C_IsInteractable) == 0x000001, "Wrong size on I_Interactable_C_IsInteractable");
static_assert(offsetof(I_Interactable_C_IsInteractable, Interactable) == 0x000000, "Member 'I_Interactable_C_IsInteractable::Interactable' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.SetHoveredComponent
// 0x0010 (0x0010 - 0x0000)
struct I_Interactable_C_SetHoveredComponent final
{
public:
	class UInteractionComponent_C*                HoveredComponent;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Void;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_SetHoveredComponent) == 0x000008, "Wrong alignment on I_Interactable_C_SetHoveredComponent");
static_assert(sizeof(I_Interactable_C_SetHoveredComponent) == 0x000010, "Wrong size on I_Interactable_C_SetHoveredComponent");
static_assert(offsetof(I_Interactable_C_SetHoveredComponent, HoveredComponent) == 0x000000, "Member 'I_Interactable_C_SetHoveredComponent::HoveredComponent' has a wrong offset!");
static_assert(offsetof(I_Interactable_C_SetHoveredComponent, Void) == 0x000008, "Member 'I_Interactable_C_SetHoveredComponent::Void' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.SetInteractable
// 0x0001 (0x0001 - 0x0000)
struct I_Interactable_C_SetInteractable final
{
public:
	bool                                          Interactable;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_SetInteractable) == 0x000001, "Wrong alignment on I_Interactable_C_SetInteractable");
static_assert(sizeof(I_Interactable_C_SetInteractable) == 0x000001, "Wrong size on I_Interactable_C_SetInteractable");
static_assert(offsetof(I_Interactable_C_SetInteractable, Interactable) == 0x000000, "Member 'I_Interactable_C_SetInteractable::Interactable' has a wrong offset!");

}

