#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameModeJP_MatchBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JP_classes.hpp"
#include "E_TimeOfDay_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GameModeJP_MatchBP.GameModeJP_MatchBP_C
// 0x0080 (0x04E8 - 0x0468)
class AGameModeJP_MatchBP_C : public AGameModeJP_Match
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0468(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AMessengerManager_C*                    Messenger;                                         // 0x0478(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HousesAreInitialized;                              // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObjectiveCollection*                   StartingObjectiveCollection;                       // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         FlowerObjectivesAlreadySpawnedThisGame;            // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxFlowerObjectivesPerGame;                        // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObjectiveCollection*                   DailyObjectiveCollection;                          // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObjectiveCollection*                   Day1ObjectiveCollection;                           // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObjectiveCollection*                   Day2ObjectiveCollection;                           // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObjectiveCollection*                   Day3ObjectiveCollection;                           // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObjectiveCollection*                   Day4ObjectiveCollection;                           // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      Attenuation;                                       // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             On_PlayerLoggedOut;                                // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             On_PlayerLoggedIn;                                 // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void CheckFlowerObjectiveLimit(class UObject* Objective, bool* CanCreateObjective);
	void Create_Objective(class UObjectiveCollection* ObjectiveCollection);
	void CreateKillReward(class APlayerStateJP* Killer_PlayerState, struct FKillReward* KillReward);
	void DebugPrintKill(const struct FKillGameplayMessage& KillGameplayMessage);
	void ExecuteUbergraph_GameModeJP_MatchBP(int32 EntryPoint);
	void FindCorrespondingTask(uint8 ObjectiveType, class UClass** NewParam);
	void Get_Messenger(class AMessengerManager_C** Messenger_0);
	int32 GetEnemyHouseEssentialKills(const class APlayerStateJP* PlayerStateJP);
	int32 GetFriendlyResourcesCollected(const class APlayerStateJP* PlayerStateJP);
	void GetRemainingAmountToSpawn(uint8 ObjectiveType, int32* Amount);
	int32 GetTeamHouseEssentialLost(const class APlayerStateJP* PlayerStateJP);
	void GrantInitialResources();
	void HandlePlayerKill(const struct FKillGameplayMessage& Kill_Gameplay_Message);
	void IncrementSpawnedFlowerObjectiveCount(class UObject* Objective);
	void InitVoice();
	void IsTheKillerAPlayer(const struct FKillGameplayMessage& KillGameplayMessage);
	void K2_OnLogout(class AController* ExitingController);
	void K2_OnSetMatchState(class FName NewState);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void ManageKillOccurred(const struct FKillGameplayMessage& Message);
	void MessageAllPlayersThatAPlayerLeft(class APlayerState* PlayerWhoLeft);
	class AActor* MyChoosePlayerStart(class AController* Controller);
	void On_PlayerLoggedIn__DelegateSignature(class APlayerController* PlayerController);
	void On_PlayerLoggedOut__DelegateSignature(class APlayerState* PlayerState, class AController* Controller);
	void OnMessageReceived_AE04CBC948416123264F5380E20D8CBA(class UAsyncAction_ListenForGameplayMessage* ProxyObject, const struct FGameplayTag& ActualChannel);
	void OnTimeOfDayChange(E_TimeOfDay TimeOfDay);
	bool ReadyToStartMatch();
	void ReceiveBeginPlay();
	void ScaleLevels();
	void SendResourceCountToLateClient(class APlayerController* PlayerController);
	void SpawnObjectives(class UObjectiveCollection* ObjectiveCollection);
	void SpawnVoiceActor(class APlayerController* PlayerController);
	void Team_Eliminated(const struct FTeam& EliminatedTeam);

	double GetLevelScaling() const;
	int32 GetNumberOfObjectivesToCreate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GameModeJP_MatchBP_C">();
	}
	static class AGameModeJP_MatchBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameModeJP_MatchBP_C>();
	}
};
static_assert(alignof(AGameModeJP_MatchBP_C) == 0x000008, "Wrong alignment on AGameModeJP_MatchBP_C");
static_assert(sizeof(AGameModeJP_MatchBP_C) == 0x0004E8, "Wrong size on AGameModeJP_MatchBP_C");
static_assert(offsetof(AGameModeJP_MatchBP_C, UberGraphFrame) == 0x000468, "Member 'AGameModeJP_MatchBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, DefaultSceneRoot) == 0x000470, "Member 'AGameModeJP_MatchBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, Messenger) == 0x000478, "Member 'AGameModeJP_MatchBP_C::Messenger' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, HousesAreInitialized) == 0x000480, "Member 'AGameModeJP_MatchBP_C::HousesAreInitialized' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, StartingObjectiveCollection) == 0x000488, "Member 'AGameModeJP_MatchBP_C::StartingObjectiveCollection' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, FlowerObjectivesAlreadySpawnedThisGame) == 0x000490, "Member 'AGameModeJP_MatchBP_C::FlowerObjectivesAlreadySpawnedThisGame' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, MaxFlowerObjectivesPerGame) == 0x000494, "Member 'AGameModeJP_MatchBP_C::MaxFlowerObjectivesPerGame' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, DailyObjectiveCollection) == 0x000498, "Member 'AGameModeJP_MatchBP_C::DailyObjectiveCollection' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, Day1ObjectiveCollection) == 0x0004A0, "Member 'AGameModeJP_MatchBP_C::Day1ObjectiveCollection' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, Day2ObjectiveCollection) == 0x0004A8, "Member 'AGameModeJP_MatchBP_C::Day2ObjectiveCollection' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, Day3ObjectiveCollection) == 0x0004B0, "Member 'AGameModeJP_MatchBP_C::Day3ObjectiveCollection' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, Day4ObjectiveCollection) == 0x0004B8, "Member 'AGameModeJP_MatchBP_C::Day4ObjectiveCollection' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, Attenuation) == 0x0004C0, "Member 'AGameModeJP_MatchBP_C::Attenuation' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, On_PlayerLoggedOut) == 0x0004C8, "Member 'AGameModeJP_MatchBP_C::On_PlayerLoggedOut' has a wrong offset!");
static_assert(offsetof(AGameModeJP_MatchBP_C, On_PlayerLoggedIn) == 0x0004D8, "Member 'AGameModeJP_MatchBP_C::On_PlayerLoggedIn' has a wrong offset!");

}

