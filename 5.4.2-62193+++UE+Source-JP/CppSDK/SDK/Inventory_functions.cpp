#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Inventory

#include "Basic.hpp"

#include "Inventory_classes.hpp"
#include "Inventory_parameters.hpp"


namespace SDK
{

// Function Inventory.InventoryComponent.AddItemDefinition
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UItemDefinition>   Definition                                             (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StackCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemInstance*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemInstance* UInventoryComponent::AddItemDefinition(TSoftObjectPtr<class UItemDefinition> Definition, int32 StackCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "AddItemDefinition");

	Params::InventoryComponent_AddItemDefinition Parms{};

	Parms.Definition = Definition;
	Parms.StackCount = StackCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.InventoryComponent.BroadcastItemChanged
// (Final, Native, Public)
// Parameters:
// class UItemInstance*                    ItemInstance                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::BroadcastItemChanged(const class UItemInstance* ItemInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "BroadcastItemChanged");

	Params::InventoryComponent_BroadcastItemChanged Parms{};

	Parms.ItemInstance = ItemInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.InventoryComponent.ClientReactToInventoryChange
// (Final, Native, Private)
// Parameters:
// struct FItemInstanceArrayEntry          ItemInstanceArrayEntry                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UInventoryComponent::ClientReactToInventoryChange(const struct FItemInstanceArrayEntry& ItemInstanceArrayEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "ClientReactToInventoryChange");

	Params::InventoryComponent_ClientReactToInventoryChange Parms{};

	Parms.ItemInstanceArrayEntry = std::move(ItemInstanceArrayEntry);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.InventoryComponent.ClientReactToInventoryItemRemoved
// (Final, Native, Private)
// Parameters:
// TSoftObjectPtr<class UItemDefinition>   ItemDefinition                                         (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::ClientReactToInventoryItemRemoved(TSoftObjectPtr<class UItemDefinition> ItemDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "ClientReactToInventoryItemRemoved");

	Params::InventoryComponent_ClientReactToInventoryItemRemoved Parms{};

	Parms.ItemDefinition = ItemDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.InventoryComponent.CopyInventoryTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryComponent*              InventoryComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::CopyInventoryTo(class UInventoryComponent* InventoryComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "CopyInventoryTo");

	Params::InventoryComponent_CopyInventoryTo Parms{};

	Parms.InventoryComponent = InventoryComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.InventoryComponent.GetAllItemsOfType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UItemDefinition>   Definition                                             (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UItemInstance*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UItemInstance*> UInventoryComponent::GetAllItemsOfType(TSoftObjectPtr<class UItemDefinition> Definition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetAllItemsOfType");

	Params::InventoryComponent_GetAllItemsOfType Parms{};

	Parms.Definition = Definition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.InventoryComponent.GetAllItemsWithAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UItemAction>          Definition                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UItemInstance*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UItemInstance*> UInventoryComponent::GetAllItemsWithAction(TSubclassOf<class UItemAction> Definition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetAllItemsWithAction");

	Params::InventoryComponent_GetAllItemsWithAction Parms{};

	Parms.Definition = Definition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.InventoryComponent.GetAllItemsWithoutAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UItemAction>          Definition                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UItemInstance*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UItemInstance*> UInventoryComponent::GetAllItemsWithoutAction(TSubclassOf<class UItemAction> Definition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetAllItemsWithoutAction");

	Params::InventoryComponent_GetAllItemsWithoutAction Parms{};

	Parms.Definition = Definition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.InventoryComponent.GetFirstItemOfType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UItemDefinition>   Definition                                             (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UItemInstance*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UItemInstance* UInventoryComponent::GetFirstItemOfType(TSoftObjectPtr<class UItemDefinition> Definition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetFirstItemOfType");

	Params::InventoryComponent_GetFirstItemOfType Parms{};

	Parms.Definition = Definition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction Inventory.InventoryComponent.InventoryChangedClient__DelegateSignature
// (BlueprintCosmetic, MulticastDelegate, Public, Delegate)
// Parameters:
// struct FItemInstanceArrayEntry          ItemInstanceArrayEntry                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UInventoryComponent::InventoryChangedClient__DelegateSignature(const struct FItemInstanceArrayEntry& ItemInstanceArrayEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "InventoryChangedClient__DelegateSignature");

	Params::InventoryComponent_InventoryChangedClient__DelegateSignature Parms{};

	Parms.ItemInstanceArrayEntry = std::move(ItemInstanceArrayEntry);

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction Inventory.InventoryComponent.InventoryChangedDelegate__DelegateSignature
// (BlueprintAuthorityOnly, MulticastDelegate, Public, Delegate)
// Parameters:
// class UItemInstance*                    ItemInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::InventoryChangedDelegate__DelegateSignature(class UItemInstance* ItemInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "InventoryChangedDelegate__DelegateSignature");

	Params::InventoryComponent_InventoryChangedDelegate__DelegateSignature Parms{};

	Parms.ItemInstance = ItemInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction Inventory.InventoryComponent.InventoryItemRemovedClient__DelegateSignature
// (BlueprintCosmetic, MulticastDelegate, Public, Delegate)
// Parameters:
// TSoftObjectPtr<class UItemDefinition>   ItemDefinition                                         (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::InventoryItemRemovedClient__DelegateSignature(TSoftObjectPtr<class UItemDefinition> ItemDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "InventoryItemRemovedClient__DelegateSignature");

	Params::InventoryComponent_InventoryItemRemovedClient__DelegateSignature Parms{};

	Parms.ItemDefinition = ItemDefinition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Inventory.InventoryComponent.PlayItemDestroyAudio
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// class UItemInstance*                    ItemInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::PlayItemDestroyAudio(class UItemInstance* ItemInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "PlayItemDestroyAudio");

	Params::InventoryComponent_PlayItemDestroyAudio Parms{};

	Parms.ItemInstance = ItemInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.InventoryComponent.RemoveItem
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class UItemInstance*                    Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::RemoveItem(class UItemInstance* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "RemoveItem");

	Params::InventoryComponent_RemoveItem Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.InventoryComponent.UpdateShopViewModelWithInventory
// (Final, BlueprintCosmetic, Native, Private, BlueprintCallable)

void UInventoryComponent::UpdateShopViewModelWithInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "UpdateShopViewModelWithInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.InventoryComponent.GetAllItems
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TArray<class UItemInstance*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UItemInstance*> UInventoryComponent::GetAllItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetAllItems");

	Params::InventoryComponent_GetAllItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.ItemDefinition.TryGetItemDefinition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     ItemId                                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Succeeded                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UItemDefinition>   ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UItemDefinition> UItemDefinition::TryGetItemDefinition(const struct FGameplayTag& ItemId, bool* Succeeded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ItemDefinition", "TryGetItemDefinition");

	Params::ItemDefinition_TryGetItemDefinition Parms{};

	Parms.ItemId = std::move(ItemId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Succeeded != nullptr)
		*Succeeded = Parms.Succeeded;

	return Parms.ReturnValue;
}


// Function Inventory.ItemDefinition.FindActionByType
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class UItemAction>          ActionType                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UItemAction*                ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemAction* UItemDefinition::FindActionByType(TSubclassOf<class UItemAction> ActionType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemDefinition", "FindActionByType");

	Params::ItemDefinition_FindActionByType Parms{};

	Parms.ActionType = ActionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.ItemInstance.AddTagStacks
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountToAdd                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemInstance::AddTagStacks(const struct FGameplayTag& Tag, const int32 AmountToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "AddTagStacks");

	Params::ItemInstance_AddTagStacks Parms{};

	Parms.Tag = std::move(Tag);
	Parms.AmountToAdd = AmountToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.ItemInstance.GetItemIconBlocking
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UItemInstance::GetItemIconBlocking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "GetItemIconBlocking");

	Params::ItemInstance_GetItemIconBlocking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.ItemInstance.GetItemName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    NameFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UItemInstance::GetItemName(bool* NameFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "GetItemName");

	Params::ItemInstance_GetItemName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NameFound != nullptr)
		*NameFound = Parms.NameFound;

	return Parms.ReturnValue;
}


// Function Inventory.ItemInstance.RemoveTag
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemInstance::RemoveTag(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "RemoveTag");

	Params::ItemInstance_RemoveTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.ItemInstance.SetTagStacks
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewAmount                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemInstance::SetTagStacks(const struct FGameplayTag& Tag, const int32 NewAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "SetTagStacks");

	Params::ItemInstance_SetTagStacks Parms{};

	Parms.Tag = std::move(Tag);
	Parms.NewAmount = NewAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.ItemInstance.SubtractTagStacks
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AmountToRemove                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemInstance::SubtractTagStacks(const struct FGameplayTag& Tag, const int32 AmountToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "SubtractTagStacks");

	Params::ItemInstance_SubtractTagStacks Parms{};

	Parms.Tag = std::move(Tag);
	Parms.AmountToRemove = AmountToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Inventory.ItemInstance.ContainsTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemInstance::ContainsTag(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "ContainsTag");

	Params::ItemInstance_ContainsTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.ItemInstance.FindActionByType
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// TSubclassOf<class UItemAction>          ActionType                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UItemAction*                ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemAction* UItemInstance::FindActionByType(TSubclassOf<class UItemAction> ActionType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "FindActionByType");

	Params::ItemInstance_FindActionByType Parms{};

	Parms.ActionType = ActionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.ItemInstance.GetTagStackCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UItemInstance::GetTagStackCount(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "GetTagStackCount");

	Params::ItemInstance_GetTagStackCount Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.ItemInstance.HasDefinitionTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemInstance::HasDefinitionTag(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "HasDefinitionTag");

	Params::ItemInstance_HasDefinitionTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Inventory.ItemInstance.OnTagStackChanged
// (Final, Native, Private, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewStacks                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemInstance::OnTagStackChanged(const struct FGameplayTag& Tag, int32 NewStacks) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInstance", "OnTagStackChanged");

	Params::ItemInstance_OnTagStackChanged Parms{};

	Parms.Tag = std::move(Tag);
	Parms.NewStacks = NewStacks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

