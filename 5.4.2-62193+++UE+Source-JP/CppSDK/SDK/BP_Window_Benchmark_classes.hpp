#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Window_Benchmark

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HouseActorBase_classes.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Window_Benchmark.BP_Window_Benchmark_C
// 0x00D0 (0x04C0 - 0x03F0)
class ABP_Window_Benchmark_C final : public AHouseActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Window_Benchmark_C;              // 0x03F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AudioOpenClose;                                    // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxImpact;                                         // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxInteract;                                       // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroundskeeperReference*                GroundskeeperReference1;                           // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FrameBroken;                                       // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WindowLeft;                                        // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WindowRight;                                       // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Frame;                                             // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneBroken;                                       // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneOK;                                           // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         WindowRotation_AlphaWithCurve_58FEDB414A0E156EFC3F19BAA23777C3; // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WindowRotation__Direction_58FEDB414A0E156EFC3F19BAA23777C3; // 0x0454(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_455[0x3];                                      // 0x0455(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     WindowRotation;                                    // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Opened;                                            // 0x0460(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetRotation;                                    // 0x0468(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterIsInFront;                                // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WindowShut;                                        // 0x0471(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_472[0x6];                                      // 0x0472(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstance*>              GlassHitMaterials;                                 // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           GlassHits;                                         // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UGeometryCollectionComponent*>   ShatteredGeometry;                                 // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                Last_Impulse;                                      // 0x04A8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Audio_Close();
	void Audio_Open();
	void Benchmark_Window_Smash();
	void Close_Window();
	void Cosmetics_State_Repaired();
	void Cosmetics_State_Sabotaged();
	void DestroyGlassHits();
	void DestroyShatteredGeometry();
	void ExecuteUbergraph_BP_Window_Benchmark(int32 EntryPoint);
	void GetWidgetLocation(struct FVector* Location);
	void HideInteractionWidget(bool* Return);
	void House_Actor_Impact_Cosmetics(const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect);
	void IsCharacterInFront();
	void IsInteractable(bool* Interactable);
	void IsInteractingActorATeamMember(class AActor* Actor, bool* Return);
	void Multi_Audio_Locked();
	void OnRep_Opened();
	void Open_Window();
	void PostInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void ReceiveBeginPlay();
	void ReloadAfterHousesLoaded(bool* Return);
	void RemoveGlassDecal();
	void Repair();
	void Sabotage(class AActor* SabotagingActor);
	void Spawn_destroyed_window();
	void SpawnRandomGlassHit(const struct FVector& Location);
	void UserConstructionScript();
	void WindowImpactCosmetics(const struct FVector& Location, E_ImpactEffect Selection, const struct FVector& HitImpulse);
	void WindowRotation__FinishedFunc();
	void WindowRotation__UpdateFunc();
	void WindowSabotaged(bool TURR);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Window_Benchmark_C">();
	}
	static class ABP_Window_Benchmark_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Window_Benchmark_C>();
	}
};
static_assert(alignof(ABP_Window_Benchmark_C) == 0x000008, "Wrong alignment on ABP_Window_Benchmark_C");
static_assert(sizeof(ABP_Window_Benchmark_C) == 0x0004C0, "Wrong size on ABP_Window_Benchmark_C");
static_assert(offsetof(ABP_Window_Benchmark_C, UberGraphFrame_BP_Window_Benchmark_C) == 0x0003F0, "Member 'ABP_Window_Benchmark_C::UberGraphFrame_BP_Window_Benchmark_C' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, AudioOpenClose) == 0x0003F8, "Member 'ABP_Window_Benchmark_C::AudioOpenClose' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, Arrow) == 0x000400, "Member 'ABP_Window_Benchmark_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, BoxImpact) == 0x000408, "Member 'ABP_Window_Benchmark_C::BoxImpact' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, BoxInteract) == 0x000410, "Member 'ABP_Window_Benchmark_C::BoxInteract' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, GroundskeeperReference1) == 0x000418, "Member 'ABP_Window_Benchmark_C::GroundskeeperReference1' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, FrameBroken) == 0x000420, "Member 'ABP_Window_Benchmark_C::FrameBroken' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, WindowLeft) == 0x000428, "Member 'ABP_Window_Benchmark_C::WindowLeft' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, WindowRight) == 0x000430, "Member 'ABP_Window_Benchmark_C::WindowRight' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, Frame) == 0x000438, "Member 'ABP_Window_Benchmark_C::Frame' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, SceneBroken) == 0x000440, "Member 'ABP_Window_Benchmark_C::SceneBroken' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, SceneOK) == 0x000448, "Member 'ABP_Window_Benchmark_C::SceneOK' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, WindowRotation_AlphaWithCurve_58FEDB414A0E156EFC3F19BAA23777C3) == 0x000450, "Member 'ABP_Window_Benchmark_C::WindowRotation_AlphaWithCurve_58FEDB414A0E156EFC3F19BAA23777C3' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, WindowRotation__Direction_58FEDB414A0E156EFC3F19BAA23777C3) == 0x000454, "Member 'ABP_Window_Benchmark_C::WindowRotation__Direction_58FEDB414A0E156EFC3F19BAA23777C3' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, WindowRotation) == 0x000458, "Member 'ABP_Window_Benchmark_C::WindowRotation' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, Opened) == 0x000460, "Member 'ABP_Window_Benchmark_C::Opened' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, TargetRotation) == 0x000468, "Member 'ABP_Window_Benchmark_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, CharacterIsInFront) == 0x000470, "Member 'ABP_Window_Benchmark_C::CharacterIsInFront' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, WindowShut) == 0x000471, "Member 'ABP_Window_Benchmark_C::WindowShut' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, GlassHitMaterials) == 0x000478, "Member 'ABP_Window_Benchmark_C::GlassHitMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, GlassHits) == 0x000488, "Member 'ABP_Window_Benchmark_C::GlassHits' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, ShatteredGeometry) == 0x000498, "Member 'ABP_Window_Benchmark_C::ShatteredGeometry' has a wrong offset!");
static_assert(offsetof(ABP_Window_Benchmark_C, Last_Impulse) == 0x0004A8, "Member 'ABP_Window_Benchmark_C::Last_Impulse' has a wrong offset!");

}

