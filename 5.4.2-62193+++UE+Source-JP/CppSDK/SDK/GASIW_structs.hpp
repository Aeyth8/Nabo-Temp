#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GASIW

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "NetCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GASIW.EAbilityActivationPolicy
// NumValues: 0x0005
enum class EAbilityActivationPolicy : uint8
{
	OnInputTriggered                         = 0,
	WhileInputActive                         = 1,
	OnSpawn                                  = 2,
	Continually                              = 3,
	EAbilityActivationPolicy_MAX             = 4,
};

// Enum GASIW.EEquipmentViewMode
// NumValues: 0x0004
enum class EEquipmentViewMode : uint8
{
	None                                     = 0,
	FirstPerson                              = 1,
	ThirdPerson                              = 2,
	EEquipmentViewMode_MAX                   = 3,
};

// Enum GASIW.EItemTagStackOperatorType
// NumValues: 0x0006
enum class EItemTagStackOperatorType : uint8
{
	LessThanEqual                            = 0,
	LessThan                                 = 1,
	Equal                                    = 2,
	GreaterThan                              = 3,
	GreaterThanEqual                         = 4,
	EItemTagStackOperatorType_MAX            = 5,
};

// ScriptStruct GASIW.GameplayAbilityLocalAnimMontageForMesh
// 0x0030 (0x0030 - 0x0000)
struct FGameplayAbilityLocalAnimMontageForMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityLocalAnimMontage       LocalMontageInfo;                                  // 0x0008(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityLocalAnimMontageForMesh) == 0x000008, "Wrong alignment on FGameplayAbilityLocalAnimMontageForMesh");
static_assert(sizeof(FGameplayAbilityLocalAnimMontageForMesh) == 0x000030, "Wrong size on FGameplayAbilityLocalAnimMontageForMesh");
static_assert(offsetof(FGameplayAbilityLocalAnimMontageForMesh, Mesh) == 0x000000, "Member 'FGameplayAbilityLocalAnimMontageForMesh::Mesh' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityLocalAnimMontageForMesh, LocalMontageInfo) == 0x000008, "Member 'FGameplayAbilityLocalAnimMontageForMesh::LocalMontageInfo' has a wrong offset!");

// ScriptStruct GASIW.GameplayAbilityRepAnimMontageForMesh
// 0x0048 (0x0048 - 0x0000)
struct FGameplayAbilityRepAnimMontageForMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityRepAnimMontage         RepMontageInfo;                                    // 0x0008(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilityRepAnimMontageForMesh) == 0x000008, "Wrong alignment on FGameplayAbilityRepAnimMontageForMesh");
static_assert(sizeof(FGameplayAbilityRepAnimMontageForMesh) == 0x000048, "Wrong size on FGameplayAbilityRepAnimMontageForMesh");
static_assert(offsetof(FGameplayAbilityRepAnimMontageForMesh, Mesh) == 0x000000, "Member 'FGameplayAbilityRepAnimMontageForMesh::Mesh' has a wrong offset!");
static_assert(offsetof(FGameplayAbilityRepAnimMontageForMesh, RepMontageInfo) == 0x000008, "Member 'FGameplayAbilityRepAnimMontageForMesh::RepMontageInfo' has a wrong offset!");

// ScriptStruct GASIW.SocketInformation
// 0x0070 (0x0070 - 0x0000)
struct FSocketInformation final
{
public:
	class FName                                   AttachSocket;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AttachTransform;                                   // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocketInformation) == 0x000010, "Wrong alignment on FSocketInformation");
static_assert(sizeof(FSocketInformation) == 0x000070, "Wrong size on FSocketInformation");
static_assert(offsetof(FSocketInformation, AttachSocket) == 0x000000, "Member 'FSocketInformation::AttachSocket' has a wrong offset!");
static_assert(offsetof(FSocketInformation, AttachTransform) == 0x000010, "Member 'FSocketInformation::AttachTransform' has a wrong offset!");

// ScriptStruct GASIW.EquipmentActorToSpawn
// 0x00F0 (0x00F0 - 0x0000)
struct FEquipmentActorToSpawn final
{
public:
	TSubclassOf<class AActor>                     ActorToSpawn;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSocketInformation                     FirstPersonSocket;                                 // 0x0010(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSocketInformation                     ThirdPersonSocket;                                 // 0x0080(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquipmentActorToSpawn) == 0x000010, "Wrong alignment on FEquipmentActorToSpawn");
static_assert(sizeof(FEquipmentActorToSpawn) == 0x0000F0, "Wrong size on FEquipmentActorToSpawn");
static_assert(offsetof(FEquipmentActorToSpawn, ActorToSpawn) == 0x000000, "Member 'FEquipmentActorToSpawn::ActorToSpawn' has a wrong offset!");
static_assert(offsetof(FEquipmentActorToSpawn, FirstPersonSocket) == 0x000010, "Member 'FEquipmentActorToSpawn::FirstPersonSocket' has a wrong offset!");
static_assert(offsetof(FEquipmentActorToSpawn, ThirdPersonSocket) == 0x000080, "Member 'FEquipmentActorToSpawn::ThirdPersonSocket' has a wrong offset!");

// ScriptStruct GASIW.GameplaySetHandle
// 0x0030 (0x0030 - 0x0000)
struct FGameplaySetHandle final
{
public:
	TArray<struct FGameplayAbilitySpecHandle>     AbilityHandles;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    GameplayEffectHandles;                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAttributeSet*>                  GrantedAttributeSets;                              // 0x0020(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplaySetHandle) == 0x000008, "Wrong alignment on FGameplaySetHandle");
static_assert(sizeof(FGameplaySetHandle) == 0x000030, "Wrong size on FGameplaySetHandle");
static_assert(offsetof(FGameplaySetHandle, AbilityHandles) == 0x000000, "Member 'FGameplaySetHandle::AbilityHandles' has a wrong offset!");
static_assert(offsetof(FGameplaySetHandle, GameplayEffectHandles) == 0x000010, "Member 'FGameplaySetHandle::GameplayEffectHandles' has a wrong offset!");
static_assert(offsetof(FGameplaySetHandle, GrantedAttributeSets) == 0x000020, "Member 'FGameplaySetHandle::GrantedAttributeSets' has a wrong offset!");

// ScriptStruct GASIW.EquipmentItem
// 0x004C (0x0058 - 0x000C)
struct FEquipmentItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UEquipmentDefinition>       EquipmentDefinition;                               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEquipmentInstance*                     Instance;                                          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Slot;                                              // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplaySetHandle                     GrantedHandles;                                    // 0x0028(0x0030)(RepSkip, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquipmentItem) == 0x000008, "Wrong alignment on FEquipmentItem");
static_assert(sizeof(FEquipmentItem) == 0x000058, "Wrong size on FEquipmentItem");
static_assert(offsetof(FEquipmentItem, EquipmentDefinition) == 0x000010, "Member 'FEquipmentItem::EquipmentDefinition' has a wrong offset!");
static_assert(offsetof(FEquipmentItem, Instance) == 0x000018, "Member 'FEquipmentItem::Instance' has a wrong offset!");
static_assert(offsetof(FEquipmentItem, Slot) == 0x000020, "Member 'FEquipmentItem::Slot' has a wrong offset!");
static_assert(offsetof(FEquipmentItem, GrantedHandles) == 0x000028, "Member 'FEquipmentItem::GrantedHandles' has a wrong offset!");

// ScriptStruct GASIW.EquipmentArray
// 0x0018 (0x0120 - 0x0108)
struct FEquipmentArray final : public FFastArraySerializer
{
public:
	TArray<struct FEquipmentItem>                 Items;                                             // 0x0108(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UActorComponent*                        OwnerComponent;                                    // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FEquipmentArray) == 0x000008, "Wrong alignment on FEquipmentArray");
static_assert(sizeof(FEquipmentArray) == 0x000120, "Wrong size on FEquipmentArray");
static_assert(offsetof(FEquipmentArray, Items) == 0x000108, "Member 'FEquipmentArray::Items' has a wrong offset!");
static_assert(offsetof(FEquipmentArray, OwnerComponent) == 0x000118, "Member 'FEquipmentArray::OwnerComponent' has a wrong offset!");

// ScriptStruct GASIW.SpawnedActorData
// 0x0100 (0x0100 - 0x0000)
struct FSpawnedActorData final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEquipmentActorToSpawn                 SpawnInfo;                                         // 0x0010(0x00F0)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnedActorData) == 0x000010, "Wrong alignment on FSpawnedActorData");
static_assert(sizeof(FSpawnedActorData) == 0x000100, "Wrong size on FSpawnedActorData");
static_assert(offsetof(FSpawnedActorData, Actor) == 0x000000, "Member 'FSpawnedActorData::Actor' has a wrong offset!");
static_assert(offsetof(FSpawnedActorData, SpawnInfo) == 0x000010, "Member 'FSpawnedActorData::SpawnInfo' has a wrong offset!");

// ScriptStruct GASIW.ModifiedGameSetsArray
// 0x0010 (0x0010 - 0x0000)
struct FModifiedGameSetsArray final
{
public:
	TArray<class UGameplaySet*>                   GameplaySets;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModifiedGameSetsArray) == 0x000008, "Wrong alignment on FModifiedGameSetsArray");
static_assert(sizeof(FModifiedGameSetsArray) == 0x000010, "Wrong size on FModifiedGameSetsArray");
static_assert(offsetof(FModifiedGameSetsArray, GameplaySets) == 0x000000, "Member 'FModifiedGameSetsArray::GameplaySets' has a wrong offset!");

// ScriptStruct GASIW.FallbackEquipHandsMessage
// 0x0008 (0x0008 - 0x0000)
struct FFallbackEquipHandsMessage final
{
public:
	TWeakObjectPtr<class AActor>                  OwningCharacter;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFallbackEquipHandsMessage) == 0x000004, "Wrong alignment on FFallbackEquipHandsMessage");
static_assert(sizeof(FFallbackEquipHandsMessage) == 0x000008, "Wrong size on FFallbackEquipHandsMessage");
static_assert(offsetof(FFallbackEquipHandsMessage, OwningCharacter) == 0x000000, "Member 'FFallbackEquipHandsMessage::OwningCharacter' has a wrong offset!");

// ScriptStruct GASIW.AbilityMeshMontage
// 0x0010 (0x0010 - 0x0000)
struct FAbilityMeshMontage final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityMeshMontage) == 0x000008, "Wrong alignment on FAbilityMeshMontage");
static_assert(sizeof(FAbilityMeshMontage) == 0x000010, "Wrong size on FAbilityMeshMontage");
static_assert(offsetof(FAbilityMeshMontage, Mesh) == 0x000000, "Member 'FAbilityMeshMontage::Mesh' has a wrong offset!");
static_assert(offsetof(FAbilityMeshMontage, Montage) == 0x000008, "Member 'FAbilityMeshMontage::Montage' has a wrong offset!");

// ScriptStruct GASIW.SpawnActivationDelayExecutor
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FSpawnActivationDelayExecutor final
{
public:
	class UGameplayAbilityIW*                     Target;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x58];                                       // 0x0008(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnActivationDelayExecutor) == 0x000010, "Wrong alignment on FSpawnActivationDelayExecutor");
static_assert(sizeof(FSpawnActivationDelayExecutor) == 0x000060, "Wrong size on FSpawnActivationDelayExecutor");
static_assert(offsetof(FSpawnActivationDelayExecutor, Target) == 0x000000, "Member 'FSpawnActivationDelayExecutor::Target' has a wrong offset!");

// ScriptStruct GASIW.GameplayEffectContextIW
// 0x0028 (0x00A8 - 0x0080)
struct FGameplayEffectContextIW : public FGameplayEffectContext
{
public:
	uint8                                         Pad_80[0x28];                                      // 0x0080(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEffectContextIW) == 0x000008, "Wrong alignment on FGameplayEffectContextIW");
static_assert(sizeof(FGameplayEffectContextIW) == 0x0000A8, "Wrong size on FGameplayEffectContextIW");

// ScriptStruct GASIW.GameplaySet_GameplayAbility
// 0x0018 (0x0018 - 0x0000)
struct FGameplaySet_GameplayAbility final
{
public:
	TSubclassOf<class UGameplayAbilityIW>         Ability;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityLevel;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InputTag;                                          // 0x000C(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplaySet_GameplayAbility) == 0x000008, "Wrong alignment on FGameplaySet_GameplayAbility");
static_assert(sizeof(FGameplaySet_GameplayAbility) == 0x000018, "Wrong size on FGameplaySet_GameplayAbility");
static_assert(offsetof(FGameplaySet_GameplayAbility, Ability) == 0x000000, "Member 'FGameplaySet_GameplayAbility::Ability' has a wrong offset!");
static_assert(offsetof(FGameplaySet_GameplayAbility, AbilityLevel) == 0x000008, "Member 'FGameplaySet_GameplayAbility::AbilityLevel' has a wrong offset!");
static_assert(offsetof(FGameplaySet_GameplayAbility, InputTag) == 0x00000C, "Member 'FGameplaySet_GameplayAbility::InputTag' has a wrong offset!");

// ScriptStruct GASIW.GameplaySet_GameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct FGameplaySet_GameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffectIW>          GameplayEffect;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectLevel;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplaySet_GameplayEffect) == 0x000008, "Wrong alignment on FGameplaySet_GameplayEffect");
static_assert(sizeof(FGameplaySet_GameplayEffect) == 0x000010, "Wrong size on FGameplaySet_GameplayEffect");
static_assert(offsetof(FGameplaySet_GameplayEffect, GameplayEffect) == 0x000000, "Member 'FGameplaySet_GameplayEffect::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FGameplaySet_GameplayEffect, EffectLevel) == 0x000008, "Member 'FGameplaySet_GameplayEffect::EffectLevel' has a wrong offset!");

// ScriptStruct GASIW.GameplaySet_AttributeSet
// 0x0008 (0x0008 - 0x0000)
struct FGameplaySet_AttributeSet final
{
public:
	TSubclassOf<class UAttributeSetIW>            AttributeSet;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplaySet_AttributeSet) == 0x000008, "Wrong alignment on FGameplaySet_AttributeSet");
static_assert(sizeof(FGameplaySet_AttributeSet) == 0x000008, "Wrong size on FGameplaySet_AttributeSet");
static_assert(offsetof(FGameplaySet_AttributeSet, AttributeSet) == 0x000000, "Member 'FGameplaySet_AttributeSet::AttributeSet' has a wrong offset!");

}

