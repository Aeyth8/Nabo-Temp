#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Benchmark

#include "Basic.hpp"

#include "JsonUtilities_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Benchmark.BP_Benchmark_C
// 0x0178 (0x0408 - 0x0290)
class ABP_Benchmark_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentFPS;                                        // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MeasurePerformance;                                // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SampleRate;                                        // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentDelta;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Samples;                                           // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        MinFPS;                                            // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxFPS;                                            // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AverageFPS;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Done;                                              // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, class FString>            BenchmarkResults;                                  // 0x02F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWI_BenchmarkOverlay_C*                 BenchmarkOverlayWidget;                            // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Benchmark_Sequence_Play_Rate;                      // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    LevelSequencePlayer;                               // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnBenchmarkStarted;                                // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnBenchmarkFinished;                               // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        SlowestFrame;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentFrameTime;                                  // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FastestFrame;                                      // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AverageFrameTime;                                  // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WarmupCountdownDuration;                           // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalFrames;                                       // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Lowest1Percent;                                    // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Average1PercentFrametime;                          // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Average1PercentFPS;                                // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   Sequence_Player;                                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FJsonObjectWrapper                     Json_Object;                                       // 0x03D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Added_to_Lowest_Percent;                           // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                BiasArray;                                         // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AddToLowest1Percent(bool* AddedToLowestPercent);
	void BenchmarkFinished(const TMap<class FString, class FString>& Benchmark_Results);
	void BenchmarkStarted();
	void CalculateAverageFps();
	void CalculateAverageFrameTime();
	void CalculateLowestAverage1Perenct();
	void ConvertToFPS();
	void CreateBenchmarksResults(TMap<class FString, class FString>* BenchmarkResults_0);
	void CreateBenchmarksResults_Warmup(TMap<class FString, class FString>* BenchmarkResults_0);
	void CreateBenchmarksResultsSummary(TMap<class FString, class FString>* BenchmarkResults_0);
	void ExecuteUbergraph_BP_Benchmark(int32 EntryPoint);
	void HackTimerTick();
	void OnBenchmarkFinished__DelegateSignature(const TMap<class FString, class FString>& Benchmark_Results);
	void OnBenchmarkStarted__DelegateSignature();
	void PerformBenchmark();
	void ReceiveTick(float DeltaSeconds);
	void Sequence_Player_Finished();
	void Warmup_Countdown();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Benchmark_C">();
	}
	static class ABP_Benchmark_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Benchmark_C>();
	}
};
static_assert(alignof(ABP_Benchmark_C) == 0x000008, "Wrong alignment on ABP_Benchmark_C");
static_assert(sizeof(ABP_Benchmark_C) == 0x000408, "Wrong size on ABP_Benchmark_C");
static_assert(offsetof(ABP_Benchmark_C, UberGraphFrame) == 0x000290, "Member 'ABP_Benchmark_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_Benchmark_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, CurrentFPS) == 0x0002A0, "Member 'ABP_Benchmark_C::CurrentFPS' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, MeasurePerformance) == 0x0002A8, "Member 'ABP_Benchmark_C::MeasurePerformance' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, SampleRate) == 0x0002B0, "Member 'ABP_Benchmark_C::SampleRate' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, CurrentDelta) == 0x0002B8, "Member 'ABP_Benchmark_C::CurrentDelta' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, Samples) == 0x0002C0, "Member 'ABP_Benchmark_C::Samples' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, MinFPS) == 0x0002D0, "Member 'ABP_Benchmark_C::MinFPS' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, MaxFPS) == 0x0002D8, "Member 'ABP_Benchmark_C::MaxFPS' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, AverageFPS) == 0x0002E0, "Member 'ABP_Benchmark_C::AverageFPS' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, Done) == 0x0002E8, "Member 'ABP_Benchmark_C::Done' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, BenchmarkResults) == 0x0002F8, "Member 'ABP_Benchmark_C::BenchmarkResults' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, BenchmarkOverlayWidget) == 0x000348, "Member 'ABP_Benchmark_C::BenchmarkOverlayWidget' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, Benchmark_Sequence_Play_Rate) == 0x000350, "Member 'ABP_Benchmark_C::Benchmark_Sequence_Play_Rate' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, LevelSequencePlayer) == 0x000358, "Member 'ABP_Benchmark_C::LevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, OnBenchmarkStarted) == 0x000360, "Member 'ABP_Benchmark_C::OnBenchmarkStarted' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, OnBenchmarkFinished) == 0x000370, "Member 'ABP_Benchmark_C::OnBenchmarkFinished' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, SlowestFrame) == 0x000380, "Member 'ABP_Benchmark_C::SlowestFrame' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, CurrentFrameTime) == 0x000388, "Member 'ABP_Benchmark_C::CurrentFrameTime' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, FastestFrame) == 0x000390, "Member 'ABP_Benchmark_C::FastestFrame' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, AverageFrameTime) == 0x000398, "Member 'ABP_Benchmark_C::AverageFrameTime' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, WarmupCountdownDuration) == 0x0003A0, "Member 'ABP_Benchmark_C::WarmupCountdownDuration' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, TotalFrames) == 0x0003A4, "Member 'ABP_Benchmark_C::TotalFrames' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, Lowest1Percent) == 0x0003A8, "Member 'ABP_Benchmark_C::Lowest1Percent' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, Average1PercentFrametime) == 0x0003B8, "Member 'ABP_Benchmark_C::Average1PercentFrametime' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, Average1PercentFPS) == 0x0003C0, "Member 'ABP_Benchmark_C::Average1PercentFPS' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, Sequence_Player) == 0x0003C8, "Member 'ABP_Benchmark_C::Sequence_Player' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, Json_Object) == 0x0003D0, "Member 'ABP_Benchmark_C::Json_Object' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, Added_to_Lowest_Percent) == 0x0003F0, "Member 'ABP_Benchmark_C::Added_to_Lowest_Percent' has a wrong offset!");
static_assert(offsetof(ABP_Benchmark_C, BiasArray) == 0x0003F8, "Member 'ABP_Benchmark_C::BiasArray' has a wrong offset!");

}

