#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_PartySlot

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function WI_PartySlot.WI_PartySlot_C.BndEvt__WI_PartySlot_PartyInvite_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WI_PartySlot_C_BndEvt__WI_PartySlot_PartyInvite_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_BndEvt__WI_PartySlot_PartyInvite_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WI_PartySlot_C_BndEvt__WI_PartySlot_PartyInvite_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WI_PartySlot_C_BndEvt__WI_PartySlot_PartyInvite_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WI_PartySlot_C_BndEvt__WI_PartySlot_PartyInvite_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WI_PartySlot_C_BndEvt__WI_PartySlot_PartyInvite_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WI_PartySlot_C_BndEvt__WI_PartySlot_PartyInvite_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.ExecuteUbergraph_WI_PartySlot
// 0x0028 (0x0028 - 0x0000)
struct WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalUserOnlineServicesGameInstanceSubsystem* CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_GetUserAvatar_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot) == 0x000008, "Wrong alignment on WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot");
static_assert(sizeof(WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot) == 0x000028, "Wrong size on WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot");
static_assert(offsetof(WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot, EntryPoint) == 0x000000, "Member 'WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot, CallFunc_GetUserAvatar_ReturnValue) == 0x000010, "Member 'WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot::CallFunc_GetUserAvatar_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot, K2Node_Event_IsDesignTime) == 0x000018, "Member 'WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot, K2Node_ComponentBoundEvent_Button) == 0x000020, "Member 'WI_PartySlot_C_ExecuteUbergraph_WI_PartySlot::K2Node_ComponentBoundEvent_Button' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.OnInviteClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WI_PartySlot_C_OnInviteClicked__DelegateSignature final
{
public:
	class UWI_PartySlot_C*                        PartySlotWidget;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_OnInviteClicked__DelegateSignature) == 0x000008, "Wrong alignment on WI_PartySlot_C_OnInviteClicked__DelegateSignature");
static_assert(sizeof(WI_PartySlot_C_OnInviteClicked__DelegateSignature) == 0x000008, "Wrong size on WI_PartySlot_C_OnInviteClicked__DelegateSignature");
static_assert(offsetof(WI_PartySlot_C_OnInviteClicked__DelegateSignature, PartySlotWidget) == 0x000000, "Member 'WI_PartySlot_C_OnInviteClicked__DelegateSignature::PartySlotWidget' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WI_PartySlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_PreConstruct) == 0x000001, "Wrong alignment on WI_PartySlot_C_PreConstruct");
static_assert(sizeof(WI_PartySlot_C_PreConstruct) == 0x000001, "Wrong size on WI_PartySlot_C_PreConstruct");
static_assert(offsetof(WI_PartySlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WI_PartySlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.SetAvatarInfo
// 0x0058 (0x0058 - 0x0000)
struct WI_PartySlot_C_SetAvatarInfo final
{
public:
	class APlayerStateJP*                         Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowAvatar_0;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetNeighborIdentifier_ReturnValue;        // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGetNeighborDefinition_Succeeded;       // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNeighborDefinition>     CallFunc_TryGetNeighborDefinition_ReturnValue;     // 0x0018(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNeighborDefinition*                    K2Node_DynamicCast_AsNeighbor_Definition;          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_SetAvatarInfo) == 0x000008, "Wrong alignment on WI_PartySlot_C_SetAvatarInfo");
static_assert(sizeof(WI_PartySlot_C_SetAvatarInfo) == 0x000058, "Wrong size on WI_PartySlot_C_SetAvatarInfo");
static_assert(offsetof(WI_PartySlot_C_SetAvatarInfo, Player) == 0x000000, "Member 'WI_PartySlot_C_SetAvatarInfo::Player' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetAvatarInfo, ShowAvatar_0) == 0x000008, "Member 'WI_PartySlot_C_SetAvatarInfo::ShowAvatar_0' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetAvatarInfo, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'WI_PartySlot_C_SetAvatarInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetAvatarInfo, CallFunc_GetNeighborIdentifier_ReturnValue) == 0x00000C, "Member 'WI_PartySlot_C_SetAvatarInfo::CallFunc_GetNeighborIdentifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetAvatarInfo, CallFunc_TryGetNeighborDefinition_Succeeded) == 0x000014, "Member 'WI_PartySlot_C_SetAvatarInfo::CallFunc_TryGetNeighborDefinition_Succeeded' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetAvatarInfo, CallFunc_TryGetNeighborDefinition_ReturnValue) == 0x000018, "Member 'WI_PartySlot_C_SetAvatarInfo::CallFunc_TryGetNeighborDefinition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetAvatarInfo, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000040, "Member 'WI_PartySlot_C_SetAvatarInfo::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetAvatarInfo, K2Node_DynamicCast_AsNeighbor_Definition) == 0x000048, "Member 'WI_PartySlot_C_SetAvatarInfo::K2Node_DynamicCast_AsNeighbor_Definition' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetAvatarInfo, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'WI_PartySlot_C_SetAvatarInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.SetHouseName
// 0x0010 (0x0010 - 0x0000)
struct WI_PartySlot_C_SetHouseName final
{
public:
	class FText                                   HouseName_0;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WI_PartySlot_C_SetHouseName) == 0x000008, "Wrong alignment on WI_PartySlot_C_SetHouseName");
static_assert(sizeof(WI_PartySlot_C_SetHouseName) == 0x000010, "Wrong size on WI_PartySlot_C_SetHouseName");
static_assert(offsetof(WI_PartySlot_C_SetHouseName, HouseName_0) == 0x000000, "Member 'WI_PartySlot_C_SetHouseName::HouseName_0' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.SetIsReady
// 0x0001 (0x0001 - 0x0000)
struct WI_PartySlot_C_SetIsReady final
{
public:
	bool                                          IsReady_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_SetIsReady) == 0x000001, "Wrong alignment on WI_PartySlot_C_SetIsReady");
static_assert(sizeof(WI_PartySlot_C_SetIsReady) == 0x000001, "Wrong size on WI_PartySlot_C_SetIsReady");
static_assert(offsetof(WI_PartySlot_C_SetIsReady, IsReady_0) == 0x000000, "Member 'WI_PartySlot_C_SetIsReady::IsReady_0' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.SetLevelText
// 0x0010 (0x0010 - 0x0000)
struct WI_PartySlot_C_SetLevelText final
{
public:
	class FText                                   Level_Text_0;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WI_PartySlot_C_SetLevelText) == 0x000008, "Wrong alignment on WI_PartySlot_C_SetLevelText");
static_assert(sizeof(WI_PartySlot_C_SetLevelText) == 0x000010, "Wrong size on WI_PartySlot_C_SetLevelText");
static_assert(offsetof(WI_PartySlot_C_SetLevelText, Level_Text_0) == 0x000000, "Member 'WI_PartySlot_C_SetLevelText::Level_Text_0' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.SetPlayerNameText
// 0x0010 (0x0010 - 0x0000)
struct WI_PartySlot_C_SetPlayerNameText final
{
public:
	class FText                                   Player_Name_Text_0;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WI_PartySlot_C_SetPlayerNameText) == 0x000008, "Wrong alignment on WI_PartySlot_C_SetPlayerNameText");
static_assert(sizeof(WI_PartySlot_C_SetPlayerNameText) == 0x000010, "Wrong size on WI_PartySlot_C_SetPlayerNameText");
static_assert(offsetof(WI_PartySlot_C_SetPlayerNameText, Player_Name_Text_0) == 0x000000, "Member 'WI_PartySlot_C_SetPlayerNameText::Player_Name_Text_0' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.SetPortraitSoftTexture
// 0x0028 (0x0028 - 0x0000)
struct WI_PartySlot_C_SetPortraitSoftTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              Portrait_Soft_Texture_0;                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_SetPortraitSoftTexture) == 0x000008, "Wrong alignment on WI_PartySlot_C_SetPortraitSoftTexture");
static_assert(sizeof(WI_PartySlot_C_SetPortraitSoftTexture) == 0x000028, "Wrong size on WI_PartySlot_C_SetPortraitSoftTexture");
static_assert(offsetof(WI_PartySlot_C_SetPortraitSoftTexture, Portrait_Soft_Texture_0) == 0x000000, "Member 'WI_PartySlot_C_SetPortraitSoftTexture::Portrait_Soft_Texture_0' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.SetShowAvatar
// 0x0010 (0x0010 - 0x0000)
struct WI_PartySlot_C_SetShowAvatar final
{
public:
	bool                                          ShowAvatar_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_SetShowAvatar) == 0x000004, "Wrong alignment on WI_PartySlot_C_SetShowAvatar");
static_assert(sizeof(WI_PartySlot_C_SetShowAvatar) == 0x000010, "Wrong size on WI_PartySlot_C_SetShowAvatar");
static_assert(offsetof(WI_PartySlot_C_SetShowAvatar, ShowAvatar_0) == 0x000000, "Member 'WI_PartySlot_C_SetShowAvatar::ShowAvatar_0' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetShowAvatar, Temp_bool_Variable) == 0x000001, "Member 'WI_PartySlot_C_SetShowAvatar::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetShowAvatar, Temp_int_Variable) == 0x000004, "Member 'WI_PartySlot_C_SetShowAvatar::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetShowAvatar, Temp_int_Variable_1) == 0x000008, "Member 'WI_PartySlot_C_SetShowAvatar::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_PartySlot_C_SetShowAvatar, K2Node_Select_Default) == 0x00000C, "Member 'WI_PartySlot_C_SetShowAvatar::K2Node_Select_Default' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.SetShowPlayerLevel
// 0x0001 (0x0001 - 0x0000)
struct WI_PartySlot_C_SetShowPlayerLevel final
{
public:
	bool                                          Show_Player_Level_0;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_SetShowPlayerLevel) == 0x000001, "Wrong alignment on WI_PartySlot_C_SetShowPlayerLevel");
static_assert(sizeof(WI_PartySlot_C_SetShowPlayerLevel) == 0x000001, "Wrong size on WI_PartySlot_C_SetShowPlayerLevel");
static_assert(offsetof(WI_PartySlot_C_SetShowPlayerLevel, Show_Player_Level_0) == 0x000000, "Member 'WI_PartySlot_C_SetShowPlayerLevel::Show_Player_Level_0' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.SetShowPlayerName
// 0x0001 (0x0001 - 0x0000)
struct WI_PartySlot_C_SetShowPlayerName final
{
public:
	bool                                          Show_Player_Name_0;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_SetShowPlayerName) == 0x000001, "Wrong alignment on WI_PartySlot_C_SetShowPlayerName");
static_assert(sizeof(WI_PartySlot_C_SetShowPlayerName) == 0x000001, "Wrong size on WI_PartySlot_C_SetShowPlayerName");
static_assert(offsetof(WI_PartySlot_C_SetShowPlayerName, Show_Player_Name_0) == 0x000000, "Member 'WI_PartySlot_C_SetShowPlayerName::Show_Player_Name_0' has a wrong offset!");

// Function WI_PartySlot.WI_PartySlot_C.SetUserAvatarPortrait
// 0x0008 (0x0008 - 0x0000)
struct WI_PartySlot_C_SetUserAvatarPortrait final
{
public:
	class UTexture2D*                             AvatarTexture;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_PartySlot_C_SetUserAvatarPortrait) == 0x000008, "Wrong alignment on WI_PartySlot_C_SetUserAvatarPortrait");
static_assert(sizeof(WI_PartySlot_C_SetUserAvatarPortrait) == 0x000008, "Wrong size on WI_PartySlot_C_SetUserAvatarPortrait");
static_assert(offsetof(WI_PartySlot_C_SetUserAvatarPortrait, AvatarTexture) == 0x000000, "Member 'WI_PartySlot_C_SetUserAvatarPortrait::AvatarTexture' has a wrong offset!");

}

