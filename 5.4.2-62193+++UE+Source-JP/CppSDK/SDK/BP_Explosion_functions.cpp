#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Explosion

#include "Basic.hpp"

#include "BP_Explosion_classes.hpp"
#include "BP_Explosion_parameters.hpp"


namespace SDK
{

// Function BP_Explosion.BP_Explosion_C.CalculateDamageBasedOnDistance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Explosion_C::CalculateDamageBasedOnDistance(class AActor* HitActor, double* Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "CalculateDamageBasedOnDistance");

	Params::BP_Explosion_C_CalculateDamageBasedOnDistance Parms{};

	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Damage != nullptr)
		*Damage = Parms.Damage;
}


// Function BP_Explosion.BP_Explosion_C.CanAffectActorBasedOnTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    CanHit                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Explosion_C::CanAffectActorBasedOnTeam(class AActor* HitActor, bool* CanHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "CanAffectActorBasedOnTeam");

	Params::BP_Explosion_C_CanAffectActorBasedOnTeam Parms{};

	Parms.HitActor = HitActor;

	UObject::ProcessEvent(Func, &Parms);

	if (CanHit != nullptr)
		*CanHit = Parms.CanHit;
}


// Function BP_Explosion.BP_Explosion_C.CheckLineOfSight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Explosion_C::CheckLineOfSight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "CheckLineOfSight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Explosion.BP_Explosion_C.Detonate
// (BlueprintCallable, BlueprintEvent)

void ABP_Explosion_C::Detonate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "Detonate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Explosion.BP_Explosion_C.DoExplode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   ActorsInLineOfSight_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_Explosion_C::DoExplode(TArray<class AActor*>& ActorsInLineOfSight_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "DoExplode");

	Params::BP_Explosion_C_DoExplode Parms{};

	Parms.ActorsInLineOfSight_0 = std::move(ActorsInLineOfSight_0);

	UObject::ProcessEvent(Func, &Parms);

	ActorsInLineOfSight_0 = std::move(Parms.ActorsInLineOfSight_0);
}


// Function BP_Explosion.BP_Explosion_C.ExecuteUbergraph_BP_Explosion
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Explosion_C::ExecuteUbergraph_BP_Explosion(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "ExecuteUbergraph_BP_Explosion");

	Params::BP_Explosion_C_ExecuteUbergraph_BP_Explosion Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Explosion.BP_Explosion_C.FilterHitActors
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FHitResult>               Hits                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ABP_Explosion_C::FilterHitActors(TArray<struct FHitResult>& Hits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "FilterHitActors");

	Params::BP_Explosion_C_FilterHitActors Parms{};

	Parms.Hits = std::move(Hits);

	UObject::ProcessEvent(Func, &Parms);

	Hits = std::move(Parms.Hits);
}


// Function BP_Explosion.BP_Explosion_C.GetKnockbackVelocity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Explosion_C::GetKnockbackVelocity(class AActor* TargetActor, struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "GetKnockbackVelocity");

	Params::BP_Explosion_C_GetKnockbackVelocity Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function BP_Explosion.BP_Explosion_C.HitShield
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

bool ABP_Explosion_C::HitShield(const struct FHitResult& Hit, class AActor** HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "HitShield");

	Params::BP_Explosion_C_HitShield Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);

	if (HitActor != nullptr)
		*HitActor = Parms.HitActor;

	return Parms.ReturnValue;
}


// Function BP_Explosion.BP_Explosion_C.Knockback
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_Explosion_C::Knockback(TArray<class AActor*>& Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "Knockback");

	Params::BP_Explosion_C_Knockback Parms{};

	Parms.Actors = std::move(Actors);

	UObject::ProcessEvent(Func, &Parms);

	Actors = std::move(Parms.Actors);
}


// Function BP_Explosion.BP_Explosion_C.Multi_Cosmetics
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Explosion_C::Multi_Cosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "Multi_Cosmetics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Explosion.BP_Explosion_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Explosion_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Explosion.BP_Explosion_C.TracedShield
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Explosion_C::TracedShield(class AActor* Actor, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Explosion_C", "TracedShield");

	Params::BP_Explosion_C_TracedShield Parms{};

	Parms.Actor = Actor;
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}

}

