#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_JP_TPP_Preview

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "ABP_JP_TPP_Preview_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ControlRig_structs.hpp"
#include "JP_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_JP_TPP_Preview.ABP_JP_TPP_Preview_C
// 0x5170 (0x54E0 - 0x0370)
class UABP_JP_TPP_Preview_C : public UAnimInstance
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_JP_TPP_Preview::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0378(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0380(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0388(0x0008)()
	struct FAnimNode_MakeDynamicAdditive          AnimGraphNode_MakeDynamicAdditive_1;               // 0x0390(0x0038)()
	struct FAnimNode_MakeDynamicAdditive          AnimGraphNode_MakeDynamicAdditive;                 // 0x03C8(0x0038)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_11;                   // 0x0400(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_10;                   // 0x0480(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_35;                    // 0x0500(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_34;                    // 0x0528(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_33;                    // 0x0550(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_32;                    // 0x0578(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_17;                 // 0x05A0(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_16;                 // 0x0690(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_15;                 // 0x0780(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_14;                 // 0x0870(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_13;                 // 0x0960(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_12;                 // 0x0A50(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_11;                 // 0x0B40(0x00F0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_31;                    // 0x0C30(0x0028)()
	struct FAnimNode_ApplyMeshSpaceAdditive       AnimGraphNode_ApplyMeshSpaceAdditive_4;            // 0x0C58(0x00D0)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_5;                       // 0x0D28(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_8;                              // 0x0DF0(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_9;                    // 0x0E38(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_30;                    // 0x0EB8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_29;                    // 0x0EE0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_28;                    // 0x0F08(0x0028)()
	struct FAnimNode_ApplyMeshSpaceAdditive       AnimGraphNode_ApplyMeshSpaceAdditive_3;            // 0x0F30(0x00D0)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_4;                       // 0x1000(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_7;                              // 0x10C8(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_27;                    // 0x1110(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_26;                    // 0x1138(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_25;                    // 0x1160(0x0028)()
	struct FAnimNode_ApplyMeshSpaceAdditive       AnimGraphNode_ApplyMeshSpaceAdditive_2;            // 0x1188(0x00D0)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_3;                       // 0x1258(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_6;                              // 0x1320(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_24;                    // 0x1368(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_23;                    // 0x1390(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_22;                    // 0x13B8(0x0028)()
	struct FAnimNode_ApplyMeshSpaceAdditive       AnimGraphNode_ApplyMeshSpaceAdditive_1;            // 0x13E0(0x00D0)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_2;                       // 0x14B0(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_5;                              // 0x1578(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_21;                    // 0x15C0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_20;                    // 0x15E8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_19;                    // 0x1610(0x0028)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_1;                       // 0x1638(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x1700(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_18;                    // 0x1748(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_17;                    // 0x1770(0x0028)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x1798(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x1860(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_16;                    // 0x18A8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_15;                    // 0x18D0(0x0028)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_8;                    // 0x18F8(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_7;                    // 0x1978(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_6;                    // 0x19F8(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_5;                    // 0x1A78(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_4;                    // 0x1AF8(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_14;                    // 0x1B78(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_13;                    // 0x1BA0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_12;                    // 0x1BC8(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x1BF0(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x1CB8(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_11;                    // 0x1D80(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_10;                    // 0x1DA8(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_10;                 // 0x1DD0(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_9;                  // 0x1EC0(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_8;                  // 0x1FB0(0x00F0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x20A0(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_7;                  // 0x20E8(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_6;                  // 0x21D8(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_5;                  // 0x22C8(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_4;                  // 0x23B8(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_3;                  // 0x24A8(0x00F0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_9;                     // 0x2598(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_2;                  // 0x25C0(0x00F0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_8;                     // 0x26B0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_7;                     // 0x26D8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x2700(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x2728(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x2750(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x2778(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x27A0(0x0028)()
	struct FAnimNode_Root                         AnimGraphNode_Root_3;                              // 0x27C8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2;             // 0x27E8(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2;             // 0x2808(0x0020)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x2828(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x28A8(0x0080)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x2928(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x2A50(0x0128)()
	struct FAnimNode_HandIKRetargeting            AnimGraphNode_HandIKRetargeting;                   // 0x2B78(0x0138)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_4;                          // 0x2CB0(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_3;                          // 0x2DA0(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_2;                          // 0x2E90(0x00F0)()
	struct FAnimNode_Fabrik                       AnimGraphNode_Fabrik_1;                            // 0x2F80(0x01F0)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_3;                         // 0x3170(0x0280)()
	struct FAnimNode_Fabrik                       AnimGraphNode_Fabrik;                              // 0x33F0(0x01F0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x35E0(0x0080)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_2;                         // 0x3660(0x0280)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_4;                   // 0x38E0(0x00B8)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_3;                   // 0x3998(0x00B8)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_2;                   // 0x3A50(0x00B8)()
	uint8                                         Pad_3B08[0x8];                                     // 0x3B08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_1;                         // 0x3B10(0x0280)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x3D90(0x0280)()
	struct FAnimNode_Root                         AnimGraphNode_Root_2;                              // 0x4010(0x0020)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x4030(0x04D0)(ContainsInstancedReference)
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x4500(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x4548(0x0028)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_1;                   // 0x4570(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x4628(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x4648(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x4668(0x0020)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer_2;                   // 0x4688(0x00C8)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x4750(0x0040)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x4790(0x0048)()
	struct FAnimNode_ApplyMeshSpaceAdditive       AnimGraphNode_ApplyMeshSpaceAdditive;              // 0x47D8(0x00D0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_1;                          // 0x48A8(0x00F0)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x4998(0x0040)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer_1;                   // 0x49D8(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x4AA0(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x4B20(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x4B48(0x0048)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone;                            // 0x4B90(0x00F0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x4C80(0x0048)()
	uint8                                         Pad_4CC8[0x8];                                     // 0x4CC8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt;                              // 0x4CD0(0x0250)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x4F20(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x4F40(0x0020)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer;                     // 0x4F60(0x00C8)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x5028(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x50E0(0x0020)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x5100(0x00F0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x51F0(0x00F0)()
	double                                        __CustomProperty_ZPelvisOffset_A8E3136A432827E9D618B78DC00F714C; // 0x52E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_ZFootOffset_A8E3136A432827E9D618B78DC00F714C; // 0x52E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_Velocity_A8E3136A432827E9D618B78DC00F714C; // 0x52F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_XOffset_A8E3136A432827E9D618B78DC00F714C; // 0x5308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_ShouldDoIKTrace_A8E3136A432827E9D618B78DC00F714C; // 0x5310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5311[0x7];                                     // 0x5311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      BaseAnimationSequence;                             // 0x5318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         IdleMotionBlendWeight;                             // 0x5320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5324[0x4];                                     // 0x5324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      SecondaryMotionSequence;                           // 0x5328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         SecondaryMotionSequenceStartPosition;              // 0x5330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Do_IKTrace;                                 // 0x5334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5335[0x3];                                     // 0x5335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        XOffset;                                           // 0x5338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZFoot_Offset;                                      // 0x5340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterName                                Character;                                         // 0x5348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5349[0x7];                                     // 0x5349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ZPelvis_Offset;                                    // 0x5350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<ECharacterName, double>                  ZPelvisCharOffsets;                                // 0x5358(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<ECharacterName, double>                  ZFootCharOffsets;                                  // 0x53A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bHand_IK_Retargeting;                              // 0x53F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53F9[0x3];                                     // 0x53F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftHandCopyBoneWeight;                            // 0x53FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hand_FK_Weight;                                    // 0x5400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewVar;                                            // 0x5404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Enable_HandIK_R;                                   // 0x5408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Enable_HandIK_L;                                   // 0x5410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Enable_HandIK_R_Gun;                               // 0x5418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Enable_HandIK_L_Gun;                               // 0x5420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewVar_1;                                          // 0x5428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightHandCopyBoneWeight;                           // 0x542C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spine_Add;                                         // 0x5430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Head_Add;                                          // 0x5438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_L_Add;                                         // 0x5440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_R_Add;                                         // 0x5448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hand_r;                                            // 0x5450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hand_l;                                            // 0x5458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_R_LS;                                          // 0x5460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_R_MS;                                          // 0x5468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_L_LS;                                          // 0x5470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arm_L_MS;                                          // 0x5478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IKTraceAlpha;                                      // 0x5480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryMotionAlpha;                              // 0x5484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LookAtAlpha;                                       // 0x5488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LookAtPos;                                         // 0x5490(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldLookAtCamera;                               // 0x54A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54A9[0x7];                                     // 0x54A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActiveCamera;                                      // 0x54B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Weapon_L_IK_Alpha;                                 // 0x54B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weapon_R_IK_Alpha;                                 // 0x54BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Weapon_R_IK_Alpha_0;                               // 0x54C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanBlink;                                         // 0x54C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C5[0x3];                                     // 0x54C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlinkAlpha;                                        // 0x54C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54CC[0x4];                                     // 0x54CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Blink_asset;                                       // 0x54D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void AnimNotify_DisableBlink();
	void AnimNotify_EnableBlink();
	void BlendLayers(const struct FPoseLink& BaseLayer, const struct FPoseLink& OverlayLayer, const struct FPoseLink& BasePose, struct FPoseLink* BlendLayers_0);
	void BlinkMontage();
	void BlueprintInitializeAnimation();
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_ABP_JP_TPP_Preview(int32 EntryPoint);
	void HandIK(const struct FPoseLink& InPose, struct FPoseLink* HandIK_0);
	void ItemIK(const struct FPoseLink& InPose_0, struct FPoseLink* ItemIK_0);
	void PreviewActorLookAtCamera(bool bShouldLookAtCamera_0);
	void SetRandomBlinkInterval();
	void StopBlinking();
	void UpdateLayerData();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_JP_TPP_Preview_C">();
	}
	static class UABP_JP_TPP_Preview_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_JP_TPP_Preview_C>();
	}
};
static_assert(alignof(UABP_JP_TPP_Preview_C) == 0x000010, "Wrong alignment on UABP_JP_TPP_Preview_C");
static_assert(sizeof(UABP_JP_TPP_Preview_C) == 0x0054E0, "Wrong size on UABP_JP_TPP_Preview_C");
static_assert(offsetof(UABP_JP_TPP_Preview_C, UberGraphFrame) == 0x000370, "Member 'UABP_JP_TPP_Preview_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, __AnimBlueprintMutables) == 0x000378, "Member 'UABP_JP_TPP_Preview_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimBlueprintExtension_PropertyAccess) == 0x000380, "Member 'UABP_JP_TPP_Preview_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimBlueprintExtension_Base) == 0x000388, "Member 'UABP_JP_TPP_Preview_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_MakeDynamicAdditive_1) == 0x000390, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_MakeDynamicAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_MakeDynamicAdditive) == 0x0003C8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_MakeDynamicAdditive' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_11) == 0x000400, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_11' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_10) == 0x000480, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_10' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_35) == 0x000500, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_35' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_34) == 0x000528, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_34' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_33) == 0x000550, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_33' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_32) == 0x000578, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_32' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_17) == 0x0005A0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_17' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_16) == 0x000690, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_16' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_15) == 0x000780, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_15' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_14) == 0x000870, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_14' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_13) == 0x000960, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_13' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_12) == 0x000A50, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_12' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_11) == 0x000B40, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_11' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_31) == 0x000C30, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_31' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ApplyMeshSpaceAdditive_4) == 0x000C58, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ApplyMeshSpaceAdditive_4' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_TwoWayBlend_5) == 0x000D28, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_TwoWayBlend_5' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Slot_8) == 0x000DF0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Slot_8' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_9) == 0x000E38, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_9' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_30) == 0x000EB8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_30' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_29) == 0x000EE0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_29' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_28) == 0x000F08, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_28' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ApplyMeshSpaceAdditive_3) == 0x000F30, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ApplyMeshSpaceAdditive_3' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_TwoWayBlend_4) == 0x001000, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_TwoWayBlend_4' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Slot_7) == 0x0010C8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Slot_7' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_27) == 0x001110, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_27' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_26) == 0x001138, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_26' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_25) == 0x001160, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_25' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ApplyMeshSpaceAdditive_2) == 0x001188, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ApplyMeshSpaceAdditive_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_TwoWayBlend_3) == 0x001258, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_TwoWayBlend_3' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Slot_6) == 0x001320, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Slot_6' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_24) == 0x001368, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_24' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_23) == 0x001390, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_23' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_22) == 0x0013B8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_22' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ApplyMeshSpaceAdditive_1) == 0x0013E0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ApplyMeshSpaceAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_TwoWayBlend_2) == 0x0014B0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_TwoWayBlend_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Slot_5) == 0x001578, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Slot_5' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_21) == 0x0015C0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_21' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_20) == 0x0015E8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_20' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_19) == 0x001610, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_19' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_TwoWayBlend_1) == 0x001638, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_TwoWayBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Slot_4) == 0x001700, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_18) == 0x001748, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_18' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_17) == 0x001770, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_17' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_TwoWayBlend) == 0x001798, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Slot_3) == 0x001860, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_16) == 0x0018A8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_16' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_15) == 0x0018D0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_15' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_8) == 0x0018F8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_8' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_7) == 0x001978, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_7' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_6) == 0x0019F8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_5) == 0x001A78, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_4) == 0x001AF8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_14) == 0x001B78, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_14' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_13) == 0x001BA0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_13' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_12) == 0x001BC8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_12' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ApplyAdditive_1) == 0x001BF0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ApplyAdditive) == 0x001CB8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_11) == 0x001D80, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_11' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_10) == 0x001DA8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_10' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_10) == 0x001DD0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_10' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_9) == 0x001EC0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_9' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_8) == 0x001FB0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_8' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Slot_2) == 0x0020A0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_7) == 0x0020E8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_7' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_6) == 0x0021D8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_6' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_5) == 0x0022C8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_5' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_4) == 0x0023B8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_4' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_3) == 0x0024A8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_3' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_9) == 0x002598, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_9' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_2) == 0x0025C0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_8) == 0x0026B0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_8' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_7) == 0x0026D8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_7' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_6) == 0x002700, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_5) == 0x002728, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_4) == 0x002750, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_3) == 0x002778, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_2) == 0x0027A0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Root_3) == 0x0027C8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Root_3' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ComponentToLocalSpace_2) == 0x0027E8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ComponentToLocalSpace_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LocalToComponentSpace_2) == 0x002808, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LocalToComponentSpace_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_3) == 0x002828, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_2) == 0x0028A8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ModifyBone_1) == 0x002928, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ModifyBone) == 0x002A50, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_HandIKRetargeting) == 0x002B78, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_HandIKRetargeting' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_CopyBone_4) == 0x002CB0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_CopyBone_4' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_CopyBone_3) == 0x002DA0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_CopyBone_3' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_CopyBone_2) == 0x002E90, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_CopyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Fabrik_1) == 0x002F80, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Fabrik_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_TwoBoneIK_3) == 0x003170, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_TwoBoneIK_3' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Fabrik) == 0x0033F0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Fabrik' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose_1) == 0x0035E0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_TwoBoneIK_2) == 0x003660, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_TwoBoneIK_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LinkedInputPose_4) == 0x0038E0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LinkedInputPose_4' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LinkedInputPose_3) == 0x003998, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LinkedInputPose_3' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LinkedInputPose_2) == 0x003A50, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LinkedInputPose_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_TwoBoneIK_1) == 0x003B10, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_TwoBoneIK_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_TwoBoneIK) == 0x003D90, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Root_2) == 0x004010, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Root_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ControlRig) == 0x004030, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Slot_1) == 0x004500, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose_1) == 0x004548, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LinkedInputPose_1) == 0x004570, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LinkedInputPose_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Root_1) == 0x004628, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x004648, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LocalToComponentSpace_1) == 0x004668, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LinkedAnimLayer_2) == 0x004688, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LinkedAnimLayer_2' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SequenceEvaluator_1) == 0x004750, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SequencePlayer_1) == 0x004790, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ApplyMeshSpaceAdditive) == 0x0047D8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ApplyMeshSpaceAdditive' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_CopyBone_1) == 0x0048A8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_CopyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SequenceEvaluator) == 0x004998, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LinkedAnimLayer_1) == 0x0049D8, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LinkedAnimLayer_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SaveCachedPose) == 0x004AA0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_UseCachedPose) == 0x004B20, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_SequencePlayer) == 0x004B48, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_CopyBone) == 0x004B90, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_CopyBone' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Slot) == 0x004C80, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LookAt) == 0x004CD0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LookAt' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LocalToComponentSpace) == 0x004F20, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_ComponentToLocalSpace) == 0x004F40, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LinkedAnimLayer) == 0x004F60, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LinkedInputPose) == 0x005028, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_Root) == 0x0050E0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend_1) == 0x005100, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, AnimGraphNode_LayeredBoneBlend) == 0x0051F0, "Member 'UABP_JP_TPP_Preview_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, __CustomProperty_ZPelvisOffset_A8E3136A432827E9D618B78DC00F714C) == 0x0052E0, "Member 'UABP_JP_TPP_Preview_C::__CustomProperty_ZPelvisOffset_A8E3136A432827E9D618B78DC00F714C' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, __CustomProperty_ZFootOffset_A8E3136A432827E9D618B78DC00F714C) == 0x0052E8, "Member 'UABP_JP_TPP_Preview_C::__CustomProperty_ZFootOffset_A8E3136A432827E9D618B78DC00F714C' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, __CustomProperty_Velocity_A8E3136A432827E9D618B78DC00F714C) == 0x0052F0, "Member 'UABP_JP_TPP_Preview_C::__CustomProperty_Velocity_A8E3136A432827E9D618B78DC00F714C' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, __CustomProperty_XOffset_A8E3136A432827E9D618B78DC00F714C) == 0x005308, "Member 'UABP_JP_TPP_Preview_C::__CustomProperty_XOffset_A8E3136A432827E9D618B78DC00F714C' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, __CustomProperty_ShouldDoIKTrace_A8E3136A432827E9D618B78DC00F714C) == 0x005310, "Member 'UABP_JP_TPP_Preview_C::__CustomProperty_ShouldDoIKTrace_A8E3136A432827E9D618B78DC00F714C' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, BaseAnimationSequence) == 0x005318, "Member 'UABP_JP_TPP_Preview_C::BaseAnimationSequence' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, IdleMotionBlendWeight) == 0x005320, "Member 'UABP_JP_TPP_Preview_C::IdleMotionBlendWeight' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, SecondaryMotionSequence) == 0x005328, "Member 'UABP_JP_TPP_Preview_C::SecondaryMotionSequence' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, SecondaryMotionSequenceStartPosition) == 0x005330, "Member 'UABP_JP_TPP_Preview_C::SecondaryMotionSequenceStartPosition' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Should_Do_IKTrace) == 0x005334, "Member 'UABP_JP_TPP_Preview_C::Should_Do_IKTrace' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, XOffset) == 0x005338, "Member 'UABP_JP_TPP_Preview_C::XOffset' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, ZFoot_Offset) == 0x005340, "Member 'UABP_JP_TPP_Preview_C::ZFoot_Offset' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Character) == 0x005348, "Member 'UABP_JP_TPP_Preview_C::Character' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, ZPelvis_Offset) == 0x005350, "Member 'UABP_JP_TPP_Preview_C::ZPelvis_Offset' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, ZPelvisCharOffsets) == 0x005358, "Member 'UABP_JP_TPP_Preview_C::ZPelvisCharOffsets' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, ZFootCharOffsets) == 0x0053A8, "Member 'UABP_JP_TPP_Preview_C::ZFootCharOffsets' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, bHand_IK_Retargeting) == 0x0053F8, "Member 'UABP_JP_TPP_Preview_C::bHand_IK_Retargeting' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, LeftHandCopyBoneWeight) == 0x0053FC, "Member 'UABP_JP_TPP_Preview_C::LeftHandCopyBoneWeight' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Hand_FK_Weight) == 0x005400, "Member 'UABP_JP_TPP_Preview_C::Hand_FK_Weight' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, NewVar) == 0x005404, "Member 'UABP_JP_TPP_Preview_C::NewVar' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Enable_HandIK_R) == 0x005408, "Member 'UABP_JP_TPP_Preview_C::Enable_HandIK_R' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Enable_HandIK_L) == 0x005410, "Member 'UABP_JP_TPP_Preview_C::Enable_HandIK_L' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Enable_HandIK_R_Gun) == 0x005418, "Member 'UABP_JP_TPP_Preview_C::Enable_HandIK_R_Gun' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Enable_HandIK_L_Gun) == 0x005420, "Member 'UABP_JP_TPP_Preview_C::Enable_HandIK_L_Gun' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, NewVar_1) == 0x005428, "Member 'UABP_JP_TPP_Preview_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, RightHandCopyBoneWeight) == 0x00542C, "Member 'UABP_JP_TPP_Preview_C::RightHandCopyBoneWeight' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Spine_Add) == 0x005430, "Member 'UABP_JP_TPP_Preview_C::Spine_Add' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Head_Add) == 0x005438, "Member 'UABP_JP_TPP_Preview_C::Head_Add' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Arm_L_Add) == 0x005440, "Member 'UABP_JP_TPP_Preview_C::Arm_L_Add' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Arm_R_Add) == 0x005448, "Member 'UABP_JP_TPP_Preview_C::Arm_R_Add' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Hand_r) == 0x005450, "Member 'UABP_JP_TPP_Preview_C::Hand_r' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Hand_l) == 0x005458, "Member 'UABP_JP_TPP_Preview_C::Hand_l' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Arm_R_LS) == 0x005460, "Member 'UABP_JP_TPP_Preview_C::Arm_R_LS' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Arm_R_MS) == 0x005468, "Member 'UABP_JP_TPP_Preview_C::Arm_R_MS' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Arm_L_LS) == 0x005470, "Member 'UABP_JP_TPP_Preview_C::Arm_L_LS' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Arm_L_MS) == 0x005478, "Member 'UABP_JP_TPP_Preview_C::Arm_L_MS' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, IKTraceAlpha) == 0x005480, "Member 'UABP_JP_TPP_Preview_C::IKTraceAlpha' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, SecondaryMotionAlpha) == 0x005484, "Member 'UABP_JP_TPP_Preview_C::SecondaryMotionAlpha' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, LookAtAlpha) == 0x005488, "Member 'UABP_JP_TPP_Preview_C::LookAtAlpha' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, LookAtPos) == 0x005490, "Member 'UABP_JP_TPP_Preview_C::LookAtPos' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, bShouldLookAtCamera) == 0x0054A8, "Member 'UABP_JP_TPP_Preview_C::bShouldLookAtCamera' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, ActiveCamera) == 0x0054B0, "Member 'UABP_JP_TPP_Preview_C::ActiveCamera' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Weapon_L_IK_Alpha) == 0x0054B8, "Member 'UABP_JP_TPP_Preview_C::Weapon_L_IK_Alpha' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Weapon_R_IK_Alpha) == 0x0054BC, "Member 'UABP_JP_TPP_Preview_C::Weapon_R_IK_Alpha' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Weapon_R_IK_Alpha_0) == 0x0054C0, "Member 'UABP_JP_TPP_Preview_C::Weapon_R_IK_Alpha_0' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, bCanBlink) == 0x0054C4, "Member 'UABP_JP_TPP_Preview_C::bCanBlink' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, BlinkAlpha) == 0x0054C8, "Member 'UABP_JP_TPP_Preview_C::BlinkAlpha' has a wrong offset!");
static_assert(offsetof(UABP_JP_TPP_Preview_C, Blink_asset) == 0x0054D0, "Member 'UABP_JP_TPP_Preview_C::Blink_asset' has a wrong offset!");

}

