#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ClutterComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ClutterComponent.ClutterComponent_C.Emptied
// 0x0008 (0x0008 - 0x0000)
struct ClutterComponent_C_Emptied final
{
public:
	class UBP_MessReceptacleComponent_C*          Caller;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClutterComponent_C_Emptied) == 0x000008, "Wrong alignment on ClutterComponent_C_Emptied");
static_assert(sizeof(ClutterComponent_C_Emptied) == 0x000008, "Wrong size on ClutterComponent_C_Emptied");
static_assert(offsetof(ClutterComponent_C_Emptied, Caller) == 0x000000, "Member 'ClutterComponent_C_Emptied::Caller' has a wrong offset!");

// Function ClutterComponent.ClutterComponent_C.ExecuteUbergraph_ClutterComponent
// 0x00E0 (0x00E0 - 0x0000)
struct ClutterComponent_C_ExecuteUbergraph_ClutterComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UBP_MessReceptacleComponent_C* Caller)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MessReceptacleComponent_C*          K2Node_CustomEvent_Caller_1;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_MessReceptacleComponent_C*          K2Node_CustomEvent_Caller;                         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_MessReceptacleComponent_C*>  CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UBP_MessReceptacleComponent_C*          CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0xA];                                       // 0x0056(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0060(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UBP_MessReceptacleComponent_C* Caller)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x00C0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent) == 0x000010, "Wrong alignment on ClutterComponent_C_ExecuteUbergraph_ClutterComponent");
static_assert(sizeof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent) == 0x0000E0, "Wrong size on ClutterComponent_C_ExecuteUbergraph_ClutterComponent");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, EntryPoint) == 0x000000, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, Temp_int_Array_Index_Variable) == 0x000014, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, K2Node_CustomEvent_Caller_1) == 0x000020, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::K2Node_CustomEvent_Caller_1' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, K2Node_CustomEvent_Caller) == 0x000028, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::K2Node_CustomEvent_Caller' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000038, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, CallFunc_Array_Get_Item) == 0x000048, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, CallFunc_IsValid_ReturnValue) == 0x000055, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000060, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000C0, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_ExecuteUbergraph_ClutterComponent, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000D0, "Member 'ClutterComponent_C_ExecuteUbergraph_ClutterComponent::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ClutterComponent.ClutterComponent_C.Filled
// 0x0008 (0x0008 - 0x0000)
struct ClutterComponent_C_Filled final
{
public:
	class UBP_MessReceptacleComponent_C*          Caller;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClutterComponent_C_Filled) == 0x000008, "Wrong alignment on ClutterComponent_C_Filled");
static_assert(sizeof(ClutterComponent_C_Filled) == 0x000008, "Wrong size on ClutterComponent_C_Filled");
static_assert(offsetof(ClutterComponent_C_Filled, Caller) == 0x000000, "Member 'ClutterComponent_C_Filled::Caller' has a wrong offset!");

// Function ClutterComponent.ClutterComponent_C.StartTimeline
// 0x0028 (0x0028 - 0x0000)
struct ClutterComponent_C_StartTimeline final
{
public:
	bool                                          Forward;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTimeSeconds_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_PreviousTime_ImplicitCast;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClutterComponent_C_StartTimeline) == 0x000008, "Wrong alignment on ClutterComponent_C_StartTimeline");
static_assert(sizeof(ClutterComponent_C_StartTimeline) == 0x000028, "Wrong size on ClutterComponent_C_StartTimeline");
static_assert(offsetof(ClutterComponent_C_StartTimeline, Forward) == 0x000000, "Member 'ClutterComponent_C_StartTimeline::Forward' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_StartTimeline, CallFunc_GetTimeSeconds_ReturnValue) == 0x000008, "Member 'ClutterComponent_C_StartTimeline::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_StartTimeline, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'ClutterComponent_C_StartTimeline::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_StartTimeline, CallFunc_K2_SetTimer_ReturnValue) == 0x000018, "Member 'ClutterComponent_C_StartTimeline::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_StartTimeline, K2Node_VariableSet_PreviousTime_ImplicitCast) == 0x000020, "Member 'ClutterComponent_C_StartTimeline::K2Node_VariableSet_PreviousTime_ImplicitCast' has a wrong offset!");

// Function ClutterComponent.ClutterComponent_C.TimerLoop
// 0x0098 (0x0098 - 0x0000)
struct ClutterComponent_C_TimerLoop final
{
public:
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClutterComponent_C_TimerLoop) == 0x000008, "Wrong alignment on ClutterComponent_C_TimerLoop");
static_assert(sizeof(ClutterComponent_C_TimerLoop) == 0x000098, "Wrong size on ClutterComponent_C_TimerLoop");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_BreakTransform_Location) == 0x000000, "Member 'ClutterComponent_C_TimerLoop::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_BreakTransform_Rotation) == 0x000018, "Member 'ClutterComponent_C_TimerLoop::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_BreakTransform_Scale) == 0x000030, "Member 'ClutterComponent_C_TimerLoop::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_BreakVector_X) == 0x000048, "Member 'ClutterComponent_C_TimerLoop::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_BreakVector_Y) == 0x000050, "Member 'ClutterComponent_C_TimerLoop::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_BreakVector_Z) == 0x000058, "Member 'ClutterComponent_C_TimerLoop::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_GetFloatValue_ReturnValue) == 0x000060, "Member 'ClutterComponent_C_TimerLoop::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_Lerp_ReturnValue) == 0x000068, "Member 'ClutterComponent_C_TimerLoop::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000070, "Member 'ClutterComponent_C_TimerLoop::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000088, "Member 'ClutterComponent_C_TimerLoop::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerLoop, CallFunc_Lerp_Alpha_ImplicitCast) == 0x000090, "Member 'ClutterComponent_C_TimerLoop::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");

// Function ClutterComponent.ClutterComponent_C.TimerStarted
// 0x0148 (0x0148 - 0x0000)
struct ClutterComponent_C_TimerStarted final
{
public:
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0050(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ClutterComponent_C_TimerStarted) == 0x000008, "Wrong alignment on ClutterComponent_C_TimerStarted");
static_assert(sizeof(ClutterComponent_C_TimerStarted) == 0x000148, "Wrong size on ClutterComponent_C_TimerStarted");
static_assert(offsetof(ClutterComponent_C_TimerStarted, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000000, "Member 'ClutterComponent_C_TimerStarted::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerStarted, CallFunc_BreakTransform_Location) == 0x000008, "Member 'ClutterComponent_C_TimerStarted::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerStarted, CallFunc_BreakTransform_Rotation) == 0x000020, "Member 'ClutterComponent_C_TimerStarted::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerStarted, CallFunc_BreakTransform_Scale) == 0x000038, "Member 'ClutterComponent_C_TimerStarted::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_TimerStarted, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000050, "Member 'ClutterComponent_C_TimerStarted::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function ClutterComponent.ClutterComponent_C.UpdateFadeDuration
// 0x0020 (0x0020 - 0x0000)
struct ClutterComponent_C_UpdateFadeDuration final
{
public:
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClutterComponent_C_UpdateFadeDuration) == 0x000008, "Wrong alignment on ClutterComponent_C_UpdateFadeDuration");
static_assert(sizeof(ClutterComponent_C_UpdateFadeDuration) == 0x000020, "Wrong size on ClutterComponent_C_UpdateFadeDuration");
static_assert(offsetof(ClutterComponent_C_UpdateFadeDuration, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000000, "Member 'ClutterComponent_C_UpdateFadeDuration::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateFadeDuration, CallFunc_RandomFloatInRange_ReturnValue) == 0x000008, "Member 'ClutterComponent_C_UpdateFadeDuration::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateFadeDuration, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'ClutterComponent_C_UpdateFadeDuration::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateFadeDuration, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'ClutterComponent_C_UpdateFadeDuration::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ClutterComponent.ClutterComponent_C.UpdateTimer
// 0x0060 (0x0060 - 0x0000)
struct ClutterComponent_C_UpdateTimer final
{
public:
	double                                        CallFunc_GetTimeSeconds_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMin_ReturnValue;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1;   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_PreviousTime_ImplicitCast;      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_PreviousTime_ImplicitCast_1;    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClutterComponent_C_UpdateTimer) == 0x000008, "Wrong alignment on ClutterComponent_C_UpdateTimer");
static_assert(sizeof(ClutterComponent_C_UpdateTimer) == 0x000060, "Wrong size on ClutterComponent_C_UpdateTimer");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_GetTimeSeconds_ReturnValue) == 0x000000, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000018, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000020, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_FMax_ReturnValue) == 0x000030, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_FMin_ReturnValue) == 0x000038, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000040, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000041, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000048, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1) == 0x000050, "Member 'ClutterComponent_C_UpdateTimer::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, K2Node_VariableSet_PreviousTime_ImplicitCast) == 0x000058, "Member 'ClutterComponent_C_UpdateTimer::K2Node_VariableSet_PreviousTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ClutterComponent_C_UpdateTimer, K2Node_VariableSet_PreviousTime_ImplicitCast_1) == 0x00005C, "Member 'ClutterComponent_C_UpdateTimer::K2Node_VariableSet_PreviousTime_ImplicitCast_1' has a wrong offset!");

}

