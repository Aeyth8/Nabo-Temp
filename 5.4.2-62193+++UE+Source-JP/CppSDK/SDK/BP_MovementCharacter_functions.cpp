#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MovementCharacter

#include "Basic.hpp"

#include "BP_MovementCharacter_classes.hpp"
#include "BP_MovementCharacter_parameters.hpp"


namespace SDK
{

// Function BP_MovementCharacter.BP_MovementCharacter_C.AccelerateAir
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ForwardVector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ForwardAxis                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          SideVector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  SideAxis                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CalcMaxAir                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          AirAccelDir                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ApplyingAirAccel_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::AccelerateAir(const struct FVector& ForwardVector, double ForwardAxis, const struct FVector& SideVector, double SideAxis, double* CalcMaxAir, struct FVector* AirAccelDir, bool* ApplyingAirAccel_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "AccelerateAir");

	Params::BP_MovementCharacter_C_AccelerateAir Parms{};

	Parms.ForwardVector = std::move(ForwardVector);
	Parms.ForwardAxis = ForwardAxis;
	Parms.SideVector = std::move(SideVector);
	Parms.SideAxis = SideAxis;

	UObject::ProcessEvent(Func, &Parms);

	if (CalcMaxAir != nullptr)
		*CalcMaxAir = Parms.CalcMaxAir;

	if (AirAccelDir != nullptr)
		*AirAccelDir = std::move(Parms.AirAccelDir);

	if (ApplyingAirAccel_0 != nullptr)
		*ApplyingAirAccel_0 = Parms.ApplyingAirAccel_0;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.AirControlChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewAirControl                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::AirControlChanged(double NewAirControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "AirControlChanged");

	Params::BP_MovementCharacter_C_AirControlChanged Parms{};

	Parms.NewAirControl = NewAirControl;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ApplyBhopCap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  bhopCapNewSpeed                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          bhopCapVector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Applyingcap                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::ApplyBhopCap(double* bhopCapNewSpeed, struct FVector* bhopCapVector, bool* Applyingcap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ApplyBhopCap");

	Params::BP_MovementCharacter_C_ApplyBhopCap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bhopCapNewSpeed != nullptr)
		*bhopCapNewSpeed = Parms.bhopCapNewSpeed;

	if (bhopCapVector != nullptr)
		*bhopCapVector = std::move(Parms.bhopCapVector);

	if (Applyingcap != nullptr)
		*Applyingcap = Parms.Applyingcap;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.CheckCrouch
// (BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::CheckCrouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "CheckCrouch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.Crouch Start
// (BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::Crouch_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "Crouch Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.Crouch Stop
// (BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::Crouch_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "Crouch Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ExecuteUbergraph_BP_MovementCharacter
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::ExecuteUbergraph_BP_MovementCharacter(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ExecuteUbergraph_BP_MovementCharacter");

	Params::BP_MovementCharacter_C_ExecuteUbergraph_BP_MovementCharacter Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.Get1PMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           OnePMesh                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::Get1PMesh(class USkeletalMeshComponent** OnePMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "Get1PMesh");

	Params::BP_MovementCharacter_C_Get1PMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OnePMesh != nullptr)
		*OnePMesh = Parms.OnePMesh;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.Get3PMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           ThreePMesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::Get3PMesh(class USkeletalMeshComponent** ThreePMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "Get3PMesh");

	Params::BP_MovementCharacter_C_Get3PMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ThreePMesh != nullptr)
		*ThreePMesh = Parms.ThreePMesh;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetAnimBPs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UAnimInstance*>            AnimBPs                                                (Parm, OutParm)

void ABP_MovementCharacter_C::GetAnimBPs(TArray<class UAnimInstance*>* AnimBPs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetAnimBPs");

	Params::BP_MovementCharacter_C_GetAnimBPs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimBPs != nullptr)
		*AnimBPs = std::move(Parms.AnimBPs);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetCharacterName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterName                          CharacterName_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetCharacterName(ECharacterName* CharacterName_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetCharacterName");

	Params::BP_MovementCharacter_C_GetCharacterName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharacterName_0 != nullptr)
		*CharacterName_0 = Parms.CharacterName_0;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetCharacterSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterSize                          CharacterSize_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetCharacterSize(ECharacterSize* CharacterSize_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetCharacterSize");

	Params::BP_MovementCharacter_C_GetCharacterSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharacterSize_0 != nullptr)
		*CharacterSize_0 = Parms.CharacterSize_0;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetDurabilityCostWhenHit
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Amount                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetDurabilityCostWhenHit(double* Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetDurabilityCostWhenHit");

	Params::BP_MovementCharacter_C_GetDurabilityCostWhenHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Amount != nullptr)
		*Amount = Parms.Amount;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetGaitFromMovementSpeed
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGaitJP                                 Gait                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetGaitFromMovementSpeed(EGaitJP* Gait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetGaitFromMovementSpeed");

	Params::BP_MovementCharacter_C_GetGaitFromMovementSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Gait != nullptr)
		*Gait = Parms.Gait;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetGuardDogTargetOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetOffset                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetGuardDogTargetOffset(struct FVector* TargetOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetGuardDogTargetOffset");

	Params::BP_MovementCharacter_C_GetGuardDogTargetOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetOffset != nullptr)
		*TargetOffset = std::move(Parms.TargetOffset);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetInventory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UShopInteractionAC_C*             Inventory                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetInventory(class UShopInteractionAC_C** Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetInventory");

	Params::BP_MovementCharacter_C_GetInventory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Inventory != nullptr)
		*Inventory = Parms.Inventory;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetIsDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dead                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetIsDead(bool* Dead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetIsDead");

	Params::BP_MovementCharacter_C_GetIsDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dead != nullptr)
		*Dead = Parms.Dead;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetJPPlayerController
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerControllerJP*              PlayerController                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetJPPlayerController(class APlayerControllerJP** PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetJPPlayerController");

	Params::BP_MovementCharacter_C_GetJPPlayerController Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerController != nullptr)
		*PlayerController = Parms.PlayerController;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetMaterialType
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MaterialTypes                         MaterialType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetMaterialType(E_MaterialTypes* MaterialType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetMaterialType");

	Params::BP_MovementCharacter_C_GetMaterialType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaterialType != nullptr)
		*MaterialType = Parms.MaterialType;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.HitReactionImpact
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             bone                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::HitReactionImpact(const struct FVector& HitLocation, class FName bone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "HitReactionImpact");

	Params::BP_MovementCharacter_C_HitReactionImpact Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.bone = bone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ImpactCosmetics
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ImpactCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitImpulse                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ImpactEffect                          ImpactEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangedAttributes                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ImpactCosmetics");

	Params::BP_MovementCharacter_C_ImpactCosmetics Parms{};

	Parms.ImpactCauser = ImpactCauser;
	Parms.Location = std::move(Location);
	Parms.HitImpulse = std::move(HitImpulse);
	Parms.ImpactEffect = ImpactEffect;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangedAttributes != nullptr)
		*ChangedAttributes = Parms.ChangedAttributes;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InitializeAttributes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::InitializeAttributes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InitializeAttributes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InitializeMovementSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::InitializeMovementSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InitializeMovementSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_4");

	Params::BP_MovementCharacter_C_InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_4 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_5");

	Params::BP_MovementCharacter_C_InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_5 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_6");

	Params::BP_MovementCharacter_C_InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_6 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_3");

	Params::BP_MovementCharacter_C_InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_3 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_0");

	Params::BP_MovementCharacter_C_InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_0 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_1");

	Params::BP_MovementCharacter_C_InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_1 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_2");

	Params::BP_MovementCharacter_C_InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_2 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_7
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_7");

	Params::BP_MovementCharacter_C_InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_7 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_8
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_8");

	Params::BP_MovementCharacter_C_InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_8 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_9
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInputAction*                     SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_9");

	Params::BP_MovementCharacter_C_InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_9 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.JumpVelocityChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  JumpVelocity                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::JumpVelocityChanged(double JumpVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "JumpVelocityChanged");

	Params::BP_MovementCharacter_C_JumpVelocityChanged Parms{};

	Parms.JumpVelocity = JumpVelocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.K2_OnEndCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "K2_OnEndCrouch");

	Params::BP_MovementCharacter_C_K2_OnEndCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "K2_OnMovementModeChanged");

	Params::BP_MovementCharacter_C_K2_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.K2_OnStartCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "K2_OnStartCrouch");

	Params::BP_MovementCharacter_C_K2_OnStartCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.MovementInputPreProcess
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaleValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForce                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::MovementInputPreProcess(struct FVector& WorldDirection, float& ScaleValue, bool& bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "MovementInputPreProcess");

	Params::BP_MovementCharacter_C_MovementInputPreProcess Parms{};

	Parms.WorldDirection = std::move(WorldDirection);
	Parms.ScaleValue = ScaleValue;
	Parms.bForce = bForce;

	UObject::ProcessEvent(Func, &Parms);

	WorldDirection = std::move(Parms.WorldDirection);
	ScaleValue = Parms.ScaleValue;
	bForce = Parms.bForce;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.MovementSpeedChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewMovementSpeed                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::MovementSpeedChanged(double NewMovementSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "MovementSpeedChanged");

	Params::BP_MovementCharacter_C_MovementSpeedChanged Parms{};

	Parms.NewMovementSpeed = NewMovementSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnAimSpeedCoefficientChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   SprintSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::OnAimSpeedCoefficientChanged(float SprintSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnAimSpeedCoefficientChanged");

	Params::BP_MovementCharacter_C_OnAimSpeedCoefficientChanged Parms{};

	Parms.SprintSpeed = SprintSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnAirControlChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   AirControl                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::OnAirControlChanged(float AirControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnAirControlChanged");

	Params::BP_MovementCharacter_C_OnAirControlChanged Parms{};

	Parms.AirControl = AirControl;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnCrouchJumpVelocityCoefficientChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   CrouchJumpVelocityCoefficient                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::OnCrouchJumpVelocityCoefficientChanged(float CrouchJumpVelocityCoefficient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnCrouchJumpVelocityCoefficientChanged");

	Params::BP_MovementCharacter_C_OnCrouchJumpVelocityCoefficientChanged Parms{};

	Parms.CrouchJumpVelocityCoefficient = CrouchJumpVelocityCoefficient;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnCrouchSpeedCoefficientChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   CrouchSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::OnCrouchSpeedCoefficientChanged(float CrouchSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnCrouchSpeedCoefficientChanged");

	Params::BP_MovementCharacter_C_OnCrouchSpeedCoefficientChanged Parms{};

	Parms.CrouchSpeed = CrouchSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnDied__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_OverlayStates                         Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::OnDied__DelegateSignature(E_OverlayStates Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnDied__DelegateSignature");

	Params::BP_MovementCharacter_C_OnDied__DelegateSignature Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnJumpVelocityChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   JumpVelocity                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::OnJumpVelocityChanged(float JumpVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnJumpVelocityChanged");

	Params::BP_MovementCharacter_C_OnJumpVelocityChanged Parms{};

	Parms.JumpVelocity = JumpVelocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnLanded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_MovementCharacter_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnLanded");

	Params::BP_MovementCharacter_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnLanding__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_MovementCharacter_C::OnLanding__DelegateSignature(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnLanding__DelegateSignature");

	Params::BP_MovementCharacter_C_OnLanding__DelegateSignature Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnMovementSpeedChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   MovementSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::OnMovementSpeedChanged(float MovementSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnMovementSpeedChanged");

	Params::BP_MovementCharacter_C_OnMovementSpeedChanged Parms{};

	Parms.MovementSpeed = MovementSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnNotStationary
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::OnNotStationary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnNotStationary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnSprintSpeedCoefficientChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   SprintSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::OnSprintSpeedCoefficientChanged(float SprintSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnSprintSpeedCoefficientChanged");

	Params::BP_MovementCharacter_C_OnSprintSpeedCoefficientChanged Parms{};

	Parms.SprintSpeed = SprintSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.OnStationary
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::OnStationary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "OnStationary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.Owner_Enable TPP Anim Instance
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::Owner_Enable_TPP_Anim_Instance(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "Owner_Enable TPP Anim Instance");

	Params::BP_MovementCharacter_C_Owner_Enable_TPP_Anim_Instance Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.Owner_Set Anim Instances
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::Owner_Set_Anim_Instances(class AController* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "Owner_Set Anim Instances");

	Params::BP_MovementCharacter_C_Owner_Set_Anim_Instances Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.PressedJump
// (BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::PressedJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "PressedJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.Query is Stationary
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::Query_is_Stationary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "Query is Stationary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_MovementCharacter_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ReceivePossessed
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ReceivePossessed");

	Params::BP_MovementCharacter_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ReceiveRestarted
// (Event, Public, BlueprintEvent)

void ABP_MovementCharacter_C::ReceiveRestarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ReceiveRestarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ReceiveTick");

	Params::BP_MovementCharacter_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ReleasedJump
// (BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::ReleasedJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ReleasedJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.RemoveFriction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::RemoveFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "RemoveFriction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ResetAirControl
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::ResetAirControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ResetAirControl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ResetFriction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::ResetFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ResetFriction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ReverseMovementDirectionPreProcess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ScaleValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ModifiedValue                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::ReverseMovementDirectionPreProcess(double ScaleValue, double* ModifiedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ReverseMovementDirectionPreProcess");

	Params::BP_MovementCharacter_C_ReverseMovementDirectionPreProcess Parms{};

	Parms.ScaleValue = ScaleValue;

	UObject::ProcessEvent(Func, &Parms);

	if (ModifiedValue != nullptr)
		*ModifiedValue = Parms.ModifiedValue;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.Server_CrouchJump
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CrouchJump_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::Server_CrouchJump(bool CrouchJump_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "Server_CrouchJump");

	Params::BP_MovementCharacter_C_Server_CrouchJump Parms{};

	Parms.CrouchJump_0 = CrouchJump_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ServerRemoveFriction
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::ServerRemoveFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ServerRemoveFriction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.ServerResetFriction
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::ServerResetFriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "ServerResetFriction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.SetIsDead
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dead                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OptionalVelocity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKillInfo                        KillInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_MovementCharacter_C::SetIsDead(bool Dead, const struct FVector& OptionalVelocity, const struct FKillInfo& KillInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "SetIsDead");

	Params::BP_MovementCharacter_C_SetIsDead Parms{};

	Parms.Dead = Dead;
	Parms.OptionalVelocity = std::move(OptionalVelocity);
	Parms.KillInfo = std::move(KillInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.SetRagdollPhysicsAsset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::SetRagdollPhysicsAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "SetRagdollPhysicsAsset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.StartHeadbob
// (BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::StartHeadbob()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "StartHeadbob");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.StopHeadBob
// (BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::StopHeadBob()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "StopHeadBob");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.UpdateGait
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::UpdateGait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "UpdateGait");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_MovementCharacter_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.CanJumpInternal
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_MovementCharacter_C::CanJumpInternal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "CanJumpInternal");

	Params::BP_MovementCharacter_C_CanJumpInternal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetAimMovementSpeedCoefficient
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Initial_Aim_Movement_Speed_Coefficient                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetAimMovementSpeedCoefficient(float* Initial_Aim_Movement_Speed_Coefficient) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetAimMovementSpeedCoefficient");

	Params::BP_MovementCharacter_C_GetAimMovementSpeedCoefficient Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Initial_Aim_Movement_Speed_Coefficient != nullptr)
		*Initial_Aim_Movement_Speed_Coefficient = Parms.Initial_Aim_Movement_Speed_Coefficient;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetCrouchJumpVelocityCoefficient
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Crouch_Jump_Velocity_Coefficient                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetCrouchJumpVelocityCoefficient(float* Crouch_Jump_Velocity_Coefficient) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetCrouchJumpVelocityCoefficient");

	Params::BP_MovementCharacter_C_GetCrouchJumpVelocityCoefficient Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Crouch_Jump_Velocity_Coefficient != nullptr)
		*Crouch_Jump_Velocity_Coefficient = Parms.Crouch_Jump_Velocity_Coefficient;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetCrouchMovementCoefficient
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Crouch_Coefficient                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetCrouchMovementCoefficient(float* Crouch_Coefficient) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetCrouchMovementCoefficient");

	Params::BP_MovementCharacter_C_GetCrouchMovementCoefficient Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Crouch_Coefficient != nullptr)
		*Crouch_Coefficient = Parms.Crouch_Coefficient;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetInitialAirControl
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Initial_Jump_Velocity                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetInitialAirControl(float* Initial_Jump_Velocity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetInitialAirControl");

	Params::BP_MovementCharacter_C_GetInitialAirControl Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Initial_Jump_Velocity != nullptr)
		*Initial_Jump_Velocity = Parms.Initial_Jump_Velocity;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetInitialJumpVelocity
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Initial_Jump_Velocity                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetInitialJumpVelocity(float* Initial_Jump_Velocity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetInitialJumpVelocity");

	Params::BP_MovementCharacter_C_GetInitialJumpVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Initial_Jump_Velocity != nullptr)
		*Initial_Jump_Velocity = Parms.Initial_Jump_Velocity;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetInitialMaxAcceleration
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   InitialMovementSpeed                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetInitialMaxAcceleration(float* InitialMovementSpeed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetInitialMaxAcceleration");

	Params::BP_MovementCharacter_C_GetInitialMaxAcceleration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InitialMovementSpeed != nullptr)
		*InitialMovementSpeed = Parms.InitialMovementSpeed;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetInitialMovementSpeed
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   InitialMovementSpeed                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetInitialMovementSpeed(float* InitialMovementSpeed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetInitialMovementSpeed");

	Params::BP_MovementCharacter_C_GetInitialMovementSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InitialMovementSpeed != nullptr)
		*InitialMovementSpeed = Parms.InitialMovementSpeed;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.GetSprintMovementCoefficient
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Sprint_Coefficient                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::GetSprintMovementCoefficient(float* Sprint_Coefficient) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "GetSprintMovementCoefficient");

	Params::BP_MovementCharacter_C_GetSprintMovementCoefficient Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Sprint_Coefficient != nullptr)
		*Sprint_Coefficient = Parms.Sprint_Coefficient;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.Strafing Input Pre Process
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          World_Direction                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Scale_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ModifiedScale                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::Strafing_Input_Pre_Process(const struct FVector& World_Direction, double Scale_Value, double* ModifiedScale) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "Strafing Input Pre Process");

	Params::BP_MovementCharacter_C_Strafing_Input_Pre_Process Parms{};

	Parms.World_Direction = std::move(World_Direction);
	Parms.Scale_Value = Scale_Value;

	UObject::ProcessEvent(Func, &Parms);

	if (ModifiedScale != nullptr)
		*ModifiedScale = Parms.ModifiedScale;
}


// Function BP_MovementCharacter.BP_MovementCharacter_C.WalkingBackwardsInputPreProcess
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector                          World_Direction                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Scale_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ModifiedMovementScale                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MovementCharacter_C::WalkingBackwardsInputPreProcess(const struct FVector& World_Direction, double Scale_Value, double* ModifiedMovementScale) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MovementCharacter_C", "WalkingBackwardsInputPreProcess");

	Params::BP_MovementCharacter_C_WalkingBackwardsInputPreProcess Parms{};

	Parms.World_Direction = std::move(World_Direction);
	Parms.Scale_Value = Scale_Value;

	UObject::ProcessEvent(Func, &Parms);

	if (ModifiedMovementScale != nullptr)
		*ModifiedMovementScale = Parms.ModifiedMovementScale;
}

}

