#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWExperiences

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function IWExperiences.AsyncAction_ExperienceReady.WaitForExperienceReady
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_ExperienceReady_WaitForExperienceReady final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_ExperienceReady*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ExperienceReady_WaitForExperienceReady) == 0x000008, "Wrong alignment on AsyncAction_ExperienceReady_WaitForExperienceReady");
static_assert(sizeof(AsyncAction_ExperienceReady_WaitForExperienceReady) == 0x000010, "Wrong size on AsyncAction_ExperienceReady_WaitForExperienceReady");
static_assert(offsetof(AsyncAction_ExperienceReady_WaitForExperienceReady, WorldContextObject) == 0x000000, "Member 'AsyncAction_ExperienceReady_WaitForExperienceReady::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_ExperienceReady_WaitForExperienceReady, ReturnValue) == 0x000008, "Member 'AsyncAction_ExperienceReady_WaitForExperienceReady::ReturnValue' has a wrong offset!");

// Function IWExperiences.AsyncAction_ExperienceReady.Step2_HandleExperienceLoaded
// 0x0008 (0x0008 - 0x0000)
struct AsyncAction_ExperienceReady_Step2_HandleExperienceLoaded final
{
public:
	const class UExperienceDefinition*            CurrentExperience;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ExperienceReady_Step2_HandleExperienceLoaded) == 0x000008, "Wrong alignment on AsyncAction_ExperienceReady_Step2_HandleExperienceLoaded");
static_assert(sizeof(AsyncAction_ExperienceReady_Step2_HandleExperienceLoaded) == 0x000008, "Wrong size on AsyncAction_ExperienceReady_Step2_HandleExperienceLoaded");
static_assert(offsetof(AsyncAction_ExperienceReady_Step2_HandleExperienceLoaded, CurrentExperience) == 0x000000, "Member 'AsyncAction_ExperienceReady_Step2_HandleExperienceLoaded::CurrentExperience' has a wrong offset!");

// Function IWExperiences.ExperienceFunctionLibrary.GetPrimaryAssetIdFromUserFacingExperienceName
// 0x0020 (0x0020 - 0x0000)
struct ExperienceFunctionLibrary_GetPrimaryAssetIdFromUserFacingExperienceName final
{
public:
	class FString                                 AdvertisedExperienceID;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExperienceFunctionLibrary_GetPrimaryAssetIdFromUserFacingExperienceName) == 0x000008, "Wrong alignment on ExperienceFunctionLibrary_GetPrimaryAssetIdFromUserFacingExperienceName");
static_assert(sizeof(ExperienceFunctionLibrary_GetPrimaryAssetIdFromUserFacingExperienceName) == 0x000020, "Wrong size on ExperienceFunctionLibrary_GetPrimaryAssetIdFromUserFacingExperienceName");
static_assert(offsetof(ExperienceFunctionLibrary_GetPrimaryAssetIdFromUserFacingExperienceName, AdvertisedExperienceID) == 0x000000, "Member 'ExperienceFunctionLibrary_GetPrimaryAssetIdFromUserFacingExperienceName::AdvertisedExperienceID' has a wrong offset!");
static_assert(offsetof(ExperienceFunctionLibrary_GetPrimaryAssetIdFromUserFacingExperienceName, ReturnValue) == 0x000010, "Member 'ExperienceFunctionLibrary_GetPrimaryAssetIdFromUserFacingExperienceName::ReturnValue' has a wrong offset!");

// Function IWExperiences.ExperienceWorldSubsystem.ExperienceLoaded
// 0x0008 (0x0008 - 0x0000)
struct ExperienceWorldSubsystem_ExperienceLoaded final
{
public:
	const class UExperienceDefinition*            Experience;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExperienceWorldSubsystem_ExperienceLoaded) == 0x000008, "Wrong alignment on ExperienceWorldSubsystem_ExperienceLoaded");
static_assert(sizeof(ExperienceWorldSubsystem_ExperienceLoaded) == 0x000008, "Wrong size on ExperienceWorldSubsystem_ExperienceLoaded");
static_assert(offsetof(ExperienceWorldSubsystem_ExperienceLoaded, Experience) == 0x000000, "Member 'ExperienceWorldSubsystem_ExperienceLoaded::Experience' has a wrong offset!");

// Function IWExperiences.ExperienceWorldSubsystem.ExperienceLoaded_HighPriority
// 0x0008 (0x0008 - 0x0000)
struct ExperienceWorldSubsystem_ExperienceLoaded_HighPriority final
{
public:
	const class UExperienceDefinition*            Experience;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExperienceWorldSubsystem_ExperienceLoaded_HighPriority) == 0x000008, "Wrong alignment on ExperienceWorldSubsystem_ExperienceLoaded_HighPriority");
static_assert(sizeof(ExperienceWorldSubsystem_ExperienceLoaded_HighPriority) == 0x000008, "Wrong size on ExperienceWorldSubsystem_ExperienceLoaded_HighPriority");
static_assert(offsetof(ExperienceWorldSubsystem_ExperienceLoaded_HighPriority, Experience) == 0x000000, "Member 'ExperienceWorldSubsystem_ExperienceLoaded_HighPriority::Experience' has a wrong offset!");

// Function IWExperiences.ExperienceWorldSubsystem.ExperienceLoaded_LowPriority
// 0x0008 (0x0008 - 0x0000)
struct ExperienceWorldSubsystem_ExperienceLoaded_LowPriority final
{
public:
	const class UExperienceDefinition*            Experience;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExperienceWorldSubsystem_ExperienceLoaded_LowPriority) == 0x000008, "Wrong alignment on ExperienceWorldSubsystem_ExperienceLoaded_LowPriority");
static_assert(sizeof(ExperienceWorldSubsystem_ExperienceLoaded_LowPriority) == 0x000008, "Wrong size on ExperienceWorldSubsystem_ExperienceLoaded_LowPriority");
static_assert(offsetof(ExperienceWorldSubsystem_ExperienceLoaded_LowPriority, Experience) == 0x000000, "Member 'ExperienceWorldSubsystem_ExperienceLoaded_LowPriority::Experience' has a wrong offset!");

// Function IWExperiences.ExperienceWorldSubsystem.GetCurrentDefinition
// 0x0008 (0x0008 - 0x0000)
struct ExperienceWorldSubsystem_GetCurrentDefinition final
{
public:
	const class UExperienceDefinition*            ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExperienceWorldSubsystem_GetCurrentDefinition) == 0x000008, "Wrong alignment on ExperienceWorldSubsystem_GetCurrentDefinition");
static_assert(sizeof(ExperienceWorldSubsystem_GetCurrentDefinition) == 0x000008, "Wrong size on ExperienceWorldSubsystem_GetCurrentDefinition");
static_assert(offsetof(ExperienceWorldSubsystem_GetCurrentDefinition, ReturnValue) == 0x000000, "Member 'ExperienceWorldSubsystem_GetCurrentDefinition::ReturnValue' has a wrong offset!");

// Function IWExperiences.ExperienceWorldSubsystem.HasExperienceLoaded
// 0x0001 (0x0001 - 0x0000)
struct ExperienceWorldSubsystem_HasExperienceLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExperienceWorldSubsystem_HasExperienceLoaded) == 0x000001, "Wrong alignment on ExperienceWorldSubsystem_HasExperienceLoaded");
static_assert(sizeof(ExperienceWorldSubsystem_HasExperienceLoaded) == 0x000001, "Wrong size on ExperienceWorldSubsystem_HasExperienceLoaded");
static_assert(offsetof(ExperienceWorldSubsystem_HasExperienceLoaded, ReturnValue) == 0x000000, "Member 'ExperienceWorldSubsystem_HasExperienceLoaded::ReturnValue' has a wrong offset!");

// Function IWExperiences.UserFacingExperienceDefinition.CreateHostingRequest
// 0x0008 (0x0008 - 0x0000)
struct UserFacingExperienceDefinition_CreateHostingRequest final
{
public:
	class UCommonSession_HostSessionRequest*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserFacingExperienceDefinition_CreateHostingRequest) == 0x000008, "Wrong alignment on UserFacingExperienceDefinition_CreateHostingRequest");
static_assert(sizeof(UserFacingExperienceDefinition_CreateHostingRequest) == 0x000008, "Wrong size on UserFacingExperienceDefinition_CreateHostingRequest");
static_assert(offsetof(UserFacingExperienceDefinition_CreateHostingRequest, ReturnValue) == 0x000000, "Member 'UserFacingExperienceDefinition_CreateHostingRequest::ReturnValue' has a wrong offset!");

}

