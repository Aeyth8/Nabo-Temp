#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lighting_Controller

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Lighting_Presets_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Lighting_Controller.BP_Lighting_Controller_C
// 0x0890 (0x0B20 - 0x0290)
class ABP_Lighting_Controller_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_to_Player;                                // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Blend_Radius;                                      // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Lighting_Presets                            SettingsPreview;                                   // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASkyLight*                              SkyLight;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	float                                         CheckTime;                                         // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Close;                                          // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Default_Cubemap;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Skylight_Intensity;                        // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Default_Skylight_Tint;                             // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_JP_PP_C*>                    PostProcessBPs;                                    // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<double>                                PostProccesCheckBlends;                            // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         NumberOfActiveBlends;                              // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Source_Cubemap;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Source_Skylight_Intensity;                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Source_Skylight_Tint;                              // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           Destination_Cubemap;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Destination_Skylight_Intensity;                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Destination_Skylight_Tint;                         // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActivePostProcess;                                 // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MasterBlend;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousBlend1;                                    // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                PostProccesBlends;                                 // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CalcOnTick;                                        // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BiggestBlend;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewBlend;                                          // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BiggestIndex;                                      // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewIndex;                                          // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TickLimiter;                                       // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Presets;                                           // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      Sun;                                               // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      SkyAtmosphereSun;                                  // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       Stars;                                             // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       Moon;                                              // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class APostProcessVolume*                     MainPostProcess;                                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          Day;                                               // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActivePreset;                                      // 0x03D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NewPreset;                                         // 0x03DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0xC];                                      // 0x03E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   MainPostProcessSettings;                           // 0x03F0(0x06F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APostProcessVolume*                     NightPostProcess;                                  // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockUpdates;                                      // 0x0AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Lighting_Presets                            DefaultPreset;                                     // 0x0AE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AEA[0x2];                                      // 0x0AEA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedTeams;                                     // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstance*>              CityBuildingMaterials;                             // 0x0AF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       CityBuildingDynamicMaterials;                      // 0x0B00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AExponentialHeightFog*                  Fog;                                               // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)

public:
	void Blend_to_One();
	void BlendBetweenTwo();
	void BlendToDefault();
	void CalculateDistanceSingle(class ABP_JP_PP_C* Target, double* Blend);
	void CalculateDistanceToPPs(class ABP_JP_PP_C* Target, double* Distance);
	void CheckDistanceToPlayer();
	void ExecuteUbergraph_BP_Lighting_Controller(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReplaceBackgroundBuildingMaterials();
	void SetLightingSettingsPreview(E_Lighting_Presets Enumerator);
	void UpdateAllLightSettings(bool Day_0);
	void UpdateCityBuildingLights();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Lighting_Controller_C">();
	}
	static class ABP_Lighting_Controller_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Lighting_Controller_C>();
	}
};
static_assert(alignof(ABP_Lighting_Controller_C) == 0x000010, "Wrong alignment on ABP_Lighting_Controller_C");
static_assert(sizeof(ABP_Lighting_Controller_C) == 0x000B20, "Wrong size on ABP_Lighting_Controller_C");
static_assert(offsetof(ABP_Lighting_Controller_C, UberGraphFrame) == 0x000290, "Member 'ABP_Lighting_Controller_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Billboard) == 0x000298, "Member 'ABP_Lighting_Controller_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_Lighting_Controller_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Distance_to_Player) == 0x0002A8, "Member 'ABP_Lighting_Controller_C::Distance_to_Player' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Blend_Radius) == 0x0002B0, "Member 'ABP_Lighting_Controller_C::Blend_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, SettingsPreview) == 0x0002B4, "Member 'ABP_Lighting_Controller_C::SettingsPreview' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, SkyLight) == 0x0002B8, "Member 'ABP_Lighting_Controller_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, CheckTime) == 0x0002C0, "Member 'ABP_Lighting_Controller_C::CheckTime' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Is_Close) == 0x0002C4, "Member 'ABP_Lighting_Controller_C::Is_Close' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Default_Cubemap) == 0x0002C8, "Member 'ABP_Lighting_Controller_C::Default_Cubemap' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Default_Skylight_Intensity) == 0x0002D0, "Member 'ABP_Lighting_Controller_C::Default_Skylight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Default_Skylight_Tint) == 0x0002D8, "Member 'ABP_Lighting_Controller_C::Default_Skylight_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, PostProcessBPs) == 0x0002E8, "Member 'ABP_Lighting_Controller_C::PostProcessBPs' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, PostProccesCheckBlends) == 0x0002F8, "Member 'ABP_Lighting_Controller_C::PostProccesCheckBlends' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, NumberOfActiveBlends) == 0x000308, "Member 'ABP_Lighting_Controller_C::NumberOfActiveBlends' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Source_Cubemap) == 0x000310, "Member 'ABP_Lighting_Controller_C::Source_Cubemap' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Source_Skylight_Intensity) == 0x000318, "Member 'ABP_Lighting_Controller_C::Source_Skylight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Source_Skylight_Tint) == 0x000320, "Member 'ABP_Lighting_Controller_C::Source_Skylight_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Destination_Cubemap) == 0x000330, "Member 'ABP_Lighting_Controller_C::Destination_Cubemap' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Destination_Skylight_Intensity) == 0x000338, "Member 'ABP_Lighting_Controller_C::Destination_Skylight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Destination_Skylight_Tint) == 0x000340, "Member 'ABP_Lighting_Controller_C::Destination_Skylight_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, ActivePostProcess) == 0x000350, "Member 'ABP_Lighting_Controller_C::ActivePostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, MasterBlend) == 0x000358, "Member 'ABP_Lighting_Controller_C::MasterBlend' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, PreviousBlend1) == 0x000360, "Member 'ABP_Lighting_Controller_C::PreviousBlend1' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, PostProccesBlends) == 0x000368, "Member 'ABP_Lighting_Controller_C::PostProccesBlends' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, CalcOnTick) == 0x000378, "Member 'ABP_Lighting_Controller_C::CalcOnTick' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, BiggestBlend) == 0x000380, "Member 'ABP_Lighting_Controller_C::BiggestBlend' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, NewBlend) == 0x000388, "Member 'ABP_Lighting_Controller_C::NewBlend' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, BiggestIndex) == 0x000390, "Member 'ABP_Lighting_Controller_C::BiggestIndex' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, NewIndex) == 0x000394, "Member 'ABP_Lighting_Controller_C::NewIndex' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, TickLimiter) == 0x000398, "Member 'ABP_Lighting_Controller_C::TickLimiter' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Presets) == 0x0003A0, "Member 'ABP_Lighting_Controller_C::Presets' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Sun) == 0x0003A8, "Member 'ABP_Lighting_Controller_C::Sun' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, SkyAtmosphereSun) == 0x0003B0, "Member 'ABP_Lighting_Controller_C::SkyAtmosphereSun' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Stars) == 0x0003B8, "Member 'ABP_Lighting_Controller_C::Stars' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Moon) == 0x0003C0, "Member 'ABP_Lighting_Controller_C::Moon' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, MainPostProcess) == 0x0003C8, "Member 'ABP_Lighting_Controller_C::MainPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Day) == 0x0003D0, "Member 'ABP_Lighting_Controller_C::Day' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, ActivePreset) == 0x0003D4, "Member 'ABP_Lighting_Controller_C::ActivePreset' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, NewPreset) == 0x0003DC, "Member 'ABP_Lighting_Controller_C::NewPreset' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, MainPostProcessSettings) == 0x0003F0, "Member 'ABP_Lighting_Controller_C::MainPostProcessSettings' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, NightPostProcess) == 0x000AE0, "Member 'ABP_Lighting_Controller_C::NightPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, BlockUpdates) == 0x000AE8, "Member 'ABP_Lighting_Controller_C::BlockUpdates' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, DefaultPreset) == 0x000AE9, "Member 'ABP_Lighting_Controller_C::DefaultPreset' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, ExpectedTeams) == 0x000AEC, "Member 'ABP_Lighting_Controller_C::ExpectedTeams' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, CityBuildingMaterials) == 0x000AF0, "Member 'ABP_Lighting_Controller_C::CityBuildingMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, CityBuildingDynamicMaterials) == 0x000B00, "Member 'ABP_Lighting_Controller_C::CityBuildingDynamicMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Lighting_Controller_C, Fog) == 0x000B10, "Member 'ABP_Lighting_Controller_C::Fog' has a wrong offset!");

}

