#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AimAssistDelegateTester

#include "Basic.hpp"

#include "BP_AimAssistDelegateTester_classes.hpp"
#include "BP_AimAssistDelegateTester_parameters.hpp"


namespace SDK
{

// Function BP_AimAssistDelegateTester.BP_AimAssistDelegateTester_C.CreateTargetFoundMsg
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAimAssistComponent*              AimAssistComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FAimAssistTarget                 AimAssistTarget                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class FString                           Message                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AimAssistDelegateTester_C::CreateTargetFoundMsg(class UAimAssistComponent*& AimAssistComponent, const struct FAimAssistTarget& AimAssistTarget, class FString* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AimAssistDelegateTester_C", "CreateTargetFoundMsg");

	Params::BP_AimAssistDelegateTester_C_CreateTargetFoundMsg Parms{};

	Parms.AimAssistComponent = AimAssistComponent;
	Parms.AimAssistTarget = std::move(AimAssistTarget);

	UObject::ProcessEvent(Func, &Parms);

	AimAssistComponent = Parms.AimAssistComponent;

	if (Message != nullptr)
		*Message = std::move(Parms.Message);
}


// Function BP_AimAssistDelegateTester.BP_AimAssistDelegateTester_C.CreateTargetLostMsg
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAimAssistComponent*              AimAssistComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AimAssistDelegateTester_C::CreateTargetLostMsg(class UAimAssistComponent*& AimAssistComponent, class FString* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AimAssistDelegateTester_C", "CreateTargetLostMsg");

	Params::BP_AimAssistDelegateTester_C_CreateTargetLostMsg Parms{};

	Parms.AimAssistComponent = AimAssistComponent;

	UObject::ProcessEvent(Func, &Parms);

	AimAssistComponent = Parms.AimAssistComponent;

	if (Message != nullptr)
		*Message = std::move(Parms.Message);
}


// Function BP_AimAssistDelegateTester.BP_AimAssistDelegateTester_C.Event Target Found
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAimAssistComponent*              Sender                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FAimAssistTarget                 AimAssistTarget                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_AimAssistDelegateTester_C::Event_Target_Found(const class UAimAssistComponent* Sender, const struct FAimAssistTarget& AimAssistTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AimAssistDelegateTester_C", "Event Target Found");

	Params::BP_AimAssistDelegateTester_C_Event_Target_Found Parms{};

	Parms.Sender = Sender;
	Parms.AimAssistTarget = std::move(AimAssistTarget);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AimAssistDelegateTester.BP_AimAssistDelegateTester_C.Event Target Lost
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAimAssistComponent*              Sender                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FAimAssistTarget                 AimAssistTarget                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_AimAssistDelegateTester_C::Event_Target_Lost(const class UAimAssistComponent* Sender, const struct FAimAssistTarget& AimAssistTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AimAssistDelegateTester_C", "Event Target Lost");

	Params::BP_AimAssistDelegateTester_C_Event_Target_Lost Parms{};

	Parms.Sender = Sender;
	Parms.AimAssistTarget = std::move(AimAssistTarget);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AimAssistDelegateTester.BP_AimAssistDelegateTester_C.ExecuteUbergraph_BP_AimAssistDelegateTester
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AimAssistDelegateTester_C::ExecuteUbergraph_BP_AimAssistDelegateTester(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AimAssistDelegateTester_C", "ExecuteUbergraph_BP_AimAssistDelegateTester");

	Params::BP_AimAssistDelegateTester_C_ExecuteUbergraph_BP_AimAssistDelegateTester Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AimAssistDelegateTester.BP_AimAssistDelegateTester_C.Get Aim Assists
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UAimAssistComponent*>      Aim_Assists                                            (Parm, OutParm, ContainsInstancedReference)
// bool                                    Is_Init                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AimAssistDelegateTester_C::Get_Aim_Assists(TArray<class UAimAssistComponent*>* Aim_Assists, bool* Is_Init)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AimAssistDelegateTester_C", "Get Aim Assists");

	Params::BP_AimAssistDelegateTester_C_Get_Aim_Assists Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Aim_Assists != nullptr)
		*Aim_Assists = std::move(Parms.Aim_Assists);

	if (Is_Init != nullptr)
		*Is_Init = Parms.Is_Init;
}


// Function BP_AimAssistDelegateTester.BP_AimAssistDelegateTester_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AimAssistDelegateTester_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AimAssistDelegateTester_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AimAssistDelegateTester.BP_AimAssistDelegateTester_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AimAssistDelegateTester_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AimAssistDelegateTester_C", "ReceiveEndPlay");

	Params::BP_AimAssistDelegateTester_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AimAssistDelegateTester.BP_AimAssistDelegateTester_C.Set Up
// (BlueprintCallable, BlueprintEvent)

void UBP_AimAssistDelegateTester_C::Set_Up()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AimAssistDelegateTester_C", "Set Up");

	UObject::ProcessEvent(Func, nullptr);
}

}

