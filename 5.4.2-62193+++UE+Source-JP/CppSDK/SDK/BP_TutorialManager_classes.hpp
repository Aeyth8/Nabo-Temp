#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TutorialManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TutorialManager.BP_TutorialManager_C
// 0x00D8 (0x0368 - 0x0290)
class ABP_TutorialManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMode;                                         // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayIntroSequence;                                 // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A2[0x6];                                      // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateJP_Match*                   PlayerState;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObjectiveCollection*                   TasksCollection;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObjectiveManagerTutorialComponent*     ObjectiveManager;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObjectiveCollection*                   TaskInfoCollection;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultDelayBetweenTasks;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAtSpecificTask;                               // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SpecificTaskToStartAt;                             // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             TutorialEnded;                                     // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ADowntimeManager_Tutorial_C*            DowntimeManager;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CurrentTutorialTask;                               // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     StartingMoney;                                     // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ActiveMinimum;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultMinimumMoney;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     MoneyIncrements;                                   // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASOA_TutorialTask_C*                    ActiveSOA;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ActiveSOAClass;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AutoCompleteDelay;                                 // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             TutorialStarted;                                   // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             PreTutorialSequenceStart;                          // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        SystemsStartDelay;                                 // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShopItemsStartState;                               // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyIncreasedStaminaRegenGE();
	void CheatToNextTask();
	void ExecuteUbergraph_BP_TutorialManager(int32 EntryPoint);
	void Get_SODClass(class UObjectiveDefinition* Self2, int32 Index_0, class UClass** SODClass);
	void GetNextObjectiveDefinition(TArray<class UObjectiveDefinition*>& ObjectiveList, class UClass* CurrentSOD, bool* FoundNext, class UObjectiveDefinition** NextObjectiveDefinition, class UClass** NextSODClass);
	void GetObjectiveDefinitionIndex(class UClass* InputPin, TArray<class UObjectiveDefinition*>& ObjectiveList, bool* FoundMatchingObjectiveDefinition, int32* Index_0);
	void GrantStartingMoneyToPlayer();
	void LogMessage(const class FText& TextToLog);
	void Money_Changed(double Current_Money);
	void On_Tutorial_Started();
	void OnMessageReceived_4B40F83A49AA0255C15F4EAC634F24B9(class UAsyncAction_ListenForGameplayMessage* ProxyObject, const struct FGameplayTag& ActualChannel);
	void OnMessageReceived_586FE5F747308E905B78E08E6108A3F6(class UAsyncAction_ListenForGameplayMessage* ProxyObject, const struct FGameplayTag& ActualChannel);
	void OnPlayerDeath(class ACharacter* Character);
	void OnPlayerRespawn(class ACharacter* Character);
	void OnPlayerSpawn();
	void OpenTaskInfo(class UClass* TaskInfoToOpen);
	void PlayerPawnChanged(class APawn* OldPawn, class APawn* NewPawn);
	void PreTutorialSequenceStart__DelegateSignature();
	void ReceiveBeginPlay();
	void ResetMinimumMoney();
	void SetMinimumMoney(double NewMinimum);
	void SetShopItemsState(bool NewState);
	void SetShopUpgradeState(bool NewState);
	void SpawnObjectiveWithDelay(class UObjectiveDefinition* ObjectiveDefinition, class UClass* TargetSOD, double Delay);
	void StartTutorialTask(class UClass* TaskToStart);
	void TutorialEnd();
	void TutorialEnded__DelegateSignature();
	void TutorialIntroSequenceEnded();
	void TutorialStarted__DelegateSignature();
	void TutorialTaskCompleted(class UClass* TaskToValidate);
	void UpgradeEnemeyFence();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TutorialManager_C">();
	}
	static class ABP_TutorialManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TutorialManager_C>();
	}
};
static_assert(alignof(ABP_TutorialManager_C) == 0x000008, "Wrong alignment on ABP_TutorialManager_C");
static_assert(sizeof(ABP_TutorialManager_C) == 0x000368, "Wrong size on ABP_TutorialManager_C");
static_assert(offsetof(ABP_TutorialManager_C, UberGraphFrame) == 0x000290, "Member 'ABP_TutorialManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_TutorialManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, DebugMode) == 0x0002A0, "Member 'ABP_TutorialManager_C::DebugMode' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, PlayIntroSequence) == 0x0002A1, "Member 'ABP_TutorialManager_C::PlayIntroSequence' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, PlayerState) == 0x0002A8, "Member 'ABP_TutorialManager_C::PlayerState' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, TasksCollection) == 0x0002B0, "Member 'ABP_TutorialManager_C::TasksCollection' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, ObjectiveManager) == 0x0002B8, "Member 'ABP_TutorialManager_C::ObjectiveManager' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, TaskInfoCollection) == 0x0002C0, "Member 'ABP_TutorialManager_C::TaskInfoCollection' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, DefaultDelayBetweenTasks) == 0x0002C8, "Member 'ABP_TutorialManager_C::DefaultDelayBetweenTasks' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, StartAtSpecificTask) == 0x0002D0, "Member 'ABP_TutorialManager_C::StartAtSpecificTask' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, SpecificTaskToStartAt) == 0x0002D8, "Member 'ABP_TutorialManager_C::SpecificTaskToStartAt' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, TutorialEnded) == 0x0002E0, "Member 'ABP_TutorialManager_C::TutorialEnded' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, DowntimeManager) == 0x0002F0, "Member 'ABP_TutorialManager_C::DowntimeManager' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, CurrentTutorialTask) == 0x0002F8, "Member 'ABP_TutorialManager_C::CurrentTutorialTask' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, StartingMoney) == 0x000300, "Member 'ABP_TutorialManager_C::StartingMoney' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, ActiveMinimum) == 0x000308, "Member 'ABP_TutorialManager_C::ActiveMinimum' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, DefaultMinimumMoney) == 0x000310, "Member 'ABP_TutorialManager_C::DefaultMinimumMoney' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, MoneyIncrements) == 0x000318, "Member 'ABP_TutorialManager_C::MoneyIncrements' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, ActiveSOA) == 0x000320, "Member 'ABP_TutorialManager_C::ActiveSOA' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, ActiveSOAClass) == 0x000328, "Member 'ABP_TutorialManager_C::ActiveSOAClass' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, AutoCompleteDelay) == 0x000330, "Member 'ABP_TutorialManager_C::AutoCompleteDelay' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, TutorialStarted) == 0x000338, "Member 'ABP_TutorialManager_C::TutorialStarted' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, PreTutorialSequenceStart) == 0x000348, "Member 'ABP_TutorialManager_C::PreTutorialSequenceStart' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, SystemsStartDelay) == 0x000358, "Member 'ABP_TutorialManager_C::SystemsStartDelay' has a wrong offset!");
static_assert(offsetof(ABP_TutorialManager_C, ShopItemsStartState) == 0x000360, "Member 'ABP_TutorialManager_C::ShopItemsStartState' has a wrong offset!");

}

