#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Character

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "JP_structs.hpp"


namespace SDK::Params
{

// Function I_Character.I_Character_C.Get1PMesh
// 0x0008 (0x0008 - 0x0000)
struct I_Character_C_Get1PMesh final
{
public:
	class USkeletalMeshComponent*                 OnePMesh;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Character_C_Get1PMesh) == 0x000008, "Wrong alignment on I_Character_C_Get1PMesh");
static_assert(sizeof(I_Character_C_Get1PMesh) == 0x000008, "Wrong size on I_Character_C_Get1PMesh");
static_assert(offsetof(I_Character_C_Get1PMesh, OnePMesh) == 0x000000, "Member 'I_Character_C_Get1PMesh::OnePMesh' has a wrong offset!");

// Function I_Character.I_Character_C.Get3PMesh
// 0x0008 (0x0008 - 0x0000)
struct I_Character_C_Get3PMesh final
{
public:
	class USkeletalMeshComponent*                 ThreePMesh;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Character_C_Get3PMesh) == 0x000008, "Wrong alignment on I_Character_C_Get3PMesh");
static_assert(sizeof(I_Character_C_Get3PMesh) == 0x000008, "Wrong size on I_Character_C_Get3PMesh");
static_assert(offsetof(I_Character_C_Get3PMesh, ThreePMesh) == 0x000000, "Member 'I_Character_C_Get3PMesh::ThreePMesh' has a wrong offset!");

// Function I_Character.I_Character_C.GetAnimBPs
// 0x0010 (0x0010 - 0x0000)
struct I_Character_C_GetAnimBPs final
{
public:
	TArray<class UAnimInstance*>                  AnimBPs;                                           // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(I_Character_C_GetAnimBPs) == 0x000008, "Wrong alignment on I_Character_C_GetAnimBPs");
static_assert(sizeof(I_Character_C_GetAnimBPs) == 0x000010, "Wrong size on I_Character_C_GetAnimBPs");
static_assert(offsetof(I_Character_C_GetAnimBPs, AnimBPs) == 0x000000, "Member 'I_Character_C_GetAnimBPs::AnimBPs' has a wrong offset!");

// Function I_Character.I_Character_C.GetCharacterName
// 0x0001 (0x0001 - 0x0000)
struct I_Character_C_GetCharacterName final
{
public:
	ECharacterName                                CharacterName;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Character_C_GetCharacterName) == 0x000001, "Wrong alignment on I_Character_C_GetCharacterName");
static_assert(sizeof(I_Character_C_GetCharacterName) == 0x000001, "Wrong size on I_Character_C_GetCharacterName");
static_assert(offsetof(I_Character_C_GetCharacterName, CharacterName) == 0x000000, "Member 'I_Character_C_GetCharacterName::CharacterName' has a wrong offset!");

// Function I_Character.I_Character_C.GetCharacterSize
// 0x0001 (0x0001 - 0x0000)
struct I_Character_C_GetCharacterSize final
{
public:
	ECharacterSize                                CharacterSize;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Character_C_GetCharacterSize) == 0x000001, "Wrong alignment on I_Character_C_GetCharacterSize");
static_assert(sizeof(I_Character_C_GetCharacterSize) == 0x000001, "Wrong size on I_Character_C_GetCharacterSize");
static_assert(offsetof(I_Character_C_GetCharacterSize, CharacterSize) == 0x000000, "Member 'I_Character_C_GetCharacterSize::CharacterSize' has a wrong offset!");

// Function I_Character.I_Character_C.GetGuardDogTargetOffset
// 0x0018 (0x0018 - 0x0000)
struct I_Character_C_GetGuardDogTargetOffset final
{
public:
	struct FVector                                TargetOffset;                                      // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Character_C_GetGuardDogTargetOffset) == 0x000008, "Wrong alignment on I_Character_C_GetGuardDogTargetOffset");
static_assert(sizeof(I_Character_C_GetGuardDogTargetOffset) == 0x000018, "Wrong size on I_Character_C_GetGuardDogTargetOffset");
static_assert(offsetof(I_Character_C_GetGuardDogTargetOffset, TargetOffset) == 0x000000, "Member 'I_Character_C_GetGuardDogTargetOffset::TargetOffset' has a wrong offset!");

// Function I_Character.I_Character_C.GetInventory
// 0x0008 (0x0008 - 0x0000)
struct I_Character_C_GetInventory final
{
public:
	class UShopInteractionAC_C*                   Inventory;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Character_C_GetInventory) == 0x000008, "Wrong alignment on I_Character_C_GetInventory");
static_assert(sizeof(I_Character_C_GetInventory) == 0x000008, "Wrong size on I_Character_C_GetInventory");
static_assert(offsetof(I_Character_C_GetInventory, Inventory) == 0x000000, "Member 'I_Character_C_GetInventory::Inventory' has a wrong offset!");

// Function I_Character.I_Character_C.GetIsDead
// 0x0001 (0x0001 - 0x0000)
struct I_Character_C_GetIsDead final
{
public:
	bool                                          Dead;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Character_C_GetIsDead) == 0x000001, "Wrong alignment on I_Character_C_GetIsDead");
static_assert(sizeof(I_Character_C_GetIsDead) == 0x000001, "Wrong size on I_Character_C_GetIsDead");
static_assert(offsetof(I_Character_C_GetIsDead, Dead) == 0x000000, "Member 'I_Character_C_GetIsDead::Dead' has a wrong offset!");

// Function I_Character.I_Character_C.GetJPPlayerController
// 0x0008 (0x0008 - 0x0000)
struct I_Character_C_GetJPPlayerController final
{
public:
	class APlayerControllerJP*                    PlayerController;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Character_C_GetJPPlayerController) == 0x000008, "Wrong alignment on I_Character_C_GetJPPlayerController");
static_assert(sizeof(I_Character_C_GetJPPlayerController) == 0x000008, "Wrong size on I_Character_C_GetJPPlayerController");
static_assert(offsetof(I_Character_C_GetJPPlayerController, PlayerController) == 0x000000, "Member 'I_Character_C_GetJPPlayerController::PlayerController' has a wrong offset!");

// Function I_Character.I_Character_C.SetIsDead
// 0x03F8 (0x03F8 - 0x0000)
struct I_Character_C_SetIsDead final
{
public:
	bool                                          Dead;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OptionalVelocity;                                  // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKillInfo                              KillInfo;                                          // 0x0020(0x03D8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(I_Character_C_SetIsDead) == 0x000008, "Wrong alignment on I_Character_C_SetIsDead");
static_assert(sizeof(I_Character_C_SetIsDead) == 0x0003F8, "Wrong size on I_Character_C_SetIsDead");
static_assert(offsetof(I_Character_C_SetIsDead, Dead) == 0x000000, "Member 'I_Character_C_SetIsDead::Dead' has a wrong offset!");
static_assert(offsetof(I_Character_C_SetIsDead, OptionalVelocity) == 0x000008, "Member 'I_Character_C_SetIsDead::OptionalVelocity' has a wrong offset!");
static_assert(offsetof(I_Character_C_SetIsDead, KillInfo) == 0x000020, "Member 'I_Character_C_SetIsDead::KillInfo' has a wrong offset!");

}

