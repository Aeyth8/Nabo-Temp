#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWGamePhases

#include "Basic.hpp"

#include "IWGamePhases_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GASIW_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class IWGamePhases.PhaseAbility
// 0x0010 (0x0470 - 0x0460)
class UPhaseAbility final : public UGameplayAbilityIW
{
public:
	struct FGameplayTag                           GamePhaseTag;                                      // 0x0460(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhaseAbility">();
	}
	static class UPhaseAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhaseAbility>();
	}
};
static_assert(alignof(UPhaseAbility) == 0x000010, "Wrong alignment on UPhaseAbility");
static_assert(sizeof(UPhaseAbility) == 0x000470, "Wrong size on UPhaseAbility");
static_assert(offsetof(UPhaseAbility, GamePhaseTag) == 0x000460, "Member 'UPhaseAbility::GamePhaseTag' has a wrong offset!");

// Class IWGamePhases.PhaseSubsystem
// 0x0070 (0x00A0 - 0x0030)
class UPhaseSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x70];                                      // 0x0030(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_StartPhase(TSubclassOf<class UPhaseAbility> Phase, const TDelegate<void(class UPhaseAbility* Phase)>& PhaseEnded);
	void K2_WhenPhaseEnds(const struct FGameplayTag& PhaseTag, EPhaseTagMatchType MatchType, TDelegate<void(struct FGameplayTag& PhaseTag)> WhenPhaseEnd);
	void K2_WhenPhaseStartsOrIsActive(const struct FGameplayTag& PhaseTag, EPhaseTagMatchType MatchType, TDelegate<void(struct FGameplayTag& PhaseTag)> WhenPhaseActive);

	bool IsPhaseActive(const struct FGameplayTag& PhaseTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhaseSubsystem">();
	}
	static class UPhaseSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhaseSubsystem>();
	}
};
static_assert(alignof(UPhaseSubsystem) == 0x000008, "Wrong alignment on UPhaseSubsystem");
static_assert(sizeof(UPhaseSubsystem) == 0x0000A0, "Wrong size on UPhaseSubsystem");

}

