#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TutorialActivatableBase

#include "Basic.hpp"

#include "BP_TutorialActivatableBase_classes.hpp"
#include "BP_TutorialActivatableBase_parameters.hpp"


namespace SDK
{

// Function BP_TutorialActivatableBase.BP_TutorialActivatableBase_C.Activate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TutorialActivatableBase_C::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialActivatableBase_C", "Activate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialActivatableBase.BP_TutorialActivatableBase_C.CanActivate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialActivatableBase_C::CanActivate(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialActivatableBase_C", "CanActivate");

	Params::BP_TutorialActivatableBase_C_CanActivate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_TutorialActivatableBase.BP_TutorialActivatableBase_C.Deactivate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TutorialActivatableBase_C::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialActivatableBase_C", "Deactivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialActivatableBase.BP_TutorialActivatableBase_C.DecreaseProgressCounter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentAmount                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialActivatableBase_C::DecreaseProgressCounter(int32* CurrentAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialActivatableBase_C", "DecreaseProgressCounter");

	Params::BP_TutorialActivatableBase_C_DecreaseProgressCounter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentAmount != nullptr)
		*CurrentAmount = Parms.CurrentAmount;
}


// Function BP_TutorialActivatableBase.BP_TutorialActivatableBase_C.ExecuteUbergraph_BP_TutorialActivatableBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialActivatableBase_C::ExecuteUbergraph_BP_TutorialActivatableBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialActivatableBase_C", "ExecuteUbergraph_BP_TutorialActivatableBase");

	Params::BP_TutorialActivatableBase_C_ExecuteUbergraph_BP_TutorialActivatableBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialActivatableBase.BP_TutorialActivatableBase_C.IncreaseProgressCounter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReachedTotal                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CurrentAmount                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialActivatableBase_C::IncreaseProgressCounter(bool* ReachedTotal, int32* CurrentAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialActivatableBase_C", "IncreaseProgressCounter");

	Params::BP_TutorialActivatableBase_C_IncreaseProgressCounter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReachedTotal != nullptr)
		*ReachedTotal = Parms.ReachedTotal;

	if (CurrentAmount != nullptr)
		*CurrentAmount = Parms.CurrentAmount;
}


// Function BP_TutorialActivatableBase.BP_TutorialActivatableBase_C.Mark as Completed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TutorialActivatableBase_C::Mark_as_Completed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialActivatableBase_C", "Mark as Completed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialActivatableBase.BP_TutorialActivatableBase_C.MarkAsCompleteWithDelay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialActivatableBase_C::MarkAsCompleteWithDelay(double Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialActivatableBase_C", "MarkAsCompleteWithDelay");

	Params::BP_TutorialActivatableBase_C_MarkAsCompleteWithDelay Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialActivatableBase.BP_TutorialActivatableBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_TutorialActivatableBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialActivatableBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialActivatableBase.BP_TutorialActivatableBase_C.UpdateProgressValues
// (BlueprintCallable, BlueprintEvent)

void ABP_TutorialActivatableBase_C::UpdateProgressValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialActivatableBase_C", "UpdateProgressValues");

	UObject::ProcessEvent(Func, nullptr);
}

}

