#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_JP_TPP_Preview

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_JP_TPP_Preview.ABP_JP_TPP_Preview_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_TPP_Preview_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_Preview_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_JP_TPP_Preview_C_AnimGraph");
static_assert(sizeof(ABP_JP_TPP_Preview_C_AnimGraph) == 0x000010, "Wrong size on ABP_JP_TPP_Preview_C_AnimGraph");
static_assert(offsetof(ABP_JP_TPP_Preview_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_JP_TPP_Preview_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_JP_TPP_Preview.ABP_JP_TPP_Preview_C.BlendLayers
// 0x0040 (0x0040 - 0x0000)
struct ABP_JP_TPP_Preview_C_BlendLayers final
{
public:
	struct FPoseLink                              BaseLayer;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              OverlayLayer;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BasePose;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BlendLayers_0;                                     // 0x0030(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_Preview_C_BlendLayers) == 0x000008, "Wrong alignment on ABP_JP_TPP_Preview_C_BlendLayers");
static_assert(sizeof(ABP_JP_TPP_Preview_C_BlendLayers) == 0x000040, "Wrong size on ABP_JP_TPP_Preview_C_BlendLayers");
static_assert(offsetof(ABP_JP_TPP_Preview_C_BlendLayers, BaseLayer) == 0x000000, "Member 'ABP_JP_TPP_Preview_C_BlendLayers::BaseLayer' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_BlendLayers, OverlayLayer) == 0x000010, "Member 'ABP_JP_TPP_Preview_C_BlendLayers::OverlayLayer' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_BlendLayers, BasePose) == 0x000020, "Member 'ABP_JP_TPP_Preview_C_BlendLayers::BasePose' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_BlendLayers, BlendLayers_0) == 0x000030, "Member 'ABP_JP_TPP_Preview_C_BlendLayers::BlendLayers_0' has a wrong offset!");

// Function ABP_JP_TPP_Preview.ABP_JP_TPP_Preview_C.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_JP_TPP_Preview_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_Preview_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on ABP_JP_TPP_Preview_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_JP_TPP_Preview_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on ABP_JP_TPP_Preview_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_JP_TPP_Preview_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_JP_TPP_Preview_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");

// Function ABP_JP_TPP_Preview.ABP_JP_TPP_Preview_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_JP_TPP_Preview_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_Preview_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_JP_TPP_Preview_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_JP_TPP_Preview_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_JP_TPP_Preview_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_JP_TPP_Preview_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_JP_TPP_Preview_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_JP_TPP_Preview.ABP_JP_TPP_Preview_C.ExecuteUbergraph_ABP_JP_TPP_Preview
// 0x0068 (0x0068 - 0x0000)
struct ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bShouldLookAtCamera;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_SecondaryMotionSequenceStartPosition_ImplicitCast; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview) == 0x000008, "Wrong alignment on ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview");
static_assert(sizeof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview) == 0x000068, "Wrong size on ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, EntryPoint) == 0x000000, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, K2Node_Event_DeltaTimeX) == 0x000020, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, CallFunc_RandomFloatInRange_ReturnValue) == 0x000028, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, K2Node_Event_bShouldLookAtCamera) == 0x000030, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::K2Node_Event_bShouldLookAtCamera' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, CallFunc_GetPlayerController_ReturnValue) == 0x000038, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, CallFunc_GetViewTarget_ReturnValue) == 0x000040, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000048, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue) == 0x000050, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, CallFunc_RandomFloatInRange_Max_ImplicitCast) == 0x000058, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::CallFunc_RandomFloatInRange_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, K2Node_VariableSet_SecondaryMotionSequenceStartPosition_ImplicitCast) == 0x000060, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::K2Node_VariableSet_SecondaryMotionSequenceStartPosition_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview, CallFunc_Delay_Duration_ImplicitCast) == 0x000064, "Member 'ABP_JP_TPP_Preview_C_ExecuteUbergraph_ABP_JP_TPP_Preview::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");

// Function ABP_JP_TPP_Preview.ABP_JP_TPP_Preview_C.HandIK
// 0x0020 (0x0020 - 0x0000)
struct ABP_JP_TPP_Preview_C_HandIK final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HandIK_0;                                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_Preview_C_HandIK) == 0x000008, "Wrong alignment on ABP_JP_TPP_Preview_C_HandIK");
static_assert(sizeof(ABP_JP_TPP_Preview_C_HandIK) == 0x000020, "Wrong size on ABP_JP_TPP_Preview_C_HandIK");
static_assert(offsetof(ABP_JP_TPP_Preview_C_HandIK, InPose) == 0x000000, "Member 'ABP_JP_TPP_Preview_C_HandIK::InPose' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_HandIK, HandIK_0) == 0x000010, "Member 'ABP_JP_TPP_Preview_C_HandIK::HandIK_0' has a wrong offset!");

// Function ABP_JP_TPP_Preview.ABP_JP_TPP_Preview_C.ItemIK
// 0x0020 (0x0020 - 0x0000)
struct ABP_JP_TPP_Preview_C_ItemIK final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ItemIK_0;                                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_Preview_C_ItemIK) == 0x000008, "Wrong alignment on ABP_JP_TPP_Preview_C_ItemIK");
static_assert(sizeof(ABP_JP_TPP_Preview_C_ItemIK) == 0x000020, "Wrong size on ABP_JP_TPP_Preview_C_ItemIK");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ItemIK, InPose_0) == 0x000000, "Member 'ABP_JP_TPP_Preview_C_ItemIK::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_ItemIK, ItemIK_0) == 0x000010, "Member 'ABP_JP_TPP_Preview_C_ItemIK::ItemIK_0' has a wrong offset!");

// Function ABP_JP_TPP_Preview.ABP_JP_TPP_Preview_C.PreviewActorLookAtCamera
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_TPP_Preview_C_PreviewActorLookAtCamera final
{
public:
	bool                                          bShouldLookAtCamera_0;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_Preview_C_PreviewActorLookAtCamera) == 0x000001, "Wrong alignment on ABP_JP_TPP_Preview_C_PreviewActorLookAtCamera");
static_assert(sizeof(ABP_JP_TPP_Preview_C_PreviewActorLookAtCamera) == 0x000001, "Wrong size on ABP_JP_TPP_Preview_C_PreviewActorLookAtCamera");
static_assert(offsetof(ABP_JP_TPP_Preview_C_PreviewActorLookAtCamera, bShouldLookAtCamera_0) == 0x000000, "Member 'ABP_JP_TPP_Preview_C_PreviewActorLookAtCamera::bShouldLookAtCamera_0' has a wrong offset!");

// Function ABP_JP_TPP_Preview.ABP_JP_TPP_Preview_C.UpdateLayerData
// 0x01A0 (0x01A0 - 0x0000)
struct ABP_JP_TPP_Preview_C_UpdateLayerData final
{
public:
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_4;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_5;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_6;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_7;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_8;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_9;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_10;             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_11;             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_12;             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_13;             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_14;             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_1;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_15;             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_16;             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_17;             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_18;             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_19;             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_20;             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_21;             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_22;             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_23;             // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_RightHandCopyBoneWeight_ImplicitCast; // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_Hand_FK_Weight_ImplicitCast;    // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_LeftHandCopyBoneWeight_ImplicitCast; // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_Value_ImplicitCast;                // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_NewVar_ImplicitCast;            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_Value_ImplicitCast_1;              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_B_ImplicitCast;                      // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_NewVar_1_ImplicitCast;          // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_1;                // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_B_ImplicitCast_1;                    // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_L_LS_ImplicitCast;          // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_R_LS_ImplicitCast;          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_R_Add_ImplicitCast;         // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_L_Add_ImplicitCast;         // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Head_Add_ImplicitCast;          // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Spine_Add_ImplicitCast;         // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Hand_L_ImplicitCast;            // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Hand_R_ImplicitCast;            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_B_ImplicitCast_2;                    // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_2;                // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_B_ImplicitCast_3;                    // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_3;                // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_Preview_C_UpdateLayerData) == 0x000008, "Wrong alignment on ABP_JP_TPP_Preview_C_UpdateLayerData");
static_assert(sizeof(ABP_JP_TPP_Preview_C_UpdateLayerData) == 0x0001A0, "Wrong size on ABP_JP_TPP_Preview_C_UpdateLayerData");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue) == 0x000000, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_1) == 0x000004, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_2) == 0x000008, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_3) == 0x00000C, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_4) == 0x000018, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_FFloor_ReturnValue) == 0x00001C, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000020, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Subtract_IntInt_ReturnValue) == 0x000024, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_SelectFloat_ReturnValue_1) == 0x000028, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000030, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_SelectFloat_ReturnValue_2) == 0x000038, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_5) == 0x000040, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_FClamp_ReturnValue) == 0x000048, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_6) == 0x000050, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_7) == 0x000054, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_FClamp_ReturnValue_1) == 0x000058, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_8) == 0x000060, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_ReturnValue) == 0x000068, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_9) == 0x000070, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_10) == 0x000074, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_11) == 0x000078, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_ReturnValue_1) == 0x000080, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_12) == 0x000088, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_13) == 0x00008C, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_14) == 0x000090, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_FFloor_ReturnValue_1) == 0x000094, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_FFloor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000098, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_15) == 0x00009C, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0000A0, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_16) == 0x0000A8, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_17) == 0x0000AC, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_18) == 0x0000B0, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_19) == 0x0000B4, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_20) == 0x0000B8, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_21) == 0x0000BC, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_22) == 0x0000C0, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_ReturnValue_2) == 0x0000C8, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_23) == 0x0000D0, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_ReturnValue_3) == 0x0000D8, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_SelectFloat_A_ImplicitCast) == 0x0000E0, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x0000E8, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_RightHandCopyBoneWeight_ImplicitCast) == 0x0000F0, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_RightHandCopyBoneWeight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_Hand_FK_Weight_ImplicitCast) == 0x0000F4, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_Hand_FK_Weight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_LeftHandCopyBoneWeight_ImplicitCast) == 0x0000F8, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_LeftHandCopyBoneWeight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_FClamp_Value_ImplicitCast) == 0x000100, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_FClamp_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_NewVar_ImplicitCast) == 0x000108, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_NewVar_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_FClamp_Value_ImplicitCast_1) == 0x000110, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_FClamp_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_B_ImplicitCast) == 0x000118, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_NewVar_1_ImplicitCast) == 0x000120, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_NewVar_1_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_Alpha_ImplicitCast) == 0x000128, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_Alpha_ImplicitCast_1) == 0x000130, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_B_ImplicitCast_1) == 0x000138, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_Arm_L_LS_ImplicitCast) == 0x000140, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_Arm_L_LS_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_Arm_R_LS_ImplicitCast) == 0x000148, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_Arm_R_LS_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_Arm_R_Add_ImplicitCast) == 0x000150, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_Arm_R_Add_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_Arm_L_Add_ImplicitCast) == 0x000158, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_Arm_L_Add_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_Head_Add_ImplicitCast) == 0x000160, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_Head_Add_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_Spine_Add_ImplicitCast) == 0x000168, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_Spine_Add_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_Hand_L_ImplicitCast) == 0x000170, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_Hand_L_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, K2Node_VariableSet_Hand_R_ImplicitCast) == 0x000178, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::K2Node_VariableSet_Hand_R_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_B_ImplicitCast_2) == 0x000180, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_Alpha_ImplicitCast_2) == 0x000188, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_B_ImplicitCast_3) == 0x000190, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_B_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_Preview_C_UpdateLayerData, CallFunc_Lerp_Alpha_ImplicitCast_3) == 0x000198, "Member 'ABP_JP_TPP_Preview_C_UpdateLayerData::CallFunc_Lerp_Alpha_ImplicitCast_3' has a wrong offset!");

}

