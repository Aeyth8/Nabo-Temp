#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_MultipointDeployable

#include "Basic.hpp"

#include "JP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_DeploymentInformationGameplayMessage_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "S_DeployItem_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.Add Point
// 0x0110 (0x0110 - 0x0000)
struct GA_MultipointDeployable_C_Add_Point final
{
public:
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_Add_Point) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_Add_Point");
static_assert(sizeof(GA_MultipointDeployable_C_Add_Point) == 0x000110, "Wrong size on GA_MultipointDeployable_C_Add_Point");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_Get_ClassLog_Name_name) == 0x000000, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_bBlockingHit) == 0x000010, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_bInitialOverlap) == 0x000011, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_Time) == 0x000014, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_Distance) == 0x000018, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_Location) == 0x000020, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_ImpactPoint) == 0x000038, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_Normal) == 0x000050, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_ImpactNormal) == 0x000068, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_PhysMat) == 0x000080, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_HitActor) == 0x000088, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_HitComponent) == 0x000090, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_HitBoneName) == 0x000098, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_BoneName) == 0x0000A0, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_HitItem) == 0x0000A8, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_ElementIndex) == 0x0000AC, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_FaceIndex) == 0x0000B0, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_TraceStart) == 0x0000B8, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_BreakHitResult_TraceEnd) == 0x0000D0, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_Conv_VectorToString_ReturnValue) == 0x0000E8, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_Array_Add_ReturnValue) == 0x0000F8, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Add_Point, CallFunc_Concat_StrStr_ReturnValue) == 0x000100, "Member 'GA_MultipointDeployable_C_Add_Point::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.AddDeployingGameplayEffect
// 0x0028 (0x0028 - 0x0000)
struct GA_MultipointDeployable_C_AddDeployingGameplayEffect final
{
public:
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue; // 0x0000(0x0010)()
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue; // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_AddDeployingGameplayEffect) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_AddDeployingGameplayEffect");
static_assert(sizeof(GA_MultipointDeployable_C_AddDeployingGameplayEffect) == 0x000028, "Wrong size on GA_MultipointDeployable_C_AddDeployingGameplayEffect");
static_assert(offsetof(GA_MultipointDeployable_C_AddDeployingGameplayEffect, CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_AddDeployingGameplayEffect::CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AddDeployingGameplayEffect, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_AddDeployingGameplayEffect::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AddDeployingGameplayEffect, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000018, "Member 'GA_MultipointDeployable_C_AddDeployingGameplayEffect::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AddDeployingGameplayEffect, CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue) == 0x000020, "Member 'GA_MultipointDeployable_C_AddDeployingGameplayEffect::CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.AnimPrimaryPressed
// 0x0088 (0x0088 - 0x0000)
struct GA_MultipointDeployable_C_AnimPrimaryPressed final
{
public:
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0000(0x0048)(ContainsInstancedReference)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_CharacterAnimation_C> K2Node_DynamicCast_AsI_Character_Animation;        // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_CharacterAnimation_C> K2Node_DynamicCast_AsI_Character_Animation_1;      // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_AnimPrimaryPressed) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_AnimPrimaryPressed");
static_assert(sizeof(GA_MultipointDeployable_C_AnimPrimaryPressed) == 0x000088, "Wrong size on GA_MultipointDeployable_C_AnimPrimaryPressed");
static_assert(offsetof(GA_MultipointDeployable_C_AnimPrimaryPressed, CallFunc_GetActorInfo_ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_AnimPrimaryPressed::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimPrimaryPressed, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000048, "Member 'GA_MultipointDeployable_C_AnimPrimaryPressed::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimPrimaryPressed, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'GA_MultipointDeployable_C_AnimPrimaryPressed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimPrimaryPressed, K2Node_DynamicCast_AsI_Character_Animation) == 0x000058, "Member 'GA_MultipointDeployable_C_AnimPrimaryPressed::K2Node_DynamicCast_AsI_Character_Animation' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimPrimaryPressed, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'GA_MultipointDeployable_C_AnimPrimaryPressed::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimPrimaryPressed, K2Node_DynamicCast_AsI_Character_Animation_1) == 0x000070, "Member 'GA_MultipointDeployable_C_AnimPrimaryPressed::K2Node_DynamicCast_AsI_Character_Animation_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimPrimaryPressed, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'GA_MultipointDeployable_C_AnimPrimaryPressed::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.AnimSecondaryPressed
// 0x0088 (0x0088 - 0x0000)
struct GA_MultipointDeployable_C_AnimSecondaryPressed final
{
public:
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0000(0x0048)(ContainsInstancedReference)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_CharacterAnimation_C> K2Node_DynamicCast_AsI_Character_Animation;        // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_CharacterAnimation_C> K2Node_DynamicCast_AsI_Character_Animation_1;      // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_AnimSecondaryPressed) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_AnimSecondaryPressed");
static_assert(sizeof(GA_MultipointDeployable_C_AnimSecondaryPressed) == 0x000088, "Wrong size on GA_MultipointDeployable_C_AnimSecondaryPressed");
static_assert(offsetof(GA_MultipointDeployable_C_AnimSecondaryPressed, CallFunc_GetActorInfo_ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_AnimSecondaryPressed::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimSecondaryPressed, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000048, "Member 'GA_MultipointDeployable_C_AnimSecondaryPressed::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimSecondaryPressed, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'GA_MultipointDeployable_C_AnimSecondaryPressed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimSecondaryPressed, K2Node_DynamicCast_AsI_Character_Animation) == 0x000058, "Member 'GA_MultipointDeployable_C_AnimSecondaryPressed::K2Node_DynamicCast_AsI_Character_Animation' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimSecondaryPressed, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'GA_MultipointDeployable_C_AnimSecondaryPressed::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimSecondaryPressed, K2Node_DynamicCast_AsI_Character_Animation_1) == 0x000070, "Member 'GA_MultipointDeployable_C_AnimSecondaryPressed::K2Node_DynamicCast_AsI_Character_Animation_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_AnimSecondaryPressed, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'GA_MultipointDeployable_C_AnimSecondaryPressed::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.Auth_SpawnItem
// 0x0048 (0x0048 - 0x0000)
struct GA_MultipointDeployable_C_Auth_SpawnItem final
{
public:
	TArray<struct FHitResult>                     TraceHits;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FRotator                               PreviewRotation;                                   // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        OptionalAngle_0;                                   // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OptionalVector_0;                                  // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_Auth_SpawnItem) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_Auth_SpawnItem");
static_assert(sizeof(GA_MultipointDeployable_C_Auth_SpawnItem) == 0x000048, "Wrong size on GA_MultipointDeployable_C_Auth_SpawnItem");
static_assert(offsetof(GA_MultipointDeployable_C_Auth_SpawnItem, TraceHits) == 0x000000, "Member 'GA_MultipointDeployable_C_Auth_SpawnItem::TraceHits' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Auth_SpawnItem, PreviewRotation) == 0x000010, "Member 'GA_MultipointDeployable_C_Auth_SpawnItem::PreviewRotation' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Auth_SpawnItem, OptionalAngle_0) == 0x000028, "Member 'GA_MultipointDeployable_C_Auth_SpawnItem::OptionalAngle_0' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Auth_SpawnItem, OptionalVector_0) == 0x000030, "Member 'GA_MultipointDeployable_C_Auth_SpawnItem::OptionalVector_0' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.Blocked by Dynamic Object
// 0x01B8 (0x01B8 - 0x0000)
struct GA_MultipointDeployable_C_Blocked_by_Dynamic_Object final
{
public:
	bool                                          NotBlocked;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectTypeQuery                              Temp_byte_Variable;                                // 0x0001(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0008(0x0048)(ContainsInstancedReference)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetTracePoints_Start;                     // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTracePoints_End;                       // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0090(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00A0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CallFunc_GetAllowedObjectTypes_AllowedObjectTypes; // 0x01A0(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_Blocked_by_Dynamic_Object");
static_assert(sizeof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object) == 0x0001B8, "Wrong size on GA_MultipointDeployable_C_Blocked_by_Dynamic_Object");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, NotBlocked) == 0x000000, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::NotBlocked' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, Temp_byte_Variable) == 0x000001, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, CallFunc_GetActorInfo_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, K2Node_MakeArray_Array) == 0x000050, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, CallFunc_GetTracePoints_Start) == 0x000060, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::CallFunc_GetTracePoints_Start' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, CallFunc_GetTracePoints_End) == 0x000078, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::CallFunc_GetTracePoints_End' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, K2Node_MakeArray_Array_1) == 0x000090, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000A0, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000198, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, CallFunc_GetAllowedObjectTypes_AllowedObjectTypes) == 0x0001A0, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::CallFunc_GetAllowedObjectTypes_AllowedObjectTypes' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Blocked_by_Dynamic_Object, CallFunc_Array_Contains_ReturnValue) == 0x0001B0, "Member 'GA_MultipointDeployable_C_Blocked_by_Dynamic_Object::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.BoxTraceEnd
// 0x01C8 (0x01C8 - 0x0000)
struct GA_MultipointDeployable_C_BoxTraceEnd final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalBounds_Min;                       // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalBounds_Max;                       // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_BoxTraceEnd) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_BoxTraceEnd");
static_assert(sizeof(GA_MultipointDeployable_C_BoxTraceEnd) == 0x0001C8, "Wrong size on GA_MultipointDeployable_C_BoxTraceEnd");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_bBlockingHit) == 0x000019, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_bInitialOverlap) == 0x00001A, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_Time) == 0x00001C, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_Distance) == 0x000020, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_Location) == 0x000028, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_ImpactPoint) == 0x000040, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_Normal) == 0x000058, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_ImpactNormal) == 0x000070, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_PhysMat) == 0x000088, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_HitActor) == 0x000090, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_HitComponent) == 0x000098, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_HitBoneName) == 0x0000A0, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_BoneName) == 0x0000A8, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_HitItem) == 0x0000B0, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_ElementIndex) == 0x0000B4, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_FaceIndex) == 0x0000B8, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_TraceStart) == 0x0000C0, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakHitResult_TraceEnd) == 0x0000D8, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_GetLocalBounds_Min) == 0x0000F0, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_GetLocalBounds_Min' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_GetLocalBounds_Max) == 0x000108, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_GetLocalBounds_Max' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakVector_X) == 0x000120, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakVector_Y) == 0x000128, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakVector_Z) == 0x000130, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakVector_X_1) == 0x000138, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakVector_Y_1) == 0x000140, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_BreakVector_Z_1) == 0x000148, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000150, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000168, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000180, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000198, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceEnd, CallFunc_Add_VectorVector_ReturnValue) == 0x0001B0, "Member 'GA_MultipointDeployable_C_BoxTraceEnd::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.BoxTraceHalfSize
// 0x00A8 (0x00A8 - 0x0000)
struct GA_MultipointDeployable_C_BoxTraceHalfSize final
{
public:
	double                                        X;                                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y;                                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocalBounds_Min;                       // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocalBounds_Max;                       // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_BoxTraceHalfSize) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_BoxTraceHalfSize");
static_assert(sizeof(GA_MultipointDeployable_C_BoxTraceHalfSize) == 0x0000A8, "Wrong size on GA_MultipointDeployable_C_BoxTraceHalfSize");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, X) == 0x000000, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::X' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, Y) == 0x000008, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::Y' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_GetLocalBounds_Min) == 0x000018, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_GetLocalBounds_Min' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_GetLocalBounds_Max) == 0x000030, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_GetLocalBounds_Max' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_BreakVector_X) == 0x000048, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_BreakVector_Y) == 0x000050, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_BreakVector_Z) == 0x000058, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_BreakVector_X_1) == 0x000060, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_BreakVector_Y_1) == 0x000068, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_BreakVector_Z_1) == 0x000070, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000078, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000088, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000090, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000098, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_BoxTraceHalfSize, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x0000A0, "Member 'GA_MultipointDeployable_C_BoxTraceHalfSize::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.CloneSpawnPreviewMesh
// 0x0090 (0x0090 - 0x0000)
struct GA_MultipointDeployable_C_CloneSpawnPreviewMesh final
{
public:
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetPreviewMaterial_NewParam;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PreviewMesh_C*                      CallFunc_FinishSpawningActor_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_CloneSpawnPreviewMesh) == 0x000010, "Wrong alignment on GA_MultipointDeployable_C_CloneSpawnPreviewMesh");
static_assert(sizeof(GA_MultipointDeployable_C_CloneSpawnPreviewMesh) == 0x000090, "Wrong size on GA_MultipointDeployable_C_CloneSpawnPreviewMesh");
static_assert(offsetof(GA_MultipointDeployable_C_CloneSpawnPreviewMesh, CallFunc_IsLocallyControlled_ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_CloneSpawnPreviewMesh::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CloneSpawnPreviewMesh, CallFunc_GetPreviewMaterial_NewParam) == 0x000008, "Member 'GA_MultipointDeployable_C_CloneSpawnPreviewMesh::CallFunc_GetPreviewMaterial_NewParam' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CloneSpawnPreviewMesh, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_CloneSpawnPreviewMesh::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CloneSpawnPreviewMesh, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000070, "Member 'GA_MultipointDeployable_C_CloneSpawnPreviewMesh::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CloneSpawnPreviewMesh, CallFunc_FinishSpawningActor_ReturnValue) == 0x000078, "Member 'GA_MultipointDeployable_C_CloneSpawnPreviewMesh::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CloneSpawnPreviewMesh, CallFunc_SetStaticMesh_ReturnValue) == 0x000080, "Member 'GA_MultipointDeployable_C_CloneSpawnPreviewMesh::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CloneSpawnPreviewMesh, CallFunc_Array_Add_ReturnValue) == 0x000084, "Member 'GA_MultipointDeployable_C_CloneSpawnPreviewMesh::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.CollisionBetweenPoints
// 0x0110 (0x0110 - 0x0000)
struct GA_MultipointDeployable_C_CollisionBetweenPoints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SphereTraceBetweenPoints_ReturnValue;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0008(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceBetweenPoints_ReturnValue_1;   // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_CollisionBetweenPoints) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_CollisionBetweenPoints");
static_assert(sizeof(GA_MultipointDeployable_C_CollisionBetweenPoints) == 0x000110, "Wrong size on GA_MultipointDeployable_C_CollisionBetweenPoints");
static_assert(offsetof(GA_MultipointDeployable_C_CollisionBetweenPoints, ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_CollisionBetweenPoints::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CollisionBetweenPoints, CallFunc_SphereTraceBetweenPoints_ReturnValue) == 0x000001, "Member 'GA_MultipointDeployable_C_CollisionBetweenPoints::CallFunc_SphereTraceBetweenPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CollisionBetweenPoints, CallFunc_Array_Get_Item) == 0x000008, "Member 'GA_MultipointDeployable_C_CollisionBetweenPoints::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CollisionBetweenPoints, CallFunc_SphereTraceBetweenPoints_ReturnValue_1) == 0x000100, "Member 'GA_MultipointDeployable_C_CollisionBetweenPoints::CallFunc_SphereTraceBetweenPoints_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CollisionBetweenPoints, CallFunc_Array_Length_ReturnValue) == 0x000104, "Member 'GA_MultipointDeployable_C_CollisionBetweenPoints::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_CollisionBetweenPoints, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000108, "Member 'GA_MultipointDeployable_C_CollisionBetweenPoints::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.ConstructCosmetics
// 0x0018 (0x0018 - 0x0000)
struct GA_MultipointDeployable_C_ConstructCosmetics final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_ConstructCosmetics) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_ConstructCosmetics");
static_assert(sizeof(GA_MultipointDeployable_C_ConstructCosmetics) == 0x000018, "Wrong size on GA_MultipointDeployable_C_ConstructCosmetics");
static_assert(offsetof(GA_MultipointDeployable_C_ConstructCosmetics, Location) == 0x000000, "Member 'GA_MultipointDeployable_C_ConstructCosmetics::Location' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.DebugPlacement
// 0x01B0 (0x01B0 - 0x0000)
struct GA_MultipointDeployable_C_DebugPlacement final
{
public:
	bool                                          CallFunc_LegalPreviewMeshCollision_Return_Value;   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_LegalPreviewMeshCollision_HitActor;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_2;          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_3;          // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_4;          // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_5;          // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_DebugPlacement) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_DebugPlacement");
static_assert(sizeof(GA_MultipointDeployable_C_DebugPlacement) == 0x0001B0, "Wrong size on GA_MultipointDeployable_C_DebugPlacement");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_LegalPreviewMeshCollision_Return_Value) == 0x000000, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_LegalPreviewMeshCollision_Return_Value' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_LegalPreviewMeshCollision_HitActor) == 0x000008, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_LegalPreviewMeshCollision_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Conv_BoolToString_ReturnValue) == 0x000020, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Get_ClassLog_Name_name) == 0x000030, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x000040, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Conv_BoolToString_ReturnValue_2) == 0x000050, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Conv_BoolToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Conv_BoolToString_ReturnValue_3) == 0x000070, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Conv_BoolToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000080, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Conv_BoolToString_ReturnValue_4) == 0x000090, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Conv_BoolToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Conv_BoolToString_ReturnValue_5) == 0x0000A0, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Conv_BoolToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000B0, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000C0, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000D0, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000E0, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0000F0, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000100, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000110, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000120, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000130, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000140, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000150, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000160, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000170, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000180, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000190, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_DebugPlacement, CallFunc_Concat_StrStr_ReturnValue_17) == 0x0001A0, "Member 'GA_MultipointDeployable_C_DebugPlacement::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.EndWaitDelayTaskIfExists
// 0x0001 (0x0001 - 0x0000)
struct GA_MultipointDeployable_C_EndWaitDelayTaskIfExists final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_EndWaitDelayTaskIfExists) == 0x000001, "Wrong alignment on GA_MultipointDeployable_C_EndWaitDelayTaskIfExists");
static_assert(sizeof(GA_MultipointDeployable_C_EndWaitDelayTaskIfExists) == 0x000001, "Wrong size on GA_MultipointDeployable_C_EndWaitDelayTaskIfExists");
static_assert(offsetof(GA_MultipointDeployable_C_EndWaitDelayTaskIfExists, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_EndWaitDelayTaskIfExists::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.EndWaitTagTaskIfExists
// 0x0001 (0x0001 - 0x0000)
struct GA_MultipointDeployable_C_EndWaitTagTaskIfExists final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_EndWaitTagTaskIfExists) == 0x000001, "Wrong alignment on GA_MultipointDeployable_C_EndWaitTagTaskIfExists");
static_assert(sizeof(GA_MultipointDeployable_C_EndWaitTagTaskIfExists) == 0x000001, "Wrong size on GA_MultipointDeployable_C_EndWaitTagTaskIfExists");
static_assert(offsetof(GA_MultipointDeployable_C_EndWaitTagTaskIfExists, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_EndWaitTagTaskIfExists::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.ExecuteUbergraph_GA_MultipointDeployable
// 0x0910 (0x0910 - 0x0000)
struct GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue;     // 0x00F0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_ActionNumber;                   // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitInputRelease*          CallFunc_WaitInputRelease_ReturnValue;             // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MultipointDeployableEquipmentInstance_C* CallFunc_GetEquipmentCasted_AsBP_Deployable_Equipment_Instance; // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 ActionNumber)>           K2Node_CreateDelegate_OutputDelegate_2;            // 0x0130(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_Placement_Legalality_IsLegal;      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Update_Placement_Legalality_DeploymentMessage; // 0x0148(0x0010)()
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage; // 0x0158(0x0010)(HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetPreviewMaterial_NewParam;              // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     K2Node_CustomEvent_TraceHits;                      // 0x0190(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	struct FRotator                               K2Node_CustomEvent_PreviewRotation;                // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        K2Node_CustomEvent_OptionalAngle;                  // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_OptionalVector;                 // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                CallFunc_GetResidentCasted_AsBPResidentCharacter;  // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetPreviewMeshRotation_ReturnValue;       // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_ActionNumber_1;                 // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location_1;                     // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23B[0x1];                                      // 0x023B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequiredAmountOfPoints_ReturnValue;       // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Update_Placement_Legalality_IsLegal_1;    // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_312[0x6];                                      // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Update_Placement_Legalality_DeploymentMessage_1; // 0x0318(0x0010)()
	class UItemInstance*                          CallFunc_GetItemInstance_ItemInstance;             // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetMontageFromCount_MontageOutputFPP;     // 0x0338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetMontageFromCount_MontageOutputTPP;     // 0x0340(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimInstance*>                  CallFunc_GetOwnerAnimBPs_Array_Element;            // 0x0348(0x0010)(ReferenceParm)
	float                                         K2Node_CustomEvent_TimeHeld;                       // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float TimeHeld)>               K2Node_CreateDelegate_OutputDelegate_3;            // 0x035C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 ActionNumber)>           K2Node_CreateDelegate_OutputDelegate_4;            // 0x036C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0380(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilityAsync_WaitGameplayTagAdded*     CallFunc_WaitGameplayTagAddToActor_ReturnValue;    // 0x0388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTagStackCountSafe_ReturnValue;         // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_Array_Get_Item;                           // 0x0398(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitDelay*                 CallFunc_WaitDelay_ReturnValue;                    // 0x03A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x03B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B2[0x2];                                      // 0x03B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PreviewMesh_C*                      CallFunc_Array_Get_Item_1;                         // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitInputPress*            CallFunc_WaitInputPress_ReturnValue;               // 0x03D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x03D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x03F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0408(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  CallFunc_Conv_RotatorToQuaternion_ReturnValue_1;   // 0x0420(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0440(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0460(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0478(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_TimeWaited;                     // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  CallFunc_QuaternionSpringInterp_ReturnValue;       // 0x04A0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Quat_Rotator_ReturnValue;                 // 0x04C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(float TimeWaited)>             K2Node_CreateDelegate_OutputDelegate_5;            // 0x04D8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x04E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0500(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0520(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0538(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0550(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x05B0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue; // 0x06B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue_1; // 0x06B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectContextHandle           CallFunc_MakeEffectContext_ReturnValue;            // 0x06C0(0x0018)()
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x06D8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOwnerChargingADropThrow_ReturnValue;    // 0x06E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x06E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E3[0x5];                                      // 0x06E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_1; // 0x06E8(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x06F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_2;        // 0x06F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FA[0x6];                                      // 0x06FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_RepeatContinuous*          CallFunc_RepeatContinuousAction_ReturnValue;       // 0x0700(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_3;        // 0x0709(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_4;        // 0x070A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue_1;           // 0x070B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x070C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue_1; // 0x0710(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 CallFunc_MakeGameplayCueParameters_ReturnValue;    // 0x0718(0x00D8)(ContainsInstancedReference)
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue_2; // 0x07F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 CallFunc_MakeGameplayCueParameters_ReturnValue_1;  // 0x07F8(0x00D8)(ContainsInstancedReference)
	int32                                         CallFunc_GetTagStackCountSafe_ReturnValue_1;       // 0x08D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D4[0x4];                                      // 0x08D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetMontageFromCount_MontageOutputFPP_1;   // 0x08D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetMontageFromCount_MontageOutputTPP_1;   // 0x08E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x08E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E9[0x7];                                      // 0x08E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetMontageFromCount_MontageOutputFPP_2;   // 0x08F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetMontageFromCount_MontageOutputTPP_2;   // 0x08F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast;         // 0x0900(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_QuaternionSpringInterp_DeltaTime_ImplicitCast; // 0x0904(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable) == 0x000010, "Wrong alignment on GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable");
static_assert(sizeof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable) == 0x000910, "Wrong size on GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, EntryPoint) == 0x000000, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000028, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakTransform_Rotation) == 0x0000B8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakTransform_Scale) == 0x0000D0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x0000E8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Conv_RotatorToQuaternion_ReturnValue) == 0x0000F0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Conv_RotatorToQuaternion_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, Temp_bool_IsClosed_Variable) == 0x000110, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, Temp_bool_Has_Been_Initd_Variable) == 0x000111, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CustomEvent_ActionNumber) == 0x000114, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CustomEvent_ActionNumber' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_WaitInputRelease_ReturnValue) == 0x000118, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_WaitInputRelease_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsValid_ReturnValue_1) == 0x000120, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_Event_bWasCancelled) == 0x000121, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetEquipmentCasted_AsBP_Deployable_Equipment_Instance) == 0x000128, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetEquipmentCasted_AsBP_Deployable_Equipment_Instance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CreateDelegate_OutputDelegate_2) == 0x000130, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Update_Placement_Legalality_IsLegal) == 0x000140, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Update_Placement_Legalality_IsLegal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Update_Placement_Legalality_DeploymentMessage) == 0x000148, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Update_Placement_Legalality_DeploymentMessage' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage) == 0x000158, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetPreviewMaterial_NewParam) == 0x000168, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetPreviewMaterial_NewParam' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsValid_ReturnValue_2) == 0x000170, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Array_Length_ReturnValue) == 0x000174, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Subtract_IntInt_ReturnValue) == 0x000178, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, Temp_int_Loop_Counter_Variable) == 0x00017C, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Max_ReturnValue) == 0x000180, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000184, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000188, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CustomEvent_TraceHits) == 0x000190, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CustomEvent_TraceHits' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CustomEvent_PreviewRotation) == 0x0001A0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CustomEvent_PreviewRotation' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CustomEvent_OptionalAngle) == 0x0001B8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CustomEvent_OptionalAngle' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CustomEvent_OptionalVector) == 0x0001C0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CustomEvent_OptionalVector' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetResidentCasted_AsBPResidentCharacter) == 0x0001D8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetResidentCasted_AsBPResidentCharacter' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetPreviewMeshRotation_ReturnValue) == 0x0001E0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetPreviewMeshRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsLocallyControlled_ReturnValue) == 0x0001F8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CustomEvent_ActionNumber_1) == 0x0001FC, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CustomEvent_ActionNumber_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, Temp_real_Variable) == 0x000200, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CustomEvent_Location_1) == 0x000208, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CustomEvent_Location_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CustomEvent_Location) == 0x000220, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_K2_HasAuthority_ReturnValue) == 0x000238, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_bBlockingHit) == 0x000239, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_bInitialOverlap) == 0x00023A, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_Time) == 0x00023C, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_Distance) == 0x000240, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_Location) == 0x000248, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_ImpactPoint) == 0x000260, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_Normal) == 0x000278, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_ImpactNormal) == 0x000290, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_PhysMat) == 0x0002A8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_HitActor) == 0x0002B0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_HitComponent) == 0x0002B8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_HitBoneName) == 0x0002C0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_BoneName) == 0x0002C8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_HitItem) == 0x0002D0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_ElementIndex) == 0x0002D4, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_FaceIndex) == 0x0002D8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_TraceStart) == 0x0002E0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakHitResult_TraceEnd) == 0x0002F8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_RequiredAmountOfPoints_ReturnValue) == 0x000310, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_RequiredAmountOfPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Update_Placement_Legalality_IsLegal_1) == 0x000311, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Update_Placement_Legalality_IsLegal_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Update_Placement_Legalality_DeploymentMessage_1) == 0x000318, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Update_Placement_Legalality_DeploymentMessage_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetItemInstance_ItemInstance) == 0x000328, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetItemInstance_ItemInstance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BooleanAND_ReturnValue) == 0x000330, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetMontageFromCount_MontageOutputFPP) == 0x000338, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetMontageFromCount_MontageOutputFPP' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetMontageFromCount_MontageOutputTPP) == 0x000340, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetMontageFromCount_MontageOutputTPP' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetOwnerAnimBPs_Array_Element) == 0x000348, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetOwnerAnimBPs_Array_Element' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CustomEvent_TimeHeld) == 0x000358, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CustomEvent_TimeHeld' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CreateDelegate_OutputDelegate_3) == 0x00035C, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CreateDelegate_OutputDelegate_4) == 0x00036C, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000380, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_WaitGameplayTagAddToActor_ReturnValue) == 0x000388, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_WaitGameplayTagAddToActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsValid_ReturnValue_3) == 0x000390, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetTagStackCountSafe_ReturnValue) == 0x000394, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetTagStackCountSafe_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Array_Get_Item) == 0x000398, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0003A0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_WaitDelay_ReturnValue) == 0x0003A8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_WaitDelay_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsValid_ReturnValue_4) == 0x0003B0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_K2_CommitAbility_ReturnValue) == 0x0003B1, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, Temp_int_Array_Index_Variable) == 0x0003B4, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Array_Get_Item_1) == 0x0003B8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsValid_ReturnValue_5) == 0x0003C0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0003C8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_WaitInputPress_ReturnValue) == 0x0003D0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_WaitInputPress_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakTransform_Location_1) == 0x0003D8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakTransform_Rotation_1) == 0x0003F0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BreakTransform_Scale_1) == 0x000408, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Conv_RotatorToQuaternion_ReturnValue_1) == 0x000420, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Conv_RotatorToQuaternion_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_VInterpTo_ReturnValue) == 0x000440, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsValid_ReturnValue_6) == 0x000458, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000460, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Normal_ReturnValue) == 0x000478, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Vector_Distance_ReturnValue) == 0x000490, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, Temp_real_Variable_1) == 0x000498, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CustomEvent_TimeWaited) == 0x00049C, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CustomEvent_TimeWaited' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_QuaternionSpringInterp_ReturnValue) == 0x0004A0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_QuaternionSpringInterp_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Quat_Rotator_ReturnValue) == 0x0004C0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Quat_Rotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_CreateDelegate_OutputDelegate_5) == 0x0004D8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0004E8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000500, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000518, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000520, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_SelectVector_ReturnValue) == 0x000538, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_MakeTransform_ReturnValue) == 0x000550, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0005B0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0006A8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue) == 0x0006B0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue_1) == 0x0006B8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_MakeEffectContext_ReturnValue) == 0x0006C0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_MakeEffectContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x0006D8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x0006E0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsOwnerChargingADropThrow_ReturnValue) == 0x0006E1, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsOwnerChargingADropThrow_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_Not_PreBool_ReturnValue) == 0x0006E2, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_1) == 0x0006E8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_BooleanAND_ReturnValue_1) == 0x0006F8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsLocallyControlled_ReturnValue_2) == 0x0006F9, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsLocallyControlled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_RepeatContinuousAction_ReturnValue) == 0x000700, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_RepeatContinuousAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsValid_ReturnValue_7) == 0x000708, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsLocallyControlled_ReturnValue_3) == 0x000709, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsLocallyControlled_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_IsLocallyControlled_ReturnValue_4) == 0x00070A, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_IsLocallyControlled_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_K2_CommitAbility_ReturnValue_1) == 0x00070B, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_K2_CommitAbility_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, Temp_int_Variable) == 0x00070C, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetOwningActorFromActorInfo_ReturnValue_1) == 0x000710, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetOwningActorFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_MakeGameplayCueParameters_ReturnValue) == 0x000718, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_MakeGameplayCueParameters_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetOwningActorFromActorInfo_ReturnValue_2) == 0x0007F0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetOwningActorFromActorInfo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_MakeGameplayCueParameters_ReturnValue_1) == 0x0007F8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_MakeGameplayCueParameters_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetTagStackCountSafe_ReturnValue_1) == 0x0008D0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetTagStackCountSafe_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetMontageFromCount_MontageOutputFPP_1) == 0x0008D8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetMontageFromCount_MontageOutputFPP_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetMontageFromCount_MontageOutputTPP_1) == 0x0008E0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetMontageFromCount_MontageOutputTPP_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0008E8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetMontageFromCount_MontageOutputFPP_2) == 0x0008F0, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetMontageFromCount_MontageOutputFPP_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_GetMontageFromCount_MontageOutputTPP_2) == 0x0008F8, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_GetMontageFromCount_MontageOutputTPP_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_VInterpTo_DeltaTime_ImplicitCast) == 0x000900, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_VInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable, CallFunc_QuaternionSpringInterp_DeltaTime_ImplicitCast) == 0x000904, "Member 'GA_MultipointDeployable_C_ExecuteUbergraph_GA_MultipointDeployable::CallFunc_QuaternionSpringInterp_DeltaTime_ImplicitCast' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetAllowedObjectTypes
// 0x0010 (0x0010 - 0x0000)
struct GA_MultipointDeployable_C_GetAllowedObjectTypes final
{
public:
	TArray<EObjectTypeQuery>                      AllowedObjectTypes;                                // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(GA_MultipointDeployable_C_GetAllowedObjectTypes) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetAllowedObjectTypes");
static_assert(sizeof(GA_MultipointDeployable_C_GetAllowedObjectTypes) == 0x000010, "Wrong size on GA_MultipointDeployable_C_GetAllowedObjectTypes");
static_assert(offsetof(GA_MultipointDeployable_C_GetAllowedObjectTypes, AllowedObjectTypes) == 0x000000, "Member 'GA_MultipointDeployable_C_GetAllowedObjectTypes::AllowedObjectTypes' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetEquipmentCasted
// 0x0038 (0x0038 - 0x0000)
struct GA_MultipointDeployable_C_GetEquipmentCasted final
{
public:
	class UBP_MultipointDeployableEquipmentInstance_C* AsBP_Deployable_Equipment_Instance;                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UEquipmentInstance*                     CallFunc_GetAssociatedEquipment_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_MultipointDeployableEquipmentInstance_C* K2Node_DynamicCast_AsBP_Multipoint_Deployable_Equipment_Instance; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_GetEquipmentCasted) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetEquipmentCasted");
static_assert(sizeof(GA_MultipointDeployable_C_GetEquipmentCasted) == 0x000038, "Wrong size on GA_MultipointDeployable_C_GetEquipmentCasted");
static_assert(offsetof(GA_MultipointDeployable_C_GetEquipmentCasted, AsBP_Deployable_Equipment_Instance) == 0x000000, "Member 'GA_MultipointDeployable_C_GetEquipmentCasted::AsBP_Deployable_Equipment_Instance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetEquipmentCasted, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_GetEquipmentCasted::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetEquipmentCasted, CallFunc_Get_ClassLog_Name_name) == 0x000010, "Member 'GA_MultipointDeployable_C_GetEquipmentCasted::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetEquipmentCasted, CallFunc_GetAssociatedEquipment_ReturnValue) == 0x000020, "Member 'GA_MultipointDeployable_C_GetEquipmentCasted::CallFunc_GetAssociatedEquipment_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetEquipmentCasted, K2Node_DynamicCast_AsBP_Multipoint_Deployable_Equipment_Instance) == 0x000028, "Member 'GA_MultipointDeployable_C_GetEquipmentCasted::K2Node_DynamicCast_AsBP_Multipoint_Deployable_Equipment_Instance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetEquipmentCasted, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'GA_MultipointDeployable_C_GetEquipmentCasted::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetItemInstance
// 0x0028 (0x0028 - 0x0000)
struct GA_MultipointDeployable_C_GetItemInstance final
{
public:
	class UItemInstance*                          ItemInstance_0;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UItemInstance*                          CallFunc_GetAssociatedItem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_GetItemInstance) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetItemInstance");
static_assert(sizeof(GA_MultipointDeployable_C_GetItemInstance) == 0x000028, "Wrong size on GA_MultipointDeployable_C_GetItemInstance");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemInstance, ItemInstance_0) == 0x000000, "Member 'GA_MultipointDeployable_C_GetItemInstance::ItemInstance_0' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemInstance, CallFunc_GetAssociatedItem_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_GetItemInstance::CallFunc_GetAssociatedItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemInstance, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_GetItemInstance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemInstance, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'GA_MultipointDeployable_C_GetItemInstance::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemInstance, CallFunc_Get_ClassLog_Name_name) == 0x000018, "Member 'GA_MultipointDeployable_C_GetItemInstance::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetItemTag
// 0x0030 (0x0030 - 0x0000)
struct GA_MultipointDeployable_C_GetItemTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class UItemInstance*                          CallFunc_GetItemInstance_ItemInstance;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UItemDefinition*                        K2Node_DynamicCast_AsItem_Definition;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetAssetIdentifier_ReturnValue;           // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_GetItemTag) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetItemTag");
static_assert(sizeof(GA_MultipointDeployable_C_GetItemTag) == 0x000030, "Wrong size on GA_MultipointDeployable_C_GetItemTag");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemTag, ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_GetItemTag::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemTag, CallFunc_GetItemInstance_ItemInstance) == 0x000008, "Member 'GA_MultipointDeployable_C_GetItemTag::CallFunc_GetItemInstance_ItemInstance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemTag, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_GetItemTag::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemTag, K2Node_DynamicCast_AsItem_Definition) == 0x000018, "Member 'GA_MultipointDeployable_C_GetItemTag::K2Node_DynamicCast_AsItem_Definition' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemTag, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'GA_MultipointDeployable_C_GetItemTag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetItemTag, CallFunc_GetAssetIdentifier_ReturnValue) == 0x000024, "Member 'GA_MultipointDeployable_C_GetItemTag::CallFunc_GetAssetIdentifier_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetOwnerAnimBPs
// 0x0078 (0x0078 - 0x0000)
struct GA_MultipointDeployable_C_GetOwnerAnimBPs final
{
public:
	TArray<class UAnimInstance*>                  Array_Element;                                     // 0x0000(0x0010)(Parm, OutParm)
	TArray<class UAnimInstance*>                  LAnimInstance;                                     // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_Character_C>        K2Node_DynamicCast_AsI_Character;                  // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimInstance*>                  CallFunc_GetAnimBPs_AnimBPs;                       // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_GetOwnerAnimBPs) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetOwnerAnimBPs");
static_assert(sizeof(GA_MultipointDeployable_C_GetOwnerAnimBPs) == 0x000078, "Wrong size on GA_MultipointDeployable_C_GetOwnerAnimBPs");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, Array_Element) == 0x000000, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::Array_Element' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, LAnimInstance) == 0x000010, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::LAnimInstance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, Temp_int_Array_Index_Variable) == 0x000020, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000030, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, K2Node_DynamicCast_AsI_Character) == 0x000038, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::K2Node_DynamicCast_AsI_Character' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, CallFunc_GetAnimBPs_AnimBPs) == 0x000050, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::CallFunc_GetAnimBPs_AnimBPs' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, CallFunc_Array_Get_Item) == 0x000068, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetOwnerAnimBPs, CallFunc_Array_Add_ReturnValue) == 0x000074, "Member 'GA_MultipointDeployable_C_GetOwnerAnimBPs::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetPreviewMaterial
// 0x0020 (0x0020 - 0x0000)
struct GA_MultipointDeployable_C_GetPreviewMaterial final
{
public:
	bool                                          ValidPlacement;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     NewParam;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_GetPreviewMaterial) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetPreviewMaterial");
static_assert(sizeof(GA_MultipointDeployable_C_GetPreviewMaterial) == 0x000020, "Wrong size on GA_MultipointDeployable_C_GetPreviewMaterial");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMaterial, ValidPlacement) == 0x000000, "Member 'GA_MultipointDeployable_C_GetPreviewMaterial::ValidPlacement' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMaterial, NewParam) == 0x000008, "Member 'GA_MultipointDeployable_C_GetPreviewMaterial::NewParam' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMaterial, Temp_bool_Variable) == 0x000010, "Member 'GA_MultipointDeployable_C_GetPreviewMaterial::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMaterial, K2Node_Select_Default) == 0x000018, "Member 'GA_MultipointDeployable_C_GetPreviewMaterial::K2Node_Select_Default' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetPreviewMeshRotation
// 0x0120 (0x0120 - 0x0000)
struct GA_MultipointDeployable_C_GetPreviewMeshRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromZY_ReturnValue;                // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_MultipointDeployable_C_GetPreviewMeshRotation) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetPreviewMeshRotation");
static_assert(sizeof(GA_MultipointDeployable_C_GetPreviewMeshRotation) == 0x000120, "Wrong size on GA_MultipointDeployable_C_GetPreviewMeshRotation");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_GetActorForwardVector_ReturnValue) == 0x000018, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_bBlockingHit) == 0x000030, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_bInitialOverlap) == 0x000031, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_Time) == 0x000034, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_Distance) == 0x000038, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_Location) == 0x000040, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_ImpactPoint) == 0x000058, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_Normal) == 0x000070, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_ImpactNormal) == 0x000088, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_PhysMat) == 0x0000A0, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_HitActor) == 0x0000A8, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_HitComponent) == 0x0000B0, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_HitBoneName) == 0x0000B8, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_BoneName) == 0x0000C0, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_HitItem) == 0x0000C8, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_ElementIndex) == 0x0000CC, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_FaceIndex) == 0x0000D0, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_TraceStart) == 0x0000D8, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_BreakHitResult_TraceEnd) == 0x0000F0, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetPreviewMeshRotation, CallFunc_MakeRotFromZY_ReturnValue) == 0x000108, "Member 'GA_MultipointDeployable_C_GetPreviewMeshRotation::CallFunc_MakeRotFromZY_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetResidentCasted
// 0x0070 (0x0070 - 0x0000)
struct GA_MultipointDeployable_C_GetResidentCasted final
{
public:
	class ABP_ResidentCharacter_C*                AsBPResidentCharacter;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0008(0x0048)(ContainsInstancedReference)
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_GetResidentCasted) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetResidentCasted");
static_assert(sizeof(GA_MultipointDeployable_C_GetResidentCasted) == 0x000070, "Wrong size on GA_MultipointDeployable_C_GetResidentCasted");
static_assert(offsetof(GA_MultipointDeployable_C_GetResidentCasted, AsBPResidentCharacter) == 0x000000, "Member 'GA_MultipointDeployable_C_GetResidentCasted::AsBPResidentCharacter' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetResidentCasted, CallFunc_GetActorInfo_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_GetResidentCasted::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetResidentCasted, CallFunc_Get_ClassLog_Name_name) == 0x000050, "Member 'GA_MultipointDeployable_C_GetResidentCasted::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetResidentCasted, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000060, "Member 'GA_MultipointDeployable_C_GetResidentCasted::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetResidentCasted, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'GA_MultipointDeployable_C_GetResidentCasted::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetSphereTraceStartEnd
// 0x0470 (0x0470 - 0x0000)
struct GA_MultipointDeployable_C_GetSphereTraceStartEnd final
{
public:
	struct FHitResult                             StartHit;                                          // 0x0000(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             EndHit;                                            // 0x00F8(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Start;                                             // 0x01F0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0208(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_222[0x2];                                      // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302[0x2];                                      // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0370(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0380(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x039C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x03A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x03C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x03D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x03F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0410(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0428(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0440(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0458(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_GetSphereTraceStartEnd) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetSphereTraceStartEnd");
static_assert(sizeof(GA_MultipointDeployable_C_GetSphereTraceStartEnd) == 0x000470, "Wrong size on GA_MultipointDeployable_C_GetSphereTraceStartEnd");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, StartHit) == 0x000000, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::StartHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, EndHit) == 0x0000F8, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::EndHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, Start) == 0x0001F0, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::Start' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, End) == 0x000208, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::End' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_bBlockingHit) == 0x000220, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_bInitialOverlap) == 0x000221, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_Time) == 0x000224, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_Distance) == 0x000228, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_Location) == 0x000230, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_ImpactPoint) == 0x000248, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_Normal) == 0x000260, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_ImpactNormal) == 0x000278, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_PhysMat) == 0x000290, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_HitActor) == 0x000298, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_HitComponent) == 0x0002A0, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_HitBoneName) == 0x0002A8, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_BoneName) == 0x0002B0, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_HitItem) == 0x0002B8, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_ElementIndex) == 0x0002BC, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_FaceIndex) == 0x0002C0, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_TraceStart) == 0x0002C8, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_TraceEnd) == 0x0002E0, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0002F8, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_bBlockingHit_1) == 0x000300, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x000301, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_Time_1) == 0x000304, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_Distance_1) == 0x000308, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_Location_1) == 0x000310, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000328, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_Normal_1) == 0x000340, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000358, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_PhysMat_1) == 0x000370, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_HitActor_1) == 0x000378, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_HitComponent_1) == 0x000380, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_HitBoneName_1) == 0x000388, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_BoneName_1) == 0x000390, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_HitItem_1) == 0x000398, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_ElementIndex_1) == 0x00039C, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_FaceIndex_1) == 0x0003A0, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_TraceStart_1) == 0x0003A8, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_BreakHitResult_TraceEnd_1) == 0x0003C0, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0003D8, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0003F0, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000408, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_Add_VectorVector_ReturnValue) == 0x000410, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000428, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000440, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetSphereTraceStartEnd, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000458, "Member 'GA_MultipointDeployable_C_GetSphereTraceStartEnd::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetTagCount
// 0x0020 (0x0020 - 0x0000)
struct GA_MultipointDeployable_C_GetTagCount final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemInstance*                          CallFunc_GetItemInstance_ItemInstance;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTagStackCount_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_GetTagCount) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetTagCount");
static_assert(sizeof(GA_MultipointDeployable_C_GetTagCount) == 0x000020, "Wrong size on GA_MultipointDeployable_C_GetTagCount");
static_assert(offsetof(GA_MultipointDeployable_C_GetTagCount, Tag) == 0x000000, "Member 'GA_MultipointDeployable_C_GetTagCount::Tag' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTagCount, Count) == 0x000008, "Member 'GA_MultipointDeployable_C_GetTagCount::Count' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTagCount, CallFunc_GetItemInstance_ItemInstance) == 0x000010, "Member 'GA_MultipointDeployable_C_GetTagCount::CallFunc_GetItemInstance_ItemInstance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTagCount, CallFunc_GetTagStackCount_ReturnValue) == 0x000018, "Member 'GA_MultipointDeployable_C_GetTagCount::CallFunc_GetTagStackCount_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GetTracePoints
// 0x00D8 (0x00D8 - 0x0000)
struct GA_MultipointDeployable_C_GetTracePoints final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTagCount_Count;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_IntToVector_ReturnValue;             // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_GetTracePoints) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GetTracePoints");
static_assert(sizeof(GA_MultipointDeployable_C_GetTracePoints) == 0x0000D8, "Wrong size on GA_MultipointDeployable_C_GetTracePoints");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, Object) == 0x000000, "Member 'GA_MultipointDeployable_C_GetTracePoints::Object' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, Start) == 0x000008, "Member 'GA_MultipointDeployable_C_GetTracePoints::Start' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, End) == 0x000020, "Member 'GA_MultipointDeployable_C_GetTracePoints::End' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000038, "Member 'GA_MultipointDeployable_C_GetTracePoints::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'GA_MultipointDeployable_C_GetTracePoints::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, CallFunc_GetTagCount_Count) == 0x000044, "Member 'GA_MultipointDeployable_C_GetTracePoints::CallFunc_GetTagCount_Count' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, CallFunc_Conv_IntToVector_ReturnValue) == 0x000048, "Member 'GA_MultipointDeployable_C_GetTracePoints::CallFunc_Conv_IntToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, CallFunc_GetForwardVector_ReturnValue) == 0x000060, "Member 'GA_MultipointDeployable_C_GetTracePoints::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000078, "Member 'GA_MultipointDeployable_C_GetTracePoints::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000090, "Member 'GA_MultipointDeployable_C_GetTracePoints::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A8, "Member 'GA_MultipointDeployable_C_GetTracePoints::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GetTracePoints, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000C0, "Member 'GA_MultipointDeployable_C_GetTracePoints::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.GrantRewardToPlayer
// 0x0018 (0x0018 - 0x0000)
struct GA_MultipointDeployable_C_GrantRewardToPlayer final
{
public:
	class UEconomyDefinition*                     EconomyToAdd;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomySubsystem*                      CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_GrantRewardToPlayer) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_GrantRewardToPlayer");
static_assert(sizeof(GA_MultipointDeployable_C_GrantRewardToPlayer) == 0x000018, "Wrong size on GA_MultipointDeployable_C_GrantRewardToPlayer");
static_assert(offsetof(GA_MultipointDeployable_C_GrantRewardToPlayer, EconomyToAdd) == 0x000000, "Member 'GA_MultipointDeployable_C_GrantRewardToPlayer::EconomyToAdd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GrantRewardToPlayer, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_GrantRewardToPlayer::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_GrantRewardToPlayer, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_GrantRewardToPlayer::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.HidePreviewMesh
// 0x0028 (0x0028 - 0x0000)
struct GA_MultipointDeployable_C_HidePreviewMesh final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PreviewMesh_C*                      CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_HidePreviewMesh) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_HidePreviewMesh");
static_assert(sizeof(GA_MultipointDeployable_C_HidePreviewMesh) == 0x000028, "Wrong size on GA_MultipointDeployable_C_HidePreviewMesh");
static_assert(offsetof(GA_MultipointDeployable_C_HidePreviewMesh, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'GA_MultipointDeployable_C_HidePreviewMesh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_HidePreviewMesh, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'GA_MultipointDeployable_C_HidePreviewMesh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_HidePreviewMesh, Temp_int_Array_Index_Variable) == 0x000008, "Member 'GA_MultipointDeployable_C_HidePreviewMesh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_HidePreviewMesh, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'GA_MultipointDeployable_C_HidePreviewMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_HidePreviewMesh, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_HidePreviewMesh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_HidePreviewMesh, CallFunc_Array_Get_Item) == 0x000018, "Member 'GA_MultipointDeployable_C_HidePreviewMesh::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_HidePreviewMesh, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'GA_MultipointDeployable_C_HidePreviewMesh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_HidePreviewMesh, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'GA_MultipointDeployable_C_HidePreviewMesh::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.IncrementPlacement
// 0x000C (0x000C - 0x0000)
struct GA_MultipointDeployable_C_IncrementPlacement final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IncrementMesh_Success;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_IncrementPlacement) == 0x000004, "Wrong alignment on GA_MultipointDeployable_C_IncrementPlacement");
static_assert(sizeof(GA_MultipointDeployable_C_IncrementPlacement) == 0x00000C, "Wrong size on GA_MultipointDeployable_C_IncrementPlacement");
static_assert(offsetof(GA_MultipointDeployable_C_IncrementPlacement, Temp_int_Variable) == 0x000000, "Member 'GA_MultipointDeployable_C_IncrementPlacement::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IncrementPlacement, CallFunc_IncrementMesh_Success) == 0x000004, "Member 'GA_MultipointDeployable_C_IncrementPlacement::CallFunc_IncrementMesh_Success' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IncrementPlacement, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_IncrementPlacement::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.InitializePreviewMeshes
// 0x00A0 (0x00A0 - 0x0000)
struct GA_MultipointDeployable_C_InitializePreviewMeshes final
{
public:
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0000(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PreviewMesh_C*                      CallFunc_FinishSpawningActor_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MultipointDeployableEquipmentInstance_C* CallFunc_GetEquipmentCasted_AsBP_Deployable_Equipment_Instance; // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_InitializePreviewMeshes) == 0x000010, "Wrong alignment on GA_MultipointDeployable_C_InitializePreviewMeshes");
static_assert(sizeof(GA_MultipointDeployable_C_InitializePreviewMeshes) == 0x0000A0, "Wrong size on GA_MultipointDeployable_C_InitializePreviewMeshes");
static_assert(offsetof(GA_MultipointDeployable_C_InitializePreviewMeshes, CallFunc_MakeTransform_ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_InitializePreviewMeshes::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_InitializePreviewMeshes, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000060, "Member 'GA_MultipointDeployable_C_InitializePreviewMeshes::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_InitializePreviewMeshes, CallFunc_Array_Get_Item) == 0x000068, "Member 'GA_MultipointDeployable_C_InitializePreviewMeshes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_InitializePreviewMeshes, CallFunc_FinishSpawningActor_ReturnValue) == 0x000070, "Member 'GA_MultipointDeployable_C_InitializePreviewMeshes::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_InitializePreviewMeshes, CallFunc_SetStaticMesh_ReturnValue) == 0x000078, "Member 'GA_MultipointDeployable_C_InitializePreviewMeshes::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_InitializePreviewMeshes, CallFunc_GetEquipmentCasted_AsBP_Deployable_Equipment_Instance) == 0x000080, "Member 'GA_MultipointDeployable_C_InitializePreviewMeshes::CallFunc_GetEquipmentCasted_AsBP_Deployable_Equipment_Instance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_InitializePreviewMeshes, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000088, "Member 'GA_MultipointDeployable_C_InitializePreviewMeshes::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_InitializePreviewMeshes, K2Node_DynamicCast_AsPawn) == 0x000090, "Member 'GA_MultipointDeployable_C_InitializePreviewMeshes::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_InitializePreviewMeshes, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'GA_MultipointDeployable_C_InitializePreviewMeshes::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.IsAboveMinHeight
// 0x00F8 (0x00F8 - 0x0000)
struct GA_MultipointDeployable_C_IsAboveMinHeight final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_IsAboveMinHeight) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_IsAboveMinHeight");
static_assert(sizeof(GA_MultipointDeployable_C_IsAboveMinHeight) == 0x0000F8, "Wrong size on GA_MultipointDeployable_C_IsAboveMinHeight");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, Return) == 0x000000, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::Return' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000001, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_bBlockingHit) == 0x000002, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_bInitialOverlap) == 0x000003, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_Time) == 0x000004, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_Distance) == 0x000008, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_Location) == 0x000010, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_ImpactPoint) == 0x000028, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_Normal) == 0x000040, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_ImpactNormal) == 0x000058, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_PhysMat) == 0x000070, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_HitActor) == 0x000078, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_HitComponent) == 0x000080, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_HitBoneName) == 0x000088, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_BoneName) == 0x000090, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_HitItem) == 0x000098, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_ElementIndex) == 0x00009C, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_FaceIndex) == 0x0000A0, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_TraceStart) == 0x0000A8, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakHitResult_TraceEnd) == 0x0000C0, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakVector_X) == 0x0000D8, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakVector_Y) == 0x0000E0, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_BreakVector_Z) == 0x0000E8, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsAboveMinHeight, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'GA_MultipointDeployable_C_IsAboveMinHeight::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.IsInsideBlocker
// 0x0118 (0x0118 - 0x0000)
struct GA_MultipointDeployable_C_IsInsideBlocker final
{
public:
	bool                                          IsInside;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_BoxOverlapActors_OutActors;               // 0x0100(0x0010)(ReferenceParm)
	bool                                          CallFunc_BoxOverlapActors_ReturnValue;             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_IsInsideBlocker) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_IsInsideBlocker");
static_assert(sizeof(GA_MultipointDeployable_C_IsInsideBlocker) == 0x000118, "Wrong size on GA_MultipointDeployable_C_IsInsideBlocker");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, IsInside) == 0x000000, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::IsInside' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, Temp_object_Variable) == 0x000008, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, K2Node_MakeArray_Array) == 0x000018, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_bBlockingHit) == 0x000028, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_bInitialOverlap) == 0x000029, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_Time) == 0x00002C, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_Distance) == 0x000030, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_Location) == 0x000038, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_ImpactPoint) == 0x000050, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_Normal) == 0x000068, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_ImpactNormal) == 0x000080, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_PhysMat) == 0x000098, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_HitActor) == 0x0000A0, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_HitComponent) == 0x0000A8, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_HitBoneName) == 0x0000B0, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_BoneName) == 0x0000B8, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_HitItem) == 0x0000C0, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_ElementIndex) == 0x0000C4, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_FaceIndex) == 0x0000C8, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_TraceStart) == 0x0000D0, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BreakHitResult_TraceEnd) == 0x0000E8, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BoxOverlapActors_OutActors) == 0x000100, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BoxOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsInsideBlocker, CallFunc_BoxOverlapActors_ReturnValue) == 0x000110, "Member 'GA_MultipointDeployable_C_IsInsideBlocker::CallFunc_BoxOverlapActors_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.IsNotOnEnemyPlot
// 0x0208 (0x0208 - 0x0000)
struct GA_MultipointDeployable_C_IsNotOnEnemyPlot final
{
public:
	bool                                          NotOnEnemyPlot;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  Temp_struct_Variable;                              // 0x0008(0x0038)(NoDestructor)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0040(0x0048)(ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetTeamAtPoint_bFoundTeam;                // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16A[0x2];                                      // 0x016A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetTeamAtPoint_TeamVolumeGameplayTag;     // 0x016C(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeamAtPoint_ReturnValue;               // 0x0178(0x0038)(ConstParm, NoDestructor)
	TScriptInterface<class ITeamableInterface>    K2Node_DynamicCast_AsTeamable_Interface;           // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeam_ReturnValue;                      // 0x01C8(0x0038)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_IsNotOnEnemyPlot) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_IsNotOnEnemyPlot");
static_assert(sizeof(GA_MultipointDeployable_C_IsNotOnEnemyPlot) == 0x000208, "Wrong size on GA_MultipointDeployable_C_IsNotOnEnemyPlot");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, NotOnEnemyPlot) == 0x000000, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::NotOnEnemyPlot' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, Temp_struct_Variable) == 0x000008, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_GetActorInfo_ReturnValue) == 0x000040, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_bBlockingHit) == 0x000088, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_bInitialOverlap) == 0x000089, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_Time) == 0x00008C, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_Distance) == 0x000090, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_Location) == 0x000098, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_ImpactPoint) == 0x0000B0, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_Normal) == 0x0000C8, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E0, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_PhysMat) == 0x0000F8, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_HitActor) == 0x000100, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_HitComponent) == 0x000108, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_HitBoneName) == 0x000110, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_BoneName) == 0x000118, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_HitItem) == 0x000120, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_ElementIndex) == 0x000124, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_FaceIndex) == 0x000128, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_TraceStart) == 0x000130, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_BreakHitResult_TraceEnd) == 0x000148, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000160, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, K2Node_DynamicCast_bSuccess) == 0x000168, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_GetTeamAtPoint_bFoundTeam) == 0x000169, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_GetTeamAtPoint_bFoundTeam' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_GetTeamAtPoint_TeamVolumeGameplayTag) == 0x00016C, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_GetTeamAtPoint_TeamVolumeGameplayTag' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_GetTeamAtPoint_ReturnValue) == 0x000178, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_GetTeamAtPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, K2Node_DynamicCast_AsTeamable_Interface) == 0x0001B0, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::K2Node_DynamicCast_AsTeamable_Interface' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, K2Node_DynamicCast_bSuccess_1) == 0x0001C0, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_GetTeam_ReturnValue) == 0x0001C8, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_GetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000200, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsNotOnEnemyPlot, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000201, "Member 'GA_MultipointDeployable_C_IsNotOnEnemyPlot::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.IsOwnerChargingADropThrow
// 0x0030 (0x0030 - 0x0000)
struct GA_MultipointDeployable_C_IsOwnerChargingADropThrow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_IsOwnerChargingADropThrow) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_IsOwnerChargingADropThrow");
static_assert(sizeof(GA_MultipointDeployable_C_IsOwnerChargingADropThrow) == 0x000030, "Wrong size on GA_MultipointDeployable_C_IsOwnerChargingADropThrow");
static_assert(offsetof(GA_MultipointDeployable_C_IsOwnerChargingADropThrow, ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_IsOwnerChargingADropThrow::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsOwnerChargingADropThrow, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_IsOwnerChargingADropThrow::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsOwnerChargingADropThrow, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_IsOwnerChargingADropThrow::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsOwnerChargingADropThrow, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000018, "Member 'GA_MultipointDeployable_C_IsOwnerChargingADropThrow::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_IsOwnerChargingADropThrow, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000028, "Member 'GA_MultipointDeployable_C_IsOwnerChargingADropThrow::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_MultipointDeployable_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_MultipointDeployable_C_K2_OnEndAbility");
static_assert(sizeof(GA_MultipointDeployable_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_MultipointDeployable_C_K2_OnEndAbility");
static_assert(offsetof(GA_MultipointDeployable_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_MultipointDeployable_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.LegalAngle
// 0x00E0 (0x00E0 - 0x0000)
struct GA_MultipointDeployable_C_LegalAngle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDirectionAxis                                CallFunc_GetDirectionAxisFromVector_ReturnValue;   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_LegalAngle) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_LegalAngle");
static_assert(sizeof(GA_MultipointDeployable_C_LegalAngle) == 0x0000E0, "Wrong size on GA_MultipointDeployable_C_LegalAngle");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_LegalAngle::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_bBlockingHit) == 0x000002, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_bInitialOverlap) == 0x000003, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_Time) == 0x000004, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_Distance) == 0x000008, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_Location) == 0x000010, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_ImpactPoint) == 0x000028, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_Normal) == 0x000040, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_ImpactNormal) == 0x000058, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_PhysMat) == 0x000070, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_HitActor) == 0x000078, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_HitComponent) == 0x000080, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_HitBoneName) == 0x000088, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_BoneName) == 0x000090, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_HitItem) == 0x000098, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_ElementIndex) == 0x00009C, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_FaceIndex) == 0x0000A0, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_TraceStart) == 0x0000A8, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_BreakHitResult_TraceEnd) == 0x0000C0, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_GetDirectionAxisFromVector_ReturnValue) == 0x0000D8, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_GetDirectionAxisFromVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalAngle, CallFunc_Array_Contains_ReturnValue) == 0x0000D9, "Member 'GA_MultipointDeployable_C_LegalAngle::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.LegalLengthBetweenPoints
// 0x02E0 (0x02E0 - 0x0000)
struct GA_MultipointDeployable_C_LegalLengthBetweenPoints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTagCount_Count;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTagCount_Count_1;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x00F8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x01F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F6[0x2];                                      // 0x01F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0270(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_LegalLengthBetweenPoints) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_LegalLengthBetweenPoints");
static_assert(sizeof(GA_MultipointDeployable_C_LegalLengthBetweenPoints) == 0x0002E0, "Wrong size on GA_MultipointDeployable_C_LegalLengthBetweenPoints");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_GetTagCount_Count) == 0x000004, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_GetTagCount_Count' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_GetTagCount_Count_1) == 0x000008, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_GetTagCount_Count_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000018, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_bBlockingHit) == 0x000020, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_bInitialOverlap) == 0x000021, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_Time) == 0x000024, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_Distance) == 0x000028, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_Location) == 0x000030, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_ImpactPoint) == 0x000048, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_Normal) == 0x000060, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_ImpactNormal) == 0x000078, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_PhysMat) == 0x000090, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_HitActor) == 0x000098, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_HitComponent) == 0x0000A0, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_HitBoneName) == 0x0000A8, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_BoneName) == 0x0000B0, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_HitItem) == 0x0000B8, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_ElementIndex) == 0x0000BC, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_FaceIndex) == 0x0000C0, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_TraceStart) == 0x0000C8, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_TraceEnd) == 0x0000E0, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_Array_Get_Item) == 0x0000F8, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_Array_Length_ReturnValue) == 0x0001F0, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0001F4, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0001F5, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_Time_1) == 0x0001F8, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_Distance_1) == 0x0001FC, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_Location_1) == 0x000200, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000218, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_Normal_1) == 0x000230, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000248, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_PhysMat_1) == 0x000260, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_HitActor_1) == 0x000268, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_HitComponent_1) == 0x000270, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_HitBoneName_1) == 0x000278, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_BoneName_1) == 0x000280, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_HitItem_1) == 0x000288, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_ElementIndex_1) == 0x00028C, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_FaceIndex_1) == 0x000290, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_TraceStart_1) == 0x000298, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_BreakHitResult_TraceEnd_1) == 0x0002B0, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0002C8, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_Vector_Distance_ReturnValue) == 0x0002D0, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalLengthBetweenPoints, CallFunc_InRange_FloatFloat_ReturnValue) == 0x0002D8, "Member 'GA_MultipointDeployable_C_LegalLengthBetweenPoints::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.LegalPreviewMeshCollision
// 0x0390 (0x0390 - 0x0000)
struct GA_MultipointDeployable_C_LegalPreviewMeshCollision final
{
public:
	bool                                          Return_Value;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BoxTraceHalfSize_X;                       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BoxTraceHalfSize_Y;                       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BoxTraceEnd_ReturnValue;                  // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetPreviewMeshRotation_ReturnValue;       // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0158(0x0048)(ContainsInstancedReference)
	EDrawDebugTrace                               K2Node_Select_Default;                             // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x01A8(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_BoxTraceSingle_OutHit;                    // 0x01B8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceSingle_ReturnValue;               // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x02B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B3[0x1];                                      // 0x02B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0308(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0330(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_LegalPreviewMeshCollision) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_LegalPreviewMeshCollision");
static_assert(sizeof(GA_MultipointDeployable_C_LegalPreviewMeshCollision) == 0x000390, "Wrong size on GA_MultipointDeployable_C_LegalPreviewMeshCollision");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, Return_Value) == 0x000000, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::Return_Value' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, HitActor) == 0x000008, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, Temp_byte_Variable) == 0x000010, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, Temp_byte_Variable_1) == 0x000011, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, Temp_bool_Variable) == 0x000012, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_bBlockingHit) == 0x000013, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_bInitialOverlap) == 0x000014, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_Time) == 0x000018, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_Distance) == 0x00001C, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_Location) == 0x000020, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_ImpactPoint) == 0x000038, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_Normal) == 0x000050, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_ImpactNormal) == 0x000068, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_PhysMat) == 0x000080, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_HitActor) == 0x000088, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_HitComponent) == 0x000090, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_HitBoneName) == 0x000098, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_BoneName) == 0x0000A0, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_HitItem) == 0x0000A8, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_ElementIndex) == 0x0000AC, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_FaceIndex) == 0x0000B0, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_TraceStart) == 0x0000B8, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_TraceEnd) == 0x0000D0, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E8, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BoxTraceHalfSize_X) == 0x000100, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BoxTraceHalfSize_X' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BoxTraceHalfSize_Y) == 0x000108, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BoxTraceHalfSize_Y' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_MakeVector_ReturnValue) == 0x000110, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BoxTraceEnd_ReturnValue) == 0x000128, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BoxTraceEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_GetPreviewMeshRotation_ReturnValue) == 0x000140, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_GetPreviewMeshRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_GetActorInfo_ReturnValue) == 0x000158, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, K2Node_Select_Default) == 0x0001A0, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, K2Node_MakeArray_Array) == 0x0001A8, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BoxTraceSingle_OutHit) == 0x0001B8, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BoxTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BoxTraceSingle_ReturnValue) == 0x0002B0, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BoxTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0002B1, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0002B2, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_Time_1) == 0x0002B4, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_Distance_1) == 0x0002B8, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_Location_1) == 0x0002C0, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_ImpactPoint_1) == 0x0002D8, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_Normal_1) == 0x0002F0, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000308, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_PhysMat_1) == 0x000320, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_HitActor_1) == 0x000328, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_HitComponent_1) == 0x000330, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_HitBoneName_1) == 0x000338, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_BoneName_1) == 0x000340, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_HitItem_1) == 0x000348, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_ElementIndex_1) == 0x00034C, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_FaceIndex_1) == 0x000350, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_TraceStart_1) == 0x000358, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_BreakHitResult_TraceEnd_1) == 0x000370, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalPreviewMeshCollision, CallFunc_Not_PreBool_ReturnValue) == 0x000388, "Member 'GA_MultipointDeployable_C_LegalPreviewMeshCollision::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.LegalTeam
// 0x0208 (0x0208 - 0x0000)
struct GA_MultipointDeployable_C_LegalTeam final
{
public:
	bool                                          OnTeamGrounds;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  Temp_struct_Variable;                              // 0x0008(0x0038)(NoDestructor)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0040(0x0048)(ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetTeamAtPoint_bFoundTeam;                // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16A[0x2];                                      // 0x016A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetTeamAtPoint_TeamVolumeGameplayTag;     // 0x016C(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeamAtPoint_ReturnValue;               // 0x0178(0x0038)(ConstParm, NoDestructor)
	TScriptInterface<class ITeamableInterface>    K2Node_DynamicCast_AsTeamable_Interface;           // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeam_ReturnValue;                      // 0x01C8(0x0038)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_LegalTeam) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_LegalTeam");
static_assert(sizeof(GA_MultipointDeployable_C_LegalTeam) == 0x000208, "Wrong size on GA_MultipointDeployable_C_LegalTeam");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, OnTeamGrounds) == 0x000000, "Member 'GA_MultipointDeployable_C_LegalTeam::OnTeamGrounds' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, Temp_struct_Variable) == 0x000008, "Member 'GA_MultipointDeployable_C_LegalTeam::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_GetActorInfo_ReturnValue) == 0x000040, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_bBlockingHit) == 0x000088, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_bInitialOverlap) == 0x000089, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_Time) == 0x00008C, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_Distance) == 0x000090, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_Location) == 0x000098, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_ImpactPoint) == 0x0000B0, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_Normal) == 0x0000C8, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E0, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_PhysMat) == 0x0000F8, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_HitActor) == 0x000100, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_HitComponent) == 0x000108, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_HitBoneName) == 0x000110, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_BoneName) == 0x000118, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_HitItem) == 0x000120, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_ElementIndex) == 0x000124, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_FaceIndex) == 0x000128, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_TraceStart) == 0x000130, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_BreakHitResult_TraceEnd) == 0x000148, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000160, "Member 'GA_MultipointDeployable_C_LegalTeam::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, K2Node_DynamicCast_bSuccess) == 0x000168, "Member 'GA_MultipointDeployable_C_LegalTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_GetTeamAtPoint_bFoundTeam) == 0x000169, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_GetTeamAtPoint_bFoundTeam' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_GetTeamAtPoint_TeamVolumeGameplayTag) == 0x00016C, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_GetTeamAtPoint_TeamVolumeGameplayTag' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_GetTeamAtPoint_ReturnValue) == 0x000178, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_GetTeamAtPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, K2Node_DynamicCast_AsTeamable_Interface) == 0x0001B0, "Member 'GA_MultipointDeployable_C_LegalTeam::K2Node_DynamicCast_AsTeamable_Interface' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, K2Node_DynamicCast_bSuccess_1) == 0x0001C0, "Member 'GA_MultipointDeployable_C_LegalTeam::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_GetTeam_ReturnValue) == 0x0001C8, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_GetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_LegalTeam, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000200, "Member 'GA_MultipointDeployable_C_LegalTeam::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.MovePreviewMeshToTrace
// 0x0150 (0x0150 - 0x0000)
struct GA_MultipointDeployable_C_MovePreviewMeshToTrace final
{
public:
	struct FRotator                               CallFunc_GetPreviewMeshRotation_ReturnValue;       // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_MovePreviewMeshToTrace) == 0x000010, "Wrong alignment on GA_MultipointDeployable_C_MovePreviewMeshToTrace");
static_assert(sizeof(GA_MultipointDeployable_C_MovePreviewMeshToTrace) == 0x000150, "Wrong size on GA_MultipointDeployable_C_MovePreviewMeshToTrace");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_GetPreviewMeshRotation_ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_GetPreviewMeshRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x000018, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x000019, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_Time) == 0x00001C, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_Distance) == 0x000020, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_Location) == 0x000028, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x000040, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_Normal) == 0x000058, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x000070, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_PhysMat) == 0x000088, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_HitActor) == 0x000090, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_HitComponent) == 0x000098, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_HitBoneName) == 0x0000A0, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_BoneName) == 0x0000A8, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_HitItem) == 0x0000B0, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_ElementIndex) == 0x0000B4, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_FaceIndex) == 0x0000B8, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_TraceStart) == 0x0000C0, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_BreakHitResult_TraceEnd) == 0x0000D8, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_MovePreviewMeshToTrace, CallFunc_MakeTransform_ReturnValue) == 0x0000F0, "Member 'GA_MultipointDeployable_C_MovePreviewMeshToTrace::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.OnFinished_C433343E4649B5EAE596A8A8637F5ECF
// 0x0004 (0x0004 - 0x0000)
struct GA_MultipointDeployable_C_OnFinished_C433343E4649B5EAE596A8A8637F5ECF final
{
public:
	int32                                         ActionNumber;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_OnFinished_C433343E4649B5EAE596A8A8637F5ECF) == 0x000004, "Wrong alignment on GA_MultipointDeployable_C_OnFinished_C433343E4649B5EAE596A8A8637F5ECF");
static_assert(sizeof(GA_MultipointDeployable_C_OnFinished_C433343E4649B5EAE596A8A8637F5ECF) == 0x000004, "Wrong size on GA_MultipointDeployable_C_OnFinished_C433343E4649B5EAE596A8A8637F5ECF");
static_assert(offsetof(GA_MultipointDeployable_C_OnFinished_C433343E4649B5EAE596A8A8637F5ECF, ActionNumber) == 0x000000, "Member 'GA_MultipointDeployable_C_OnFinished_C433343E4649B5EAE596A8A8637F5ECF::ActionNumber' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.OnPerformAction_C433343E4649B5EAE596A8A8637F5ECF
// 0x0004 (0x0004 - 0x0000)
struct GA_MultipointDeployable_C_OnPerformAction_C433343E4649B5EAE596A8A8637F5ECF final
{
public:
	int32                                         ActionNumber;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_OnPerformAction_C433343E4649B5EAE596A8A8637F5ECF) == 0x000004, "Wrong alignment on GA_MultipointDeployable_C_OnPerformAction_C433343E4649B5EAE596A8A8637F5ECF");
static_assert(sizeof(GA_MultipointDeployable_C_OnPerformAction_C433343E4649B5EAE596A8A8637F5ECF) == 0x000004, "Wrong size on GA_MultipointDeployable_C_OnPerformAction_C433343E4649B5EAE596A8A8637F5ECF");
static_assert(offsetof(GA_MultipointDeployable_C_OnPerformAction_C433343E4649B5EAE596A8A8637F5ECF, ActionNumber) == 0x000000, "Member 'GA_MultipointDeployable_C_OnPerformAction_C433343E4649B5EAE596A8A8637F5ECF::ActionNumber' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.OnPress_B1785CF84B0B601BA84D17A61C5C9E32
// 0x0004 (0x0004 - 0x0000)
struct GA_MultipointDeployable_C_OnPress_B1785CF84B0B601BA84D17A61C5C9E32 final
{
public:
	float                                         TimeWaited;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_OnPress_B1785CF84B0B601BA84D17A61C5C9E32) == 0x000004, "Wrong alignment on GA_MultipointDeployable_C_OnPress_B1785CF84B0B601BA84D17A61C5C9E32");
static_assert(sizeof(GA_MultipointDeployable_C_OnPress_B1785CF84B0B601BA84D17A61C5C9E32) == 0x000004, "Wrong size on GA_MultipointDeployable_C_OnPress_B1785CF84B0B601BA84D17A61C5C9E32");
static_assert(offsetof(GA_MultipointDeployable_C_OnPress_B1785CF84B0B601BA84D17A61C5C9E32, TimeWaited) == 0x000000, "Member 'GA_MultipointDeployable_C_OnPress_B1785CF84B0B601BA84D17A61C5C9E32::TimeWaited' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.OnRelease_796AF87F43799A4D551C0D998EBAE204
// 0x0004 (0x0004 - 0x0000)
struct GA_MultipointDeployable_C_OnRelease_796AF87F43799A4D551C0D998EBAE204 final
{
public:
	float                                         TimeHeld;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_OnRelease_796AF87F43799A4D551C0D998EBAE204) == 0x000004, "Wrong alignment on GA_MultipointDeployable_C_OnRelease_796AF87F43799A4D551C0D998EBAE204");
static_assert(sizeof(GA_MultipointDeployable_C_OnRelease_796AF87F43799A4D551C0D998EBAE204) == 0x000004, "Wrong size on GA_MultipointDeployable_C_OnRelease_796AF87F43799A4D551C0D998EBAE204");
static_assert(offsetof(GA_MultipointDeployable_C_OnRelease_796AF87F43799A4D551C0D998EBAE204, TimeHeld) == 0x000000, "Member 'GA_MultipointDeployable_C_OnRelease_796AF87F43799A4D551C0D998EBAE204::TimeHeld' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.PlacementLegalityMessage
// 0x00D8 (0x00D8 - 0x0000)
struct GA_MultipointDeployable_C_PlacementLegalityMessage final
{
public:
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage; // 0x0000(0x0010)(HasGetValueTypeHash)
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_1; // 0x0018(0x0010)(HasGetValueTypeHash)
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_2; // 0x0030(0x0010)(HasGetValueTypeHash)
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue_2;   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_3; // 0x0048(0x0010)(HasGetValueTypeHash)
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue_3;   // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_4; // 0x0060(0x0010)(HasGetValueTypeHash)
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue_4;   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_5; // 0x0078(0x0010)(HasGetValueTypeHash)
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue_5;   // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_6; // 0x0090(0x0010)(HasGetValueTypeHash)
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue_6;   // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_7; // 0x00A8(0x0010)(HasGetValueTypeHash)
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue_7;   // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_DeploymentInformationGameplayMessage K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_8; // 0x00C0(0x0010)(HasGetValueTypeHash)
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue_8;   // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_PlacementLegalityMessage) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_PlacementLegalityMessage");
static_assert(sizeof(GA_MultipointDeployable_C_PlacementLegalityMessage) == 0x0000D8, "Wrong size on GA_MultipointDeployable_C_PlacementLegalityMessage");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage) == 0x000000, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_1) == 0x000018, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x000028, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_2) == 0x000030, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, CallFunc_GetGameInstanceSubsystem_ReturnValue_2) == 0x000040, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::CallFunc_GetGameInstanceSubsystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_3) == 0x000048, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_3' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, CallFunc_GetGameInstanceSubsystem_ReturnValue_3) == 0x000058, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::CallFunc_GetGameInstanceSubsystem_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_4) == 0x000060, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_4' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, CallFunc_GetGameInstanceSubsystem_ReturnValue_4) == 0x000070, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::CallFunc_GetGameInstanceSubsystem_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_5) == 0x000078, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_5' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, CallFunc_GetGameInstanceSubsystem_ReturnValue_5) == 0x000088, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::CallFunc_GetGameInstanceSubsystem_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_6) == 0x000090, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_6' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, CallFunc_GetGameInstanceSubsystem_ReturnValue_6) == 0x0000A0, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::CallFunc_GetGameInstanceSubsystem_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_7) == 0x0000A8, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_7' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, CallFunc_GetGameInstanceSubsystem_ReturnValue_7) == 0x0000B8, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::CallFunc_GetGameInstanceSubsystem_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_8) == 0x0000C0, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::K2Node_MakeStruct_S_DeploymentInformationGameplayMessage_8' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_PlacementLegalityMessage, CallFunc_GetGameInstanceSubsystem_ReturnValue_8) == 0x0000D0, "Member 'GA_MultipointDeployable_C_PlacementLegalityMessage::CallFunc_GetGameInstanceSubsystem_ReturnValue_8' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.PlacePointCosmetics
// 0x0018 (0x0018 - 0x0000)
struct GA_MultipointDeployable_C_PlacePointCosmetics final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_PlacePointCosmetics) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_PlacePointCosmetics");
static_assert(sizeof(GA_MultipointDeployable_C_PlacePointCosmetics) == 0x000018, "Wrong size on GA_MultipointDeployable_C_PlacePointCosmetics");
static_assert(offsetof(GA_MultipointDeployable_C_PlacePointCosmetics, Location) == 0x000000, "Member 'GA_MultipointDeployable_C_PlacePointCosmetics::Location' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.RemoveDeployingGameplayEffect
// 0x0020 (0x0020 - 0x0000)
struct GA_MultipointDeployable_C_RemoveDeployingGameplayEffect final
{
public:
	bool                                          CallFunc_K2_HasAuthority_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveActiveGameplayEffect_ReturnValue;   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_RemoveDeployingGameplayEffect) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_RemoveDeployingGameplayEffect");
static_assert(sizeof(GA_MultipointDeployable_C_RemoveDeployingGameplayEffect) == 0x000020, "Wrong size on GA_MultipointDeployable_C_RemoveDeployingGameplayEffect");
static_assert(offsetof(GA_MultipointDeployable_C_RemoveDeployingGameplayEffect, CallFunc_K2_HasAuthority_ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_RemoveDeployingGameplayEffect::CallFunc_K2_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_RemoveDeployingGameplayEffect, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_RemoveDeployingGameplayEffect::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_RemoveDeployingGameplayEffect, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_RemoveDeployingGameplayEffect::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_RemoveDeployingGameplayEffect, CallFunc_RemoveActiveGameplayEffect_ReturnValue) == 0x000018, "Member 'GA_MultipointDeployable_C_RemoveDeployingGameplayEffect::CallFunc_RemoveActiveGameplayEffect_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.RequiredAmountOfPoints
// 0x000C (0x000C - 0x0000)
struct GA_MultipointDeployable_C_RequiredAmountOfPoints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTagCount_Count;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_RequiredAmountOfPoints) == 0x000004, "Wrong alignment on GA_MultipointDeployable_C_RequiredAmountOfPoints");
static_assert(sizeof(GA_MultipointDeployable_C_RequiredAmountOfPoints) == 0x00000C, "Wrong size on GA_MultipointDeployable_C_RequiredAmountOfPoints");
static_assert(offsetof(GA_MultipointDeployable_C_RequiredAmountOfPoints, ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_RequiredAmountOfPoints::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_RequiredAmountOfPoints, CallFunc_GetTagCount_Count) == 0x000004, "Member 'GA_MultipointDeployable_C_RequiredAmountOfPoints::CallFunc_GetTagCount_Count' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_RequiredAmountOfPoints, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_RequiredAmountOfPoints::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.Set Materials
// 0x0028 (0x0028 - 0x0000)
struct GA_MultipointDeployable_C_Set_Materials final
{
public:
	class UMaterialInterface*                     InMaterial;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    InPrimitive;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_Set_Materials) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_Set_Materials");
static_assert(sizeof(GA_MultipointDeployable_C_Set_Materials) == 0x000028, "Wrong size on GA_MultipointDeployable_C_Set_Materials");
static_assert(offsetof(GA_MultipointDeployable_C_Set_Materials, InMaterial) == 0x000000, "Member 'GA_MultipointDeployable_C_Set_Materials::InMaterial' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Set_Materials, InPrimitive) == 0x000008, "Member 'GA_MultipointDeployable_C_Set_Materials::InPrimitive' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Set_Materials, CallFunc_GetNumMaterials_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_Set_Materials::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Set_Materials, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'GA_MultipointDeployable_C_Set_Materials::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Set_Materials, Temp_int_Variable) == 0x000018, "Member 'GA_MultipointDeployable_C_Set_Materials::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Set_Materials, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'GA_MultipointDeployable_C_Set_Materials::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Set_Materials, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'GA_MultipointDeployable_C_Set_Materials::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.SetBuildingOutlinePPEnabled
// 0x0068 (0x0068 - 0x0000)
struct GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0008(0x0048)(ContainsInstancedReference)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled");
static_assert(sizeof(GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled) == 0x000068, "Wrong size on GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled");
static_assert(offsetof(GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled, Enabled) == 0x000000, "Member 'GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled, CallFunc_GetActorInfo_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled, CallFunc_IsLocallyControlled_ReturnValue) == 0x000050, "Member 'GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000058, "Member 'GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'GA_MultipointDeployable_C_SetBuildingOutlinePPEnabled::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.Spawn Item
// 0x0028 (0x0028 - 0x0000)
struct GA_MultipointDeployable_C_Spawn_Item final
{
public:
	TArray<struct FHitResult>                     TraceHits;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FRotator                               PreviewRotation;                                   // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_MultipointDeployable_C_Spawn_Item) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_Spawn_Item");
static_assert(sizeof(GA_MultipointDeployable_C_Spawn_Item) == 0x000028, "Wrong size on GA_MultipointDeployable_C_Spawn_Item");
static_assert(offsetof(GA_MultipointDeployable_C_Spawn_Item, TraceHits) == 0x000000, "Member 'GA_MultipointDeployable_C_Spawn_Item::TraceHits' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Spawn_Item, PreviewRotation) == 0x000010, "Member 'GA_MultipointDeployable_C_Spawn_Item::PreviewRotation' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.SpawnDeployable
// 0x0090 (0x0090 - 0x0000)
struct GA_MultipointDeployable_C_SpawnDeployable final
{
public:
	TArray<struct FHitResult>                     HitResults;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FRotator                               PreviewRotation;                                   // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        OptionalAngle_0;                                   // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OptionalVector_0;                                  // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocallyControlled_0;                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetItemTag_ReturnValue;                   // 0x004C(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacterJP*                           K2Node_DynamicCast_AsCharacter_JP;                 // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayMessageSubsystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_DeployItem                          K2Node_MakeStruct_S_DeployItem;                    // 0x0078(0x0018)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_SpawnDeployable) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_SpawnDeployable");
static_assert(sizeof(GA_MultipointDeployable_C_SpawnDeployable) == 0x000090, "Wrong size on GA_MultipointDeployable_C_SpawnDeployable");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, HitResults) == 0x000000, "Member 'GA_MultipointDeployable_C_SpawnDeployable::HitResults' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, PreviewRotation) == 0x000010, "Member 'GA_MultipointDeployable_C_SpawnDeployable::PreviewRotation' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, OptionalAngle_0) == 0x000028, "Member 'GA_MultipointDeployable_C_SpawnDeployable::OptionalAngle_0' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, OptionalVector_0) == 0x000030, "Member 'GA_MultipointDeployable_C_SpawnDeployable::OptionalVector_0' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, IsLocallyControlled_0) == 0x000048, "Member 'GA_MultipointDeployable_C_SpawnDeployable::IsLocallyControlled_0' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, CallFunc_GetItemTag_ReturnValue) == 0x00004C, "Member 'GA_MultipointDeployable_C_SpawnDeployable::CallFunc_GetItemTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000058, "Member 'GA_MultipointDeployable_C_SpawnDeployable::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, K2Node_DynamicCast_AsCharacter_JP) == 0x000060, "Member 'GA_MultipointDeployable_C_SpawnDeployable::K2Node_DynamicCast_AsCharacter_JP' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'GA_MultipointDeployable_C_SpawnDeployable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000070, "Member 'GA_MultipointDeployable_C_SpawnDeployable::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SpawnDeployable, K2Node_MakeStruct_S_DeployItem) == 0x000078, "Member 'GA_MultipointDeployable_C_SpawnDeployable::K2Node_MakeStruct_S_DeployItem' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.SphereTraceBetweenPoints
// 0x02B8 (0x02B8 - 0x0000)
struct GA_MultipointDeployable_C_SphereTraceBetweenPoints final
{
public:
	struct FHitResult                             StartHit;                                          // 0x0000(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             EndHit;                                            // 0x00F8(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x01F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSphereTraceStartEnd_Start;             // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSphereTraceStartEnd_End;               // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable;                                // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               Temp_byte_Variable_1;                              // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0230(0x0010)(ConstParm, ReferenceParm)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0240(0x0048)(ContainsInstancedReference)
	EDrawDebugTrace                               K2Node_Select_Default;                             // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0290(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMultiForObjects_OutHits;       // 0x02A0(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMultiForObjects_ReturnValue;   // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SphereTraceMultiForObjects_Radius_ImplicitCast; // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_SphereTraceBetweenPoints) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_SphereTraceBetweenPoints");
static_assert(sizeof(GA_MultipointDeployable_C_SphereTraceBetweenPoints) == 0x0002B8, "Wrong size on GA_MultipointDeployable_C_SphereTraceBetweenPoints");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, StartHit) == 0x000000, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::StartHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, EndHit) == 0x0000F8, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::EndHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, ReturnValue) == 0x0001F0, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, Temp_bool_Variable) == 0x0001F1, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, CallFunc_GetSphereTraceStartEnd_Start) == 0x0001F8, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::CallFunc_GetSphereTraceStartEnd_Start' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, CallFunc_GetSphereTraceStartEnd_End) == 0x000210, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::CallFunc_GetSphereTraceStartEnd_End' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, Temp_byte_Variable) == 0x000228, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, Temp_byte_Variable_1) == 0x000229, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, K2Node_MakeArray_Array) == 0x000230, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, CallFunc_GetActorInfo_ReturnValue) == 0x000240, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, K2Node_Select_Default) == 0x000288, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, K2Node_MakeArray_Array_1) == 0x000290, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, CallFunc_SphereTraceMultiForObjects_OutHits) == 0x0002A0, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::CallFunc_SphereTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, CallFunc_SphereTraceMultiForObjects_ReturnValue) == 0x0002B0, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::CallFunc_SphereTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_SphereTraceBetweenPoints, CallFunc_SphereTraceMultiForObjects_Radius_ImplicitCast) == 0x0002B4, "Member 'GA_MultipointDeployable_C_SphereTraceBetweenPoints::CallFunc_SphereTraceMultiForObjects_Radius_ImplicitCast' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.ToggleM2GreyOut
// 0x0028 (0x0028 - 0x0000)
struct GA_MultipointDeployable_C_ToggleM2GreyOut final
{
public:
	bool                                          GreyedOut;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_Character_C*                        CallFunc_GetCharacterWI_CharacterWI;               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_ToggleM2GreyOut) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_ToggleM2GreyOut");
static_assert(sizeof(GA_MultipointDeployable_C_ToggleM2GreyOut) == 0x000028, "Wrong size on GA_MultipointDeployable_C_ToggleM2GreyOut");
static_assert(offsetof(GA_MultipointDeployable_C_ToggleM2GreyOut, GreyedOut) == 0x000000, "Member 'GA_MultipointDeployable_C_ToggleM2GreyOut::GreyedOut' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ToggleM2GreyOut, CallFunc_IsDedicatedServer_ReturnValue) == 0x000001, "Member 'GA_MultipointDeployable_C_ToggleM2GreyOut::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ToggleM2GreyOut, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_MultipointDeployable_C_ToggleM2GreyOut::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ToggleM2GreyOut, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000010, "Member 'GA_MultipointDeployable_C_ToggleM2GreyOut::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ToggleM2GreyOut, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_MultipointDeployable_C_ToggleM2GreyOut::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_ToggleM2GreyOut, CallFunc_GetCharacterWI_CharacterWI) == 0x000020, "Member 'GA_MultipointDeployable_C_ToggleM2GreyOut::CallFunc_GetCharacterWI_CharacterWI' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.Trace
// 0x0290 (0x0290 - 0x0000)
struct GA_MultipointDeployable_C_Trace final
{
public:
	TArray<EObjectTypeQuery>                      CallFunc_GetAllowedObjectTypes_AllowedObjectTypes; // 0x0000(0x0010)(ReferenceParm)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0010(0x0048)(ContainsInstancedReference)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetTracePoints_Start;                     // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTracePoints_End;                       // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x0098(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0190(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_Trace) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_Trace");
static_assert(sizeof(GA_MultipointDeployable_C_Trace) == 0x000290, "Wrong size on GA_MultipointDeployable_C_Trace");
static_assert(offsetof(GA_MultipointDeployable_C_Trace, CallFunc_GetAllowedObjectTypes_AllowedObjectTypes) == 0x000000, "Member 'GA_MultipointDeployable_C_Trace::CallFunc_GetAllowedObjectTypes_AllowedObjectTypes' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Trace, CallFunc_GetActorInfo_ReturnValue) == 0x000010, "Member 'GA_MultipointDeployable_C_Trace::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Trace, K2Node_MakeArray_Array) == 0x000058, "Member 'GA_MultipointDeployable_C_Trace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Trace, CallFunc_GetTracePoints_Start) == 0x000068, "Member 'GA_MultipointDeployable_C_Trace::CallFunc_GetTracePoints_Start' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Trace, CallFunc_GetTracePoints_End) == 0x000080, "Member 'GA_MultipointDeployable_C_Trace::CallFunc_GetTracePoints_End' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Trace, CallFunc_MakeHitResult_ReturnValue) == 0x000098, "Member 'GA_MultipointDeployable_C_Trace::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Trace, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000190, "Member 'GA_MultipointDeployable_C_Trace::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Trace, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000288, "Member 'GA_MultipointDeployable_C_Trace::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.TraceHitContainsIllegalPhysicsMaterial
// 0x00E0 (0x00E0 - 0x0000)
struct GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial");
static_assert(sizeof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial) == 0x0000E0, "Wrong size on GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, ReturnValue) == 0x000000, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_bBlockingHit) == 0x000001, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_bInitialOverlap) == 0x000002, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_Time) == 0x000004, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_Distance) == 0x000008, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_Location) == 0x000010, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_ImpactPoint) == 0x000028, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_Normal) == 0x000040, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_ImpactNormal) == 0x000058, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_PhysMat) == 0x000070, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_HitActor) == 0x000078, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_HitComponent) == 0x000080, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_HitBoneName) == 0x000088, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_BoneName) == 0x000090, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_HitItem) == 0x000098, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_ElementIndex) == 0x00009C, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_FaceIndex) == 0x0000A0, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_TraceStart) == 0x0000A8, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_BreakHitResult_TraceEnd) == 0x0000C0, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial, CallFunc_Array_Contains_ReturnValue) == 0x0000D8, "Member 'GA_MultipointDeployable_C_TraceHitContainsIllegalPhysicsMaterial::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.Update Placement Legalality
// 0x0040 (0x0040 - 0x0000)
struct GA_MultipointDeployable_C_Update_Placement_Legalality final
{
public:
	bool                                          IsLegal;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DeploymentMessage;                                 // 0x0008(0x0010)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LegalPlacement_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNotOnEnemyPlot_NotOnEnemyPlot;          // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAboveMinHeight_Return;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Blocked_by_Dynamic_Object_NotBlocked;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInsideBlocker_IsInside;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LegalTeam_OnTeamGrounds;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LegalAngle_ReturnValue;                   // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LegalPreviewMeshCollision_Return_Value;   // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_LegalPreviewMeshCollision_HitActor;       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LegalLengthBetweenPoints_ReturnValue;     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CollisionBetweenPoints_ReturnValue;       // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceHitContainsIllegalPhysicsMaterial_ReturnValue; // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDeployabeLegality                     K2Node_MakeStruct_DeployabeLegality;               // 0x0035(0x000B)(NoDestructor)
};
static_assert(alignof(GA_MultipointDeployable_C_Update_Placement_Legalality) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_Update_Placement_Legalality");
static_assert(sizeof(GA_MultipointDeployable_C_Update_Placement_Legalality) == 0x000040, "Wrong size on GA_MultipointDeployable_C_Update_Placement_Legalality");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, IsLegal) == 0x000000, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::IsLegal' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, DeploymentMessage) == 0x000008, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::DeploymentMessage' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, Temp_bool_Variable) == 0x000018, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, Temp_bool_Variable_1) == 0x000019, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, Temp_bool_Variable_2) == 0x00001A, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, Temp_bool_Variable_3) == 0x00001B, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_LegalPlacement_ReturnValue) == 0x00001C, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_LegalPlacement_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_IsNotOnEnemyPlot_NotOnEnemyPlot) == 0x00001D, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_IsNotOnEnemyPlot_NotOnEnemyPlot' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, K2Node_Select_Default) == 0x00001E, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_IsAboveMinHeight_Return) == 0x00001F, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_IsAboveMinHeight_Return' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_Blocked_by_Dynamic_Object_NotBlocked) == 0x000021, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_Blocked_by_Dynamic_Object_NotBlocked' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_IsInsideBlocker_IsInside) == 0x000022, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_IsInsideBlocker_IsInside' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_LegalTeam_OnTeamGrounds) == 0x000023, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_LegalTeam_OnTeamGrounds' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_Not_PreBool_ReturnValue) == 0x000024, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, K2Node_Select_Default_1) == 0x000025, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_LegalAngle_ReturnValue) == 0x000026, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_LegalAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_LegalPreviewMeshCollision_Return_Value) == 0x000027, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_LegalPreviewMeshCollision_Return_Value' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_LegalPreviewMeshCollision_HitActor) == 0x000028, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_LegalPreviewMeshCollision_HitActor' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_LegalLengthBetweenPoints_ReturnValue) == 0x000030, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_LegalLengthBetweenPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_CollisionBetweenPoints_ReturnValue) == 0x000031, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_CollisionBetweenPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_TraceHitContainsIllegalPhysicsMaterial_ReturnValue) == 0x000032, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_TraceHitContainsIllegalPhysicsMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_Not_PreBool_ReturnValue_1) == 0x000033, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, CallFunc_Not_PreBool_ReturnValue_2) == 0x000034, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_Update_Placement_Legalality, K2Node_MakeStruct_DeployabeLegality) == 0x000035, "Member 'GA_MultipointDeployable_C_Update_Placement_Legalality::K2Node_MakeStruct_DeployabeLegality' has a wrong offset!");

// Function GA_MultipointDeployable.GA_MultipointDeployable_C.K2_CanActivateAbility
// 0x00B8 (0x00B8 - 0x0000)
struct GA_MultipointDeployable_C_K2_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0048(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0050(0x0020)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_K2_CanActivateAbility_RelevantTags;       // 0x0078(0x0020)()
	bool                                          CallFunc_K2_CanActivateAbility_ReturnValue;        // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_MultipointDeployable_C_K2_CanActivateAbility) == 0x000008, "Wrong alignment on GA_MultipointDeployable_C_K2_CanActivateAbility");
static_assert(sizeof(GA_MultipointDeployable_C_K2_CanActivateAbility) == 0x0000B8, "Wrong size on GA_MultipointDeployable_C_K2_CanActivateAbility");
static_assert(offsetof(GA_MultipointDeployable_C_K2_CanActivateAbility, ActorInfo) == 0x000000, "Member 'GA_MultipointDeployable_C_K2_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_K2_CanActivateAbility, Handle) == 0x000048, "Member 'GA_MultipointDeployable_C_K2_CanActivateAbility::Handle' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_K2_CanActivateAbility, RelevantTags) == 0x000050, "Member 'GA_MultipointDeployable_C_K2_CanActivateAbility::RelevantTags' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_K2_CanActivateAbility, ReturnValue) == 0x000070, "Member 'GA_MultipointDeployable_C_K2_CanActivateAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_K2_CanActivateAbility, CallFunc_K2_CanActivateAbility_RelevantTags) == 0x000078, "Member 'GA_MultipointDeployable_C_K2_CanActivateAbility::CallFunc_K2_CanActivateAbility_RelevantTags' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_K2_CanActivateAbility, CallFunc_K2_CanActivateAbility_ReturnValue) == 0x000098, "Member 'GA_MultipointDeployable_C_K2_CanActivateAbility::CallFunc_K2_CanActivateAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_K2_CanActivateAbility, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0000A0, "Member 'GA_MultipointDeployable_C_K2_CanActivateAbility::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_K2_CanActivateAbility, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0000B0, "Member 'GA_MultipointDeployable_C_K2_CanActivateAbility::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_K2_CanActivateAbility, CallFunc_Not_PreBool_ReturnValue) == 0x0000B1, "Member 'GA_MultipointDeployable_C_K2_CanActivateAbility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_MultipointDeployable_C_K2_CanActivateAbility, CallFunc_BooleanAND_ReturnValue) == 0x0000B2, "Member 'GA_MultipointDeployable_C_K2_CanActivateAbility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

