#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HighlightManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_HighlightLevel_structs.hpp"
#include "E_HighlightCategory_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HighlightManager.BP_HighlightManager_C
// 0x0070 (0x0300 - 0x0290)
class ABP_HighlightManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Flower_C*>                   Flowers;                                           // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_GarbageItem_C*>              Garbage;                                           // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_Hedge_Branch_C*>             Hedges;                                            // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_HouseDecalBase_C*>           Decals;                                            // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_WaterTap_C*>                 WaterTaps;                                         // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_UpgradePlanBase_C*>          UpgradeableDefences;                               // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ActivateObjectiveHighlight(class ABP_HouseEssential_Cube_C* AffectedObjective);
	void ActivateTaskHighlight(const struct FS_HighlightParameters& Params_0);
	void AddObjectToTaskPool(E_HighlightCategory Params_0, class AActor* ActorToAdd);
	void CacheAllFlowers();
	void CacheAllGarbage();
	void CacheAllHedges();
	void ClearAllHighlightsOnDeath(class ABP_ResidentCharacter_C* Character);
	void CompareOwnerWithCurrentCaller(class AActor* Owner_0, bool* IsSame);
	void DeactivateObjectiveHighlight(class ABP_HouseEssential_Cube_C* AffectedObjective);
	void DeactivateTaskHighlight(const struct FS_HighlightParameters& Params_0);
	void ExecuteUbergraph_BP_HighlightManager(int32 EntryPoint);
	void RemoveObjectFromTaskPool(E_HighlightCategory Params_0, class AActor* ActorToAdd);
	void TempHighlightRemover(const struct FS_HighlightParameters& Params_0);
	void ToggleDecals(E_HighlightLevel Verbosity, class ABP_ResidentCharacter_C* Instigator_0, bool Activate);
	void ToggleDefences(bool Activate);
	void ToggleFlowers(E_HighlightLevel Verbosity, class ABP_ResidentCharacter_C* Instigator_0, bool Activate);
	void ToggleGarbage(E_HighlightLevel Verbosity, class ABP_ResidentCharacter_C* Instigator_0, bool Activate);
	void ToggleHedges(E_HighlightLevel Verbosity, class ABP_ResidentCharacter_C* Instigator_0, bool Activate);
	void ToggleObjectiveHighlight(bool Activate, class ABP_HouseEssential_Cube_C* Objective);
	void ToggleWaterTaps(E_HighlightLevel Verbosity, class ABP_ResidentCharacter_C* Instigator_0, bool Activate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HighlightManager_C">();
	}
	static class ABP_HighlightManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HighlightManager_C>();
	}
};
static_assert(alignof(ABP_HighlightManager_C) == 0x000008, "Wrong alignment on ABP_HighlightManager_C");
static_assert(sizeof(ABP_HighlightManager_C) == 0x000300, "Wrong size on ABP_HighlightManager_C");
static_assert(offsetof(ABP_HighlightManager_C, UberGraphFrame) == 0x000290, "Member 'ABP_HighlightManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HighlightManager_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_HighlightManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_HighlightManager_C, Flowers) == 0x0002A0, "Member 'ABP_HighlightManager_C::Flowers' has a wrong offset!");
static_assert(offsetof(ABP_HighlightManager_C, Garbage) == 0x0002B0, "Member 'ABP_HighlightManager_C::Garbage' has a wrong offset!");
static_assert(offsetof(ABP_HighlightManager_C, Hedges) == 0x0002C0, "Member 'ABP_HighlightManager_C::Hedges' has a wrong offset!");
static_assert(offsetof(ABP_HighlightManager_C, Decals) == 0x0002D0, "Member 'ABP_HighlightManager_C::Decals' has a wrong offset!");
static_assert(offsetof(ABP_HighlightManager_C, WaterTaps) == 0x0002E0, "Member 'ABP_HighlightManager_C::WaterTaps' has a wrong offset!");
static_assert(offsetof(ABP_HighlightManager_C, UpgradeableDefences) == 0x0002F0, "Member 'ABP_HighlightManager_C::UpgradeableDefences' has a wrong offset!");

}

