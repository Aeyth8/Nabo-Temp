#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_TraceForThrowables

#include "Basic.hpp"

#include "GA_TraceForThrowables_classes.hpp"
#include "GA_TraceForThrowables_parameters.hpp"


namespace SDK
{

// Function GA_TraceForThrowables.GA_TraceForThrowables_C.ExecuteUbergraph_GA_TraceForThrowables
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_TraceForThrowables_C::ExecuteUbergraph_GA_TraceForThrowables(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "ExecuteUbergraph_GA_TraceForThrowables");

	Params::GA_TraceForThrowables_C_ExecuteUbergraph_GA_TraceForThrowables Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_TraceForThrowables.GA_TraceForThrowables_C.FilterForThrowable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABp_ThrowableProp_Base_C*         Return_Value                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_TraceForThrowables_C::FilterForThrowable(class ABp_ThrowableProp_Base_C** Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "FilterForThrowable");

	Params::GA_TraceForThrowables_C_FilterForThrowable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function GA_TraceForThrowables.GA_TraceForThrowables_C.GetReferenceForContinuousTraceForHitablesAbility
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGA_ContinuousTraceHitables_C*    AsGA_Continuous_Trace_for_Hitables                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_TraceForThrowables_C::GetReferenceForContinuousTraceForHitablesAbility(class UGA_ContinuousTraceHitables_C** AsGA_Continuous_Trace_for_Hitables)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "GetReferenceForContinuousTraceForHitablesAbility");

	Params::GA_TraceForThrowables_C_GetReferenceForContinuousTraceForHitablesAbility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsGA_Continuous_Trace_for_Hitables != nullptr)
		*AsGA_Continuous_Trace_for_Hitables = Parms.AsGA_Continuous_Trace_for_Hitables;
}


// Function GA_TraceForThrowables.GA_TraceForThrowables_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_TraceForThrowables_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_TraceForThrowables.GA_TraceForThrowables_C.K2_OnAbilityAdded
// (Event, Protected, BlueprintEvent)

void UGA_TraceForThrowables_C::K2_OnAbilityAdded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "K2_OnAbilityAdded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_TraceForThrowables.GA_TraceForThrowables_C.OnFinished_F7CC6FEA40931DE74D6F4D9E5D383422
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ActionNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_TraceForThrowables_C::OnFinished_F7CC6FEA40931DE74D6F4D9E5D383422(int32 ActionNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "OnFinished_F7CC6FEA40931DE74D6F4D9E5D383422");

	Params::GA_TraceForThrowables_C_OnFinished_F7CC6FEA40931DE74D6F4D9E5D383422 Parms{};

	Parms.ActionNumber = ActionNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_TraceForThrowables.GA_TraceForThrowables_C.OnPerformAction_F7CC6FEA40931DE74D6F4D9E5D383422
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ActionNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_TraceForThrowables_C::OnPerformAction_F7CC6FEA40931DE74D6F4D9E5D383422(int32 ActionNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "OnPerformAction_F7CC6FEA40931DE74D6F4D9E5D383422");

	Params::GA_TraceForThrowables_C_OnPerformAction_F7CC6FEA40931DE74D6F4D9E5D383422 Parms{};

	Parms.ActionNumber = ActionNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_TraceForThrowables.GA_TraceForThrowables_C.SetThrowable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABp_ThrowableProp_Base_C*         Throwable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_TraceForThrowables_C::SetThrowable(class ABp_ThrowableProp_Base_C* Throwable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "SetThrowable");

	Params::GA_TraceForThrowables_C_SetThrowable Parms{};

	Parms.Throwable = Throwable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_TraceForThrowables.GA_TraceForThrowables_C.TraceForThrowable
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_TraceForThrowables_C::TraceForThrowable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "TraceForThrowable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_TraceForThrowables.GA_TraceForThrowables_C.GetAvatarResidentCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABP_ResidentCharacter_C*          As_Resident                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_TraceForThrowables_C::GetAvatarResidentCharacter(class ABP_ResidentCharacter_C** As_Resident) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "GetAvatarResidentCharacter");

	Params::GA_TraceForThrowables_C_GetAvatarResidentCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (As_Resident != nullptr)
		*As_Resident = Parms.As_Resident;
}


// Function GA_TraceForThrowables.GA_TraceForThrowables_C.GetTraceInput
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Start                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (Parm, OutParm)
// TArray<class ABP_ResidentCharacter_C*>  ActorsToIgnore                                         (Parm, OutParm)

void UGA_TraceForThrowables_C::GetTraceInput(struct FVector* Start, struct FVector* End, TArray<EObjectTypeQuery>* ObjectTypes, TArray<class ABP_ResidentCharacter_C*>* ActorsToIgnore) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_TraceForThrowables_C", "GetTraceInput");

	Params::GA_TraceForThrowables_C_GetTraceInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Start != nullptr)
		*Start = std::move(Parms.Start);

	if (End != nullptr)
		*End = std::move(Parms.End);

	if (ObjectTypes != nullptr)
		*ObjectTypes = std::move(Parms.ObjectTypes);

	if (ActorsToIgnore != nullptr)
		*ActorsToIgnore = std::move(Parms.ActorsToIgnore);
}

}

