#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightingAndPostProcessController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Lighting_Presets_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C
// 0x1070 (0x1300 - 0x0290)
class ABP_LightingAndPostProcessController_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SkyBlender_SkyBlendValue_0FE440A742E27CB5C62ADAABBBB1F9C6; // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SkyBlender__Direction_0FE440A742E27CB5C62ADAABBBB1F9C6; // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SkyBlender;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         BlendTimeline_Blend_2952425D499DBE6DD0EB649460B88E90; // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BlendTimeline__Direction_2952425D499DBE6DD0EB649460B88E90; // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BlendTimeline;                                     // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_Lighting_Presets                            SettingsPreview;                                   // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASkyLight*                              SkyLight;                                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           Default_Cubemap;                                   // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Skylight_Intensity;                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Default_Skylight_Tint;                             // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_JP_PP2_C*>                   PostProcessBPs;                                    // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UTextureCube*                           Source_Cubemap;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Source_Skylight_Intensity;                         // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Source_Skylight_Tint;                              // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           Destination_Cubemap;                               // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Destination_Skylight_Intensity;                    // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Destination_Skylight_Tint;                         // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActivePostProcess;                                 // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             Presets;                                           // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      Sun;                                               // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      SkyAtmosphereSun;                                  // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       Stars;                                             // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       Moon;                                              // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class APostProcessVolume*                     MainPostProcess;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          Day;                                               // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APostProcessVolume*                     NightPostProcess;                                  // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockUpdates;                                      // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Lighting_Presets                            DefaultPreset;                                     // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392[0x2];                                      // 0x0392(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedTeams;                                     // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstance*>              CityBuildingMaterials;                             // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       CityBuildingDynamicMaterials;                      // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AExponentialHeightFog*                  Fog;                                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Default_Sun_Color;                                 // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Sun_Intensity;                             // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Sun_Temperature;                           // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Default_Sky_Atmosphere_Sun_Color;                  // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Sky_Atmosphere_Sun_Intensity;              // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Sky_Atmosphere_Sun_Temperature;            // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Lighting_Presets                            DefaultNightPreset;                                // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SwitchBlendValue;                                  // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DefaultSunRotation;                                // 0x0408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               DefaultSkyAtmosphereSunRotation;                   // 0x0420(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               StarMaterial;                                      // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MoonMaterial;                                      // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Night_Skylight_Intensity;                  // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Default_Night_Skylight_Tint;                       // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Default_Night_Sun_Color;                           // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Night_Sun_Intensity;                       // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deefault_Night_Sun_Temperature;                    // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Default_Night_Sky_Atmosphere_Sun_Color;            // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Night_Sky_Amosphere_Sun_Intensity;         // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Night_Sky_Atmosphere_Sun_Temperature;      // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Lighting_Presets                            OverlapLightingPreset;                             // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Lighting_Presets                            Overlap_Lighting_Preset_Night;                     // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Transitioning;                                     // 0x04A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Overlapping;                                       // 0x04A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Inside;                                            // 0x04A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A5[0x3];                                      // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           DefaultSkylightStorageCubemap;                     // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultSkylightStorageIntensity;                   // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DefaultSkylightStorageTint;                        // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetSkylightStorageIntensity;                    // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetSkylightStorageTint;                         // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           TargetSkylightStorageCubemap;                      // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SkylightBlend;                                     // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HorizonBlendPoint;                                 // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Night_Fogs;                                        // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FLinearColor                           FogColor;                                          // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518[0x8];                                      // 0x0518(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   Default_PostProcess_Preset;                        // 0x0520(0x06F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FPostProcessSettings                   Default_Night_PostProcess_Preset;                  // 0x0C10(0x06F0)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BlendDefaultSkylightValues();
	void BlendTargetSkylightValues();
	void BlendTimeline__FinishedFunc();
	void BlendTimeline__UpdateFunc();
	void ExecuteUbergraph_BP_LightingAndPostProcessController(int32 EntryPoint);
	void ForceDefaultSettings();
	void ImplementDefaults();
	void NightEvents();
	void PP_Overlapped(E_Lighting_Presets LightingPreset, E_Lighting_Presets LightingPresetNight);
	void PP_OverlapEnd();
	void ReceiveBeginPlay();
	void ReplaceBackgroundBuildingMaterials();
	void SetDefaultVariables();
	void SetLightingSettingsPreview(E_Lighting_Presets Enumerator);
	void SetRotations();
	void SetTransitionCurve(class UCurveFloat* NewFloatCurve);
	void SkyBlender__FinishedFunc();
	void SkyBlender__UpdateFunc();
	void SwitchToDay(double DayTransitionDuration);
	void SwitchToNight(double NightTransitionDuration);
	void UpdateMainPostProcesses();
	void UpdateMoon();
	void UpdateSkyAtmosphereSunColor();
	void UpdateSkyAtmosphereSunIntensity();
	void UpdateSkyAtmosphereSunRotation();
	void UpdateSkyAtmosphereSunTemparature();
	void UpdateSkylight();
	void UpdateStars();
	void UpdateSunColor();
	void UpdateSunIntensity();
	void UpdateSunRotation();
	void UpdateSunTemperature();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightingAndPostProcessController_C">();
	}
	static class ABP_LightingAndPostProcessController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightingAndPostProcessController_C>();
	}
};
static_assert(alignof(ABP_LightingAndPostProcessController_C) == 0x000010, "Wrong alignment on ABP_LightingAndPostProcessController_C");
static_assert(sizeof(ABP_LightingAndPostProcessController_C) == 0x001300, "Wrong size on ABP_LightingAndPostProcessController_C");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, UberGraphFrame) == 0x000290, "Member 'ABP_LightingAndPostProcessController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Billboard) == 0x000298, "Member 'ABP_LightingAndPostProcessController_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_LightingAndPostProcessController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, SkyBlender_SkyBlendValue_0FE440A742E27CB5C62ADAABBBB1F9C6) == 0x0002A8, "Member 'ABP_LightingAndPostProcessController_C::SkyBlender_SkyBlendValue_0FE440A742E27CB5C62ADAABBBB1F9C6' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, SkyBlender__Direction_0FE440A742E27CB5C62ADAABBBB1F9C6) == 0x0002AC, "Member 'ABP_LightingAndPostProcessController_C::SkyBlender__Direction_0FE440A742E27CB5C62ADAABBBB1F9C6' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, SkyBlender) == 0x0002B0, "Member 'ABP_LightingAndPostProcessController_C::SkyBlender' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, BlendTimeline_Blend_2952425D499DBE6DD0EB649460B88E90) == 0x0002B8, "Member 'ABP_LightingAndPostProcessController_C::BlendTimeline_Blend_2952425D499DBE6DD0EB649460B88E90' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, BlendTimeline__Direction_2952425D499DBE6DD0EB649460B88E90) == 0x0002BC, "Member 'ABP_LightingAndPostProcessController_C::BlendTimeline__Direction_2952425D499DBE6DD0EB649460B88E90' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, BlendTimeline) == 0x0002C0, "Member 'ABP_LightingAndPostProcessController_C::BlendTimeline' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, SettingsPreview) == 0x0002C8, "Member 'ABP_LightingAndPostProcessController_C::SettingsPreview' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, SkyLight) == 0x0002D0, "Member 'ABP_LightingAndPostProcessController_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Cubemap) == 0x0002D8, "Member 'ABP_LightingAndPostProcessController_C::Default_Cubemap' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Skylight_Intensity) == 0x0002E0, "Member 'ABP_LightingAndPostProcessController_C::Default_Skylight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Skylight_Tint) == 0x0002E8, "Member 'ABP_LightingAndPostProcessController_C::Default_Skylight_Tint' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, PostProcessBPs) == 0x0002F8, "Member 'ABP_LightingAndPostProcessController_C::PostProcessBPs' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Source_Cubemap) == 0x000308, "Member 'ABP_LightingAndPostProcessController_C::Source_Cubemap' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Source_Skylight_Intensity) == 0x000310, "Member 'ABP_LightingAndPostProcessController_C::Source_Skylight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Source_Skylight_Tint) == 0x000318, "Member 'ABP_LightingAndPostProcessController_C::Source_Skylight_Tint' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Destination_Cubemap) == 0x000328, "Member 'ABP_LightingAndPostProcessController_C::Destination_Cubemap' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Destination_Skylight_Intensity) == 0x000330, "Member 'ABP_LightingAndPostProcessController_C::Destination_Skylight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Destination_Skylight_Tint) == 0x000338, "Member 'ABP_LightingAndPostProcessController_C::Destination_Skylight_Tint' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, ActivePostProcess) == 0x000348, "Member 'ABP_LightingAndPostProcessController_C::ActivePostProcess' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Presets) == 0x000350, "Member 'ABP_LightingAndPostProcessController_C::Presets' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Sun) == 0x000358, "Member 'ABP_LightingAndPostProcessController_C::Sun' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, SkyAtmosphereSun) == 0x000360, "Member 'ABP_LightingAndPostProcessController_C::SkyAtmosphereSun' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Stars) == 0x000368, "Member 'ABP_LightingAndPostProcessController_C::Stars' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Moon) == 0x000370, "Member 'ABP_LightingAndPostProcessController_C::Moon' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, MainPostProcess) == 0x000378, "Member 'ABP_LightingAndPostProcessController_C::MainPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Day) == 0x000380, "Member 'ABP_LightingAndPostProcessController_C::Day' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, NightPostProcess) == 0x000388, "Member 'ABP_LightingAndPostProcessController_C::NightPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, BlockUpdates) == 0x000390, "Member 'ABP_LightingAndPostProcessController_C::BlockUpdates' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, DefaultPreset) == 0x000391, "Member 'ABP_LightingAndPostProcessController_C::DefaultPreset' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, ExpectedTeams) == 0x000394, "Member 'ABP_LightingAndPostProcessController_C::ExpectedTeams' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, CityBuildingMaterials) == 0x000398, "Member 'ABP_LightingAndPostProcessController_C::CityBuildingMaterials' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, CityBuildingDynamicMaterials) == 0x0003A8, "Member 'ABP_LightingAndPostProcessController_C::CityBuildingDynamicMaterials' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Fog) == 0x0003B8, "Member 'ABP_LightingAndPostProcessController_C::Fog' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Sun_Color) == 0x0003C0, "Member 'ABP_LightingAndPostProcessController_C::Default_Sun_Color' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Sun_Intensity) == 0x0003D0, "Member 'ABP_LightingAndPostProcessController_C::Default_Sun_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Sun_Temperature) == 0x0003D8, "Member 'ABP_LightingAndPostProcessController_C::Default_Sun_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Sky_Atmosphere_Sun_Color) == 0x0003E0, "Member 'ABP_LightingAndPostProcessController_C::Default_Sky_Atmosphere_Sun_Color' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Sky_Atmosphere_Sun_Intensity) == 0x0003F0, "Member 'ABP_LightingAndPostProcessController_C::Default_Sky_Atmosphere_Sun_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Sky_Atmosphere_Sun_Temperature) == 0x0003F8, "Member 'ABP_LightingAndPostProcessController_C::Default_Sky_Atmosphere_Sun_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, DefaultNightPreset) == 0x000400, "Member 'ABP_LightingAndPostProcessController_C::DefaultNightPreset' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, SwitchBlendValue) == 0x000404, "Member 'ABP_LightingAndPostProcessController_C::SwitchBlendValue' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, DefaultSunRotation) == 0x000408, "Member 'ABP_LightingAndPostProcessController_C::DefaultSunRotation' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, DefaultSkyAtmosphereSunRotation) == 0x000420, "Member 'ABP_LightingAndPostProcessController_C::DefaultSkyAtmosphereSunRotation' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, StarMaterial) == 0x000438, "Member 'ABP_LightingAndPostProcessController_C::StarMaterial' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, MoonMaterial) == 0x000440, "Member 'ABP_LightingAndPostProcessController_C::MoonMaterial' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Night_Skylight_Intensity) == 0x000448, "Member 'ABP_LightingAndPostProcessController_C::Default_Night_Skylight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Night_Skylight_Tint) == 0x000450, "Member 'ABP_LightingAndPostProcessController_C::Default_Night_Skylight_Tint' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Night_Sun_Color) == 0x000460, "Member 'ABP_LightingAndPostProcessController_C::Default_Night_Sun_Color' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Night_Sun_Intensity) == 0x000470, "Member 'ABP_LightingAndPostProcessController_C::Default_Night_Sun_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Deefault_Night_Sun_Temperature) == 0x000478, "Member 'ABP_LightingAndPostProcessController_C::Deefault_Night_Sun_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Night_Sky_Atmosphere_Sun_Color) == 0x000480, "Member 'ABP_LightingAndPostProcessController_C::Default_Night_Sky_Atmosphere_Sun_Color' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Night_Sky_Amosphere_Sun_Intensity) == 0x000490, "Member 'ABP_LightingAndPostProcessController_C::Default_Night_Sky_Amosphere_Sun_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Night_Sky_Atmosphere_Sun_Temperature) == 0x000498, "Member 'ABP_LightingAndPostProcessController_C::Default_Night_Sky_Atmosphere_Sun_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, OverlapLightingPreset) == 0x0004A0, "Member 'ABP_LightingAndPostProcessController_C::OverlapLightingPreset' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Overlap_Lighting_Preset_Night) == 0x0004A1, "Member 'ABP_LightingAndPostProcessController_C::Overlap_Lighting_Preset_Night' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Transitioning) == 0x0004A2, "Member 'ABP_LightingAndPostProcessController_C::Transitioning' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Overlapping) == 0x0004A3, "Member 'ABP_LightingAndPostProcessController_C::Overlapping' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Inside) == 0x0004A4, "Member 'ABP_LightingAndPostProcessController_C::Inside' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, DefaultSkylightStorageCubemap) == 0x0004A8, "Member 'ABP_LightingAndPostProcessController_C::DefaultSkylightStorageCubemap' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, DefaultSkylightStorageIntensity) == 0x0004B0, "Member 'ABP_LightingAndPostProcessController_C::DefaultSkylightStorageIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, DefaultSkylightStorageTint) == 0x0004B8, "Member 'ABP_LightingAndPostProcessController_C::DefaultSkylightStorageTint' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, TargetSkylightStorageIntensity) == 0x0004C8, "Member 'ABP_LightingAndPostProcessController_C::TargetSkylightStorageIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, TargetSkylightStorageTint) == 0x0004D0, "Member 'ABP_LightingAndPostProcessController_C::TargetSkylightStorageTint' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, TargetSkylightStorageCubemap) == 0x0004E0, "Member 'ABP_LightingAndPostProcessController_C::TargetSkylightStorageCubemap' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, SkylightBlend) == 0x0004E8, "Member 'ABP_LightingAndPostProcessController_C::SkylightBlend' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, HorizonBlendPoint) == 0x0004F0, "Member 'ABP_LightingAndPostProcessController_C::HorizonBlendPoint' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Night_Fogs) == 0x0004F8, "Member 'ABP_LightingAndPostProcessController_C::Night_Fogs' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, FogColor) == 0x000508, "Member 'ABP_LightingAndPostProcessController_C::FogColor' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_PostProcess_Preset) == 0x000520, "Member 'ABP_LightingAndPostProcessController_C::Default_PostProcess_Preset' has a wrong offset!");
static_assert(offsetof(ABP_LightingAndPostProcessController_C, Default_Night_PostProcess_Preset) == 0x000C10, "Member 'ABP_LightingAndPostProcessController_C::Default_Night_PostProcess_Preset' has a wrong offset!");

}

