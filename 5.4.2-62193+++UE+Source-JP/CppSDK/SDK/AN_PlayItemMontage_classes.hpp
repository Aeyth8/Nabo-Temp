#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AN_PlayItemMontage

#include "Basic.hpp"

#include "GASIW_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AN_PlayItemMontage.AN_PlayItemMontage_C
// 0x0098 (0x00D0 - 0x0038)
class UAN_PlayItemMontage_C final : public UAnimNotify
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        RateScale;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Charge;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Charge_Rate;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ticks_Per_Second;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Calculate_Play_Rate;                               // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UItemDefinition>         Definition;                                        // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	double                                        NotifyStartTime;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdditionalPlayRate;                                // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EquipmentArrayIndexToUse;                          // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPreviewActor;                                     // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEquipmentViewMode                            MontageViewMode;                                   // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpawnedActorData>              SpawnedActors;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSubclassOf<class AActor>>             ActorsClass;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSubclassOf<class AActor>                     EquipableBPClass;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          bBlocking;                                         // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bItemReady;                                        // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	double GetChargedPlayRate();

	double CalculatePlayRate(class UItemInstance* InputPin) const;
	void PlayMontageLogic(class AActor* Actor_0, class USkeletalMeshComponent* MeshComp, class UAnimMontage* MontageLeader) const;
	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, const struct FAnimNotifyEventReference& EventReference) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AN_PlayItemMontage_C">();
	}
	static class UAN_PlayItemMontage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAN_PlayItemMontage_C>();
	}
};
static_assert(alignof(UAN_PlayItemMontage_C) == 0x000008, "Wrong alignment on UAN_PlayItemMontage_C");
static_assert(sizeof(UAN_PlayItemMontage_C) == 0x0000D0, "Wrong size on UAN_PlayItemMontage_C");
static_assert(offsetof(UAN_PlayItemMontage_C, MontageToPlay) == 0x000038, "Member 'UAN_PlayItemMontage_C::MontageToPlay' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, RateScale) == 0x000040, "Member 'UAN_PlayItemMontage_C::RateScale' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, Max_Charge) == 0x000048, "Member 'UAN_PlayItemMontage_C::Max_Charge' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, Charge_Rate) == 0x00004C, "Member 'UAN_PlayItemMontage_C::Charge_Rate' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, Ticks_Per_Second) == 0x000050, "Member 'UAN_PlayItemMontage_C::Ticks_Per_Second' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, Calculate_Play_Rate) == 0x000054, "Member 'UAN_PlayItemMontage_C::Calculate_Play_Rate' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, Definition) == 0x000058, "Member 'UAN_PlayItemMontage_C::Definition' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, NotifyStartTime) == 0x000080, "Member 'UAN_PlayItemMontage_C::NotifyStartTime' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, AdditionalPlayRate) == 0x000088, "Member 'UAN_PlayItemMontage_C::AdditionalPlayRate' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, EquipmentArrayIndexToUse) == 0x000090, "Member 'UAN_PlayItemMontage_C::EquipmentArrayIndexToUse' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, bPreviewActor) == 0x000094, "Member 'UAN_PlayItemMontage_C::bPreviewActor' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, MontageViewMode) == 0x000095, "Member 'UAN_PlayItemMontage_C::MontageViewMode' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, SpawnedActors) == 0x000098, "Member 'UAN_PlayItemMontage_C::SpawnedActors' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, ActorsClass) == 0x0000A8, "Member 'UAN_PlayItemMontage_C::ActorsClass' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, EquipableBPClass) == 0x0000B8, "Member 'UAN_PlayItemMontage_C::EquipableBPClass' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, Actor) == 0x0000C0, "Member 'UAN_PlayItemMontage_C::Actor' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, bBlocking) == 0x0000C8, "Member 'UAN_PlayItemMontage_C::bBlocking' has a wrong offset!");
static_assert(offsetof(UAN_PlayItemMontage_C, bItemReady) == 0x0000C9, "Member 'UAN_PlayItemMontage_C::bItemReady' has a wrong offset!");

}

