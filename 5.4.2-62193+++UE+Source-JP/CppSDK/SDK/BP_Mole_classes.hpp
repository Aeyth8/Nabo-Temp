#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mole

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_MaterialTypes_structs.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Mole.BP_Mole_C
// 0x00A8 (0x0338 - 0x0290)
class ABP_Mole_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponentIW*              AbilitySystemComponentIW;                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene_Particle;                                    // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene_Location;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_EarthPile;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TL_Scale_Alpha_849156044D51F86C3EEB5B94518A081C;   // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_Scale__Direction_849156044D51F86C3EEB5B94518A081C; // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_Scale;                                          // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         TL_Location_Alpha_3474791442615524AD4F2A9621DF9777; // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_Location__Direction_3474791442615524AD4F2A9621DF9777; // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_Location;                                       // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MoleTimer;                                         // 0x02F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MoleActive;                                        // 0x02F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           MoleActiveTimer;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Completed;                                         // 0x0308(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         TeamId;                                            // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PopUpDelayMin;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PopUpDelayMax;                                     // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UpTimeMin;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UpTimeMax;                                         // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpDownTime;                                        // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActiveDelay;                                       // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Clear_Timers();
	void Enable_Active_Collision(bool Enable);
	void ExecuteUbergraph_BP_Mole(int32 EntryPoint);
	void GetDurabilityCostWhenHit(double* Amount);
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void Hide_Mole();
	void HitInterface(const struct FVector& Direction);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void MeleeHit(const class AActor*& AttackingActor);
	void Multi_Mole_Dead();
	void On_Mole_Active_Timer_Elapsed();
	void On_Mole_Timer_Elapsed();
	void OnDamaged(float Delta, class AActor* Causer, const struct FCombatParticipant& CombatParticipant, const struct FKillMethod& KillMethod, const struct FVector_NetQuantize& Location);
	void OnHealthChanged(float Health, float MaxHealth);
	void OnRep_Completed();
	void OnRep_MoleActive();
	void Play_Show_Particles(bool Show);
	void PlayMoleSound(class USoundBase* In);
	void PlayRandomIdleAnimation();
	void ReceiveBeginPlay();
	void Show_Mole();
	void Start_Mole_Timer();
	void TakeDamage();
	void TL_Location__FinishedFunc();
	void TL_Location__UpdateFunc();
	void TL_Scale__FinishedFunc();
	void TL_Scale__UpdateFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Mole_C">();
	}
	static class ABP_Mole_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Mole_C>();
	}
};
static_assert(alignof(ABP_Mole_C) == 0x000008, "Wrong alignment on ABP_Mole_C");
static_assert(sizeof(ABP_Mole_C) == 0x000338, "Wrong size on ABP_Mole_C");
static_assert(offsetof(ABP_Mole_C, UberGraphFrame) == 0x000290, "Member 'ABP_Mole_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, Audio) == 0x000298, "Member 'ABP_Mole_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, SkeletalMesh) == 0x0002A0, "Member 'ABP_Mole_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, AbilitySystemComponentIW) == 0x0002A8, "Member 'ABP_Mole_C::AbilitySystemComponentIW' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, Scene_Particle) == 0x0002B0, "Member 'ABP_Mole_C::Scene_Particle' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, Scene_Location) == 0x0002B8, "Member 'ABP_Mole_C::Scene_Location' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, SM_EarthPile) == 0x0002C0, "Member 'ABP_Mole_C::SM_EarthPile' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, DefaultSceneRoot) == 0x0002C8, "Member 'ABP_Mole_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, TL_Scale_Alpha_849156044D51F86C3EEB5B94518A081C) == 0x0002D0, "Member 'ABP_Mole_C::TL_Scale_Alpha_849156044D51F86C3EEB5B94518A081C' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, TL_Scale__Direction_849156044D51F86C3EEB5B94518A081C) == 0x0002D4, "Member 'ABP_Mole_C::TL_Scale__Direction_849156044D51F86C3EEB5B94518A081C' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, TL_Scale) == 0x0002D8, "Member 'ABP_Mole_C::TL_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, TL_Location_Alpha_3474791442615524AD4F2A9621DF9777) == 0x0002E0, "Member 'ABP_Mole_C::TL_Location_Alpha_3474791442615524AD4F2A9621DF9777' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, TL_Location__Direction_3474791442615524AD4F2A9621DF9777) == 0x0002E4, "Member 'ABP_Mole_C::TL_Location__Direction_3474791442615524AD4F2A9621DF9777' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, TL_Location) == 0x0002E8, "Member 'ABP_Mole_C::TL_Location' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, MoleTimer) == 0x0002F0, "Member 'ABP_Mole_C::MoleTimer' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, MoleActive) == 0x0002F8, "Member 'ABP_Mole_C::MoleActive' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, MoleActiveTimer) == 0x000300, "Member 'ABP_Mole_C::MoleActiveTimer' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, Completed) == 0x000308, "Member 'ABP_Mole_C::Completed' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, TeamId) == 0x000309, "Member 'ABP_Mole_C::TeamId' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, PopUpDelayMin) == 0x000310, "Member 'ABP_Mole_C::PopUpDelayMin' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, PopUpDelayMax) == 0x000318, "Member 'ABP_Mole_C::PopUpDelayMax' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, UpTimeMin) == 0x000320, "Member 'ABP_Mole_C::UpTimeMin' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, UpTimeMax) == 0x000328, "Member 'ABP_Mole_C::UpTimeMax' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, UpDownTime) == 0x000330, "Member 'ABP_Mole_C::UpDownTime' has a wrong offset!");
static_assert(offsetof(ABP_Mole_C, ActiveDelay) == 0x000334, "Member 'ABP_Mole_C::ActiveDelay' has a wrong offset!");

}

