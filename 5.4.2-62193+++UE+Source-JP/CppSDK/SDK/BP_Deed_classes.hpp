#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Deed

#include "Basic.hpp"

#include "BP_HeldMessItem_classes.hpp"
#include "Engine_structs.hpp"
#include "JP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_DeedMessageType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Deed.BP_Deed_C
// 0x0160 (0x0770 - 0x0610)
class ABP_Deed_C final : public ABP_HeldMessItem_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Deed_C;                          // 0x0610(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PingableComponent_C*                BP_PingableComponent;                              // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_POI_C*                              AC_POI;                                            // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTeam                                  OwningTeam;                                        // 0x0630(0x0038)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	FMulticastInlineDelegateProperty_             On_DeliveredToTeamSafe;                            // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                Spawn_Position;                                    // 0x0678(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_CaptureTheFlagDeedSafe_C*>   Safes;                                             // 0x0690(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ACharacter*                             HeldBy;                                            // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialNormal;                                    // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MaterialInteract;                                  // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<ETeamType, TSoftObjectPtr<class UMaterialInterface>> Normal_TeamMaterials;                              // 0x06B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TMap<ETeamType, TSoftObjectPtr<class UMaterialInterface>> Interactable_TeamMateriale;                        // 0x0708(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class APawn*                                  LastOwner;                                         // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         OwningTeamID;                                      // 0x0760(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BelowDeathPlane();
	void BndEvt__BP_Deed_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void DeedHandInIsValid(class ABP_CaptureTheFlagDeedSafe_C* Safe, bool* Return, uint8* WinningTeam);
	void DetermineEventMessageToSend(class APlayerController* ControllerIn, class APlayerController** ControllerOut, E_DeedMessageType* MessageType);
	void DisableCollisionAndHide();
	void EnableCollisionAndShow();
	void ExecuteUbergraph_BP_Deed(int32 EntryPoint);
	void GrippedLocal(class ACharacter* GrippingCharacter);
	void HandInCosmetics();
	void IsCurrentHolderOnDeedTeam(bool* SameTeam);
	void On_DeliveredToTeamSafe__DelegateSignature(uint8 WinningTeamID);
	bool Picked_Up_by_Owning_Team();
	void PostInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void ReceiveDestroyed();
	void Released_Local(class ACharacter* ReleasingCharacter);
	void SendDeedEvent(class APlayerController* Controller, E_DeedMessageType MessageType);
	void SetCosmetics();
	void SlowDownHoldingCharacter(bool EnableSlow);
	void Toggle_Relevant_Safe_Highlight(bool Show);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Deed_C">();
	}
	static class ABP_Deed_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Deed_C>();
	}
};
static_assert(alignof(ABP_Deed_C) == 0x000010, "Wrong alignment on ABP_Deed_C");
static_assert(sizeof(ABP_Deed_C) == 0x000770, "Wrong size on ABP_Deed_C");
static_assert(offsetof(ABP_Deed_C, UberGraphFrame_BP_Deed_C) == 0x000610, "Member 'ABP_Deed_C::UberGraphFrame_BP_Deed_C' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, BP_PingableComponent) == 0x000618, "Member 'ABP_Deed_C::BP_PingableComponent' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, Box) == 0x000620, "Member 'ABP_Deed_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, AC_POI) == 0x000628, "Member 'ABP_Deed_C::AC_POI' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, OwningTeam) == 0x000630, "Member 'ABP_Deed_C::OwningTeam' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, On_DeliveredToTeamSafe) == 0x000668, "Member 'ABP_Deed_C::On_DeliveredToTeamSafe' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, Spawn_Position) == 0x000678, "Member 'ABP_Deed_C::Spawn_Position' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, Safes) == 0x000690, "Member 'ABP_Deed_C::Safes' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, HeldBy) == 0x0006A0, "Member 'ABP_Deed_C::HeldBy' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, MaterialNormal) == 0x0006A8, "Member 'ABP_Deed_C::MaterialNormal' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, MaterialInteract) == 0x0006B0, "Member 'ABP_Deed_C::MaterialInteract' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, Normal_TeamMaterials) == 0x0006B8, "Member 'ABP_Deed_C::Normal_TeamMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, Interactable_TeamMateriale) == 0x000708, "Member 'ABP_Deed_C::Interactable_TeamMateriale' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, LastOwner) == 0x000758, "Member 'ABP_Deed_C::LastOwner' has a wrong offset!");
static_assert(offsetof(ABP_Deed_C, OwningTeamID) == 0x000760, "Member 'ABP_Deed_C::OwningTeamID' has a wrong offset!");

}

