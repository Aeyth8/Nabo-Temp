#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Kevin_Default_PP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK::Params
{

// Function ABP_Kevin_Default_PP.ABP_Kevin_Default_PP_C.AnimGraph
// 0x0020 (0x0020 - 0x0000)
struct ABP_Kevin_Default_PP_C_AnimGraph final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimGraph_0;                                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Kevin_Default_PP_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Kevin_Default_PP_C_AnimGraph");
static_assert(sizeof(ABP_Kevin_Default_PP_C_AnimGraph) == 0x000020, "Wrong size on ABP_Kevin_Default_PP_C_AnimGraph");
static_assert(offsetof(ABP_Kevin_Default_PP_C_AnimGraph, InPose) == 0x000000, "Member 'ABP_Kevin_Default_PP_C_AnimGraph::InPose' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_AnimGraph, AnimGraph_0) == 0x000010, "Member 'ABP_Kevin_Default_PP_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Kevin_Default_PP.ABP_Kevin_Default_PP_C.BlueprintThreadSafeUpdateAnimation
// 0x0040 (0x0040 - 0x0000)
struct ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation) == 0x000008, "Wrong alignment on ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation) == 0x000040, "Wrong size on ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakVector_X) == 0x000008, "Member 'ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakVector_Y) == 0x000010, "Member 'ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakVector_Z) == 0x000018, "Member 'ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation, CallFunc_VSize_ReturnValue) == 0x000038, "Member 'ABP_Kevin_Default_PP_C_BlueprintThreadSafeUpdateAnimation::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function ABP_Kevin_Default_PP.ABP_Kevin_Default_PP_C.ExecuteUbergraph_ABP_Kevin_Default_PP
// 0x00A0 (0x00A0 - 0x0000)
struct ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSimSpaceSettings                      K2Node_MakeStruct_SimSpaceSettings;                // 0x0030(0x0060)(IsPlainOldData, NoDestructor)
	class ABP_MovementCharacter_C*                K2Node_DynamicCast_AsBP_Movement_Character;        // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP) == 0x000008, "Wrong alignment on ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP");
static_assert(sizeof(ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP) == 0x0000A0, "Wrong size on ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP");
static_assert(offsetof(ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP, EntryPoint) == 0x000000, "Member 'ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000010, "Member 'ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000028, "Member 'ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP, K2Node_MakeStruct_SimSpaceSettings) == 0x000030, "Member 'ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP::K2Node_MakeStruct_SimSpaceSettings' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP, K2Node_DynamicCast_AsBP_Movement_Character) == 0x000090, "Member 'ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP::K2Node_DynamicCast_AsBP_Movement_Character' has a wrong offset!");
static_assert(offsetof(ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'ABP_Kevin_Default_PP_C_ExecuteUbergraph_ABP_Kevin_Default_PP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

