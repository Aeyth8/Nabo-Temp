#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MovementCharacter

#include "Basic.hpp"

#include "E_OverlayStates_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ImpactEffect_structs.hpp"
#include "PhysicsControl_structs.hpp"
#include "JP_structs.hpp"
#include "JP_classes.hpp"
#include "E_MaterialTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MovementCharacter.BP_MovementCharacter_C
// 0x0340 (0x0A10 - 0x06D0)
class ABP_MovementCharacter_C : public ACharacterJP
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPhysicsControlComponent*               PhysicsControl;                                    // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FirstPersonCamera;                                 // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mesh1P;                                            // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_IWPhysicalHitComponent_C*           Physical_Hit_Component;                            // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevVelocity;                                      // 0x0700(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputDirection;                                    // 0x0720(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ProjectedVelocity;                                 // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputSpeed;                                        // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCustomAirAccel;                                   // 0x0748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_749[0x7];                                      // 0x0749(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AccelSpeedCap;                                     // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxAccelSpeed;                                     // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Accelspeed;                                        // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpulseVector;                                     // 0x0768(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JumpPressed;                                       // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_781[0x7];                                      // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Default_friction;                                  // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxWalkSpeed;                                      // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Default_braking;                                   // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FrameTime;                                         // 0x07A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBunnyhopCap;                                      // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A9[0x7];                                      // 0x07A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BunnyhopCapFactor;                                 // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AppliedCap;                                        // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        bhopCapSpeed;                                      // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BhopBleedFactor;                                   // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AirAccelerate;                                     // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyingAirAccel;                                  // 0x07D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D9[0x7];                                      // 0x07D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LandSndCooldwnTotal;                               // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyingBhopCap;                                   // 0x07E8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsListenServer;                                    // 0x07E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7EA[0x6];                                      // 0x07EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          SelectedCharacter;                                 // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Delta_Seconds;                                     // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDied;                                            // 0x0800(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bCrouching;                                        // 0x0810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_811[0x7];                                      // 0x0811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    MovementTable;                                     // 0x0818(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	EGaitJP                                       CurrentGait;                                       // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WantsToCrouch;                                     // 0x0829(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82A[0x6];                                      // 0x082A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_JP_TPP_C*                          ThreeP_AnimInstance;                               // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UABP_JP_FPP_C*                          OneP_AnimInstance;                                 // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CrouchJump;                                        // 0x0840(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCrouchingInAir;                                   // 0x0841(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_842[0x6];                                      // 0x0842(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentMovement_Speed;                             // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedSidewaysMovementSpeedCoefficient;            // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedBackwardsMovementSpeedCoefficient;           // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAirControl;                                 // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintThresholdd;                                  // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterName                                CharacterName;                                     // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterRole                                CharacterRole;                                     // 0x0871(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Firstcrouch;                                       // 0x0872(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_873[0x5];                                      // 0x0873(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CameraCrouchHeightReduction;                       // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCrouchEnd;                                        // 0x0880(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_881[0x7];                                      // 0x0881(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          NewVar;                                            // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SK_Strength_Multiplier;                            // 0x0890(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_894[0x4];                                      // 0x0894(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPhysicsControlLimbSetupData>   Limb_Setup_Data;                                   // 0x0898(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FPhysicsControlNames                   WorldSpace_All_Controls;                           // 0x08A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FPhysicsControlNames> WorldSpace_Limb_Controls;                          // 0x08B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         WorldSpace_Linear_Strength;                        // 0x0908(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorldSpace_Angular_Strength;                       // 0x090C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPhysicsControlNames                   ParentSpace_All_Controls;                          // 0x0910(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FPhysicsControlNames> ParentSpace_Limb_Controls;                         // 0x0920(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FPhysicsControlNames                   All_Body_Modifiers;                                // 0x0970(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FPhysicsControlNames> Limb_Body_Modifiers;                               // 0x0980(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         AA_Strength;                                       // 0x09D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Hit_Bone_Name;                                     // 0x09D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRagdolling;                                       // 0x09DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterSize                                CharacterSize;                                     // 0x09DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stationary;                                        // 0x09DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableTPPInstance;                               // 0x09DF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsAsset*                          RagdollPhysicsAsset;                               // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPhysicsAsset*                          HitboxPhysicsAsset;                                // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnLanding;                                         // 0x09F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FActiveGameplayEffectHandle            StealthEffectHandle;                               // 0x0A00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWalkingBackwards;                                // 0x0A08(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AccelerateAir(const struct FVector& ForwardVector, double ForwardAxis, const struct FVector& SideVector, double SideAxis, double* CalcMaxAir, struct FVector* AirAccelDir, bool* ApplyingAirAccel_0);
	void AirControlChanged(double NewAirControl);
	void ApplyBhopCap(double* bhopCapNewSpeed, struct FVector* bhopCapVector, bool* Applyingcap);
	void CheckCrouch();
	void Crouch_Start();
	void Crouch_Stop();
	void ExecuteUbergraph_BP_MovementCharacter(int32 EntryPoint);
	void Get1PMesh(class USkeletalMeshComponent** OnePMesh);
	void Get3PMesh(class USkeletalMeshComponent** ThreePMesh);
	void GetAnimBPs(TArray<class UAnimInstance*>* AnimBPs);
	void GetCharacterName(ECharacterName* CharacterName_0);
	void GetCharacterSize(ECharacterSize* CharacterSize_0);
	void GetDurabilityCostWhenHit(double* Amount);
	void GetGaitFromMovementSpeed(EGaitJP* Gait);
	void GetGuardDogTargetOffset(struct FVector* TargetOffset);
	void GetInventory(class UShopInteractionAC_C** Inventory);
	void GetIsDead(bool* Dead);
	void GetJPPlayerController(class APlayerControllerJP** PlayerController);
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void HitReactionImpact(const struct FVector& HitLocation, class FName bone);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void InitializeAttributes();
	void InitializeMovementSettings();
	void InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Crouch_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CrouchToggle_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_SprintDash_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void JumpVelocityChanged(double JumpVelocity);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void MovementInputPreProcess(struct FVector& WorldDirection, float& ScaleValue, bool& bForce);
	void MovementSpeedChanged(double NewMovementSpeed);
	void OnAimSpeedCoefficientChanged(float SprintSpeed);
	void OnAirControlChanged(float AirControl);
	void OnCrouchJumpVelocityCoefficientChanged(float CrouchJumpVelocityCoefficient);
	void OnCrouchSpeedCoefficientChanged(float CrouchSpeed);
	void OnDied__DelegateSignature(E_OverlayStates Weapon);
	void OnJumpVelocityChanged(float JumpVelocity);
	void OnLanded(const struct FHitResult& Hit);
	void OnLanding__DelegateSignature(const struct FHitResult& Hit);
	void OnMovementSpeedChanged(float MovementSpeed);
	void OnNotStationary();
	void OnSprintSpeedCoefficientChanged(float SprintSpeed);
	void OnStationary();
	void Owner_Enable_TPP_Anim_Instance(bool Enable);
	void Owner_Set_Anim_Instances(class AController* Target);
	void PressedJump();
	void Query_is_Stationary();
	void ReceiveBeginPlay();
	void ReceivePossessed(class AController* NewController);
	void ReceiveRestarted();
	void ReceiveTick(float DeltaSeconds);
	void ReleasedJump();
	void RemoveFriction();
	void ResetAirControl();
	void ResetFriction();
	void ReverseMovementDirectionPreProcess(double ScaleValue, double* ModifiedValue);
	void Server_CrouchJump(bool CrouchJump_0);
	void ServerRemoveFriction();
	void ServerResetFriction();
	void SetIsDead(bool Dead, const struct FVector& OptionalVelocity, const struct FKillInfo& KillInfo);
	void SetRagdollPhysicsAsset();
	void StartHeadbob();
	void StopHeadBob();
	void UpdateGait();
	void UserConstructionScript();

	bool CanJumpInternal() const;
	void GetAimMovementSpeedCoefficient(float* Initial_Aim_Movement_Speed_Coefficient) const;
	void GetCrouchJumpVelocityCoefficient(float* Crouch_Jump_Velocity_Coefficient) const;
	void GetCrouchMovementCoefficient(float* Crouch_Coefficient) const;
	void GetInitialAirControl(float* Initial_Jump_Velocity) const;
	void GetInitialJumpVelocity(float* Initial_Jump_Velocity) const;
	void GetInitialMaxAcceleration(float* InitialMovementSpeed) const;
	void GetInitialMovementSpeed(float* InitialMovementSpeed) const;
	void GetSprintMovementCoefficient(float* Sprint_Coefficient) const;
	void Strafing_Input_Pre_Process(const struct FVector& World_Direction, double Scale_Value, double* ModifiedScale) const;
	void WalkingBackwardsInputPreProcess(const struct FVector& World_Direction, double Scale_Value, double* ModifiedMovementScale) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MovementCharacter_C">();
	}
	static class ABP_MovementCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MovementCharacter_C>();
	}
};
static_assert(alignof(ABP_MovementCharacter_C) == 0x000010, "Wrong alignment on ABP_MovementCharacter_C");
static_assert(sizeof(ABP_MovementCharacter_C) == 0x000A10, "Wrong size on ABP_MovementCharacter_C");
static_assert(offsetof(ABP_MovementCharacter_C, UberGraphFrame) == 0x0006D0, "Member 'ABP_MovementCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, PhysicsControl) == 0x0006D8, "Member 'ABP_MovementCharacter_C::PhysicsControl' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, FirstPersonCamera) == 0x0006E0, "Member 'ABP_MovementCharacter_C::FirstPersonCamera' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Mesh1P) == 0x0006E8, "Member 'ABP_MovementCharacter_C::Mesh1P' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Physical_Hit_Component) == 0x0006F0, "Member 'ABP_MovementCharacter_C::Physical_Hit_Component' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, SpringArm) == 0x0006F8, "Member 'ABP_MovementCharacter_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, PrevVelocity) == 0x000700, "Member 'ABP_MovementCharacter_C::PrevVelocity' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Speed) == 0x000718, "Member 'ABP_MovementCharacter_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, InputDirection) == 0x000720, "Member 'ABP_MovementCharacter_C::InputDirection' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, ProjectedVelocity) == 0x000738, "Member 'ABP_MovementCharacter_C::ProjectedVelocity' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, InputSpeed) == 0x000740, "Member 'ABP_MovementCharacter_C::InputSpeed' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, bCustomAirAccel) == 0x000748, "Member 'ABP_MovementCharacter_C::bCustomAirAccel' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, AccelSpeedCap) == 0x000750, "Member 'ABP_MovementCharacter_C::AccelSpeedCap' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, MaxAccelSpeed) == 0x000758, "Member 'ABP_MovementCharacter_C::MaxAccelSpeed' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Accelspeed) == 0x000760, "Member 'ABP_MovementCharacter_C::Accelspeed' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, ImpulseVector) == 0x000768, "Member 'ABP_MovementCharacter_C::ImpulseVector' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, JumpPressed) == 0x000780, "Member 'ABP_MovementCharacter_C::JumpPressed' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Default_friction) == 0x000788, "Member 'ABP_MovementCharacter_C::Default_friction' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, MaxWalkSpeed) == 0x000790, "Member 'ABP_MovementCharacter_C::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Default_braking) == 0x000798, "Member 'ABP_MovementCharacter_C::Default_braking' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, FrameTime) == 0x0007A0, "Member 'ABP_MovementCharacter_C::FrameTime' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, bBunnyhopCap) == 0x0007A8, "Member 'ABP_MovementCharacter_C::bBunnyhopCap' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, BunnyhopCapFactor) == 0x0007B0, "Member 'ABP_MovementCharacter_C::BunnyhopCapFactor' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, AppliedCap) == 0x0007B8, "Member 'ABP_MovementCharacter_C::AppliedCap' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, bhopCapSpeed) == 0x0007C0, "Member 'ABP_MovementCharacter_C::bhopCapSpeed' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, BhopBleedFactor) == 0x0007C8, "Member 'ABP_MovementCharacter_C::BhopBleedFactor' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, AirAccelerate) == 0x0007D0, "Member 'ABP_MovementCharacter_C::AirAccelerate' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, ApplyingAirAccel) == 0x0007D8, "Member 'ABP_MovementCharacter_C::ApplyingAirAccel' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, LandSndCooldwnTotal) == 0x0007E0, "Member 'ABP_MovementCharacter_C::LandSndCooldwnTotal' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, ApplyingBhopCap) == 0x0007E8, "Member 'ABP_MovementCharacter_C::ApplyingBhopCap' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, IsListenServer) == 0x0007E9, "Member 'ABP_MovementCharacter_C::IsListenServer' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, SelectedCharacter) == 0x0007F0, "Member 'ABP_MovementCharacter_C::SelectedCharacter' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Delta_Seconds) == 0x0007F8, "Member 'ABP_MovementCharacter_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, OnDied) == 0x000800, "Member 'ABP_MovementCharacter_C::OnDied' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, bCrouching) == 0x000810, "Member 'ABP_MovementCharacter_C::bCrouching' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, MovementTable) == 0x000818, "Member 'ABP_MovementCharacter_C::MovementTable' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, CurrentGait) == 0x000828, "Member 'ABP_MovementCharacter_C::CurrentGait' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, WantsToCrouch) == 0x000829, "Member 'ABP_MovementCharacter_C::WantsToCrouch' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, ThreeP_AnimInstance) == 0x000830, "Member 'ABP_MovementCharacter_C::ThreeP_AnimInstance' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, OneP_AnimInstance) == 0x000838, "Member 'ABP_MovementCharacter_C::OneP_AnimInstance' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, CrouchJump) == 0x000840, "Member 'ABP_MovementCharacter_C::CrouchJump' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, bCrouchingInAir) == 0x000841, "Member 'ABP_MovementCharacter_C::bCrouchingInAir' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, CurrentMovement_Speed) == 0x000848, "Member 'ABP_MovementCharacter_C::CurrentMovement_Speed' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, CachedSidewaysMovementSpeedCoefficient) == 0x000850, "Member 'ABP_MovementCharacter_C::CachedSidewaysMovementSpeedCoefficient' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, CachedBackwardsMovementSpeedCoefficient) == 0x000858, "Member 'ABP_MovementCharacter_C::CachedBackwardsMovementSpeedCoefficient' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, CurrentAirControl) == 0x000860, "Member 'ABP_MovementCharacter_C::CurrentAirControl' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, SprintThresholdd) == 0x000868, "Member 'ABP_MovementCharacter_C::SprintThresholdd' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, CharacterName) == 0x000870, "Member 'ABP_MovementCharacter_C::CharacterName' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, CharacterRole) == 0x000871, "Member 'ABP_MovementCharacter_C::CharacterRole' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Firstcrouch) == 0x000872, "Member 'ABP_MovementCharacter_C::Firstcrouch' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, CameraCrouchHeightReduction) == 0x000878, "Member 'ABP_MovementCharacter_C::CameraCrouchHeightReduction' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, bCrouchEnd) == 0x000880, "Member 'ABP_MovementCharacter_C::bCrouchEnd' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, NewVar) == 0x000888, "Member 'ABP_MovementCharacter_C::NewVar' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, SK_Strength_Multiplier) == 0x000890, "Member 'ABP_MovementCharacter_C::SK_Strength_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Limb_Setup_Data) == 0x000898, "Member 'ABP_MovementCharacter_C::Limb_Setup_Data' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, WorldSpace_All_Controls) == 0x0008A8, "Member 'ABP_MovementCharacter_C::WorldSpace_All_Controls' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, WorldSpace_Limb_Controls) == 0x0008B8, "Member 'ABP_MovementCharacter_C::WorldSpace_Limb_Controls' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, WorldSpace_Linear_Strength) == 0x000908, "Member 'ABP_MovementCharacter_C::WorldSpace_Linear_Strength' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, WorldSpace_Angular_Strength) == 0x00090C, "Member 'ABP_MovementCharacter_C::WorldSpace_Angular_Strength' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, ParentSpace_All_Controls) == 0x000910, "Member 'ABP_MovementCharacter_C::ParentSpace_All_Controls' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, ParentSpace_Limb_Controls) == 0x000920, "Member 'ABP_MovementCharacter_C::ParentSpace_Limb_Controls' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, All_Body_Modifiers) == 0x000970, "Member 'ABP_MovementCharacter_C::All_Body_Modifiers' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Limb_Body_Modifiers) == 0x000980, "Member 'ABP_MovementCharacter_C::Limb_Body_Modifiers' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, AA_Strength) == 0x0009D0, "Member 'ABP_MovementCharacter_C::AA_Strength' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Hit_Bone_Name) == 0x0009D4, "Member 'ABP_MovementCharacter_C::Hit_Bone_Name' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, bRagdolling) == 0x0009DC, "Member 'ABP_MovementCharacter_C::bRagdolling' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, CharacterSize) == 0x0009DD, "Member 'ABP_MovementCharacter_C::CharacterSize' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, Stationary) == 0x0009DE, "Member 'ABP_MovementCharacter_C::Stationary' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, bDisableTPPInstance) == 0x0009DF, "Member 'ABP_MovementCharacter_C::bDisableTPPInstance' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, RagdollPhysicsAsset) == 0x0009E0, "Member 'ABP_MovementCharacter_C::RagdollPhysicsAsset' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, HitboxPhysicsAsset) == 0x0009E8, "Member 'ABP_MovementCharacter_C::HitboxPhysicsAsset' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, OnLanding) == 0x0009F0, "Member 'ABP_MovementCharacter_C::OnLanding' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, StealthEffectHandle) == 0x000A00, "Member 'ABP_MovementCharacter_C::StealthEffectHandle' has a wrong offset!");
static_assert(offsetof(ABP_MovementCharacter_C, IsWalkingBackwards) == 0x000A08, "Member 'ABP_MovementCharacter_C::IsWalkingBackwards' has a wrong offset!");

}

