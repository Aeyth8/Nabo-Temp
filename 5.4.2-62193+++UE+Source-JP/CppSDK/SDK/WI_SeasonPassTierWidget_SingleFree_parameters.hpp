#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_SeasonPassTierWidget_SingleFree

#include "Basic.hpp"

#include "JP_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WI_SeasonPassTierWidget_SingleFree.WI_SeasonPassTierWidget_SingleFree_C.DoApplyViewModel
// 0x00C0 (0x00C0 - 0x0000)
struct WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel final
{
public:
	struct FSeasonPassTierViewModel               ViewModel;                                         // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0048(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A0(0x0010)()
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPercent_InPercent_ImplicitCast;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel) == 0x000008, "Wrong alignment on WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel");
static_assert(sizeof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel) == 0x0000C0, "Wrong size on WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, ViewModel) == 0x000000, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::ViewModel' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, Temp_byte_Variable) == 0x000028, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, Temp_bool_Variable) == 0x000029, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, Temp_byte_Variable_1) == 0x00002A, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, Temp_byte_Variable_2) == 0x00002B, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, Temp_bool_Variable_1) == 0x00002C, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, Temp_byte_Variable_3) == 0x00002D, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, Temp_byte_Variable_4) == 0x00002E, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, Temp_byte_Variable_5) == 0x00002F, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000030, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, K2Node_Select_Default) == 0x000038, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, K2Node_Select_Default_1) == 0x000039, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, Temp_bool_Variable_2) == 0x00003A, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, K2Node_Select_Default_2) == 0x00003B, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000040, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, K2Node_MakeStruct_FormatArgumentData) == 0x000048, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, K2Node_MakeArray_Array) == 0x000090, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, CallFunc_Format_ReturnValue) == 0x0000A0, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x0000B0, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel, CallFunc_SetPercent_InPercent_ImplicitCast) == 0x0000B8, "Member 'WI_SeasonPassTierWidget_SingleFree_C_DoApplyViewModel::CallFunc_SetPercent_InPercent_ImplicitCast' has a wrong offset!");

// Function WI_SeasonPassTierWidget_SingleFree.WI_SeasonPassTierWidget_SingleFree_C.ExecuteUbergraph_WI_SeasonPassTierWidget_SingleFree
// 0x0030 (0x0030 - 0x0000)
struct WI_SeasonPassTierWidget_SingleFree_C_ExecuteUbergraph_WI_SeasonPassTierWidget_SingleFree final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSeasonPassTierViewModel               K2Node_Event_ViewModel;                            // 0x0008(0x0028)(ConstParm)
};
static_assert(alignof(WI_SeasonPassTierWidget_SingleFree_C_ExecuteUbergraph_WI_SeasonPassTierWidget_SingleFree) == 0x000008, "Wrong alignment on WI_SeasonPassTierWidget_SingleFree_C_ExecuteUbergraph_WI_SeasonPassTierWidget_SingleFree");
static_assert(sizeof(WI_SeasonPassTierWidget_SingleFree_C_ExecuteUbergraph_WI_SeasonPassTierWidget_SingleFree) == 0x000030, "Wrong size on WI_SeasonPassTierWidget_SingleFree_C_ExecuteUbergraph_WI_SeasonPassTierWidget_SingleFree");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_ExecuteUbergraph_WI_SeasonPassTierWidget_SingleFree, EntryPoint) == 0x000000, "Member 'WI_SeasonPassTierWidget_SingleFree_C_ExecuteUbergraph_WI_SeasonPassTierWidget_SingleFree::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_ExecuteUbergraph_WI_SeasonPassTierWidget_SingleFree, K2Node_Event_ViewModel) == 0x000008, "Member 'WI_SeasonPassTierWidget_SingleFree_C_ExecuteUbergraph_WI_SeasonPassTierWidget_SingleFree::K2Node_Event_ViewModel' has a wrong offset!");

// Function WI_SeasonPassTierWidget_SingleFree.WI_SeasonPassTierWidget_SingleFree_C.K2_ApplyViewModel
// 0x0028 (0x0028 - 0x0000)
struct WI_SeasonPassTierWidget_SingleFree_C_K2_ApplyViewModel final
{
public:
	struct FSeasonPassTierViewModel               ViewModel;                                         // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WI_SeasonPassTierWidget_SingleFree_C_K2_ApplyViewModel) == 0x000008, "Wrong alignment on WI_SeasonPassTierWidget_SingleFree_C_K2_ApplyViewModel");
static_assert(sizeof(WI_SeasonPassTierWidget_SingleFree_C_K2_ApplyViewModel) == 0x000028, "Wrong size on WI_SeasonPassTierWidget_SingleFree_C_K2_ApplyViewModel");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_K2_ApplyViewModel, ViewModel) == 0x000000, "Member 'WI_SeasonPassTierWidget_SingleFree_C_K2_ApplyViewModel::ViewModel' has a wrong offset!");

// Function WI_SeasonPassTierWidget_SingleFree.WI_SeasonPassTierWidget_SingleFree_C.UpdateReward
// 0x0058 (0x0058 - 0x0000)
struct WI_SeasonPassTierWidget_SingleFree_C_UpdateReward final
{
public:
	struct FSeasonPassReward                      OutReward;                                         // 0x0000(0x0040)(Edit, BlueprintVisible)
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue;      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsSeason_Pass_Single_Reward_Entry_Widget; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_SeasonPassTierWidget_SingleFree_C_UpdateReward) == 0x000008, "Wrong alignment on WI_SeasonPassTierWidget_SingleFree_C_UpdateReward");
static_assert(sizeof(WI_SeasonPassTierWidget_SingleFree_C_UpdateReward) == 0x000058, "Wrong size on WI_SeasonPassTierWidget_SingleFree_C_UpdateReward");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_UpdateReward, OutReward) == 0x000000, "Member 'WI_SeasonPassTierWidget_SingleFree_C_UpdateReward::OutReward' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_UpdateReward, CallFunc_LoadClassAsset_Blocking_ReturnValue) == 0x000040, "Member 'WI_SeasonPassTierWidget_SingleFree_C_UpdateReward::CallFunc_LoadClassAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_UpdateReward, K2Node_ClassDynamicCast_AsSeason_Pass_Single_Reward_Entry_Widget) == 0x000048, "Member 'WI_SeasonPassTierWidget_SingleFree_C_UpdateReward::K2Node_ClassDynamicCast_AsSeason_Pass_Single_Reward_Entry_Widget' has a wrong offset!");
static_assert(offsetof(WI_SeasonPassTierWidget_SingleFree_C_UpdateReward, K2Node_ClassDynamicCast_bSuccess) == 0x000050, "Member 'WI_SeasonPassTierWidget_SingleFree_C_UpdateReward::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");

}

