#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_HealDirection

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WI_HealDirection.WI_HealDirection_C
// 0x0040 (0x0320 - 0x02E0)
class UWI_HealDirection_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Fade;                                              // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           HitAnchor;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        Lifetime;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldHitPosition;                                  // 0x0308(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void Construct();
	void DrawLocationOnAvatarPlane();
	void DrawLocationOnSwitchedPlane();
	void ExecuteUbergraph_WI_HealDirection(int32 EntryPoint);
	struct FVector GetLocationOnProjectedAvatarPlane();
	void GetNormalizedScreenSpacePosition(struct FVector2D* Return_Value, double* Angle);
	struct FVector GetOwnerLocation();
	const struct FTransform GetOwnerTransform();
	void GetPlaneData(struct FPlane* OutPlane);
	void RemoveWidget();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WI_HealDirection_C">();
	}
	static class UWI_HealDirection_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWI_HealDirection_C>();
	}
};
static_assert(alignof(UWI_HealDirection_C) == 0x000008, "Wrong alignment on UWI_HealDirection_C");
static_assert(sizeof(UWI_HealDirection_C) == 0x000320, "Wrong size on UWI_HealDirection_C");
static_assert(offsetof(UWI_HealDirection_C, UberGraphFrame) == 0x0002E0, "Member 'UWI_HealDirection_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWI_HealDirection_C, Fade) == 0x0002E8, "Member 'UWI_HealDirection_C::Fade' has a wrong offset!");
static_assert(offsetof(UWI_HealDirection_C, HitAnchor) == 0x0002F0, "Member 'UWI_HealDirection_C::HitAnchor' has a wrong offset!");
static_assert(offsetof(UWI_HealDirection_C, Image) == 0x0002F8, "Member 'UWI_HealDirection_C::Image' has a wrong offset!");
static_assert(offsetof(UWI_HealDirection_C, Lifetime) == 0x000300, "Member 'UWI_HealDirection_C::Lifetime' has a wrong offset!");
static_assert(offsetof(UWI_HealDirection_C, WorldHitPosition) == 0x000308, "Member 'UWI_HealDirection_C::WorldHitPosition' has a wrong offset!");

}

