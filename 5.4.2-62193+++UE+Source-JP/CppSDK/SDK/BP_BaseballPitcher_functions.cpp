#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseballPitcher

#include "Basic.hpp"

#include "BP_BaseballPitcher_classes.hpp"
#include "BP_BaseballPitcher_parameters.hpp"


namespace SDK
{

// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Audio_TryPlayEnterIdleMode
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::Audio_TryPlayEnterIdleMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Audio_TryPlayEnterIdleMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.CanSeeComponent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_BaseballPitcher_C::CanSeeComponent(class USceneComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "CanSeeComponent");

	Params::BP_BaseballPitcher_C_CanSeeComponent Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Delayed Disable Tick
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::Delayed_Disable_Tick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Delayed Disable Tick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Delayed Disable Tick Timer Elapsed
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::Delayed_Disable_Tick_Timer_Elapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Delayed Disable Tick Timer Elapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.ExecuteUbergraph_BP_BaseballPitcher
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseballPitcher_C::ExecuteUbergraph_BP_BaseballPitcher(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "ExecuteUbergraph_BP_BaseballPitcher");

	Params::BP_BaseballPitcher_C_ExecuteUbergraph_BP_BaseballPitcher Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Fire Projectile
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::Fire_Projectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Fire Projectile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Firing
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::Firing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Firing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Get Closest Overlapping Actor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AActor*                           TargetActor                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    HighPriorityFound                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseballPitcher_C::Get_Closest_Overlapping_Actor(TArray<class AActor*>& Actors, class AActor** TargetActor, bool* HighPriorityFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Get Closest Overlapping Actor");

	Params::BP_BaseballPitcher_C_Get_Closest_Overlapping_Actor Parms{};

	Parms.Actors = std::move(Actors);

	UObject::ProcessEvent(Func, &Parms);

	Actors = std::move(Parms.Actors);

	if (TargetActor != nullptr)
		*TargetActor = Parms.TargetActor;

	if (HighPriorityFound != nullptr)
		*HighPriorityFound = Parms.HighPriorityFound;
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.GetCenterLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseballPitcher_C::GetCenterLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "GetCenterLocation");

	Params::BP_BaseballPitcher_C_GetCenterLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.GetFirstOverlappingActorWithHighPriority
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Return                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    HighPriorityFound                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseballPitcher_C::GetFirstOverlappingActorWithHighPriority(class AActor** Return, bool* HighPriorityFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "GetFirstOverlappingActorWithHighPriority");

	Params::BP_BaseballPitcher_C_GetFirstOverlappingActorWithHighPriority Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;

	if (HighPriorityFound != nullptr)
		*HighPriorityFound = Parms.HighPriorityFound;
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.GetSquaredDistanceToFireLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneComponent*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_BaseballPitcher_C::GetSquaredDistanceToFireLocation(class USceneComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "GetSquaredDistanceToFireLocation");

	Params::BP_BaseballPitcher_C_GetSquaredDistanceToFireLocation Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Idle
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::Idle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Idle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.On Check For Targets Timer Elapsed
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::On_Check_For_Targets_Timer_Elapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "On Check For Targets Timer Elapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.On FireProjectileTimer Elapsed
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::On_FireProjectileTimer_Elapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "On FireProjectileTimer Elapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.OnRep_OwningTeamID
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::OnRep_OwningTeamID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "OnRep_OwningTeamID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.OnRep_TurretState
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::OnRep_TurretState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "OnRep_TurretState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BaseballPitcher_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_BaseballPitcher_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseballPitcher_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "ReceiveTick");

	Params::BP_BaseballPitcher_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Sabotage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SabotagingActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_BaseballPitcher_C::Sabotage(class AActor* SabotagingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Sabotage");

	Params::BP_BaseballPitcher_C_Sabotage Parms{};

	Parms.SabotagingActor = SabotagingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Set Turret Yaw Idle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::Set_Turret_Yaw_Idle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Set Turret Yaw Idle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Set Turret Yaw Towards Target
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::Set_Turret_Yaw_Towards_Target()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Set Turret Yaw Towards Target");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.SetCompatibleTargets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::SetCompatibleTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "SetCompatibleTargets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.SetupOutline
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::SetupOutline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "SetupOutline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.SetupPings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::SetupPings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "SetupPings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Start Check For Targets Timer
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::Start_Check_For_Targets_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Start Check For Targets Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Timeline__FinishedFunc
// (BlueprintEvent)

void ABP_BaseballPitcher_C::Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.Timeline__UpdateFunc
// (BlueprintEvent)

void ABP_BaseballPitcher_C::Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.TL_Firing__FinishedFunc
// (BlueprintEvent)

void ABP_BaseballPitcher_C::TL_Firing__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "TL_Firing__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.TL_Firing__UpdateFunc
// (BlueprintEvent)

void ABP_BaseballPitcher_C::TL_Firing__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "TL_Firing__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.TL_Warmup__FinishedFunc
// (BlueprintEvent)

void ABP_BaseballPitcher_C::TL_Warmup__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "TL_Warmup__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.TL_Warmup__UpdateFunc
// (BlueprintEvent)

void ABP_BaseballPitcher_C::TL_Warmup__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "TL_Warmup__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BaseballPitcher_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseballPitcher.BP_BaseballPitcher_C.IsAvailableForInteraction
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_BaseballPitcher_C::IsAvailableForInteraction(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseballPitcher_C", "IsAvailableForInteraction");

	Params::BP_BaseballPitcher_C_IsAvailableForInteraction Parms{};

	Parms.InteractingActor = InteractingActor;
	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

