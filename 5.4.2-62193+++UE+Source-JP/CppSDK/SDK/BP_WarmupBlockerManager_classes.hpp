#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WarmupBlockerManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WarmupBlockerManager.BP_WarmupBlockerManager_C
// 0x0040 (0x02D0 - 0x0290)
class ABP_WarmupBlockerManager_C final : public AWarmupActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         IsEnabled;                                         // 0x02A0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABp_WarmupBlocker_Spline_C*>     BoundsSplines;                                     // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	FMulticastInlineDelegateProperty_             On_WarmupBlockerRemoved;                           // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          WarmupFinished;                                    // 0x02C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CreateWidget();
	void DisableWarmup();
	void ExecuteUbergraph_BP_WarmupBlockerManager(int32 EntryPoint);
	void IntroFinished();
	void On_WarmupBlockerRemoved__DelegateSignature();
	void OnRep_IsEnabled();
	void PlayWarmupBlockersAboutToBeRemovedSound();
	void ReceiveBeginPlay();
	void ToggleBlocker(int32 Enabled);
	void UpdateCollisionAndVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WarmupBlockerManager_C">();
	}
	static class ABP_WarmupBlockerManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WarmupBlockerManager_C>();
	}
};
static_assert(alignof(ABP_WarmupBlockerManager_C) == 0x000008, "Wrong alignment on ABP_WarmupBlockerManager_C");
static_assert(sizeof(ABP_WarmupBlockerManager_C) == 0x0002D0, "Wrong size on ABP_WarmupBlockerManager_C");
static_assert(offsetof(ABP_WarmupBlockerManager_C, UberGraphFrame) == 0x000290, "Member 'ABP_WarmupBlockerManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WarmupBlockerManager_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_WarmupBlockerManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WarmupBlockerManager_C, IsEnabled) == 0x0002A0, "Member 'ABP_WarmupBlockerManager_C::IsEnabled' has a wrong offset!");
static_assert(offsetof(ABP_WarmupBlockerManager_C, BoundsSplines) == 0x0002A8, "Member 'ABP_WarmupBlockerManager_C::BoundsSplines' has a wrong offset!");
static_assert(offsetof(ABP_WarmupBlockerManager_C, On_WarmupBlockerRemoved) == 0x0002B8, "Member 'ABP_WarmupBlockerManager_C::On_WarmupBlockerRemoved' has a wrong offset!");
static_assert(offsetof(ABP_WarmupBlockerManager_C, WarmupFinished) == 0x0002C8, "Member 'ABP_WarmupBlockerManager_C::WarmupFinished' has a wrong offset!");

}

