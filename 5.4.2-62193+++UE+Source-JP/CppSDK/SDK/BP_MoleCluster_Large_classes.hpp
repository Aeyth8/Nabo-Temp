#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MoleCluster_Large

#include "Basic.hpp"

#include "BP_MoleCluster_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MoleCluster_Large.BP_MoleCluster_Large_C
// 0x0030 (0x0300 - 0x02D0)
class ABP_MoleCluster_Large_C final : public ABP_MoleCluster_C
{
public:
	class UBoxComponent*                          Box11;                                             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box2;                                              // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box9;                                              // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box4;                                              // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box1;                                              // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_0;                                             // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MoleCluster_Large_C">();
	}
	static class ABP_MoleCluster_Large_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MoleCluster_Large_C>();
	}
};
static_assert(alignof(ABP_MoleCluster_Large_C) == 0x000008, "Wrong alignment on ABP_MoleCluster_Large_C");
static_assert(sizeof(ABP_MoleCluster_Large_C) == 0x000300, "Wrong size on ABP_MoleCluster_Large_C");
static_assert(offsetof(ABP_MoleCluster_Large_C, Box11) == 0x0002D0, "Member 'ABP_MoleCluster_Large_C::Box11' has a wrong offset!");
static_assert(offsetof(ABP_MoleCluster_Large_C, Box2) == 0x0002D8, "Member 'ABP_MoleCluster_Large_C::Box2' has a wrong offset!");
static_assert(offsetof(ABP_MoleCluster_Large_C, Box9) == 0x0002E0, "Member 'ABP_MoleCluster_Large_C::Box9' has a wrong offset!");
static_assert(offsetof(ABP_MoleCluster_Large_C, Box4) == 0x0002E8, "Member 'ABP_MoleCluster_Large_C::Box4' has a wrong offset!");
static_assert(offsetof(ABP_MoleCluster_Large_C, Box1) == 0x0002F0, "Member 'ABP_MoleCluster_Large_C::Box1' has a wrong offset!");
static_assert(offsetof(ABP_MoleCluster_Large_C, Box_0) == 0x0002F8, "Member 'ABP_MoleCluster_Large_C::Box_0' has a wrong offset!");

}

