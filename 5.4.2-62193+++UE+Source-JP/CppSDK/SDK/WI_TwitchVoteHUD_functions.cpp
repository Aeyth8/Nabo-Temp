#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_TwitchVoteHUD

#include "Basic.hpp"

#include "WI_TwitchVoteHUD_classes.hpp"
#include "WI_TwitchVoteHUD_parameters.hpp"


namespace SDK
{

// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWI_TwitchVoteHUD_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.ExecuteUbergraph_WI_TwitchVoteHUD
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWI_TwitchVoteHUD_C::ExecuteUbergraph_WI_TwitchVoteHUD(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "ExecuteUbergraph_WI_TwitchVoteHUD");

	Params::WI_TwitchVoteHUD_C_ExecuteUbergraph_WI_TwitchVoteHUD Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.GetVoteTeamWidgetForTeamType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamType                               TeamType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWI_TwitchVoteHUDTeam_C*          VoteTeamWidget                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWI_TwitchVoteHUD_C::GetVoteTeamWidgetForTeamType(ETeamType TeamType, class UWI_TwitchVoteHUDTeam_C** VoteTeamWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "GetVoteTeamWidgetForTeamType");

	Params::WI_TwitchVoteHUD_C_GetVoteTeamWidgetForTeamType Parms{};

	Parms.TeamType = TeamType;

	UObject::ProcessEvent(Func, &Parms);

	if (VoteTeamWidget != nullptr)
		*VoteTeamWidget = Parms.VoteTeamWidget;
}


// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.OverlayIntro_FadeInComplete
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UOverlay*                         OverlayIntro                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWI_TwitchVoteHUD_C::OverlayIntro_FadeInComplete(class UOverlay* OverlayIntro)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "OverlayIntro_FadeInComplete");

	Params::WI_TwitchVoteHUD_C_OverlayIntro_FadeInComplete Parms{};

	Parms.OverlayIntro = OverlayIntro;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWI_TwitchVoteHUD_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "PreConstruct");

	Params::WI_TwitchVoteHUD_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UOverlay*                         OverlayIntro                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWI_TwitchVoteHUD_C::SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD(class UOverlay* OverlayIntro)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD");

	Params::WI_TwitchVoteHUD_C_SequenceEvent__ENTRYPOINTWI_TwitchVoteHUD Parms{};

	Parms.OverlayIntro = OverlayIntro;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SetChatInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Subject                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Description                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UWI_TwitchVoteHUD_C::SetChatInfo(const class FText& Subject, const class FText& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "SetChatInfo");

	Params::WI_TwitchVoteHUD_C_SetChatInfo Parms{};

	Parms.Subject = std::move(Subject);
	Parms.Description = std::move(Description);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SetTeamVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamType                               TeamType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWI_TwitchVoteHUD_C::SetTeamVisible(ETeamType TeamType, bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "SetTeamVisible");

	Params::WI_TwitchVoteHUD_C_SetTeamVisible Parms{};

	Parms.TeamType = TeamType;
	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SetTeamVotes
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamType                               TeamType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Votes                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWI_TwitchVoteHUD_C::SetTeamVotes(ETeamType TeamType, int32 Votes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "SetTeamVotes");

	Params::WI_TwitchVoteHUD_C_SetTeamVotes Parms{};

	Parms.TeamType = TeamType;
	Parms.Votes = Votes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SetVoteDescription
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             VoteDescription_0                                      (BlueprintVisible, BlueprintReadOnly, Parm)

void UWI_TwitchVoteHUD_C::SetVoteDescription(const class FText& VoteDescription_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "SetVoteDescription");

	Params::WI_TwitchVoteHUD_C_SetVoteDescription Parms{};

	Parms.VoteDescription_0 = std::move(VoteDescription_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_TwitchVoteHUD.WI_TwitchVoteHUD_C.SetVoteSubject
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             VoteSubject_0                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void UWI_TwitchVoteHUD_C::SetVoteSubject(const class FText& VoteSubject_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_TwitchVoteHUD_C", "SetVoteSubject");

	Params::WI_TwitchVoteHUD_C_SetVoteSubject Parms{};

	Parms.VoteSubject_0 = std::move(VoteSubject_0);

	UObject::ProcessEvent(Func, &Parms);
}

}

