#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_Indicator

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "S_IndicatorData_structs.hpp"
#include "JP_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AC_Indicator.AC_Indicator_C.CacheOriginalScale
// 0x0030 (0x0030 - 0x0000)
struct AC_Indicator_C_CacheOriginalScale final
{
public:
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_Map_Find_Value;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_OnScreenIndicator_C*                K2Node_DynamicCast_AsWI_on_Screen_Indicator;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_DefaultOnscreenWidgetScale_ImplicitCast; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_CacheOriginalScale) == 0x000008, "Wrong alignment on AC_Indicator_C_CacheOriginalScale");
static_assert(sizeof(AC_Indicator_C_CacheOriginalScale) == 0x000030, "Wrong size on AC_Indicator_C_CacheOriginalScale");
static_assert(offsetof(AC_Indicator_C_CacheOriginalScale, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000000, "Member 'AC_Indicator_C_CacheOriginalScale::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CacheOriginalScale, CallFunc_Map_Find_Value) == 0x000008, "Member 'AC_Indicator_C_CacheOriginalScale::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CacheOriginalScale, CallFunc_Map_Find_ReturnValue) == 0x000010, "Member 'AC_Indicator_C_CacheOriginalScale::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CacheOriginalScale, K2Node_DynamicCast_AsWI_on_Screen_Indicator) == 0x000018, "Member 'AC_Indicator_C_CacheOriginalScale::K2Node_DynamicCast_AsWI_on_Screen_Indicator' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CacheOriginalScale, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'AC_Indicator_C_CacheOriginalScale::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CacheOriginalScale, K2Node_VariableSet_DefaultOnscreenWidgetScale_ImplicitCast) == 0x000028, "Member 'AC_Indicator_C_CacheOriginalScale::K2Node_VariableSet_DefaultOnscreenWidgetScale_ImplicitCast' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.CheckLineOfSight
// 0x0170 (0x0170 - 0x0000)
struct AC_Indicator_C_CheckLineOfSight final
{
public:
	bool                                          In_Line_Of_Sight;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0038(0x0010)(ConstParm, ReferenceParm)
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0070(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_CheckLineOfSight) == 0x000008, "Wrong alignment on AC_Indicator_C_CheckLineOfSight");
static_assert(sizeof(AC_Indicator_C_CheckLineOfSight) == 0x000170, "Wrong size on AC_Indicator_C_CheckLineOfSight");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, In_Line_Of_Sight) == 0x000000, "Member 'AC_Indicator_C_CheckLineOfSight::In_Line_Of_Sight' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'AC_Indicator_C_CheckLineOfSight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'AC_Indicator_C_CheckLineOfSight::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'AC_Indicator_C_CheckLineOfSight::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, K2Node_MakeArray_Array) == 0x000028, "Member 'AC_Indicator_C_CheckLineOfSight::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, K2Node_MakeArray_Array_1) == 0x000038, "Member 'AC_Indicator_C_CheckLineOfSight::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000048, "Member 'AC_Indicator_C_CheckLineOfSight::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'AC_Indicator_C_CheckLineOfSight::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'AC_Indicator_C_CheckLineOfSight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000070, "Member 'AC_Indicator_C_CheckLineOfSight::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_CheckLineOfSight, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000168, "Member 'AC_Indicator_C_CheckLineOfSight::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.DelayStoponScreen
// 0x0008 (0x0008 - 0x0000)
struct AC_Indicator_C_DelayStoponScreen final
{
public:
	double                                        ShowForSeconds;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_DelayStoponScreen) == 0x000008, "Wrong alignment on AC_Indicator_C_DelayStoponScreen");
static_assert(sizeof(AC_Indicator_C_DelayStoponScreen) == 0x000008, "Wrong size on AC_Indicator_C_DelayStoponScreen");
static_assert(offsetof(AC_Indicator_C_DelayStoponScreen, ShowForSeconds) == 0x000000, "Member 'AC_Indicator_C_DelayStoponScreen::ShowForSeconds' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.ExecuteUbergraph_AC_Indicator
// 0x0240 (0x0240 - 0x0000)
struct AC_Indicator_C_ExecuteUbergraph_AC_Indicator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_TeamToShow;                     // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TeamIsValid_Valid;                        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TeamIsValid_Valid_1;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWI_OffscreenIndicator_C*               CallFunc_Map_Find_Value;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetTeamAtPoint_bFoundTeam;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetTeamAtPoint_TeamVolumeGameplayTag;     // 0x0084(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeamAtPoint_ReturnValue;               // 0x0090(0x0038)(ConstParm, NoDestructor)
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1; // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWI_OffscreenIndicator_C*               CallFunc_Map_Find_Value_1;                         // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_VisibleForCurrentPlayer_Visible;          // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DB[0x5];                                       // 0x00DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_2; // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWI_OffscreenIndicator_C*               CallFunc_Map_Find_Value_2;                         // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_3; // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWI_OffscreenIndicator_C*               CallFunc_Map_Find_Value_3;                         // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x010C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColorToUse_Color;                      // 0x011C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0130(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_MultiGate_FirstRun;                         // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_MultiGate_ScratchBool;                      // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13A[0x2];                                      // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_MultiGate_ScratchIndex;                     // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInitializationStateEnded*              CallFunc_ListenToInitializationStateEnded_ReturnValue; // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_4; // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWI_OffscreenIndicator_C*               CallFunc_Map_Find_Value_4;                         // 0x0160(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_4;                   // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_VisibleForCurrentPlayer_Visible_1;        // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_VisibleForCurrentPlayer_Visible_2;        // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x017B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_CustomEvent_NewVisibility;                  // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17E[0x2];                                      // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_5; // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_Map_Find_Value_5;                         // 0x0188(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_5;                   // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0194(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_ShowForSeconds;                 // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_6; // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateJP*                           CallFunc_GetGameStateJP_ReturnValue;               // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_Map_Find_Value_6;                         // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_6;                   // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_3;        // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_4;        // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_MatchBP_C*          K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP; // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_MatchBP_C*          K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP_1; // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21B[0x5];                                      // 0x021B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_5;        // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_MatchBP_C*          K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP_2; // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_1;            // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator) == 0x000008, "Wrong alignment on AC_Indicator_C_ExecuteUbergraph_AC_Indicator");
static_assert(sizeof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator) == 0x000240, "Wrong size on AC_Indicator_C_ExecuteUbergraph_AC_Indicator");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, EntryPoint) == 0x000000, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::EntryPoint' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_IsDedicatedServer_ReturnValue) == 0x000024, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_CustomEvent_TeamToShow) == 0x00002C, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_CustomEvent_TeamToShow' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x00002D, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_CreateDelegate_OutputDelegate_2) == 0x000030, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000040, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_TeamIsValid_Valid) == 0x000048, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_TeamIsValid_Valid' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_TeamIsValid_Valid_1) == 0x000049, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_TeamIsValid_Valid_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000050, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_Value) == 0x000058, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_ReturnValue) == 0x000060, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_IsValid_ReturnValue) == 0x000061, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_BooleanAND_ReturnValue) == 0x000062, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000063, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Not_PreBool_ReturnValue) == 0x000064, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_BooleanAND_ReturnValue_1) == 0x000065, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000068, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetTeamAtPoint_bFoundTeam) == 0x000080, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetTeamAtPoint_bFoundTeam' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetTeamAtPoint_TeamVolumeGameplayTag) == 0x000084, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetTeamAtPoint_TeamVolumeGameplayTag' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetTeamAtPoint_ReturnValue) == 0x000090, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetTeamAtPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1) == 0x0000C8, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_Value_1) == 0x0000D0, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_ReturnValue_1) == 0x0000D8, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_VisibleForCurrentPlayer_Visible) == 0x0000D9, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_VisibleForCurrentPlayer_Visible' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000DA, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_2) == 0x0000E0, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_Value_2) == 0x0000E8, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_ReturnValue_2) == 0x0000F0, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, Temp_int_Variable) == 0x0000F4, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_3) == 0x0000F8, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_Value_3) == 0x000100, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_ReturnValue_3) == 0x000108, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_CreateDelegate_OutputDelegate_3) == 0x00010C, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetColorToUse_Color) == 0x00011C, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetColorToUse_Color' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000130, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_MultiGate_FirstRun) == 0x000138, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_MultiGate_FirstRun' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_MultiGate_ScratchBool) == 0x000139, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_MultiGate_ScratchBool' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_MultiGate_ScratchIndex) == 0x00013C, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_MultiGate_ScratchIndex' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000140, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_ListenToInitializationStateEnded_ReturnValue) == 0x000148, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_ListenToInitializationStateEnded_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_IsValid_ReturnValue_1) == 0x000150, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_4) == 0x000158, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_Value_4) == 0x000160, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_Value_4' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_ReturnValue_4) == 0x000168, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_PlayAnimationForward_ReturnValue) == 0x000170, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_VisibleForCurrentPlayer_Visible_1) == 0x000178, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_VisibleForCurrentPlayer_Visible_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_BooleanAND_ReturnValue_2) == 0x000179, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_VisibleForCurrentPlayer_Visible_2) == 0x00017A, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_VisibleForCurrentPlayer_Visible_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_BooleanAND_ReturnValue_3) == 0x00017B, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_Event_EndPlayReason) == 0x00017C, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_CustomEvent_NewVisibility) == 0x00017D, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_CustomEvent_NewVisibility' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_5) == 0x000180, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_Value_5) == 0x000188, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_Value_5' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_ReturnValue_5) == 0x000190, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_CreateDelegate_OutputDelegate_4) == 0x000194, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_CustomEvent_ShowForSeconds) == 0x0001A8, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_CustomEvent_ShowForSeconds' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetPlayerController_ReturnValue) == 0x0001B0, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetPlayerController_ReturnValue_1) == 0x0001B8, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetPlayerController_ReturnValue_2) == 0x0001C0, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001C8, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_6) == 0x0001D0, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetGameStateJP_ReturnValue) == 0x0001D8, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetGameStateJP_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_Value_6) == 0x0001E0, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_Value_6' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Map_Find_ReturnValue_6) == 0x0001E8, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Map_Find_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetPlayerController_ReturnValue_3) == 0x0001F0, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetPlayerController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetPlayerController_ReturnValue_4) == 0x0001F8, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetPlayerController_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP) == 0x000200, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_DynamicCast_bSuccess) == 0x000208, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP_1) == 0x000210, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_DynamicCast_bSuccess_1) == 0x000218, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Not_PreBool_ReturnValue_2) == 0x000219, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_BooleanAND_ReturnValue_4) == 0x00021A, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_GetPlayerController_ReturnValue_5) == 0x000220, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_GetPlayerController_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP_2) == 0x000228, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, K2Node_DynamicCast_bSuccess_2) == 0x000230, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000234, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Delay_Duration_ImplicitCast) == 0x000238, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ExecuteUbergraph_AC_Indicator, CallFunc_Delay_Duration_ImplicitCast_1) == 0x00023C, "Member 'AC_Indicator_C_ExecuteUbergraph_AC_Indicator::CallFunc_Delay_Duration_ImplicitCast_1' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.GetColorToUse
// 0x0120 (0x0120 - 0x0000)
struct AC_Indicator_C_GetColorToUse final
{
public:
	struct FS_IndicatorData                       IndicatorData_0;                                   // 0x0000(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x00D8(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTeam                                  CallFunc_GetTeam_ReturnValue;                      // 0x00E8(0x0038)(ConstParm, NoDestructor)
};
static_assert(alignof(AC_Indicator_C_GetColorToUse) == 0x000008, "Wrong alignment on AC_Indicator_C_GetColorToUse");
static_assert(sizeof(AC_Indicator_C_GetColorToUse) == 0x000120, "Wrong size on AC_Indicator_C_GetColorToUse");
static_assert(offsetof(AC_Indicator_C_GetColorToUse, IndicatorData_0) == 0x000000, "Member 'AC_Indicator_C_GetColorToUse::IndicatorData_0' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_GetColorToUse, Color) == 0x0000D8, "Member 'AC_Indicator_C_GetColorToUse::Color' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_GetColorToUse, CallFunc_GetTeam_ReturnValue) == 0x0000E8, "Member 'AC_Indicator_C_GetColorToUse::CallFunc_GetTeam_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.InitComponent
// 0x0001 (0x0001 - 0x0000)
struct AC_Indicator_C_InitComponent final
{
public:
	uint8                                         TeamToShow;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_InitComponent) == 0x000001, "Wrong alignment on AC_Indicator_C_InitComponent");
static_assert(sizeof(AC_Indicator_C_InitComponent) == 0x000001, "Wrong size on AC_Indicator_C_InitComponent");
static_assert(offsetof(AC_Indicator_C_InitComponent, TeamToShow) == 0x000000, "Member 'AC_Indicator_C_InitComponent::TeamToShow' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.Is In Acceptable Range
// 0x0050 (0x0050 - 0x0000)
struct AC_Indicator_C_Is_In_Acceptable_Range final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_Is_In_Acceptable_Range) == 0x000008, "Wrong alignment on AC_Indicator_C_Is_In_Acceptable_Range");
static_assert(sizeof(AC_Indicator_C_Is_In_Acceptable_Range) == 0x000050, "Wrong size on AC_Indicator_C_Is_In_Acceptable_Range");
static_assert(offsetof(AC_Indicator_C_Is_In_Acceptable_Range, InRange) == 0x000000, "Member 'AC_Indicator_C_Is_In_Acceptable_Range::InRange' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Is_In_Acceptable_Range, CallFunc_IsDedicatedServer_ReturnValue) == 0x000001, "Member 'AC_Indicator_C_Is_In_Acceptable_Range::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Is_In_Acceptable_Range, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'AC_Indicator_C_Is_In_Acceptable_Range::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Is_In_Acceptable_Range, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000020, "Member 'AC_Indicator_C_Is_In_Acceptable_Range::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Is_In_Acceptable_Range, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'AC_Indicator_C_Is_In_Acceptable_Range::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Is_In_Acceptable_Range, CallFunc_Vector_Distance_ReturnValue) == 0x000040, "Member 'AC_Indicator_C_Is_In_Acceptable_Range::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Is_In_Acceptable_Range, CallFunc_InRange_FloatFloat_ReturnValue) == 0x000048, "Member 'AC_Indicator_C_Is_In_Acceptable_Range::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.IsOnSameTeam
// 0x00A0 (0x00A0 - 0x0000)
struct AC_Indicator_C_IsOnSameTeam final
{
public:
	bool                                          SameTeam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  Temp_struct_Variable;                              // 0x0008(0x0038)(NoDestructor)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITeamableInterface>    K2Node_DynamicCast_AsTeamable_Interface;           // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeam_ReturnValue;                      // 0x0068(0x0038)(NoDestructor)
};
static_assert(alignof(AC_Indicator_C_IsOnSameTeam) == 0x000008, "Wrong alignment on AC_Indicator_C_IsOnSameTeam");
static_assert(sizeof(AC_Indicator_C_IsOnSameTeam) == 0x0000A0, "Wrong size on AC_Indicator_C_IsOnSameTeam");
static_assert(offsetof(AC_Indicator_C_IsOnSameTeam, SameTeam) == 0x000000, "Member 'AC_Indicator_C_IsOnSameTeam::SameTeam' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_IsOnSameTeam, Temp_struct_Variable) == 0x000008, "Member 'AC_Indicator_C_IsOnSameTeam::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_IsOnSameTeam, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000040, "Member 'AC_Indicator_C_IsOnSameTeam::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_IsOnSameTeam, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'AC_Indicator_C_IsOnSameTeam::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_IsOnSameTeam, K2Node_DynamicCast_AsTeamable_Interface) == 0x000050, "Member 'AC_Indicator_C_IsOnSameTeam::K2Node_DynamicCast_AsTeamable_Interface' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_IsOnSameTeam, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'AC_Indicator_C_IsOnSameTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_IsOnSameTeam, CallFunc_GetTeam_ReturnValue) == 0x000068, "Member 'AC_Indicator_C_IsOnSameTeam::CallFunc_GetTeam_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.OverrideOnscreenWidgetScale
// 0x0040 (0x0040 - 0x0000)
struct AC_Indicator_C_OverrideOnscreenWidgetScale final
{
public:
	double                                        NewScale;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_MatchBP_C*          K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Map_Find_Value;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_OnScreenIndicator_C*                K2Node_DynamicCast_AsWI_on_Screen_Indicator;       // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_OverrideOnscreenWidgetScale) == 0x000008, "Wrong alignment on AC_Indicator_C_OverrideOnscreenWidgetScale");
static_assert(sizeof(AC_Indicator_C_OverrideOnscreenWidgetScale) == 0x000040, "Wrong size on AC_Indicator_C_OverrideOnscreenWidgetScale");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetScale, NewScale) == 0x000000, "Member 'AC_Indicator_C_OverrideOnscreenWidgetScale::NewScale' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetScale, PlayerController) == 0x000008, "Member 'AC_Indicator_C_OverrideOnscreenWidgetScale::PlayerController' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetScale, K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP) == 0x000010, "Member 'AC_Indicator_C_OverrideOnscreenWidgetScale::K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetScale, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AC_Indicator_C_OverrideOnscreenWidgetScale::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetScale, CallFunc_Map_Find_Value) == 0x000020, "Member 'AC_Indicator_C_OverrideOnscreenWidgetScale::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetScale, CallFunc_Map_Find_ReturnValue) == 0x000028, "Member 'AC_Indicator_C_OverrideOnscreenWidgetScale::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetScale, K2Node_DynamicCast_AsWI_on_Screen_Indicator) == 0x000030, "Member 'AC_Indicator_C_OverrideOnscreenWidgetScale::K2Node_DynamicCast_AsWI_on_Screen_Indicator' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetScale, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'AC_Indicator_C_OverrideOnscreenWidgetScale::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.OverrideOnscreenWidgetText
// 0x0028 (0x0028 - 0x0000)
struct AC_Indicator_C_OverrideOnscreenWidgetText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_OnScreenIndicator_C*                K2Node_DynamicCast_AsWI_on_Screen_Indicator;       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_OverrideOnscreenWidgetText) == 0x000008, "Wrong alignment on AC_Indicator_C_OverrideOnscreenWidgetText");
static_assert(sizeof(AC_Indicator_C_OverrideOnscreenWidgetText) == 0x000028, "Wrong size on AC_Indicator_C_OverrideOnscreenWidgetText");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetText, NewText) == 0x000000, "Member 'AC_Indicator_C_OverrideOnscreenWidgetText::NewText' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetText, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000010, "Member 'AC_Indicator_C_OverrideOnscreenWidgetText::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetText, K2Node_DynamicCast_AsWI_on_Screen_Indicator) == 0x000018, "Member 'AC_Indicator_C_OverrideOnscreenWidgetText::K2Node_DynamicCast_AsWI_on_Screen_Indicator' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_OverrideOnscreenWidgetText, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'AC_Indicator_C_OverrideOnscreenWidgetText::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct AC_Indicator_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on AC_Indicator_C_ReceiveEndPlay");
static_assert(sizeof(AC_Indicator_C_ReceiveEndPlay) == 0x000001, "Wrong size on AC_Indicator_C_ReceiveEndPlay");
static_assert(offsetof(AC_Indicator_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'AC_Indicator_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct AC_Indicator_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_ReceiveTick) == 0x000004, "Wrong alignment on AC_Indicator_C_ReceiveTick");
static_assert(sizeof(AC_Indicator_C_ReceiveTick) == 0x000004, "Wrong size on AC_Indicator_C_ReceiveTick");
static_assert(offsetof(AC_Indicator_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'AC_Indicator_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.RemoveAllSpawnedOffscreenWidgets
// 0x0038 (0x0038 - 0x0000)
struct AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWI_OffscreenIndicator_C*>       CallFunc_Map_Values_Values;                        // 0x0008(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_OffscreenIndicator_C*               CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets) == 0x000008, "Wrong alignment on AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets");
static_assert(sizeof(AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets) == 0x000038, "Wrong size on AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets");
static_assert(offsetof(AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets, CallFunc_Map_Values_Values) == 0x000008, "Member 'AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets, CallFunc_Array_Get_Item) == 0x000020, "Member 'AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'AC_Indicator_C_RemoveAllSpawnedOffscreenWidgets::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.ResetOnscreenWidgetScale
// 0x0038 (0x0038 - 0x0000)
struct AC_Indicator_C_ResetOnscreenWidgetScale final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_MatchBP_C*          K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Map_Find_Value;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_OnScreenIndicator_C*                K2Node_DynamicCast_AsWI_on_Screen_Indicator;       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_ResetOnscreenWidgetScale) == 0x000008, "Wrong alignment on AC_Indicator_C_ResetOnscreenWidgetScale");
static_assert(sizeof(AC_Indicator_C_ResetOnscreenWidgetScale) == 0x000038, "Wrong size on AC_Indicator_C_ResetOnscreenWidgetScale");
static_assert(offsetof(AC_Indicator_C_ResetOnscreenWidgetScale, PlayerController) == 0x000000, "Member 'AC_Indicator_C_ResetOnscreenWidgetScale::PlayerController' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ResetOnscreenWidgetScale, K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP) == 0x000008, "Member 'AC_Indicator_C_ResetOnscreenWidgetScale::K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ResetOnscreenWidgetScale, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AC_Indicator_C_ResetOnscreenWidgetScale::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ResetOnscreenWidgetScale, CallFunc_Map_Find_Value) == 0x000018, "Member 'AC_Indicator_C_ResetOnscreenWidgetScale::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ResetOnscreenWidgetScale, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'AC_Indicator_C_ResetOnscreenWidgetScale::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ResetOnscreenWidgetScale, K2Node_DynamicCast_AsWI_on_Screen_Indicator) == 0x000028, "Member 'AC_Indicator_C_ResetOnscreenWidgetScale::K2Node_DynamicCast_AsWI_on_Screen_Indicator' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ResetOnscreenWidgetScale, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'AC_Indicator_C_ResetOnscreenWidgetScale::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.Set OffscreenWidget Visuals
// 0x0050 (0x0050 - 0x0000)
struct AC_Indicator_C_Set_OffscreenWidget_Visuals final
{
public:
	class UWI_OffscreenIndicator_C*               Indicator;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeam_ReturnValue;                      // 0x0010(0x0038)(ConstParm, NoDestructor)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_Set_OffscreenWidget_Visuals) == 0x000008, "Wrong alignment on AC_Indicator_C_Set_OffscreenWidget_Visuals");
static_assert(sizeof(AC_Indicator_C_Set_OffscreenWidget_Visuals) == 0x000050, "Wrong size on AC_Indicator_C_Set_OffscreenWidget_Visuals");
static_assert(offsetof(AC_Indicator_C_Set_OffscreenWidget_Visuals, Indicator) == 0x000000, "Member 'AC_Indicator_C_Set_OffscreenWidget_Visuals::Indicator' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Set_OffscreenWidget_Visuals, Temp_bool_Variable) == 0x000008, "Member 'AC_Indicator_C_Set_OffscreenWidget_Visuals::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Set_OffscreenWidget_Visuals, CallFunc_GetTeam_ReturnValue) == 0x000010, "Member 'AC_Indicator_C_Set_OffscreenWidget_Visuals::CallFunc_GetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Set_OffscreenWidget_Visuals, K2Node_Select_Default) == 0x000048, "Member 'AC_Indicator_C_Set_OffscreenWidget_Visuals::K2Node_Select_Default' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.SetIndicatorData
// 0x0128 (0x0128 - 0x0000)
struct AC_Indicator_C_SetIndicatorData final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0028(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_IndicatorData                       CallFunc_GetDataTableRowFromName_OutRow;           // 0x0048(0x00D8)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_SetIndicatorData) == 0x000008, "Wrong alignment on AC_Indicator_C_SetIndicatorData");
static_assert(sizeof(AC_Indicator_C_SetIndicatorData) == 0x000128, "Wrong size on AC_Indicator_C_SetIndicatorData");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AC_Indicator_C_SetIndicatorData::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'AC_Indicator_C_SetIndicatorData::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'AC_Indicator_C_SetIndicatorData::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'AC_Indicator_C_SetIndicatorData::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, CallFunc_GetDisplayName_ReturnValue) == 0x000018, "Member 'AC_Indicator_C_SetIndicatorData::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000028, "Member 'AC_Indicator_C_SetIndicatorData::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'AC_Indicator_C_SetIndicatorData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, CallFunc_Array_Get_Item) == 0x00003C, "Member 'AC_Indicator_C_SetIndicatorData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'AC_Indicator_C_SetIndicatorData::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, CallFunc_GetDataTableRowFromName_OutRow) == 0x000048, "Member 'AC_Indicator_C_SetIndicatorData::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000120, "Member 'AC_Indicator_C_SetIndicatorData::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetIndicatorData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000121, "Member 'AC_Indicator_C_SetIndicatorData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.SetOffscreenArrowVisibility
// 0x0028 (0x0028 - 0x0000)
struct AC_Indicator_C_SetOffscreenArrowVisibility final
{
public:
	bool                                          OnScreen;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_OffscreenIndicator_C*               CallFunc_Map_Find_Value;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_SetOffscreenArrowVisibility) == 0x000008, "Wrong alignment on AC_Indicator_C_SetOffscreenArrowVisibility");
static_assert(sizeof(AC_Indicator_C_SetOffscreenArrowVisibility) == 0x000028, "Wrong size on AC_Indicator_C_SetOffscreenArrowVisibility");
static_assert(offsetof(AC_Indicator_C_SetOffscreenArrowVisibility, OnScreen) == 0x000000, "Member 'AC_Indicator_C_SetOffscreenArrowVisibility::OnScreen' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenArrowVisibility, Temp_bool_Variable) == 0x000001, "Member 'AC_Indicator_C_SetOffscreenArrowVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenArrowVisibility, Temp_byte_Variable) == 0x000002, "Member 'AC_Indicator_C_SetOffscreenArrowVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenArrowVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'AC_Indicator_C_SetOffscreenArrowVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenArrowVisibility, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000008, "Member 'AC_Indicator_C_SetOffscreenArrowVisibility::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenArrowVisibility, K2Node_Select_Default) == 0x000010, "Member 'AC_Indicator_C_SetOffscreenArrowVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenArrowVisibility, CallFunc_Map_Find_Value) == 0x000018, "Member 'AC_Indicator_C_SetOffscreenArrowVisibility::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenArrowVisibility, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'AC_Indicator_C_SetOffscreenArrowVisibility::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.SetOffscreenElements
// 0x00B0 (0x00B0 - 0x0000)
struct AC_Indicator_C_SetOffscreenElements final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_MatchBP_C*          K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_OffscreenIndicator_C*               CallFunc_Map_Find_Value;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWI_OffscreenIndicator_C*               CallFunc_Map_Find_Value_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_FindScreenEdgeLocationForWorldLocation_OutScreenPosition; // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FindScreenEdgeLocationForWorldLocation_OutRotationAngleDegrees; // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindScreenEdgeLocationForWorldLocation_bIsOnScreen; // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MultiplyMultiply_FloatFloat_Base_ImplicitCast; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetOffscreenLocationAndRotation_Angle_ImplicitCast; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_SetOffscreenElements) == 0x000008, "Wrong alignment on AC_Indicator_C_SetOffscreenElements");
static_assert(sizeof(AC_Indicator_C_SetOffscreenElements) == 0x0000B0, "Wrong size on AC_Indicator_C_SetOffscreenElements");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000008, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP) == 0x000010, "Member 'AC_Indicator_C_SetOffscreenElements::K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AC_Indicator_C_SetOffscreenElements::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_Map_Find_Value) == 0x000020, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_Map_Find_ReturnValue) == 0x000028, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1) == 0x000030, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_Map_Find_Value_1) == 0x000038, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_Map_Find_ReturnValue_1) == 0x000040, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_GetViewportScale_ReturnValue) == 0x000044, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000048, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000050, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_MakeVector2D_ReturnValue) == 0x000068, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_FindScreenEdgeLocationForWorldLocation_OutScreenPosition) == 0x000078, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_FindScreenEdgeLocationForWorldLocation_OutScreenPosition' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_FindScreenEdgeLocationForWorldLocation_OutRotationAngleDegrees) == 0x000088, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_FindScreenEdgeLocationForWorldLocation_OutRotationAngleDegrees' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_FindScreenEdgeLocationForWorldLocation_bIsOnScreen) == 0x00008C, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_FindScreenEdgeLocationForWorldLocation_bIsOnScreen' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000090, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_MultiplyMultiply_FloatFloat_Base_ImplicitCast) == 0x0000A0, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_MultiplyMultiply_FloatFloat_Base_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenElements, CallFunc_SetOffscreenLocationAndRotation_Angle_ImplicitCast) == 0x0000A8, "Member 'AC_Indicator_C_SetOffscreenElements::CallFunc_SetOffscreenLocationAndRotation_Angle_ImplicitCast' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.SetOffscreenLocationAndRotation
// 0x0050 (0x0050 - 0x0000)
struct AC_Indicator_C_SetOffscreenLocationAndRotation final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWI_OffscreenIndicator_C*               CallFunc_Map_Find_Value;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_SetOffscreenLocationAndRotation) == 0x000008, "Wrong alignment on AC_Indicator_C_SetOffscreenLocationAndRotation");
static_assert(sizeof(AC_Indicator_C_SetOffscreenLocationAndRotation) == 0x000050, "Wrong size on AC_Indicator_C_SetOffscreenLocationAndRotation");
static_assert(offsetof(AC_Indicator_C_SetOffscreenLocationAndRotation, Location) == 0x000000, "Member 'AC_Indicator_C_SetOffscreenLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenLocationAndRotation, Angle) == 0x000010, "Member 'AC_Indicator_C_SetOffscreenLocationAndRotation::Angle' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenLocationAndRotation, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000018, "Member 'AC_Indicator_C_SetOffscreenLocationAndRotation::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenLocationAndRotation, CallFunc_Map_Find_Value) == 0x000020, "Member 'AC_Indicator_C_SetOffscreenLocationAndRotation::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenLocationAndRotation, CallFunc_Map_Find_ReturnValue) == 0x000028, "Member 'AC_Indicator_C_SetOffscreenLocationAndRotation::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenLocationAndRotation, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000030, "Member 'AC_Indicator_C_SetOffscreenLocationAndRotation::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenLocationAndRotation, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000038, "Member 'AC_Indicator_C_SetOffscreenLocationAndRotation::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenLocationAndRotation, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000040, "Member 'AC_Indicator_C_SetOffscreenLocationAndRotation::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOffscreenLocationAndRotation, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000048, "Member 'AC_Indicator_C_SetOffscreenLocationAndRotation::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.SetOnscreenWidgetVisuals
// 0x00C8 (0x00C8 - 0x0000)
struct AC_Indicator_C_SetOnscreenWidgetVisuals final
{
public:
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOnSameTeam_SameTeam;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue_1;        // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTeam                                  CallFunc_GetTeam_ReturnValue;                      // 0x0020(0x0038)(ConstParm, NoDestructor)
	class UWI_HouseIdentifier_C*                  K2Node_DynamicCast_AsWI_House_Identifier;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue_2;        // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_OnScreenIndicator_C*                K2Node_DynamicCast_AsWI_on_Screen_Indicator;       // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeam_ReturnValue_1;                    // 0x0080(0x0038)(ConstParm, NoDestructor)
	struct FLinearColor                           CallFunc_GetTeamColorForTeamId_ReturnValue;        // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_SetOnscreenWidgetVisuals) == 0x000008, "Wrong alignment on AC_Indicator_C_SetOnscreenWidgetVisuals");
static_assert(sizeof(AC_Indicator_C_SetOnscreenWidgetVisuals) == 0x0000C8, "Wrong size on AC_Indicator_C_SetOnscreenWidgetVisuals");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000000, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000008, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, CallFunc_IsOnSameTeam_SameTeam) == 0x000010, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::CallFunc_IsOnSameTeam_SameTeam' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, CallFunc_GetUserWidgetObject_ReturnValue_1) == 0x000018, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::CallFunc_GetUserWidgetObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, CallFunc_GetTeam_ReturnValue) == 0x000020, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::CallFunc_GetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, K2Node_DynamicCast_AsWI_House_Identifier) == 0x000058, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::K2Node_DynamicCast_AsWI_House_Identifier' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, CallFunc_GetUserWidgetObject_ReturnValue_2) == 0x000068, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::CallFunc_GetUserWidgetObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, K2Node_DynamicCast_AsWI_on_Screen_Indicator) == 0x000070, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::K2Node_DynamicCast_AsWI_on_Screen_Indicator' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, K2Node_DynamicCast_bSuccess_1) == 0x000078, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, CallFunc_GetTeam_ReturnValue_1) == 0x000080, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::CallFunc_GetTeam_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_SetOnscreenWidgetVisuals, CallFunc_GetTeamColorForTeamId_ReturnValue) == 0x0000B8, "Member 'AC_Indicator_C_SetOnscreenWidgetVisuals::CallFunc_GetTeamColorForTeamId_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.StopOnscreenUpdate
// 0x0001 (0x0001 - 0x0000)
struct AC_Indicator_C_StopOnscreenUpdate final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_StopOnscreenUpdate) == 0x000001, "Wrong alignment on AC_Indicator_C_StopOnscreenUpdate");
static_assert(sizeof(AC_Indicator_C_StopOnscreenUpdate) == 0x000001, "Wrong size on AC_Indicator_C_StopOnscreenUpdate");
static_assert(offsetof(AC_Indicator_C_StopOnscreenUpdate, NewVisibility) == 0x000000, "Member 'AC_Indicator_C_StopOnscreenUpdate::NewVisibility' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.TeamIsValid
// 0x0005 (0x0005 - 0x0000)
struct AC_Indicator_C_TeamIsValid final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_ByteByte_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_TeamIsValid) == 0x000001, "Wrong alignment on AC_Indicator_C_TeamIsValid");
static_assert(sizeof(AC_Indicator_C_TeamIsValid) == 0x000005, "Wrong size on AC_Indicator_C_TeamIsValid");
static_assert(offsetof(AC_Indicator_C_TeamIsValid, Valid) == 0x000000, "Member 'AC_Indicator_C_TeamIsValid::Valid' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_TeamIsValid, CallFunc_Less_ByteByte_ReturnValue) == 0x000001, "Member 'AC_Indicator_C_TeamIsValid::CallFunc_Less_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_TeamIsValid, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'AC_Indicator_C_TeamIsValid::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_TeamIsValid, CallFunc_Greater_ByteByte_ReturnValue) == 0x000003, "Member 'AC_Indicator_C_TeamIsValid::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_TeamIsValid, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'AC_Indicator_C_TeamIsValid::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.ToggleOnscreenVisibility
// 0x0048 (0x0048 - 0x0000)
struct AC_Indicator_C_ToggleOnscreenVisibility final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchStarted_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_Map_Find_Value;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckLineOfSight_In_Line_Of_Sight;        // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_In_Acceptable_Range_InRange;           // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_Map_Find_Value_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_ToggleOnscreenVisibility) == 0x000008, "Wrong alignment on AC_Indicator_C_ToggleOnscreenVisibility");
static_assert(sizeof(AC_Indicator_C_ToggleOnscreenVisibility) == 0x000048, "Wrong size on AC_Indicator_C_ToggleOnscreenVisibility");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, Temp_byte_Variable) == 0x000000, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, Temp_byte_Variable_1) == 0x000001, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_HasMatchStarted_ReturnValue) == 0x000010, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_HasMatchStarted_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000018, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_Map_Find_Value) == 0x000020, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_Map_Find_ReturnValue) == 0x000028, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_CheckLineOfSight_In_Line_Of_Sight) == 0x000029, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_CheckLineOfSight_In_Line_Of_Sight' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, Temp_bool_Variable) == 0x00002A, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_Is_In_Acceptable_Range_InRange) == 0x00002B, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_Is_In_Acceptable_Range_InRange' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, K2Node_Select_Default) == 0x00002C, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1) == 0x000030, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_Map_Find_Value_1) == 0x000038, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_Map_Find_ReturnValue_1) == 0x000040, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_ToggleOnscreenVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'AC_Indicator_C_ToggleOnscreenVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.Try Create Offscreen Widget
// 0x0050 (0x0050 - 0x0000)
struct AC_Indicator_C_Try_Create_Offscreen_Widget final
{
public:
	TArray<class UWI_HUD_Match_C*>                CallFunc_GetAllWidgetsOfClass_FoundWidgets;        // 0x0000(0x0010)(ReferenceParm, ContainsInstancedReference)
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWI_HUD_Match_C*                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_OffscreenIndicator_C*               CallFunc_Map_Find_Value;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWI_OffscreenIndicator_C*               CallFunc_Create_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddRuntimeChildWidget_ReturnValue;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_Try_Create_Offscreen_Widget) == 0x000008, "Wrong alignment on AC_Indicator_C_Try_Create_Offscreen_Widget");
static_assert(sizeof(AC_Indicator_C_Try_Create_Offscreen_Widget) == 0x000050, "Wrong size on AC_Indicator_C_Try_Create_Offscreen_Widget");
static_assert(offsetof(AC_Indicator_C_Try_Create_Offscreen_Widget, CallFunc_GetAllWidgetsOfClass_FoundWidgets) == 0x000000, "Member 'AC_Indicator_C_Try_Create_Offscreen_Widget::CallFunc_GetAllWidgetsOfClass_FoundWidgets' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Try_Create_Offscreen_Widget, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000010, "Member 'AC_Indicator_C_Try_Create_Offscreen_Widget::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Try_Create_Offscreen_Widget, CallFunc_Array_Get_Item) == 0x000018, "Member 'AC_Indicator_C_Try_Create_Offscreen_Widget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Try_Create_Offscreen_Widget, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000020, "Member 'AC_Indicator_C_Try_Create_Offscreen_Widget::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Try_Create_Offscreen_Widget, CallFunc_Map_Find_Value) == 0x000028, "Member 'AC_Indicator_C_Try_Create_Offscreen_Widget::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Try_Create_Offscreen_Widget, CallFunc_Map_Find_ReturnValue) == 0x000030, "Member 'AC_Indicator_C_Try_Create_Offscreen_Widget::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Try_Create_Offscreen_Widget, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1) == 0x000038, "Member 'AC_Indicator_C_Try_Create_Offscreen_Widget::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Try_Create_Offscreen_Widget, CallFunc_Create_ReturnValue) == 0x000040, "Member 'AC_Indicator_C_Try_Create_Offscreen_Widget::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_Try_Create_Offscreen_Widget, CallFunc_AddRuntimeChildWidget_ReturnValue) == 0x000048, "Member 'AC_Indicator_C_Try_Create_Offscreen_Widget::CallFunc_AddRuntimeChildWidget_ReturnValue' has a wrong offset!");

// Function AC_Indicator.AC_Indicator_C.VisibleForCurrentPlayer
// 0x0004 (0x0004 - 0x0000)
struct AC_Indicator_C_VisibleForCurrentPlayer final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOnSameTeam_SameTeam;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOnSameTeam_SameTeam_1;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_Indicator_C_VisibleForCurrentPlayer) == 0x000001, "Wrong alignment on AC_Indicator_C_VisibleForCurrentPlayer");
static_assert(sizeof(AC_Indicator_C_VisibleForCurrentPlayer) == 0x000004, "Wrong size on AC_Indicator_C_VisibleForCurrentPlayer");
static_assert(offsetof(AC_Indicator_C_VisibleForCurrentPlayer, Visible) == 0x000000, "Member 'AC_Indicator_C_VisibleForCurrentPlayer::Visible' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_VisibleForCurrentPlayer, CallFunc_IsOnSameTeam_SameTeam) == 0x000001, "Member 'AC_Indicator_C_VisibleForCurrentPlayer::CallFunc_IsOnSameTeam_SameTeam' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_VisibleForCurrentPlayer, CallFunc_IsOnSameTeam_SameTeam_1) == 0x000002, "Member 'AC_Indicator_C_VisibleForCurrentPlayer::CallFunc_IsOnSameTeam_SameTeam_1' has a wrong offset!");
static_assert(offsetof(AC_Indicator_C_VisibleForCurrentPlayer, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'AC_Indicator_C_VisibleForCurrentPlayer::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

