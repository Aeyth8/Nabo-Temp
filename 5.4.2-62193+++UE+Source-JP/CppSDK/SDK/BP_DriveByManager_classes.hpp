#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DriveByManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DriveByManager.BP_DriveByManager_C
// 0x00A8 (0x0338 - 0x0290)
class ABP_DriveByManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Base_VehiclePathSpline_C*           VehiclePath;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DriveByVanClass;                                   // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_DriveByVan_C*>               DriveByVanInstances;                               // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Time_To_Complete_Drive;                            // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Open_Door_Times;                                   // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<float>                                 Close_Door_Times;                                  // 0x02D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<float>                                 Tire_Squeel_Times;                                 // 0x02E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<float>                                 Attack_Team_1Times;                                // 0x02F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<float>                                 Attack_Team_2Times;                                // 0x0308(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<float>                                 Start_Music_Times;                                 // 0x0318(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<float>                                 Stop_Music_Times;                                  // 0x0328(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)

public:
	void ExecuteUbergraph_BP_DriveByManager(int32 EntryPoint);
	void HandleDrivingCompleted(class ABP_DriveByVan_C* DriveByVan);
	void ReceiveBeginPlay();
	void StartDriveBy(uint8 TeamIdThatOrdered, uint8 TeamIdToAttack, class APlayerState* OrderingPlayerState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DriveByManager_C">();
	}
	static class ABP_DriveByManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DriveByManager_C>();
	}
};
static_assert(alignof(ABP_DriveByManager_C) == 0x000008, "Wrong alignment on ABP_DriveByManager_C");
static_assert(sizeof(ABP_DriveByManager_C) == 0x000338, "Wrong size on ABP_DriveByManager_C");
static_assert(offsetof(ABP_DriveByManager_C, UberGraphFrame) == 0x000290, "Member 'ABP_DriveByManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, Billboard) == 0x000298, "Member 'ABP_DriveByManager_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, VehiclePath) == 0x0002A0, "Member 'ABP_DriveByManager_C::VehiclePath' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, DriveByVanClass) == 0x0002A8, "Member 'ABP_DriveByManager_C::DriveByVanClass' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, DriveByVanInstances) == 0x0002B0, "Member 'ABP_DriveByManager_C::DriveByVanInstances' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, Time_To_Complete_Drive) == 0x0002C0, "Member 'ABP_DriveByManager_C::Time_To_Complete_Drive' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, Open_Door_Times) == 0x0002C8, "Member 'ABP_DriveByManager_C::Open_Door_Times' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, Close_Door_Times) == 0x0002D8, "Member 'ABP_DriveByManager_C::Close_Door_Times' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, Tire_Squeel_Times) == 0x0002E8, "Member 'ABP_DriveByManager_C::Tire_Squeel_Times' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, Attack_Team_1Times) == 0x0002F8, "Member 'ABP_DriveByManager_C::Attack_Team_1Times' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, Attack_Team_2Times) == 0x000308, "Member 'ABP_DriveByManager_C::Attack_Team_2Times' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, Start_Music_Times) == 0x000318, "Member 'ABP_DriveByManager_C::Start_Music_Times' has a wrong offset!");
static_assert(offsetof(ABP_DriveByManager_C, Stop_Music_Times) == 0x000328, "Member 'ABP_DriveByManager_C::Stop_Music_Times' has a wrong offset!");

}

