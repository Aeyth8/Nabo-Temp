#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_ChargedThrow

#include "Basic.hpp"

#include "IWCore_structs.hpp"
#include "Engine_structs.hpp"
#include "GASIW_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_ChargedThrow.GA_ChargedThrow_C
// 0x01C0 (0x0620 - 0x0460)
class UGA_ChargedThrow_C final : public UGameplayAbilityIW
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        MaxSecondsHeld;                                    // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxImpulseMultiplier;                              // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UItemInstance*                          ThrownItemInstance;                                // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagStackContainer             Tags;                                              // 0x0480(0x0180)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABp_Trajectory_C*                       TrajectoryActor;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LocalInputHoldTimeStart;                           // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocalInputHoldTimeAccumulated;                     // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitInputRelease*          Async_Task;                                        // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateChargeFraction(double SecondsHeld, double* ChargeFraction);
	void CalculateThrowTransform(struct FTransform* Spawn_Transform);
	void DisableTrajectory();
	void EnableTrajectory();
	void ExecuteUbergraph_GA_ChargedThrow(int32 EntryPoint);
	void GetGravityScale(double* GravityScale);
	void GetOrCreateTrajectoryInstance(class ABp_Trajectory_C** Instance);
	void GetProjectileData(class UItemInstance** HoldingItem, class ABP_ResidentCharacter_C** Owner, struct FTransform* Spawn_Transform);
	void GetStartPositionTransform(struct FTransform* StartTransform);
	void GetVelocity(struct FVector* Velocity);
	void InputHeldTimerTick();
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnRelease_9915CAF645FF4B7F6615D78A261FF9E4(float TimeHeld);
	void Remove_Ammo_from_Held_Item();
	void RemoveItemFromInventory();
	void SpawnProjectile(class UItemInstance* ItemInstance, class ABP_ResidentCharacter_C* Owner, const struct FTransform& SpawnTransform);
	void ThrowEquipment(class UItemInstance* ItemInstance, class ABP_ResidentCharacter_C* Owner, const struct FTransform& SpawnTransform);

	void GetEquippedItemInstance(class UItemInstance** AsItem_Instance) const;
	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_ChargedThrow_C">();
	}
	static class UGA_ChargedThrow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_ChargedThrow_C>();
	}
};
static_assert(alignof(UGA_ChargedThrow_C) == 0x000010, "Wrong alignment on UGA_ChargedThrow_C");
static_assert(sizeof(UGA_ChargedThrow_C) == 0x000620, "Wrong size on UGA_ChargedThrow_C");
static_assert(offsetof(UGA_ChargedThrow_C, UberGraphFrame) == 0x000460, "Member 'UGA_ChargedThrow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_ChargedThrow_C, MaxSecondsHeld) == 0x000468, "Member 'UGA_ChargedThrow_C::MaxSecondsHeld' has a wrong offset!");
static_assert(offsetof(UGA_ChargedThrow_C, MaxImpulseMultiplier) == 0x000470, "Member 'UGA_ChargedThrow_C::MaxImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_ChargedThrow_C, ThrownItemInstance) == 0x000478, "Member 'UGA_ChargedThrow_C::ThrownItemInstance' has a wrong offset!");
static_assert(offsetof(UGA_ChargedThrow_C, Tags) == 0x000480, "Member 'UGA_ChargedThrow_C::Tags' has a wrong offset!");
static_assert(offsetof(UGA_ChargedThrow_C, TrajectoryActor) == 0x000600, "Member 'UGA_ChargedThrow_C::TrajectoryActor' has a wrong offset!");
static_assert(offsetof(UGA_ChargedThrow_C, LocalInputHoldTimeStart) == 0x000608, "Member 'UGA_ChargedThrow_C::LocalInputHoldTimeStart' has a wrong offset!");
static_assert(offsetof(UGA_ChargedThrow_C, LocalInputHoldTimeAccumulated) == 0x000610, "Member 'UGA_ChargedThrow_C::LocalInputHoldTimeAccumulated' has a wrong offset!");
static_assert(offsetof(UGA_ChargedThrow_C, Async_Task) == 0x000618, "Member 'UGA_ChargedThrow_C::Async_Task' has a wrong offset!");

}

