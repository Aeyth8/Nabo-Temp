#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_ChargedThrow

#include "Basic.hpp"

#include "GA_ChargedThrow_classes.hpp"
#include "GA_ChargedThrow_parameters.hpp"


namespace SDK
{

// Function GA_ChargedThrow.GA_ChargedThrow_C.CalculateChargeFraction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  SecondsHeld                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ChargeFraction                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::CalculateChargeFraction(double SecondsHeld, double* ChargeFraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "CalculateChargeFraction");

	Params::GA_ChargedThrow_C_CalculateChargeFraction Parms{};

	Parms.SecondsHeld = SecondsHeld;

	UObject::ProcessEvent(Func, &Parms);

	if (ChargeFraction != nullptr)
		*ChargeFraction = Parms.ChargeFraction;
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.CalculateThrowTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       Spawn_Transform                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::CalculateThrowTransform(struct FTransform* Spawn_Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "CalculateThrowTransform");

	Params::GA_ChargedThrow_C_CalculateThrowTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Spawn_Transform != nullptr)
		*Spawn_Transform = std::move(Parms.Spawn_Transform);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.DisableTrajectory
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_ChargedThrow_C::DisableTrajectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "DisableTrajectory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.EnableTrajectory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_ChargedThrow_C::EnableTrajectory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "EnableTrajectory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.ExecuteUbergraph_GA_ChargedThrow
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::ExecuteUbergraph_GA_ChargedThrow(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "ExecuteUbergraph_GA_ChargedThrow");

	Params::GA_ChargedThrow_C_ExecuteUbergraph_GA_ChargedThrow Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.GetGravityScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  GravityScale                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::GetGravityScale(double* GravityScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "GetGravityScale");

	Params::GA_ChargedThrow_C_GetGravityScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GravityScale != nullptr)
		*GravityScale = Parms.GravityScale;
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.GetOrCreateTrajectoryInstance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABp_Trajectory_C*                 Instance                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::GetOrCreateTrajectoryInstance(class ABp_Trajectory_C** Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "GetOrCreateTrajectoryInstance");

	Params::GA_ChargedThrow_C_GetOrCreateTrajectoryInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Instance != nullptr)
		*Instance = Parms.Instance;
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.GetProjectileData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UItemInstance*                    HoldingItem                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_ResidentCharacter_C*          Owner                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Spawn_Transform                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::GetProjectileData(class UItemInstance** HoldingItem, class ABP_ResidentCharacter_C** Owner, struct FTransform* Spawn_Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "GetProjectileData");

	Params::GA_ChargedThrow_C_GetProjectileData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HoldingItem != nullptr)
		*HoldingItem = Parms.HoldingItem;

	if (Owner != nullptr)
		*Owner = Parms.Owner;

	if (Spawn_Transform != nullptr)
		*Spawn_Transform = std::move(Parms.Spawn_Transform);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.GetStartPositionTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       StartTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::GetStartPositionTransform(struct FTransform* StartTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "GetStartPositionTransform");

	Params::GA_ChargedThrow_C_GetStartPositionTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StartTransform != nullptr)
		*StartTransform = std::move(Parms.StartTransform);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.GetVelocity
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::GetVelocity(struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "GetVelocity");

	Params::GA_ChargedThrow_C_GetVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.InputHeldTimerTick
// (BlueprintCallable, BlueprintEvent)

void UGA_ChargedThrow_C::InputHeldTimerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "InputHeldTimerTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_ChargedThrow_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "K2_OnEndAbility");

	Params::GA_ChargedThrow_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.OnRelease_9915CAF645FF4B7F6615D78A261FF9E4
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TimeHeld                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::OnRelease_9915CAF645FF4B7F6615D78A261FF9E4(float TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "OnRelease_9915CAF645FF4B7F6615D78A261FF9E4");

	Params::GA_ChargedThrow_C_OnRelease_9915CAF645FF4B7F6615D78A261FF9E4 Parms{};

	Parms.TimeHeld = TimeHeld;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.Remove Ammo from Held Item
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_ChargedThrow_C::Remove_Ammo_from_Held_Item()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "Remove Ammo from Held Item");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.RemoveItemFromInventory
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_ChargedThrow_C::RemoveItemFromInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "RemoveItemFromInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.SpawnProjectile
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UItemInstance*                    ItemInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_ResidentCharacter_C*          Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::SpawnProjectile(class UItemInstance* ItemInstance, class ABP_ResidentCharacter_C* Owner, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "SpawnProjectile");

	Params::GA_ChargedThrow_C_SpawnProjectile Parms{};

	Parms.ItemInstance = ItemInstance;
	Parms.Owner = Owner;
	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.ThrowEquipment
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UItemInstance*                    ItemInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_ResidentCharacter_C*          Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::ThrowEquipment(class UItemInstance* ItemInstance, class ABP_ResidentCharacter_C* Owner, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "ThrowEquipment");

	Params::GA_ChargedThrow_C_ThrowEquipment Parms{};

	Parms.ItemInstance = ItemInstance;
	Parms.Owner = Owner;
	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.GetEquippedItemInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UItemInstance*                    AsItem_Instance                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_ChargedThrow_C::GetEquippedItemInstance(class UItemInstance** AsItem_Instance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "GetEquippedItemInstance");

	Params::GA_ChargedThrow_C_GetEquippedItemInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsItem_Instance != nullptr)
		*AsItem_Instance = Parms.AsItem_Instance;
}


// Function GA_ChargedThrow.GA_ChargedThrow_C.K2_CanActivateAbility
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FGameplayAbilityActorInfo        ActorInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// struct FGameplayAbilitySpecHandle       Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            RelevantTags                                           (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UGA_ChargedThrow_C::K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ChargedThrow_C", "K2_CanActivateAbility");

	Params::GA_ChargedThrow_C_K2_CanActivateAbility Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.Handle = std::move(Handle);

	UObject::ProcessEvent(Func, &Parms);

	if (RelevantTags != nullptr)
		*RelevantTags = std::move(Parms.RelevantTags);

	return Parms.ReturnValue;
}

}

