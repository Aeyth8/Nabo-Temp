#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GCN_Lockpick_Compatible_Loop

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GCN_Lockpick_Compatible_Loop.GCN_Lockpick_Compatible_Loop_C.ExecuteUbergraph_GCN_Lockpick_Compatible_Loop
// 0x04A8 (0x04A8 - 0x0000)
struct GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Target;                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 K2Node_Event_Parameters;                           // 0x0010(0x00D8)(ConstParm, ContainsInstancedReference)
	struct FGameplayCueNotify_SpawnResult         K2Node_Event_SpawnResults;                         // 0x00E8(0x0058)(ConstParm, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_Target_2;                             // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 K2Node_Event_Parameters_2;                         // 0x0148(0x00D8)(ConstParm, ContainsInstancedReference)
	struct FGameplayCueNotify_SpawnResult         K2Node_Event_SpawnResults_2;                       // 0x0220(0x0058)(ConstParm, ContainsInstancedReference)
	class AActor*                                 K2Node_Event_Target_1;                             // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 K2Node_Event_Parameters_1;                         // 0x0280(0x00D8)(ConstParm, ContainsInstancedReference)
	struct FGameplayCueNotify_SpawnResult         K2Node_Event_SpawnResults_1;                       // 0x0358(0x0058)(ConstParm, ContainsInstancedReference)
	float                                         CallFunc_BreakGameplayCueParameters_NormalizedMagnitude; // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakGameplayCueParameters_RawMagnitude;  // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectContextHandle           CallFunc_BreakGameplayCueParameters_EffectContext; // 0x03B8(0x0018)()
	struct FGameplayTag                           CallFunc_BreakGameplayCueParameters_MatchedTagName; // 0x03D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_BreakGameplayCueParameters_OriginalTag;   // 0x03D8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_BreakGameplayCueParameters_AggregatedSourceTags; // 0x03E0(0x0020)()
	struct FGameplayTagContainer                  CallFunc_BreakGameplayCueParameters_AggregatedTargetTags; // 0x0400(0x0020)()
	struct FVector                                CallFunc_BreakGameplayCueParameters_Location;      // 0x0420(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakGameplayCueParameters_Normal;        // 0x0438(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakGameplayCueParameters_Instigator;    // 0x0450(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakGameplayCueParameters_EffectCauser;  // 0x0458(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_BreakGameplayCueParameters_SourceObject;  // 0x0460(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakGameplayCueParameters_PhysicalMaterial; // 0x0468(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakGameplayCueParameters_GameplayEffectLevel; // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakGameplayCueParameters_AbilityLevel;  // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_BreakGameplayCueParameters_TargetAttachComponent; // 0x0478(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakGameplayCueParameters_bReplicateLocationWhenUsingMinimalRepProxy; // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0488(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x04A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop) == 0x000008, "Wrong alignment on GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop");
static_assert(sizeof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop) == 0x0004A8, "Wrong size on GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, EntryPoint) == 0x000000, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::EntryPoint' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, K2Node_Event_Target) == 0x000008, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::K2Node_Event_Target' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, K2Node_Event_Parameters) == 0x000010, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::K2Node_Event_Parameters' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, K2Node_Event_SpawnResults) == 0x0000E8, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::K2Node_Event_SpawnResults' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, K2Node_Event_Target_2) == 0x000140, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::K2Node_Event_Target_2' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, K2Node_Event_Parameters_2) == 0x000148, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::K2Node_Event_Parameters_2' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, K2Node_Event_SpawnResults_2) == 0x000220, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::K2Node_Event_SpawnResults_2' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, K2Node_Event_Target_1) == 0x000278, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::K2Node_Event_Target_1' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, K2Node_Event_Parameters_1) == 0x000280, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::K2Node_Event_Parameters_1' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, K2Node_Event_SpawnResults_1) == 0x000358, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::K2Node_Event_SpawnResults_1' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_NormalizedMagnitude) == 0x0003B0, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_NormalizedMagnitude' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_RawMagnitude) == 0x0003B4, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_RawMagnitude' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_EffectContext) == 0x0003B8, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_EffectContext' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_MatchedTagName) == 0x0003D0, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_MatchedTagName' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_OriginalTag) == 0x0003D8, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_OriginalTag' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_AggregatedSourceTags) == 0x0003E0, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_AggregatedSourceTags' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_AggregatedTargetTags) == 0x000400, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_AggregatedTargetTags' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_Location) == 0x000420, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_Location' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_Normal) == 0x000438, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_Normal' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_Instigator) == 0x000450, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_Instigator' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_EffectCauser) == 0x000458, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_EffectCauser' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_SourceObject) == 0x000460, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_SourceObject' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_PhysicalMaterial) == 0x000468, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_GameplayEffectLevel) == 0x000470, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_AbilityLevel) == 0x000474, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_AbilityLevel' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_TargetAttachComponent) == 0x000478, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_TargetAttachComponent' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_BreakGameplayCueParameters_bReplicateLocationWhenUsingMinimalRepProxy) == 0x000480, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_BreakGameplayCueParameters_bReplicateLocationWhenUsingMinimalRepProxy' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000488, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x0004A0, "Member 'GCN_Lockpick_Compatible_Loop_C_ExecuteUbergraph_GCN_Lockpick_Compatible_Loop::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");

// Function GCN_Lockpick_Compatible_Loop.GCN_Lockpick_Compatible_Loop_C.OnLoopingStart
// 0x0138 (0x0138 - 0x0000)
struct GCN_Lockpick_Compatible_Loop_C_OnLoopingStart final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayCueNotify_SpawnResult         SpawnResults;                                      // 0x00E0(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(GCN_Lockpick_Compatible_Loop_C_OnLoopingStart) == 0x000008, "Wrong alignment on GCN_Lockpick_Compatible_Loop_C_OnLoopingStart");
static_assert(sizeof(GCN_Lockpick_Compatible_Loop_C_OnLoopingStart) == 0x000138, "Wrong size on GCN_Lockpick_Compatible_Loop_C_OnLoopingStart");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_OnLoopingStart, Target) == 0x000000, "Member 'GCN_Lockpick_Compatible_Loop_C_OnLoopingStart::Target' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_OnLoopingStart, Parameters) == 0x000008, "Member 'GCN_Lockpick_Compatible_Loop_C_OnLoopingStart::Parameters' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_OnLoopingStart, SpawnResults) == 0x0000E0, "Member 'GCN_Lockpick_Compatible_Loop_C_OnLoopingStart::SpawnResults' has a wrong offset!");

// Function GCN_Lockpick_Compatible_Loop.GCN_Lockpick_Compatible_Loop_C.OnRecurring
// 0x0138 (0x0138 - 0x0000)
struct GCN_Lockpick_Compatible_Loop_C_OnRecurring final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayCueNotify_SpawnResult         SpawnResults;                                      // 0x00E0(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(GCN_Lockpick_Compatible_Loop_C_OnRecurring) == 0x000008, "Wrong alignment on GCN_Lockpick_Compatible_Loop_C_OnRecurring");
static_assert(sizeof(GCN_Lockpick_Compatible_Loop_C_OnRecurring) == 0x000138, "Wrong size on GCN_Lockpick_Compatible_Loop_C_OnRecurring");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_OnRecurring, Target) == 0x000000, "Member 'GCN_Lockpick_Compatible_Loop_C_OnRecurring::Target' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_OnRecurring, Parameters) == 0x000008, "Member 'GCN_Lockpick_Compatible_Loop_C_OnRecurring::Parameters' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_OnRecurring, SpawnResults) == 0x0000E0, "Member 'GCN_Lockpick_Compatible_Loop_C_OnRecurring::SpawnResults' has a wrong offset!");

// Function GCN_Lockpick_Compatible_Loop.GCN_Lockpick_Compatible_Loop_C.OnRemoval
// 0x0138 (0x0138 - 0x0000)
struct GCN_Lockpick_Compatible_Loop_C_OnRemoval final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayCueNotify_SpawnResult         SpawnResults;                                      // 0x00E0(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(GCN_Lockpick_Compatible_Loop_C_OnRemoval) == 0x000008, "Wrong alignment on GCN_Lockpick_Compatible_Loop_C_OnRemoval");
static_assert(sizeof(GCN_Lockpick_Compatible_Loop_C_OnRemoval) == 0x000138, "Wrong size on GCN_Lockpick_Compatible_Loop_C_OnRemoval");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_OnRemoval, Target) == 0x000000, "Member 'GCN_Lockpick_Compatible_Loop_C_OnRemoval::Target' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_OnRemoval, Parameters) == 0x000008, "Member 'GCN_Lockpick_Compatible_Loop_C_OnRemoval::Parameters' has a wrong offset!");
static_assert(offsetof(GCN_Lockpick_Compatible_Loop_C_OnRemoval, SpawnResults) == 0x0000E0, "Member 'GCN_Lockpick_Compatible_Loop_C_OnRemoval::SpawnResults' has a wrong offset!");

}

