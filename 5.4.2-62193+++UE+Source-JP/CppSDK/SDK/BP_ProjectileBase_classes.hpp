#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ProjectileBase

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "JP_structs.hpp"
#include "JP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ProjectileBase.BP_ProjectileBase_C
// 0x0290 (0x0528 - 0x0298)
class ABP_ProjectileBase_C : public APooledActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       PlayerCollider;                                    // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WindAudio;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RotationOffset;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      TrailParticles;                                    // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        ChargePercent;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        ProjectileSpeed;                                   // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        GravityScale;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UNiagaraSystem*                         ImpactEffect;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  OwnerAsPawn;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                OwnerAbilitySystemComponent;                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HitSound;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 HitDecalClass;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldIgnoreInstigator;                            // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinDamage;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        MaxDamage;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TSoftObjectPtr<class UItemDefinition>         ThrownItemDefinition;                              // 0x0328(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 DamageGE;                                          // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Knockback_Force;                                   // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MeshComponent;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        MaximumAngleForBounce;                             // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayMaterialLayerSound;                            // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudioMaterialLayerVolumeMultiplier;                // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastHitActor;                                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueTag                        ProjectileDamageCue;                               // 0x0380(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FGameplayTagContainer                  VulnerabilityTagsToLookFor;                        // 0x0388(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          KnockbackCharacters;                               // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AA[0x6];                                      // 0x03AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCombatParticipant                     Killer;                                            // 0x03B0(0x0060)(Edit, BlueprintVisible, ExposeOnSpawn)
	double                                        DamageMultiplierToStructures;                      // 0x0410(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsCosmetic;                                        // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProjectileMovementComponent*           ProjectileComponent;                               // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldBounce;                                      // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartingLocation;                                  // 0x0430(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               StartingRotation;                                  // 0x0448(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UNiagaraComponent*                      SpawnedImpactEffectSystem;                         // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyDamageFalloffBasedOnDistance;                 // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FalloffDamageMaxDistance;                          // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRuntimeFloatCurve                     DamageFalloffCurve;                                // 0x0478(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftClassPtr<class UClass>                   KillerAbility;                                     // 0x0500(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)

public:
	void ActivateNiagaraSystems(bool Actrivate);
	void Apply_Hit_Effects_On_Valid_Entity(const struct FHitResult& Hit_Result, class UAbilitySystemComponent* Instigator_ASC, class UAbilitySystemComponent* HitTarget_ASC);
	void ApplyHitEffects(const struct FHitResult& Hit);
	void ApplyKillAssistedEffect(class UAbilitySystemComponent* TargetASC);
	void Audio_Default_Impact(const struct FVector& Location);
	void Audio_Material_Layer(const struct FVector& Location, class UPhysicalMaterial* PhysicalMaterial);
	void BndEvt__BP_ProjectileBase_PlayerCollider_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CacheOwnerInfo();
	double CalculateDamageFalloffMultiplier();
	double CalculateImpactAngle(const struct FHitResult& Hit, const struct FVector& Impact_Velocity);
	bool CanActivateTrap();
	void CheckImpactAbilitySystemComponents(const struct FHitResult& Hit, const class FString& Reason, bool* Is_Valid, class UAbilitySystemComponent** Instigator_ASC, class UAbilitySystemComponent** Target_ASC);
	void DamageAppliedCue();
	void DamageTarget(const struct FHitResult& Hit, class UAbilitySystemComponent* Instigator_Ability_System_Component, class UAbilitySystemComponent* Hit_Actor_Ability_System_Component);
	void DeactivatePooledActor();
	void DisableProjectile();
	void DoTargetImpactCosmetics(const struct FHitResult& Hit);
	void ExecuteUbergraph_BP_ProjectileBase(int32 EntryPoint);
	double GetDamage();
	void GetProjectileComponent(class UProjectileMovementComponent** ProjectileComponent_0);
	void HandleBounce(const struct FHitResult& Hit, const struct FVector& Impact_Velocity);
	void HandleProjectileStop(const struct FHitResult& Hit);
	void HandleShieldImpact(const struct FHitResult& HitResult);
	void HasValidAbilitySystemComponent(class AActor* Validation_Target, bool LogReason, const class FString& Reason, const class FString& Target_ASC, bool* Is_Valid, class UAbilitySystemComponent** Target_Ability_System_Component);
	void HighConstrastModeChanged(bool IsEnabled);
	void Hit_Self_on_Spawn(class AActor* OtherActor, bool* HitSelf);
	void IgnoreCollisionWithTeammates();
	void IsNewTarget(class AActor* HitActor, bool* IsNewTarget_0);
	void IsSameTeam(class UObject* HitActor, bool* Return);
	void K2_OnReset();
	void OnProjectileBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void OnProjectileStop(const struct FHitResult& ImpactResult);
	void OnVelocityRedirect(const struct FVector& NewVelocityWorldSpace);
	void PlayHitMarker(class AActor* Hit_Actor);
	void PlayImpactEffect(const struct FHitResult& Hit);
	void PooledBeginPlay();
	bool ProjectileBelongsToLocalPlayer();
	void Server_SpawnDecals(const struct FHitResult& HitResult);
	void Set_Collisions_With(class AActor* TargetActor, bool Ignore);
	void SetHighContrastMode(bool Enabled);
	void SetLocationRotationAndInitialVelocity();
	void SetMeshComponent();
	void SetNewInstigator(class APawn* NewInstigator);
	void SetSpeed();
	void Spawn_Hit_Cosmetics(const struct FHitResult& Hit);
	void Spawn_Hit_Decal(const struct FHitResult& Hit);
	void SpawnDebugSphere(const struct FHitResult& Hit);
	void TryKnockbackMessItem(const struct FHitResult& Info);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ProjectileBase_C">();
	}
	static class ABP_ProjectileBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ProjectileBase_C>();
	}
};
static_assert(alignof(ABP_ProjectileBase_C) == 0x000008, "Wrong alignment on ABP_ProjectileBase_C");
static_assert(sizeof(ABP_ProjectileBase_C) == 0x000528, "Wrong size on ABP_ProjectileBase_C");
static_assert(offsetof(ABP_ProjectileBase_C, UberGraphFrame) == 0x000298, "Member 'ABP_ProjectileBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, PlayerCollider) == 0x0002A0, "Member 'ABP_ProjectileBase_C::PlayerCollider' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, WindAudio) == 0x0002A8, "Member 'ABP_ProjectileBase_C::WindAudio' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, StaticMesh) == 0x0002B0, "Member 'ABP_ProjectileBase_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, RotationOffset) == 0x0002B8, "Member 'ABP_ProjectileBase_C::RotationOffset' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, TrailParticles) == 0x0002C0, "Member 'ABP_ProjectileBase_C::TrailParticles' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, Sphere) == 0x0002C8, "Member 'ABP_ProjectileBase_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ChargePercent) == 0x0002D0, "Member 'ABP_ProjectileBase_C::ChargePercent' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ProjectileSpeed) == 0x0002D8, "Member 'ABP_ProjectileBase_C::ProjectileSpeed' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, GravityScale) == 0x0002E0, "Member 'ABP_ProjectileBase_C::GravityScale' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ImpactEffect) == 0x0002E8, "Member 'ABP_ProjectileBase_C::ImpactEffect' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, OwnerAsPawn) == 0x0002F0, "Member 'ABP_ProjectileBase_C::OwnerAsPawn' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, OwnerAbilitySystemComponent) == 0x0002F8, "Member 'ABP_ProjectileBase_C::OwnerAbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, HitSound) == 0x000300, "Member 'ABP_ProjectileBase_C::HitSound' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, HitDecalClass) == 0x000308, "Member 'ABP_ProjectileBase_C::HitDecalClass' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ShouldIgnoreInstigator) == 0x000310, "Member 'ABP_ProjectileBase_C::ShouldIgnoreInstigator' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, MinDamage) == 0x000318, "Member 'ABP_ProjectileBase_C::MinDamage' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, MaxDamage) == 0x000320, "Member 'ABP_ProjectileBase_C::MaxDamage' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ThrownItemDefinition) == 0x000328, "Member 'ABP_ProjectileBase_C::ThrownItemDefinition' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DamageGE) == 0x000350, "Member 'ABP_ProjectileBase_C::DamageGE' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, Knockback_Force) == 0x000358, "Member 'ABP_ProjectileBase_C::Knockback_Force' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, MeshComponent) == 0x000360, "Member 'ABP_ProjectileBase_C::MeshComponent' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, MaximumAngleForBounce) == 0x000368, "Member 'ABP_ProjectileBase_C::MaximumAngleForBounce' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, PlayMaterialLayerSound) == 0x000370, "Member 'ABP_ProjectileBase_C::PlayMaterialLayerSound' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, AudioMaterialLayerVolumeMultiplier) == 0x000374, "Member 'ABP_ProjectileBase_C::AudioMaterialLayerVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, LastHitActor) == 0x000378, "Member 'ABP_ProjectileBase_C::LastHitActor' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ProjectileDamageCue) == 0x000380, "Member 'ABP_ProjectileBase_C::ProjectileDamageCue' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, VulnerabilityTagsToLookFor) == 0x000388, "Member 'ABP_ProjectileBase_C::VulnerabilityTagsToLookFor' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, KnockbackCharacters) == 0x0003A8, "Member 'ABP_ProjectileBase_C::KnockbackCharacters' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, Debug) == 0x0003A9, "Member 'ABP_ProjectileBase_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, Killer) == 0x0003B0, "Member 'ABP_ProjectileBase_C::Killer' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DamageMultiplierToStructures) == 0x000410, "Member 'ABP_ProjectileBase_C::DamageMultiplierToStructures' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, IsCosmetic) == 0x000418, "Member 'ABP_ProjectileBase_C::IsCosmetic' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ProjectileComponent) == 0x000420, "Member 'ABP_ProjectileBase_C::ProjectileComponent' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ShouldBounce) == 0x000428, "Member 'ABP_ProjectileBase_C::ShouldBounce' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, StartingLocation) == 0x000430, "Member 'ABP_ProjectileBase_C::StartingLocation' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, StartingRotation) == 0x000448, "Member 'ABP_ProjectileBase_C::StartingRotation' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, SpawnedImpactEffectSystem) == 0x000460, "Member 'ABP_ProjectileBase_C::SpawnedImpactEffectSystem' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ApplyDamageFalloffBasedOnDistance) == 0x000468, "Member 'ABP_ProjectileBase_C::ApplyDamageFalloffBasedOnDistance' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, FalloffDamageMaxDistance) == 0x000470, "Member 'ABP_ProjectileBase_C::FalloffDamageMaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DamageFalloffCurve) == 0x000478, "Member 'ABP_ProjectileBase_C::DamageFalloffCurve' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, KillerAbility) == 0x000500, "Member 'ABP_ProjectileBase_C::KillerAbility' has a wrong offset!");

}

