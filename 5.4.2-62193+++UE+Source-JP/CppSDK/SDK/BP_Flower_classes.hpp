#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Flower

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_MaterialTypes_structs.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Flower.BP_Flower_C
// 0x00B0 (0x0340 - 0x0290)
class ABP_Flower_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 SeeThrough;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FlowerMesh;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponentIW*              AbilitySystemComponentIW;                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FlowerEmissiveTimeline_NewTrack_0_A34FE33E466F85308A09A58F7C26C5D2; // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FlowerEmissiveTimeline__Direction_A34FE33E466F85308A09A58F7C26C5D2; // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FlowerEmissiveTimeline;                            // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         MorphTimeLine_Alpha_F4E0A68941D533892CA9538635C0AAC5; // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MorphTimeLine__Direction_F4E0A68941D533892CA9538635C0AAC5; // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MorphTimeLine;                                     // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         GrowTimeline_Time_6DB50A7740F77BD1221F05981C1B5BB4; // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            GrowTimeline__Direction_6DB50A7740F77BD1221F05981C1B5BB4; // 0x02EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GrowTimeline;                                      // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentHP;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHealth;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OldMappedAlpha;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DestructionValue;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FinishedGrowing;                                   // 0x0318(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Growing;                                           // 0x0319(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Destroyed;                                         // 0x031A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBeenCompletedOnce;                              // 0x031B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstHealthUpdateBlocked;                          // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SecondHealthUpdateBlocked;                         // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E[0x2];                                      // 0x031E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PreviousHealth;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ready;                                             // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFlowerGrown;                                     // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BndEvt__BP_Flower_AbilitySystemComponentIW_K2Node_ComponentBoundEvent_0_OnGameplayEffectAppliedDelegateBP__DelegateSignature(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayEffectSpec& Spec, const struct FActiveGameplayEffectHandle& Handle);
	void ChangeScore(bool Increase);
	void DestroyPlant();
	void ExecuteUbergraph_BP_Flower(int32 EntryPoint);
	void FlowerEmissiveTimeline__FinishedFunc();
	void FlowerEmissiveTimeline__UpdateFunc();
	void GetDurabilityCostWhenHit(double* Amount);
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void GrowTimeline__FinishedFunc();
	void GrowTimeline__UpdateFunc();
	void HitInterface(const struct FVector& Direction);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void MeleeHit(const class AActor*& AttackingActor);
	void MorphTimeLine__FinishedFunc();
	void MorphTimeLine__UpdateFunc();
	void OnDamaged(float Delta, class AActor* Causer, const struct FCombatParticipant& CombatParticipant, const struct FKillMethod& KillMethod, const struct FVector_NetQuantize& Location);
	void OnFlowerGrown__DelegateSignature();
	void OnHealthChanged(float Health, float MaxHealth_0);
	void OnRep_Destroyed();
	void OnRep_FinishedGrowing();
	void OnRep_Growing();
	void PlayMorphEffect();
	void ReceiveBeginPlay();
	void SetSeethroughParams();
	void StartGrow();
	void TakeDamage();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Flower_C">();
	}
	static class ABP_Flower_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Flower_C>();
	}
};
static_assert(alignof(ABP_Flower_C) == 0x000008, "Wrong alignment on ABP_Flower_C");
static_assert(sizeof(ABP_Flower_C) == 0x000340, "Wrong size on ABP_Flower_C");
static_assert(offsetof(ABP_Flower_C, UberGraphFrame) == 0x000290, "Member 'ABP_Flower_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, SeeThrough) == 0x000298, "Member 'ABP_Flower_C::SeeThrough' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, FlowerMesh) == 0x0002A0, "Member 'ABP_Flower_C::FlowerMesh' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, Scene) == 0x0002A8, "Member 'ABP_Flower_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, Niagara) == 0x0002B0, "Member 'ABP_Flower_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, Box) == 0x0002B8, "Member 'ABP_Flower_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, AbilitySystemComponentIW) == 0x0002C0, "Member 'ABP_Flower_C::AbilitySystemComponentIW' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, FlowerEmissiveTimeline_NewTrack_0_A34FE33E466F85308A09A58F7C26C5D2) == 0x0002C8, "Member 'ABP_Flower_C::FlowerEmissiveTimeline_NewTrack_0_A34FE33E466F85308A09A58F7C26C5D2' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, FlowerEmissiveTimeline__Direction_A34FE33E466F85308A09A58F7C26C5D2) == 0x0002CC, "Member 'ABP_Flower_C::FlowerEmissiveTimeline__Direction_A34FE33E466F85308A09A58F7C26C5D2' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, FlowerEmissiveTimeline) == 0x0002D0, "Member 'ABP_Flower_C::FlowerEmissiveTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, MorphTimeLine_Alpha_F4E0A68941D533892CA9538635C0AAC5) == 0x0002D8, "Member 'ABP_Flower_C::MorphTimeLine_Alpha_F4E0A68941D533892CA9538635C0AAC5' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, MorphTimeLine__Direction_F4E0A68941D533892CA9538635C0AAC5) == 0x0002DC, "Member 'ABP_Flower_C::MorphTimeLine__Direction_F4E0A68941D533892CA9538635C0AAC5' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, MorphTimeLine) == 0x0002E0, "Member 'ABP_Flower_C::MorphTimeLine' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, GrowTimeline_Time_6DB50A7740F77BD1221F05981C1B5BB4) == 0x0002E8, "Member 'ABP_Flower_C::GrowTimeline_Time_6DB50A7740F77BD1221F05981C1B5BB4' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, GrowTimeline__Direction_6DB50A7740F77BD1221F05981C1B5BB4) == 0x0002EC, "Member 'ABP_Flower_C::GrowTimeline__Direction_6DB50A7740F77BD1221F05981C1B5BB4' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, GrowTimeline) == 0x0002F0, "Member 'ABP_Flower_C::GrowTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, CurrentHP) == 0x0002F8, "Member 'ABP_Flower_C::CurrentHP' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, MaxHealth) == 0x000300, "Member 'ABP_Flower_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, OldMappedAlpha) == 0x000308, "Member 'ABP_Flower_C::OldMappedAlpha' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, DestructionValue) == 0x000310, "Member 'ABP_Flower_C::DestructionValue' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, FinishedGrowing) == 0x000318, "Member 'ABP_Flower_C::FinishedGrowing' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, Growing) == 0x000319, "Member 'ABP_Flower_C::Growing' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, Destroyed) == 0x00031A, "Member 'ABP_Flower_C::Destroyed' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, HasBeenCompletedOnce) == 0x00031B, "Member 'ABP_Flower_C::HasBeenCompletedOnce' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, FirstHealthUpdateBlocked) == 0x00031C, "Member 'ABP_Flower_C::FirstHealthUpdateBlocked' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, SecondHealthUpdateBlocked) == 0x00031D, "Member 'ABP_Flower_C::SecondHealthUpdateBlocked' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, PreviousHealth) == 0x000320, "Member 'ABP_Flower_C::PreviousHealth' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, Ready) == 0x000328, "Member 'ABP_Flower_C::Ready' has a wrong offset!");
static_assert(offsetof(ABP_Flower_C, OnFlowerGrown) == 0x000330, "Member 'ABP_Flower_C::OnFlowerGrown' has a wrong offset!");

}

