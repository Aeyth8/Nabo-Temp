#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterItemWheelComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CharacterItemWheelComponent.CharacterItemWheelComponent_C
// 0x0048 (0x00E8 - 0x00A0)
class UCharacterItemWheelComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UItemInstance*                          LastEquippedItem;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UItemWheelWI_C*                         ItemWheel;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UItemInstance*                          TempLastEquippedItem;                              // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UItemDefinition>         ItemThatCantBePreviousEquipped;                    // 0x00C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)

public:
	void EquipItem(class UItemInstance* Item);
	void EquipLastEquippedItem();
	void EquipNextItem();
	void EquipPreviousItemIndex();
	void EquipSomething(class UEquipmentInstance* OldEquipmentInstance, class ABP_ResidentCharacter_C* ResidentCharacter, class UEquipmentInstance** NewEquippedInstance);
	void ExecuteUbergraph_CharacterItemWheelComponent(int32 EntryPoint);
	bool ItemCanBeEquipped(class UItemInstance* ItemInstance);
	void Server_EquipItem(class UItemInstance* Item);
	void Server_EquipNextItemIndex();
	void Server_EquipPreviousItem();
	void Server_EquipPreviousItemIndex();

	class UEquipmentManagerComponent* GetEquipmentManager() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CharacterItemWheelComponent_C">();
	}
	static class UCharacterItemWheelComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterItemWheelComponent_C>();
	}
};
static_assert(alignof(UCharacterItemWheelComponent_C) == 0x000008, "Wrong alignment on UCharacterItemWheelComponent_C");
static_assert(sizeof(UCharacterItemWheelComponent_C) == 0x0000E8, "Wrong size on UCharacterItemWheelComponent_C");
static_assert(offsetof(UCharacterItemWheelComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UCharacterItemWheelComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCharacterItemWheelComponent_C, LastEquippedItem) == 0x0000A8, "Member 'UCharacterItemWheelComponent_C::LastEquippedItem' has a wrong offset!");
static_assert(offsetof(UCharacterItemWheelComponent_C, ItemWheel) == 0x0000B0, "Member 'UCharacterItemWheelComponent_C::ItemWheel' has a wrong offset!");
static_assert(offsetof(UCharacterItemWheelComponent_C, TempLastEquippedItem) == 0x0000B8, "Member 'UCharacterItemWheelComponent_C::TempLastEquippedItem' has a wrong offset!");
static_assert(offsetof(UCharacterItemWheelComponent_C, ItemThatCantBePreviousEquipped) == 0x0000C0, "Member 'UCharacterItemWheelComponent_C::ItemThatCantBePreviousEquipped' has a wrong offset!");

}

