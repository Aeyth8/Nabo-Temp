#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Benchmark

#include "Basic.hpp"

#include "BP_Benchmark_classes.hpp"
#include "BP_Benchmark_parameters.hpp"


namespace SDK
{

// Function BP_Benchmark.BP_Benchmark_C.AddToLowest1Percent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AddedToLowestPercent                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Benchmark_C::AddToLowest1Percent(bool* AddedToLowestPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "AddToLowest1Percent");

	Params::BP_Benchmark_C_AddToLowest1Percent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AddedToLowestPercent != nullptr)
		*AddedToLowestPercent = Parms.AddedToLowestPercent;
}


// Function BP_Benchmark.BP_Benchmark_C.BenchmarkFinished
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, class FString>      Benchmark_Results                                      (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_Benchmark_C::BenchmarkFinished(const TMap<class FString, class FString>& Benchmark_Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "BenchmarkFinished");

	Params::BP_Benchmark_C_BenchmarkFinished Parms{};

	Parms.Benchmark_Results = std::move(Benchmark_Results);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Benchmark.BP_Benchmark_C.BenchmarkStarted
// (BlueprintCallable, BlueprintEvent)

void ABP_Benchmark_C::BenchmarkStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "BenchmarkStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Benchmark.BP_Benchmark_C.CalculateAverageFps
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Benchmark_C::CalculateAverageFps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "CalculateAverageFps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Benchmark.BP_Benchmark_C.CalculateAverageFrameTime
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Benchmark_C::CalculateAverageFrameTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "CalculateAverageFrameTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Benchmark.BP_Benchmark_C.CalculateLowestAverage1Perenct
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Benchmark_C::CalculateLowestAverage1Perenct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "CalculateLowestAverage1Perenct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Benchmark.BP_Benchmark_C.ConvertToFPS
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Benchmark_C::ConvertToFPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "ConvertToFPS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Benchmark.BP_Benchmark_C.CreateBenchmarksResults
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, class FString>      BenchmarkResults_0                                     (Parm, OutParm)

void ABP_Benchmark_C::CreateBenchmarksResults(TMap<class FString, class FString>* BenchmarkResults_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "CreateBenchmarksResults");

	Params::BP_Benchmark_C_CreateBenchmarksResults Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BenchmarkResults_0 != nullptr)
		*BenchmarkResults_0 = std::move(Parms.BenchmarkResults_0);
}


// Function BP_Benchmark.BP_Benchmark_C.CreateBenchmarksResults_Warmup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, class FString>      BenchmarkResults_0                                     (Parm, OutParm)

void ABP_Benchmark_C::CreateBenchmarksResults_Warmup(TMap<class FString, class FString>* BenchmarkResults_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "CreateBenchmarksResults_Warmup");

	Params::BP_Benchmark_C_CreateBenchmarksResults_Warmup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BenchmarkResults_0 != nullptr)
		*BenchmarkResults_0 = std::move(Parms.BenchmarkResults_0);
}


// Function BP_Benchmark.BP_Benchmark_C.CreateBenchmarksResultsSummary
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, class FString>      BenchmarkResults_0                                     (Parm, OutParm)

void ABP_Benchmark_C::CreateBenchmarksResultsSummary(TMap<class FString, class FString>* BenchmarkResults_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "CreateBenchmarksResultsSummary");

	Params::BP_Benchmark_C_CreateBenchmarksResultsSummary Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BenchmarkResults_0 != nullptr)
		*BenchmarkResults_0 = std::move(Parms.BenchmarkResults_0);
}


// Function BP_Benchmark.BP_Benchmark_C.ExecuteUbergraph_BP_Benchmark
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Benchmark_C::ExecuteUbergraph_BP_Benchmark(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "ExecuteUbergraph_BP_Benchmark");

	Params::BP_Benchmark_C_ExecuteUbergraph_BP_Benchmark Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Benchmark.BP_Benchmark_C.HackTimerTick
// (BlueprintCallable, BlueprintEvent)

void ABP_Benchmark_C::HackTimerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "HackTimerTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Benchmark.BP_Benchmark_C.OnBenchmarkFinished__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, class FString>      Benchmark_Results                                      (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_Benchmark_C::OnBenchmarkFinished__DelegateSignature(const TMap<class FString, class FString>& Benchmark_Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "OnBenchmarkFinished__DelegateSignature");

	Params::BP_Benchmark_C_OnBenchmarkFinished__DelegateSignature Parms{};

	Parms.Benchmark_Results = std::move(Benchmark_Results);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Benchmark.BP_Benchmark_C.OnBenchmarkStarted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_Benchmark_C::OnBenchmarkStarted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "OnBenchmarkStarted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Benchmark.BP_Benchmark_C.PerformBenchmark
// (BlueprintCallable, BlueprintEvent)

void ABP_Benchmark_C::PerformBenchmark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "PerformBenchmark");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Benchmark.BP_Benchmark_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Benchmark_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "ReceiveTick");

	Params::BP_Benchmark_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Benchmark.BP_Benchmark_C.Sequence Player Finished
// (BlueprintCallable, BlueprintEvent)

void ABP_Benchmark_C::Sequence_Player_Finished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "Sequence Player Finished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Benchmark.BP_Benchmark_C.Warmup Countdown
// (BlueprintCallable, BlueprintEvent)

void ABP_Benchmark_C::Warmup_Countdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Benchmark_C", "Warmup Countdown");

	UObject::ProcessEvent(Func, nullptr);
}

}

