#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Goose

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "JP_structs.hpp"
#include "E_GooseStates_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Goose.BP_Goose_C.ApplyDamage
// 0x0270 (0x0270 - 0x0000)
struct BP_Goose_C_ApplyDamage final
{
public:
	struct FHitResult                             L_HitResult;                                       // 0x0000(0x00F8)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponentIW*              K2Node_DynamicCast_AsAbility_System_Component_IW;  // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x0128(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue_1;  // 0x0220(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue;             // 0x0228(0x0010)()
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x0238(0x0010)()
	struct FGameplayEffectContextHandle           CallFunc_GetEffectContext_ReturnValue;             // 0x0248(0x0018)()
	bool                                          CallFunc_ApplyGameplayEffectSpecToTargetWithChange_Changed; // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_ApplyGameplayEffectSpecToTargetWithChange_ReturnValue; // 0x0264(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_ApplyDamage) == 0x000008, "Wrong alignment on BP_Goose_C_ApplyDamage");
static_assert(sizeof(BP_Goose_C_ApplyDamage) == 0x000270, "Wrong size on BP_Goose_C_ApplyDamage");
static_assert(offsetof(BP_Goose_C_ApplyDamage, L_HitResult) == 0x000000, "Member 'BP_Goose_C_ApplyDamage::L_HitResult' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x0000F8, "Member 'BP_Goose_C_ApplyDamage::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000100, "Member 'BP_Goose_C_ApplyDamage::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, K2Node_DynamicCast_AsAbility_System_Component_IW) == 0x000118, "Member 'BP_Goose_C_ApplyDamage::K2Node_DynamicCast_AsAbility_System_Component_IW' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, K2Node_DynamicCast_bSuccess) == 0x000120, "Member 'BP_Goose_C_ApplyDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, CallFunc_MakeHitResult_ReturnValue) == 0x000128, "Member 'BP_Goose_C_ApplyDamage::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, CallFunc_GetAbilitySystemComponent_ReturnValue_1) == 0x000220, "Member 'BP_Goose_C_ApplyDamage::CallFunc_GetAbilitySystemComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, CallFunc_MakeOutgoingSpec_ReturnValue) == 0x000228, "Member 'BP_Goose_C_ApplyDamage::CallFunc_MakeOutgoingSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x000238, "Member 'BP_Goose_C_ApplyDamage::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, CallFunc_GetEffectContext_ReturnValue) == 0x000248, "Member 'BP_Goose_C_ApplyDamage::CallFunc_GetEffectContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, CallFunc_ApplyGameplayEffectSpecToTargetWithChange_Changed) == 0x000260, "Member 'BP_Goose_C_ApplyDamage::CallFunc_ApplyGameplayEffectSpecToTargetWithChange_Changed' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ApplyDamage, CallFunc_ApplyGameplayEffectSpecToTargetWithChange_ReturnValue) == 0x000264, "Member 'BP_Goose_C_ApplyDamage::CallFunc_ApplyGameplayEffectSpecToTargetWithChange_ReturnValue' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.Auth_Teleport To Controlling Actor
// 0x0018 (0x0018 - 0x0000)
struct BP_Goose_C_Auth_Teleport_To_Controlling_Actor final
{
public:
	struct FVector                                DestLocation;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_Auth_Teleport_To_Controlling_Actor) == 0x000008, "Wrong alignment on BP_Goose_C_Auth_Teleport_To_Controlling_Actor");
static_assert(sizeof(BP_Goose_C_Auth_Teleport_To_Controlling_Actor) == 0x000018, "Wrong size on BP_Goose_C_Auth_Teleport_To_Controlling_Actor");
static_assert(offsetof(BP_Goose_C_Auth_Teleport_To_Controlling_Actor, DestLocation) == 0x000000, "Member 'BP_Goose_C_Auth_Teleport_To_Controlling_Actor::DestLocation' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.CancelInteraction
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_CancelInteraction final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_CancelInteraction) == 0x000008, "Wrong alignment on BP_Goose_C_CancelInteraction");
static_assert(sizeof(BP_Goose_C_CancelInteraction) == 0x000008, "Wrong size on BP_Goose_C_CancelInteraction");
static_assert(offsetof(BP_Goose_C_CancelInteraction, InteractionComponent) == 0x000000, "Member 'BP_Goose_C_CancelInteraction::InteractionComponent' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.ExecuteUbergraph_BP_Goose
// 0x0330 (0x0330 - 0x0000)
struct BP_Goose_C_ExecuteUbergraph_BP_Goose final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GooseStates                                 Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GooseStates                                 Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_5;                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_4;                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Focusing_Actor;                       // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Interactable;                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Event_InteractionComponent_5;               // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_InteractionComponent_4;               // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_3;                   // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_InteractionComponent_3;               // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_InteractionComponent_2;               // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_2;                   // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_InteractionComponent_1;               // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor_1;                   // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_InteractionComponent;                 // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UEquipmentInstance*                     K2Node_CustomEvent_Instance;                       // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_CustomEvent_Character;                      // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEquipmentManagerComponent*             CallFunc_GetComponentByClass_ReturnValue;          // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_NewController;                        // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Enable;                         // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIC_Goose_C*                           K2Node_DynamicCast_AsAIC_Goose;                    // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetClosestOverlappingActorWithInterface_Return; // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x01B8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x01C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_DestLocation;                   // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TeleportTo_ReturnValue;                // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GooseStates                                 K2Node_Select_Default;                             // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x0248(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ACharacter* Character)>  K2Node_CreateDelegate_OutputDelegate_1;            // 0x0288(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_Hittable_C>         K2Node_DynamicCast_AsI_Hittable;                   // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UEquipmentInstance* Instance)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x02B4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ImpactCosmetics_ChangedAttributes;        // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_ExecuteUbergraph_BP_Goose) == 0x000008, "Wrong alignment on BP_Goose_C_ExecuteUbergraph_BP_Goose");
static_assert(sizeof(BP_Goose_C_ExecuteUbergraph_BP_Goose) == 0x000330, "Wrong size on BP_Goose_C_ExecuteUbergraph_BP_Goose");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, EntryPoint) == 0x000000, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, Temp_bool_Variable) == 0x000004, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, Temp_byte_Variable) == 0x000005, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, Temp_byte_Variable_1) == 0x000006, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000008, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractingActor_5) == 0x000020, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractingActor_5' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractingActor_4) == 0x000028, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractingActor_4' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_Focusing_Actor) == 0x000030, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_Focusing_Actor' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_Interactable) == 0x000038, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_Interactable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractionComponent_5) == 0x000040, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractionComponent_5' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractionComponent_4) == 0x000048, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractionComponent_4' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractingActor_3) == 0x000050, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractingActor_3' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractionComponent_3) == 0x000058, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractionComponent_3' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractionComponent_2) == 0x000060, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractionComponent_2' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractingActor_2) == 0x000068, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractingActor_2' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractionComponent_1) == 0x000070, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractionComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractingActor_1) == 0x000078, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractingActor_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractingActor) == 0x000080, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_InteractionComponent) == 0x000088, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_InteractionComponent' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_Get_ClassLog_Name_name) == 0x000090, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_CustomEvent_Instance) == 0x0000A0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_CustomEvent_Instance' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_GetObjectClass_ReturnValue) == 0x0000A8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x0000B0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_IsValid_ReturnValue) == 0x0000B1, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_CustomEvent_Character) == 0x0000B8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_CustomEvent_Character' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_Not_PreBool_ReturnValue) == 0x0000C0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_BooleanOR_ReturnValue) == 0x0000C1, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_GetComponentByClass_ReturnValue) == 0x0000C8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_DynamicCast_AsBP_Resident_Character) == 0x0000D0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x0000E0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Event_NewController) == 0x0000F8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_CustomEvent_Enable) == 0x000100, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_CustomEvent_Enable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_DynamicCast_AsAIC_Goose) == 0x000108, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_DynamicCast_AsAIC_Goose' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_DynamicCast_bSuccess_1) == 0x000110, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_GetClosestOverlappingActorWithInterface_Return) == 0x000118, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_GetClosestOverlappingActorWithInterface_Return' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_IsValid_ReturnValue_1) == 0x000120, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000128, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000140, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_FindLookAtRotation_ReturnValue) == 0x000158, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_GetForwardVector_ReturnValue) == 0x000170, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000188, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_Add_VectorVector_ReturnValue) == 0x0001A0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_CreateDelegate_OutputDelegate) == 0x0001B8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0001C8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_HasAuthority_ReturnValue) == 0x0001D0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_CustomEvent_DestLocation) == 0x0001D8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_CustomEvent_DestLocation' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_IsValid_ReturnValue_2) == 0x0001F0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0001F8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_K2_TeleportTo_ReturnValue) == 0x000210, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_K2_TeleportTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_Select_Default) == 0x000211, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000218, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000230, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_SpawnSystemAttached_ReturnValue) == 0x000248, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x000250, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000258, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000270, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_CreateDelegate_OutputDelegate_1) == 0x000288, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000298, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_DynamicCast_AsI_Hittable) == 0x0002A0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_DynamicCast_AsI_Hittable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_DynamicCast_bSuccess_2) == 0x0002B0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, K2Node_CreateDelegate_OutputDelegate_2) == 0x0002B4, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_GetActorForwardVector_ReturnValue) == 0x0002C8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0002E0, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x0002F8, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000310, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_ExecuteUbergraph_BP_Goose, CallFunc_ImpactCosmetics_ChangedAttributes) == 0x000328, "Member 'BP_Goose_C_ExecuteUbergraph_BP_Goose::CallFunc_ImpactCosmetics_ChangedAttributes' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetClosestOverlappingActorWithInterface
// 0x0148 (0x0148 - 0x0000)
struct BP_Goose_C_GetClosestOverlappingActorWithInterface final
{
public:
	class AActor*                                 Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<class AActor*, double>                   L_DistanceToActors;                                // 0x0008(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0090(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x00A0(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_Map_Keys_Keys;                            // 0x00B8(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_GooseTarget_C>      K2Node_DynamicCast_AsI_Goose_Target;               // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGooseTargetAlive_Return;                // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_Map_Keys_Keys_1;                          // 0x00F0(0x0010)(ReferenceParm)
	TArray<double>                                CallFunc_Map_Values_Values;                        // 0x0100(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MinOfFloatArray_IndexOfMinValue;          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MinOfFloatArray_MinValue;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CallFunc_MinOfFloatArray_FloatArray_ImplicitCast;  // 0x0130(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_Map_Add_Value_ImplicitCast;               // 0x0140(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_GetClosestOverlappingActorWithInterface) == 0x000008, "Wrong alignment on BP_Goose_C_GetClosestOverlappingActorWithInterface");
static_assert(sizeof(BP_Goose_C_GetClosestOverlappingActorWithInterface) == 0x000148, "Wrong size on BP_Goose_C_GetClosestOverlappingActorWithInterface");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, Return) == 0x000000, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::Return' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, L_DistanceToActors) == 0x000008, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::L_DistanceToActors' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, Temp_int_Array_Index_Variable) == 0x000058, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, K2Node_MakeArray_Array) == 0x000080, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, K2Node_MakeArray_Array_1) == 0x000090, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_SphereOverlapActors_OutActors) == 0x0000A0, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_SphereOverlapActors_ReturnValue) == 0x0000B0, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_Map_Keys_Keys) == 0x0000B8, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_Array_Length_ReturnValue) == 0x0000D0, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, K2Node_DynamicCast_AsI_Goose_Target) == 0x0000D8, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::K2Node_DynamicCast_AsI_Goose_Target' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_Less_IntInt_ReturnValue) == 0x0000E9, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_IsGooseTargetAlive_Return) == 0x0000EA, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_IsGooseTargetAlive_Return' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_DoesImplementInterface_ReturnValue) == 0x0000EB, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_Map_Keys_Keys_1) == 0x0000F0, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_Map_Values_Values) == 0x000100, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000110, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_MinOfFloatArray_IndexOfMinValue) == 0x000114, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_MinOfFloatArray_IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_MinOfFloatArray_MinValue) == 0x000118, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_MinOfFloatArray_MinValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_Array_Get_Item_1) == 0x000120, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_GetDistanceTo_ReturnValue) == 0x000128, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_MinOfFloatArray_FloatArray_ImplicitCast) == 0x000130, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_MinOfFloatArray_FloatArray_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetClosestOverlappingActorWithInterface, CallFunc_Map_Add_Value_ImplicitCast) == 0x000140, "Member 'BP_Goose_C_GetClosestOverlappingActorWithInterface::CallFunc_Map_Add_Value_ImplicitCast' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetEquipmentManager
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_GetEquipmentManager final
{
public:
	class UEquipmentManagerComponent*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_GetEquipmentManager) == 0x000008, "Wrong alignment on BP_Goose_C_GetEquipmentManager");
static_assert(sizeof(BP_Goose_C_GetEquipmentManager) == 0x000008, "Wrong size on BP_Goose_C_GetEquipmentManager");
static_assert(offsetof(BP_Goose_C_GetEquipmentManager, ReturnValue) == 0x000000, "Member 'BP_Goose_C_GetEquipmentManager::ReturnValue' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetGooseController
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_GetGooseController final
{
public:
	class AActor*                                 ControllingActor_0;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_GetGooseController) == 0x000008, "Wrong alignment on BP_Goose_C_GetGooseController");
static_assert(sizeof(BP_Goose_C_GetGooseController) == 0x000008, "Wrong size on BP_Goose_C_GetGooseController");
static_assert(offsetof(BP_Goose_C_GetGooseController, ControllingActor_0) == 0x000000, "Member 'BP_Goose_C_GetGooseController::ControllingActor_0' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetNewWidgetColor
// 0x0014 (0x0014 - 0x0000)
struct BP_Goose_C_GetNewWidgetColor final
{
public:
	struct FSlateColor                            NewColor;                                          // 0x0000(0x0014)(Parm, OutParm)
};
static_assert(alignof(BP_Goose_C_GetNewWidgetColor) == 0x000004, "Wrong alignment on BP_Goose_C_GetNewWidgetColor");
static_assert(sizeof(BP_Goose_C_GetNewWidgetColor) == 0x000014, "Wrong size on BP_Goose_C_GetNewWidgetColor");
static_assert(offsetof(BP_Goose_C_GetNewWidgetColor, NewColor) == 0x000000, "Member 'BP_Goose_C_GetNewWidgetColor::NewColor' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetOptionalText
// 0x0020 (0x0020 - 0x0000)
struct BP_Goose_C_GetOptionalText final
{
public:
	class FText                                   Return;                                            // 0x0000(0x0010)(Parm, OutParm)
	class FText                                   Optional_Second_Line;                              // 0x0010(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_Goose_C_GetOptionalText) == 0x000008, "Wrong alignment on BP_Goose_C_GetOptionalText");
static_assert(sizeof(BP_Goose_C_GetOptionalText) == 0x000020, "Wrong size on BP_Goose_C_GetOptionalText");
static_assert(offsetof(BP_Goose_C_GetOptionalText, Return) == 0x000000, "Member 'BP_Goose_C_GetOptionalText::Return' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetOptionalText, Optional_Second_Line) == 0x000010, "Member 'BP_Goose_C_GetOptionalText::Optional_Second_Line' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetOwnerAbilitySystemComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_GetOwnerAbilitySystemComponent final
{
public:
	class UAbilitySystemComponent*                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_GetOwnerAbilitySystemComponent) == 0x000008, "Wrong alignment on BP_Goose_C_GetOwnerAbilitySystemComponent");
static_assert(sizeof(BP_Goose_C_GetOwnerAbilitySystemComponent) == 0x000008, "Wrong size on BP_Goose_C_GetOwnerAbilitySystemComponent");
static_assert(offsetof(BP_Goose_C_GetOwnerAbilitySystemComponent, Return) == 0x000000, "Member 'BP_Goose_C_GetOwnerAbilitySystemComponent::Return' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetPriority
// 0x0004 (0x0004 - 0x0000)
struct BP_Goose_C_GetPriority final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_GetPriority) == 0x000004, "Wrong alignment on BP_Goose_C_GetPriority");
static_assert(sizeof(BP_Goose_C_GetPriority) == 0x000004, "Wrong size on BP_Goose_C_GetPriority");
static_assert(offsetof(BP_Goose_C_GetPriority, Priority) == 0x000000, "Member 'BP_Goose_C_GetPriority::Priority' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetWidgetLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_Goose_C_GetWidgetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_GetWidgetLocation) == 0x000008, "Wrong alignment on BP_Goose_C_GetWidgetLocation");
static_assert(sizeof(BP_Goose_C_GetWidgetLocation) == 0x000030, "Wrong size on BP_Goose_C_GetWidgetLocation");
static_assert(offsetof(BP_Goose_C_GetWidgetLocation, Location) == 0x000000, "Member 'BP_Goose_C_GetWidgetLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetWidgetLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_Goose_C_GetWidgetLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GrantGoose
// 0x0028 (0x0028 - 0x0000)
struct BP_Goose_C_GrantGoose final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryComponent*                    CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UItemInstance*                          CallFunc_AddItemDefinition_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCharacterItemWheelComponent_C*         CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_GrantGoose) == 0x000008, "Wrong alignment on BP_Goose_C_GrantGoose");
static_assert(sizeof(BP_Goose_C_GrantGoose) == 0x000028, "Wrong size on BP_Goose_C_GrantGoose");
static_assert(offsetof(BP_Goose_C_GrantGoose, InteractingActor) == 0x000000, "Member 'BP_Goose_C_GrantGoose::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GrantGoose, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'BP_Goose_C_GrantGoose::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GrantGoose, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'BP_Goose_C_GrantGoose::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GrantGoose, CallFunc_AddItemDefinition_ReturnValue) == 0x000018, "Member 'BP_Goose_C_GrantGoose::CallFunc_AddItemDefinition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GrantGoose, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000020, "Member 'BP_Goose_C_GrantGoose::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.HideInteractionWidget
// 0x0001 (0x0001 - 0x0000)
struct BP_Goose_C_HideInteractionWidget final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_HideInteractionWidget) == 0x000001, "Wrong alignment on BP_Goose_C_HideInteractionWidget");
static_assert(sizeof(BP_Goose_C_HideInteractionWidget) == 0x000001, "Wrong size on BP_Goose_C_HideInteractionWidget");
static_assert(offsetof(BP_Goose_C_HideInteractionWidget, Return) == 0x000000, "Member 'BP_Goose_C_HideInteractionWidget::Return' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.InteractableCancelInteraction
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_InteractableCancelInteraction final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_InteractableCancelInteraction) == 0x000008, "Wrong alignment on BP_Goose_C_InteractableCancelInteraction");
static_assert(sizeof(BP_Goose_C_InteractableCancelInteraction) == 0x000008, "Wrong size on BP_Goose_C_InteractableCancelInteraction");
static_assert(offsetof(BP_Goose_C_InteractableCancelInteraction, InteractionComponent) == 0x000000, "Member 'BP_Goose_C_InteractableCancelInteraction::InteractionComponent' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.InteractPressed
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_InteractPressed final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_InteractPressed) == 0x000008, "Wrong alignment on BP_Goose_C_InteractPressed");
static_assert(sizeof(BP_Goose_C_InteractPressed) == 0x000008, "Wrong size on BP_Goose_C_InteractPressed");
static_assert(offsetof(BP_Goose_C_InteractPressed, InteractingActor) == 0x000000, "Member 'BP_Goose_C_InteractPressed::InteractingActor' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.InteractReleased
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_InteractReleased final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_InteractReleased) == 0x000008, "Wrong alignment on BP_Goose_C_InteractReleased");
static_assert(sizeof(BP_Goose_C_InteractReleased) == 0x000008, "Wrong size on BP_Goose_C_InteractReleased");
static_assert(offsetof(BP_Goose_C_InteractReleased, InteractingActor) == 0x000000, "Member 'BP_Goose_C_InteractReleased::InteractingActor' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.IsInFocus
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_IsInFocus final
{
public:
	class AActor*                                 Focusing_Actor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_IsInFocus) == 0x000008, "Wrong alignment on BP_Goose_C_IsInFocus");
static_assert(sizeof(BP_Goose_C_IsInFocus) == 0x000008, "Wrong size on BP_Goose_C_IsInFocus");
static_assert(offsetof(BP_Goose_C_IsInFocus, Focusing_Actor) == 0x000000, "Member 'BP_Goose_C_IsInFocus::Focusing_Actor' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.IsInteractable
// 0x0001 (0x0001 - 0x0000)
struct BP_Goose_C_IsInteractable final
{
public:
	bool                                          Interactable_0;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_IsInteractable) == 0x000001, "Wrong alignment on BP_Goose_C_IsInteractable");
static_assert(sizeof(BP_Goose_C_IsInteractable) == 0x000001, "Wrong size on BP_Goose_C_IsInteractable");
static_assert(offsetof(BP_Goose_C_IsInteractable, Interactable_0) == 0x000000, "Member 'BP_Goose_C_IsInteractable::Interactable_0' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.On Owner Dead Event
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_On_Owner_Dead_Event final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_On_Owner_Dead_Event) == 0x000008, "Wrong alignment on BP_Goose_C_On_Owner_Dead_Event");
static_assert(sizeof(BP_Goose_C_On_Owner_Dead_Event) == 0x000008, "Wrong size on BP_Goose_C_On_Owner_Dead_Event");
static_assert(offsetof(BP_Goose_C_On_Owner_Dead_Event, Character) == 0x000000, "Member 'BP_Goose_C_On_Owner_Dead_Event::Character' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.On Unequipped Item
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_On_Unequipped_Item final
{
public:
	class UEquipmentInstance*                     Instance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_On_Unequipped_Item) == 0x000008, "Wrong alignment on BP_Goose_C_On_Unequipped_Item");
static_assert(sizeof(BP_Goose_C_On_Unequipped_Item) == 0x000008, "Wrong size on BP_Goose_C_On_Unequipped_Item");
static_assert(offsetof(BP_Goose_C_On_Unequipped_Item, Instance) == 0x000000, "Member 'BP_Goose_C_On_Unequipped_Item::Instance' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.OnRep_GooseState
// 0x0068 (0x0068 - 0x0000)
struct BP_Goose_C_OnRep_GooseState final
{
public:
	class USoundBase*                             Temp_object_Variable;                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_GooseStates                                 Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         Temp_object_Variable_6;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         Temp_object_Variable_7;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_GooseStates                                 Temp_byte_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         K2Node_Select_Default_1;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_OnRep_GooseState) == 0x000008, "Wrong alignment on BP_Goose_C_OnRep_GooseState");
static_assert(sizeof(BP_Goose_C_OnRep_GooseState) == 0x000068, "Wrong size on BP_Goose_C_OnRep_GooseState");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, Temp_object_Variable) == 0x000000, "Member 'BP_Goose_C_OnRep_GooseState::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, Temp_object_Variable_1) == 0x000008, "Member 'BP_Goose_C_OnRep_GooseState::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, Temp_object_Variable_2) == 0x000010, "Member 'BP_Goose_C_OnRep_GooseState::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, Temp_object_Variable_3) == 0x000018, "Member 'BP_Goose_C_OnRep_GooseState::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, Temp_byte_Variable) == 0x000020, "Member 'BP_Goose_C_OnRep_GooseState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, Temp_object_Variable_4) == 0x000028, "Member 'BP_Goose_C_OnRep_GooseState::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, Temp_object_Variable_5) == 0x000030, "Member 'BP_Goose_C_OnRep_GooseState::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, Temp_object_Variable_6) == 0x000038, "Member 'BP_Goose_C_OnRep_GooseState::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, Temp_object_Variable_7) == 0x000040, "Member 'BP_Goose_C_OnRep_GooseState::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, Temp_byte_Variable_1) == 0x000048, "Member 'BP_Goose_C_OnRep_GooseState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, K2Node_Select_Default) == 0x000050, "Member 'BP_Goose_C_OnRep_GooseState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000058, "Member 'BP_Goose_C_OnRep_GooseState::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'BP_Goose_C_OnRep_GooseState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, K2Node_SwitchEnum_CmpSuccess) == 0x00005A, "Member 'BP_Goose_C_OnRep_GooseState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_OnRep_GooseState, K2Node_Select_Default_1) == 0x000060, "Member 'BP_Goose_C_OnRep_GooseState::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.PostInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_Goose_C_PostInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_PostInteract) == 0x000008, "Wrong alignment on BP_Goose_C_PostInteract");
static_assert(sizeof(BP_Goose_C_PostInteract) == 0x000010, "Wrong size on BP_Goose_C_PostInteract");
static_assert(offsetof(BP_Goose_C_PostInteract, InteractingActor) == 0x000000, "Member 'BP_Goose_C_PostInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_PostInteract, InteractionComponent) == 0x000008, "Member 'BP_Goose_C_PostInteract::InteractionComponent' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.PreInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_Goose_C_PreInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_PreInteract) == 0x000008, "Wrong alignment on BP_Goose_C_PreInteract");
static_assert(sizeof(BP_Goose_C_PreInteract) == 0x000010, "Wrong size on BP_Goose_C_PreInteract");
static_assert(offsetof(BP_Goose_C_PreInteract, InteractingActor) == 0x000000, "Member 'BP_Goose_C_PreInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_PreInteract, InteractionComponent) == 0x000008, "Member 'BP_Goose_C_PreInteract::InteractionComponent' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_ReceivePossessed) == 0x000008, "Wrong alignment on BP_Goose_C_ReceivePossessed");
static_assert(sizeof(BP_Goose_C_ReceivePossessed) == 0x000008, "Wrong size on BP_Goose_C_ReceivePossessed");
static_assert(offsetof(BP_Goose_C_ReceivePossessed, NewController) == 0x000000, "Member 'BP_Goose_C_ReceivePossessed::NewController' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.RegisterInteracter
// 0x0010 (0x0010 - 0x0000)
struct BP_Goose_C_RegisterInteracter final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_RegisterInteracter) == 0x000008, "Wrong alignment on BP_Goose_C_RegisterInteracter");
static_assert(sizeof(BP_Goose_C_RegisterInteracter) == 0x000010, "Wrong size on BP_Goose_C_RegisterInteracter");
static_assert(offsetof(BP_Goose_C_RegisterInteracter, InteractionComponent) == 0x000000, "Member 'BP_Goose_C_RegisterInteracter::InteractionComponent' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_RegisterInteracter, InteractingActor) == 0x000008, "Member 'BP_Goose_C_RegisterInteracter::InteractingActor' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.SendMessageToAllPlayers
// 0x0128 (0x0128 - 0x0000)
struct BP_Goose_C_SendMessageToAllPlayers final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0010(0x0010)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0020(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTeam>                          CallFunc_GetTeams_ReturnValue;                     // 0x0048(0x0010)(ReferenceParm)
	struct FTeam                                  CallFunc_Array_Get_Item;                           // 0x0058(0x0038)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerStateJP*>                 CallFunc_GetPlayersOfTeam_ReturnValue;             // 0x0098(0x0010)(ReferenceParm)
	class APlayerStateJP*                         CallFunc_Array_Get_Item_1;                         // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlayerMessage                         K2Node_MakeStruct_PlayerMessage;                   // 0x00D0(0x0058)()
};
static_assert(alignof(BP_Goose_C_SendMessageToAllPlayers) == 0x000008, "Wrong alignment on BP_Goose_C_SendMessageToAllPlayers");
static_assert(sizeof(BP_Goose_C_SendMessageToAllPlayers) == 0x000128, "Wrong size on BP_Goose_C_SendMessageToAllPlayers");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_Goose_C_SendMessageToAllPlayers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_Goose_C_SendMessageToAllPlayers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'BP_Goose_C_SendMessageToAllPlayers::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_MakeLiteralText_ReturnValue) == 0x000010, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_TextToUpper_ReturnValue) == 0x000020, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_Conv_TextToString_ReturnValue) == 0x000030, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, Temp_int_Loop_Counter_Variable_1) == 0x000040, "Member 'BP_Goose_C_SendMessageToAllPlayers::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_GetTeams_ReturnValue) == 0x000048, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_GetTeams_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_Less_IntInt_ReturnValue) == 0x000094, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_GetPlayersOfTeam_ReturnValue) == 0x000098, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_GetPlayersOfTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_Array_Get_Item_1) == 0x0000A8, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_Array_Length_ReturnValue_1) == 0x0000B0, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000B4, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_GetController_ReturnValue) == 0x0000B8, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, K2Node_DynamicCast_AsPlayer_Controller) == 0x0000C0, "Member 'BP_Goose_C_SendMessageToAllPlayers::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'BP_Goose_C_SendMessageToAllPlayers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000CC, "Member 'BP_Goose_C_SendMessageToAllPlayers::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SendMessageToAllPlayers, K2Node_MakeStruct_PlayerMessage) == 0x0000D0, "Member 'BP_Goose_C_SendMessageToAllPlayers::K2Node_MakeStruct_PlayerMessage' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.SetBBControllingActor
// 0x0020 (0x0020 - 0x0000)
struct BP_Goose_C_SetBBControllingActor final
{
public:
	class UObject*                                ObjectValue;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Clear;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_SetBBControllingActor) == 0x000008, "Wrong alignment on BP_Goose_C_SetBBControllingActor");
static_assert(sizeof(BP_Goose_C_SetBBControllingActor) == 0x000020, "Wrong size on BP_Goose_C_SetBBControllingActor");
static_assert(offsetof(BP_Goose_C_SetBBControllingActor, ObjectValue) == 0x000000, "Member 'BP_Goose_C_SetBBControllingActor::ObjectValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetBBControllingActor, Clear) == 0x000008, "Member 'BP_Goose_C_SetBBControllingActor::Clear' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetBBControllingActor, CallFunc_MakeLiteralName_ReturnValue) == 0x00000C, "Member 'BP_Goose_C_SetBBControllingActor::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetBBControllingActor, CallFunc_GetBlackboard_ReturnValue) == 0x000018, "Member 'BP_Goose_C_SetBBControllingActor::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.SetBBGooseState
// 0x0018 (0x0018 - 0x0000)
struct BP_Goose_C_SetBBGooseState final
{
public:
	E_GooseStates                                 GooseState_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_SetBBGooseState) == 0x000008, "Wrong alignment on BP_Goose_C_SetBBGooseState");
static_assert(sizeof(BP_Goose_C_SetBBGooseState) == 0x000018, "Wrong size on BP_Goose_C_SetBBGooseState");
static_assert(offsetof(BP_Goose_C_SetBBGooseState, GooseState_0) == 0x000000, "Member 'BP_Goose_C_SetBBGooseState::GooseState_0' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetBBGooseState, CallFunc_MakeLiteralName_ReturnValue) == 0x000004, "Member 'BP_Goose_C_SetBBGooseState::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetBBGooseState, CallFunc_GetBlackboard_ReturnValue) == 0x000010, "Member 'BP_Goose_C_SetBBGooseState::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.SetGooseControlled
// 0x0008 (0x0008 - 0x0000)
struct BP_Goose_C_SetGooseControlled final
{
public:
	class AActor*                                 ControllingActor_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_SetGooseControlled) == 0x000008, "Wrong alignment on BP_Goose_C_SetGooseControlled");
static_assert(sizeof(BP_Goose_C_SetGooseControlled) == 0x000008, "Wrong size on BP_Goose_C_SetGooseControlled");
static_assert(offsetof(BP_Goose_C_SetGooseControlled, ControllingActor_0) == 0x000000, "Member 'BP_Goose_C_SetGooseControlled::ControllingActor_0' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.SetGooseTargetActor
// 0x0020 (0x0020 - 0x0000)
struct BP_Goose_C_SetGooseTargetActor final
{
public:
	class UObject*                                ObjectValue;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Clear;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_SetGooseTargetActor) == 0x000008, "Wrong alignment on BP_Goose_C_SetGooseTargetActor");
static_assert(sizeof(BP_Goose_C_SetGooseTargetActor) == 0x000020, "Wrong size on BP_Goose_C_SetGooseTargetActor");
static_assert(offsetof(BP_Goose_C_SetGooseTargetActor, ObjectValue) == 0x000000, "Member 'BP_Goose_C_SetGooseTargetActor::ObjectValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetGooseTargetActor, Clear) == 0x000008, "Member 'BP_Goose_C_SetGooseTargetActor::Clear' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetGooseTargetActor, CallFunc_GetBlackboard_ReturnValue) == 0x000010, "Member 'BP_Goose_C_SetGooseTargetActor::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetGooseTargetActor, CallFunc_MakeLiteralName_ReturnValue) == 0x000018, "Member 'BP_Goose_C_SetGooseTargetActor::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.SetHoveredComponent
// 0x0010 (0x0010 - 0x0000)
struct BP_Goose_C_SetHoveredComponent final
{
public:
	class UInteractionComponent_C*                HoveredComponent;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Void;                                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_SetHoveredComponent) == 0x000008, "Wrong alignment on BP_Goose_C_SetHoveredComponent");
static_assert(sizeof(BP_Goose_C_SetHoveredComponent) == 0x000010, "Wrong size on BP_Goose_C_SetHoveredComponent");
static_assert(offsetof(BP_Goose_C_SetHoveredComponent, HoveredComponent) == 0x000000, "Member 'BP_Goose_C_SetHoveredComponent::HoveredComponent' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetHoveredComponent, Void) == 0x000008, "Member 'BP_Goose_C_SetHoveredComponent::Void' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.SetInteractable
// 0x0001 (0x0001 - 0x0000)
struct BP_Goose_C_SetInteractable final
{
public:
	bool                                          Interactable_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_SetInteractable) == 0x000001, "Wrong alignment on BP_Goose_C_SetInteractable");
static_assert(sizeof(BP_Goose_C_SetInteractable) == 0x000001, "Wrong size on BP_Goose_C_SetInteractable");
static_assert(offsetof(BP_Goose_C_SetInteractable, Interactable_0) == 0x000000, "Member 'BP_Goose_C_SetInteractable::Interactable_0' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.SetKillData
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Goose_C_SetKillData final
{
public:
	struct FGameplayEffectSpecHandle              Spec;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FGameplayEffectContextHandle           CallFunc_GetEffectContext_ReturnValue;             // 0x0010(0x0018)()
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateJP_Match*                   K2Node_DynamicCast_AsPlayer_State_JP_Match;        // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCombatParticipant                     CallFunc_CreateCombatParticipantFromPlayer_ReturnValue; // 0x0048(0x0060)()
};
static_assert(alignof(BP_Goose_C_SetKillData) == 0x000008, "Wrong alignment on BP_Goose_C_SetKillData");
static_assert(sizeof(BP_Goose_C_SetKillData) == 0x0000A8, "Wrong size on BP_Goose_C_SetKillData");
static_assert(offsetof(BP_Goose_C_SetKillData, Spec) == 0x000000, "Member 'BP_Goose_C_SetKillData::Spec' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetKillData, CallFunc_GetEffectContext_ReturnValue) == 0x000010, "Member 'BP_Goose_C_SetKillData::CallFunc_GetEffectContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetKillData, K2Node_DynamicCast_AsPawn) == 0x000028, "Member 'BP_Goose_C_SetKillData::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetKillData, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_Goose_C_SetKillData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetKillData, K2Node_DynamicCast_AsPlayer_State_JP_Match) == 0x000038, "Member 'BP_Goose_C_SetKillData::K2Node_DynamicCast_AsPlayer_State_JP_Match' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetKillData, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_Goose_C_SetKillData::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_SetKillData, CallFunc_CreateCombatParticipantFromPlayer_ReturnValue) == 0x000048, "Member 'BP_Goose_C_SetKillData::CallFunc_CreateCombatParticipantFromPlayer_ReturnValue' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.Trace For Targets
// 0x0001 (0x0001 - 0x0000)
struct BP_Goose_C_Trace_For_Targets final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_Trace_For_Targets) == 0x000001, "Wrong alignment on BP_Goose_C_Trace_For_Targets");
static_assert(sizeof(BP_Goose_C_Trace_For_Targets) == 0x000001, "Wrong size on BP_Goose_C_Trace_For_Targets");
static_assert(offsetof(BP_Goose_C_Trace_For_Targets, Enable) == 0x000000, "Member 'BP_Goose_C_Trace_For_Targets::Enable' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.UnregisterInteracter
// 0x0010 (0x0010 - 0x0000)
struct BP_Goose_C_UnregisterInteracter final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_UnregisterInteracter) == 0x000008, "Wrong alignment on BP_Goose_C_UnregisterInteracter");
static_assert(sizeof(BP_Goose_C_UnregisterInteracter) == 0x000010, "Wrong size on BP_Goose_C_UnregisterInteracter");
static_assert(offsetof(BP_Goose_C_UnregisterInteracter, InteractionComponent) == 0x000000, "Member 'BP_Goose_C_UnregisterInteracter::InteractionComponent' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_UnregisterInteracter, InteractingActor) == 0x000008, "Member 'BP_Goose_C_UnregisterInteracter::InteractingActor' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.UpdateMoveSpeedbasedOnState
// 0x0018 (0x0018 - 0x0000)
struct BP_Goose_C_UpdateMoveSpeedbasedOnState final
{
public:
	E_GooseStates                                 Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_2;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_3;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_UpdateMoveSpeedbasedOnState) == 0x000004, "Wrong alignment on BP_Goose_C_UpdateMoveSpeedbasedOnState");
static_assert(sizeof(BP_Goose_C_UpdateMoveSpeedbasedOnState) == 0x000018, "Wrong size on BP_Goose_C_UpdateMoveSpeedbasedOnState");
static_assert(offsetof(BP_Goose_C_UpdateMoveSpeedbasedOnState, Temp_byte_Variable) == 0x000000, "Member 'BP_Goose_C_UpdateMoveSpeedbasedOnState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_UpdateMoveSpeedbasedOnState, Temp_real_Variable) == 0x000004, "Member 'BP_Goose_C_UpdateMoveSpeedbasedOnState::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_UpdateMoveSpeedbasedOnState, Temp_real_Variable_1) == 0x000008, "Member 'BP_Goose_C_UpdateMoveSpeedbasedOnState::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_UpdateMoveSpeedbasedOnState, Temp_real_Variable_2) == 0x00000C, "Member 'BP_Goose_C_UpdateMoveSpeedbasedOnState::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_UpdateMoveSpeedbasedOnState, Temp_real_Variable_3) == 0x000010, "Member 'BP_Goose_C_UpdateMoveSpeedbasedOnState::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_UpdateMoveSpeedbasedOnState, K2Node_Select_Default) == 0x000014, "Member 'BP_Goose_C_UpdateMoveSpeedbasedOnState::K2Node_Select_Default' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetInteractionDuration
// 0x0010 (0x0010 - 0x0000)
struct BP_Goose_C_GetInteractionDuration final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_GetInteractionDuration) == 0x000008, "Wrong alignment on BP_Goose_C_GetInteractionDuration");
static_assert(sizeof(BP_Goose_C_GetInteractionDuration) == 0x000010, "Wrong size on BP_Goose_C_GetInteractionDuration");
static_assert(offsetof(BP_Goose_C_GetInteractionDuration, InteractionComponent) == 0x000000, "Member 'BP_Goose_C_GetInteractionDuration::InteractionComponent' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetInteractionDuration, ReturnValue) == 0x000008, "Member 'BP_Goose_C_GetInteractionDuration::ReturnValue' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetPostInteractSyncType
// 0x0010 (0x0010 - 0x0000)
struct BP_Goose_C_GetPostInteractSyncType final
{
public:
	bool                                          bShouldSync;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityTaskNetSyncType                       Type;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_GetPostInteractSyncType) == 0x000008, "Wrong alignment on BP_Goose_C_GetPostInteractSyncType");
static_assert(sizeof(BP_Goose_C_GetPostInteractSyncType) == 0x000010, "Wrong size on BP_Goose_C_GetPostInteractSyncType");
static_assert(offsetof(BP_Goose_C_GetPostInteractSyncType, bShouldSync) == 0x000000, "Member 'BP_Goose_C_GetPostInteractSyncType::bShouldSync' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetPostInteractSyncType, Type) == 0x000001, "Member 'BP_Goose_C_GetPostInteractSyncType::Type' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetPostInteractSyncType, InteractionComponent) == 0x000008, "Member 'BP_Goose_C_GetPostInteractSyncType::InteractionComponent' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.GetPreInteractSyncType
// 0x0010 (0x0010 - 0x0000)
struct BP_Goose_C_GetPreInteractSyncType final
{
public:
	bool                                          bShouldSync;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAbilityTaskNetSyncType                       Type;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_GetPreInteractSyncType) == 0x000008, "Wrong alignment on BP_Goose_C_GetPreInteractSyncType");
static_assert(sizeof(BP_Goose_C_GetPreInteractSyncType) == 0x000010, "Wrong size on BP_Goose_C_GetPreInteractSyncType");
static_assert(offsetof(BP_Goose_C_GetPreInteractSyncType, bShouldSync) == 0x000000, "Member 'BP_Goose_C_GetPreInteractSyncType::bShouldSync' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetPreInteractSyncType, Type) == 0x000001, "Member 'BP_Goose_C_GetPreInteractSyncType::Type' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_GetPreInteractSyncType, InteractionComponent) == 0x000008, "Member 'BP_Goose_C_GetPreInteractSyncType::InteractionComponent' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.IsAvailableForEnemyTeam
// 0x0010 (0x0010 - 0x0000)
struct BP_Goose_C_IsAvailableForEnemyTeam final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_IsAvailableForEnemyTeam) == 0x000008, "Wrong alignment on BP_Goose_C_IsAvailableForEnemyTeam");
static_assert(sizeof(BP_Goose_C_IsAvailableForEnemyTeam) == 0x000010, "Wrong size on BP_Goose_C_IsAvailableForEnemyTeam");
static_assert(offsetof(BP_Goose_C_IsAvailableForEnemyTeam, InteractionComponent) == 0x000000, "Member 'BP_Goose_C_IsAvailableForEnemyTeam::InteractionComponent' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_IsAvailableForEnemyTeam, ReturnValue) == 0x000008, "Member 'BP_Goose_C_IsAvailableForEnemyTeam::ReturnValue' has a wrong offset!");

// Function BP_Goose.BP_Goose_C.IsAvailableForInteraction
// 0x0018 (0x0018 - 0x0000)
struct BP_Goose_C_IsAvailableForInteraction final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Goose_C_IsAvailableForInteraction) == 0x000008, "Wrong alignment on BP_Goose_C_IsAvailableForInteraction");
static_assert(sizeof(BP_Goose_C_IsAvailableForInteraction) == 0x000018, "Wrong size on BP_Goose_C_IsAvailableForInteraction");
static_assert(offsetof(BP_Goose_C_IsAvailableForInteraction, InteractingActor) == 0x000000, "Member 'BP_Goose_C_IsAvailableForInteraction::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_IsAvailableForInteraction, InteractionComponent) == 0x000008, "Member 'BP_Goose_C_IsAvailableForInteraction::InteractionComponent' has a wrong offset!");
static_assert(offsetof(BP_Goose_C_IsAvailableForInteraction, ReturnValue) == 0x000010, "Member 'BP_Goose_C_IsAvailableForInteraction::ReturnValue' has a wrong offset!");

}

