#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mole

#include "Basic.hpp"

#include "BP_Mole_classes.hpp"
#include "BP_Mole_parameters.hpp"


namespace SDK
{

// Function BP_Mole.BP_Mole_C.Clear Timers
// (BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::Clear_Timers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "Clear Timers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.Enable Active Collision
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::Enable_Active_Collision(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "Enable Active Collision");

	Params::BP_Mole_C_Enable_Active_Collision Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Mole.BP_Mole_C.ExecuteUbergraph_BP_Mole
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::ExecuteUbergraph_BP_Mole(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "ExecuteUbergraph_BP_Mole");

	Params::BP_Mole_C_ExecuteUbergraph_BP_Mole Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Mole.BP_Mole_C.GetDurabilityCostWhenHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Amount                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::GetDurabilityCostWhenHit(double* Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "GetDurabilityCostWhenHit");

	Params::BP_Mole_C_GetDurabilityCostWhenHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Amount != nullptr)
		*Amount = Parms.Amount;
}


// Function BP_Mole.BP_Mole_C.GetMaterialType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MaterialTypes                         MaterialType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::GetMaterialType(E_MaterialTypes* MaterialType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "GetMaterialType");

	Params::BP_Mole_C_GetMaterialType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaterialType != nullptr)
		*MaterialType = Parms.MaterialType;
}


// Function BP_Mole.BP_Mole_C.Hide Mole
// (BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::Hide_Mole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "Hide Mole");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.HitInterface
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::HitInterface(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "HitInterface");

	Params::BP_Mole_C_HitInterface Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Mole.BP_Mole_C.ImpactCosmetics
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ImpactCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitImpulse                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ImpactEffect                          ImpactEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangedAttributes                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "ImpactCosmetics");

	Params::BP_Mole_C_ImpactCosmetics Parms{};

	Parms.ImpactCauser = ImpactCauser;
	Parms.Location = std::move(Location);
	Parms.HitImpulse = std::move(HitImpulse);
	Parms.ImpactEffect = ImpactEffect;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangedAttributes != nullptr)
		*ChangedAttributes = Parms.ChangedAttributes;
}


// Function BP_Mole.BP_Mole_C.MeleeHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AttackingActor                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::MeleeHit(const class AActor*& AttackingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "MeleeHit");

	Params::BP_Mole_C_MeleeHit Parms{};

	Parms.AttackingActor = AttackingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Mole.BP_Mole_C.Multi_Mole Dead
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::Multi_Mole_Dead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "Multi_Mole Dead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.On Mole Active Timer Elapsed
// (BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::On_Mole_Active_Timer_Elapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "On Mole Active Timer Elapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.On Mole Timer Elapsed
// (BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::On_Mole_Timer_Elapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "On Mole Timer Elapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.OnDamaged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FCombatParticipant               CombatParticipant                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
// struct FKillMethod                      KillMethod                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
// struct FVector_NetQuantize              Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::OnDamaged(float Delta, class AActor* Causer, const struct FCombatParticipant& CombatParticipant, const struct FKillMethod& KillMethod, const struct FVector_NetQuantize& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "OnDamaged");

	Params::BP_Mole_C_OnDamaged Parms{};

	Parms.Delta = Delta;
	Parms.Causer = Causer;
	Parms.CombatParticipant = std::move(CombatParticipant);
	Parms.KillMethod = std::move(KillMethod);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Mole.BP_Mole_C.OnHealthChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Health                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxHealth                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::OnHealthChanged(float Health, float MaxHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "OnHealthChanged");

	Params::BP_Mole_C_OnHealthChanged Parms{};

	Parms.Health = Health;
	Parms.MaxHealth = MaxHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Mole.BP_Mole_C.OnRep_Completed
// (BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::OnRep_Completed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "OnRep_Completed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.OnRep_MoleActive
// (BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::OnRep_MoleActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "OnRep_MoleActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.Play Show Particles
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::Play_Show_Particles(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "Play Show Particles");

	Params::BP_Mole_C_Play_Show_Particles Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Mole.BP_Mole_C.PlayMoleSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundBase*                       In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Mole_C::PlayMoleSound(class USoundBase* In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "PlayMoleSound");

	Params::BP_Mole_C_PlayMoleSound Parms{};

	Parms.In = In;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Mole.BP_Mole_C.PlayRandomIdleAnimation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::PlayRandomIdleAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "PlayRandomIdleAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Mole_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.Show Mole
// (BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::Show_Mole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "Show Mole");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.Start Mole Timer
// (BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::Start_Mole_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "Start Mole Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.TakeDamage
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::TakeDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "TakeDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.TL_Location__FinishedFunc
// (BlueprintEvent)

void ABP_Mole_C::TL_Location__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "TL_Location__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.TL_Location__UpdateFunc
// (BlueprintEvent)

void ABP_Mole_C::TL_Location__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "TL_Location__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.TL_Scale__FinishedFunc
// (BlueprintEvent)

void ABP_Mole_C::TL_Scale__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "TL_Scale__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.TL_Scale__UpdateFunc
// (BlueprintEvent)

void ABP_Mole_C::TL_Scale__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "TL_Scale__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Mole.BP_Mole_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Mole_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Mole_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

