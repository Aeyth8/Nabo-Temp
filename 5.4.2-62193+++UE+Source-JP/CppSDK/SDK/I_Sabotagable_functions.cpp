#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Sabotagable

#include "Basic.hpp"

#include "I_Sabotagable_classes.hpp"
#include "I_Sabotagable_parameters.hpp"


namespace SDK
{

// Function I_Sabotagable.I_Sabotagable_C.IsSabotaged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           SabotagingActor                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_Tools                                 RequiredTool                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DurabilityCost                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Sabotagable_C::IsSabotaged(bool* Return, class AActor** SabotagingActor, E_Tools* RequiredTool, double* DurabilityCost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Sabotagable_C", "IsSabotaged");

	Params::I_Sabotagable_C_IsSabotaged Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;

	if (SabotagingActor != nullptr)
		*SabotagingActor = Parms.SabotagingActor;

	if (RequiredTool != nullptr)
		*RequiredTool = Parms.RequiredTool;

	if (DurabilityCost != nullptr)
		*DurabilityCost = Parms.DurabilityCost;
}


// Function I_Sabotagable.I_Sabotagable_C.Sabotage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SabotagingActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Sabotagable_C::Sabotage(class AActor* SabotagingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Sabotagable_C", "Sabotage");

	Params::I_Sabotagable_C_Sabotage Parms{};

	Parms.SabotagingActor = SabotagingActor;

	UObject::ProcessEvent(Func, &Parms);
}

}

