#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_JP_TPP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_VelocityBlend_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_CharacterIKOffset_TPP_structs.hpp"
#include "JP_structs.hpp"


namespace SDK::Params
{

// Function ABP_JP_TPP.ABP_JP_TPP_C.ADS
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_TPP_C_ADS final
{
public:
	bool                                          bADS_0;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_ADS) == 0x000001, "Wrong alignment on ABP_JP_TPP_C_ADS");
static_assert(sizeof(ABP_JP_TPP_C_ADS) == 0x000001, "Wrong size on ABP_JP_TPP_C_ADS");
static_assert(offsetof(ABP_JP_TPP_C_ADS, bADS_0) == 0x000000, "Member 'ABP_JP_TPP_C_ADS::bADS_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_TPP_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_AnimGraph");
static_assert(sizeof(ABP_JP_TPP_C_AnimGraph) == 0x000010, "Wrong size on ABP_JP_TPP_C_AnimGraph");
static_assert(offsetof(ABP_JP_TPP_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_JP_TPP_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.Attacking
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_TPP_C_Attacking final
{
public:
	bool                                          Attacking_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Heavy;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Error_Tolerance;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_Attacking) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_Attacking");
static_assert(sizeof(ABP_JP_TPP_C_Attacking) == 0x000010, "Wrong size on ABP_JP_TPP_C_Attacking");
static_assert(offsetof(ABP_JP_TPP_C_Attacking, Attacking_0) == 0x000000, "Member 'ABP_JP_TPP_C_Attacking::Attacking_0' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_Attacking, Heavy) == 0x000001, "Member 'ABP_JP_TPP_C_Attacking::Heavy' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_Attacking, Error_Tolerance) == 0x000008, "Member 'ABP_JP_TPP_C_Attacking::Error_Tolerance' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.base
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_TPP_C_base final
{
public:
	struct FPoseLink                              base_0;                                            // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_C_base) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_base");
static_assert(sizeof(ABP_JP_TPP_C_base) == 0x000010, "Wrong size on ABP_JP_TPP_C_base");
static_assert(offsetof(ABP_JP_TPP_C_base, base_0) == 0x000000, "Member 'ABP_JP_TPP_C_base::base_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.BasePose
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_TPP_C_BasePose final
{
public:
	struct FPoseLink                              BasePose_0;                                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_C_BasePose) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_BasePose");
static_assert(sizeof(ABP_JP_TPP_C_BasePose) == 0x000010, "Wrong size on ABP_JP_TPP_C_BasePose");
static_assert(offsetof(ABP_JP_TPP_C_BasePose, BasePose_0) == 0x000000, "Member 'ABP_JP_TPP_C_BasePose::BasePose_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.BlendLayers
// 0x0040 (0x0040 - 0x0000)
struct ABP_JP_TPP_C_BlendLayers final
{
public:
	struct FPoseLink                              BaseLayer;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              OverlayLayer;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BasePoseLayer;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BlendLayers_0;                                     // 0x0030(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_C_BlendLayers) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_BlendLayers");
static_assert(sizeof(ABP_JP_TPP_C_BlendLayers) == 0x000040, "Wrong size on ABP_JP_TPP_C_BlendLayers");
static_assert(offsetof(ABP_JP_TPP_C_BlendLayers, BaseLayer) == 0x000000, "Member 'ABP_JP_TPP_C_BlendLayers::BaseLayer' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_BlendLayers, OverlayLayer) == 0x000010, "Member 'ABP_JP_TPP_C_BlendLayers::OverlayLayer' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_BlendLayers, BasePoseLayer) == 0x000020, "Member 'ABP_JP_TPP_C_BlendLayers::BasePoseLayer' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_BlendLayers, BlendLayers_0) == 0x000030, "Member 'ABP_JP_TPP_C_BlendLayers::BlendLayers_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.Blocking
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_TPP_C_Blocking final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_Blocking) == 0x000001, "Wrong alignment on ABP_JP_TPP_C_Blocking");
static_assert(sizeof(ABP_JP_TPP_C_Blocking) == 0x000001, "Wrong size on ABP_JP_TPP_C_Blocking");
static_assert(offsetof(ABP_JP_TPP_C_Blocking, Blocked) == 0x000000, "Member 'ABP_JP_TPP_C_Blocking::Blocked' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.BlueprintThreadSafeUpdateAnimation
// 0x0018 (0x0018 - 0x0000)
struct ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_UpdateBlendWeightData_DeltaTime_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateAccelerationData_DeltaTime_ImplicitCast; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation) == 0x000018, "Wrong size on ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation, CallFunc_UpdateBlendWeightData_DeltaTime_ImplicitCast) == 0x000008, "Member 'ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation::CallFunc_UpdateBlendWeightData_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation, CallFunc_UpdateAccelerationData_DeltaTime_ImplicitCast) == 0x000010, "Member 'ABP_JP_TPP_C_BlueprintThreadSafeUpdateAnimation::CallFunc_UpdateAccelerationData_DeltaTime_ImplicitCast' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_JP_TPP_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_JP_TPP_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_JP_TPP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_JP_TPP_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_JP_TPP_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_JP_TPP_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.CalculateAcceleration
// 0x0098 (0x0098 - 0x0000)
struct ABP_JP_TPP_C_CalculateAcceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDeltaSeconds_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_2;                 // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast;                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast_1;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast_2;              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_CalculateAcceleration) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_CalculateAcceleration");
static_assert(sizeof(ABP_JP_TPP_C_CalculateAcceleration) == 0x000098, "Wrong size on ABP_JP_TPP_C_CalculateAcceleration");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, ReturnValue) == 0x000000, "Member 'ABP_JP_TPP_C_CalculateAcceleration::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_GetDeltaSeconds_ReturnValue) == 0x000018, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_GetDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000020, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_BreakVector_X) == 0x000038, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_BreakVector_Y) == 0x000040, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_BreakVector_Z) == 0x000048, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_SafeDivide_ReturnValue) == 0x000050, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_SafeDivide_ReturnValue_1) == 0x000058, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_SafeDivide_ReturnValue_2) == 0x000060, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_SafeDivide_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_MakeVector_ReturnValue) == 0x000068, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_SafeDivide_B_ImplicitCast) == 0x000080, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_SafeDivide_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_SafeDivide_B_ImplicitCast_1) == 0x000088, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_SafeDivide_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateAcceleration, CallFunc_SafeDivide_B_ImplicitCast_2) == 0x000090, "Member 'ABP_JP_TPP_C_CalculateAcceleration::CallFunc_SafeDivide_B_ImplicitCast_2' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.CalculateRelativeAccelerationAmount
// 0x0158 (0x0158 - 0x0000)
struct ABP_JP_TPP_C_CalculateRelativeAccelerationAmount final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_ClampSizeMax_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_2;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_ClampSizeMax_ReturnValue_1;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_3;                 // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_4;                 // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_5;                 // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue_1;     // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_ClampSizeMax_Max_ImplicitCast;     // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast;                // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast_1;              // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast_2;              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_ClampSizeMax_Max_ImplicitCast_1;   // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast_3;              // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast_4;              // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast_5;              // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_CalculateRelativeAccelerationAmount");
static_assert(sizeof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount) == 0x000158, "Wrong size on ABP_JP_TPP_C_CalculateRelativeAccelerationAmount");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, ReturnValue) == 0x000000, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_Dot_VectorVector_ReturnValue) == 0x000018, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_Vector_ClampSizeMax_ReturnValue) == 0x000020, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_Vector_ClampSizeMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000038, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_BreakVector_X) == 0x000040, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_BreakVector_Y) == 0x000048, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_BreakVector_Z) == 0x000050, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_ReturnValue) == 0x000058, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_ReturnValue_1) == 0x000060, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_ReturnValue_2) == 0x000068, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_Vector_ClampSizeMax_ReturnValue_1) == 0x000088, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_Vector_ClampSizeMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_BreakVector_X_1) == 0x0000A0, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_BreakVector_Y_1) == 0x0000A8, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_BreakVector_Z_1) == 0x0000B0, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_ReturnValue_3) == 0x0000B8, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x0000C0, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_ReturnValue_4) == 0x0000D8, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_ReturnValue_5) == 0x0000E0, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_MakeVector_ReturnValue_1) == 0x0000E8, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_LessLess_VectorRotator_ReturnValue_1) == 0x000100, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_LessLess_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_Vector_ClampSizeMax_Max_ImplicitCast) == 0x000118, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_Vector_ClampSizeMax_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_B_ImplicitCast) == 0x000120, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_B_ImplicitCast_1) == 0x000128, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_B_ImplicitCast_2) == 0x000130, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_Vector_ClampSizeMax_Max_ImplicitCast_1) == 0x000138, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_Vector_ClampSizeMax_Max_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_B_ImplicitCast_3) == 0x000140, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_B_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_B_ImplicitCast_4) == 0x000148, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_B_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateRelativeAccelerationAmount, CallFunc_SafeDivide_B_ImplicitCast_5) == 0x000150, "Member 'ABP_JP_TPP_C_CalculateRelativeAccelerationAmount::CallFunc_SafeDivide_B_ImplicitCast_5' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.CalculateVelocityBlend
// 0x0160 (0x0160 - 0x0000)
struct ABP_JP_TPP_C_CalculateVelocityBlend final
{
public:
	struct FS_VelocityBlend                       VelocityBlend_0;                                   // 0x0000(0x0020)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocRelativeVelocityDir;                            // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sum;                                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_2;                        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_2;                 // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_3;                        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_4;                        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_3;                     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_VelocityBlend                       K2Node_MakeStruct_S_VelocityBlend;                 // 0x0128(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_CalculateVelocityBlend) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_CalculateVelocityBlend");
static_assert(sizeof(ABP_JP_TPP_C_CalculateVelocityBlend) == 0x000160, "Wrong size on ABP_JP_TPP_C_CalculateVelocityBlend");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, VelocityBlend_0) == 0x000000, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::VelocityBlend_0' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, LocRelativeVelocityDir) == 0x000020, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::LocRelativeVelocityDir' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, Sum) == 0x000038, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::Sum' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_BreakVector_X) == 0x000040, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_BreakVector_Y) == 0x000048, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_BreakVector_Z) == 0x000050, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_SafeDivide_ReturnValue) == 0x000058, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_BreakVector_X_1) == 0x000060, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_BreakVector_Y_1) == 0x000068, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_BreakVector_Z_1) == 0x000070, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_SafeDivide_ReturnValue_1) == 0x000078, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_Abs_ReturnValue) == 0x000080, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_Abs_ReturnValue_1) == 0x000088, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_Abs_ReturnValue_2) == 0x000090, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_SafeDivide_ReturnValue_2) == 0x000098, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_SafeDivide_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_MakeVector_ReturnValue) == 0x0000A8, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000C0, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_BreakVector_X_2) == 0x0000C8, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_BreakVector_Y_2) == 0x0000D0, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_BreakVector_Z_2) == 0x0000D8, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_Normal_ReturnValue) == 0x0000E0, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_FClamp_ReturnValue) == 0x0000F8, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_FClamp_ReturnValue_1) == 0x000100, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_FClamp_ReturnValue_2) == 0x000108, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_Abs_ReturnValue_3) == 0x000110, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_Abs_ReturnValue_4) == 0x000118, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_Abs_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_FClamp_ReturnValue_3) == 0x000120, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, K2Node_MakeStruct_S_VelocityBlend) == 0x000128, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::K2Node_MakeStruct_S_VelocityBlend' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_CalculateVelocityBlend, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000148, "Member 'ABP_JP_TPP_C_CalculateVelocityBlend::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.DynamicTransitionCheck
// 0x0038 (0x0038 - 0x0000)
struct ABP_JP_TPP_C_DynamicTransitionCheck final
{
public:
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue_1;         // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue_1; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_1;    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_DynamicTransitionCheck) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_DynamicTransitionCheck");
static_assert(sizeof(ABP_JP_TPP_C_DynamicTransitionCheck) == 0x000038, "Wrong size on ABP_JP_TPP_C_DynamicTransitionCheck");
static_assert(offsetof(ABP_JP_TPP_C_DynamicTransitionCheck, CallFunc_GetOwningComponent_ReturnValue) == 0x000000, "Member 'ABP_JP_TPP_C_DynamicTransitionCheck::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_DynamicTransitionCheck, CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue) == 0x000008, "Member 'ABP_JP_TPP_C_DynamicTransitionCheck::CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_DynamicTransitionCheck, CallFunc_GetOwningComponent_ReturnValue_1) == 0x000010, "Member 'ABP_JP_TPP_C_DynamicTransitionCheck::CallFunc_GetOwningComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_DynamicTransitionCheck, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000018, "Member 'ABP_JP_TPP_C_DynamicTransitionCheck::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_DynamicTransitionCheck, CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue_1) == 0x00001C, "Member 'ABP_JP_TPP_C_DynamicTransitionCheck::CallFunc_K2_DistanceBetweenTwoSocketsAndMapRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_DynamicTransitionCheck, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000020, "Member 'ABP_JP_TPP_C_DynamicTransitionCheck::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_DynamicTransitionCheck, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'ABP_JP_TPP_C_DynamicTransitionCheck::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_DynamicTransitionCheck, CallFunc_Greater_DoubleDouble_A_ImplicitCast_1) == 0x000030, "Member 'ABP_JP_TPP_C_DynamicTransitionCheck::CallFunc_Greater_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.Event PlayDynamicTransition
// 0x0020 (0x0020 - 0x0000)
struct ABP_JP_TPP_C_Event_PlayDynamicTransition final
{
public:
	double                                        ReTriggerDelay;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         BlendInTime;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendOutTime;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InPlayRate;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InTimeToStartMontageAt;                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_Event_PlayDynamicTransition) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_Event_PlayDynamicTransition");
static_assert(sizeof(ABP_JP_TPP_C_Event_PlayDynamicTransition) == 0x000020, "Wrong size on ABP_JP_TPP_C_Event_PlayDynamicTransition");
static_assert(offsetof(ABP_JP_TPP_C_Event_PlayDynamicTransition, ReTriggerDelay) == 0x000000, "Member 'ABP_JP_TPP_C_Event_PlayDynamicTransition::ReTriggerDelay' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_Event_PlayDynamicTransition, Animation) == 0x000008, "Member 'ABP_JP_TPP_C_Event_PlayDynamicTransition::Animation' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_Event_PlayDynamicTransition, BlendInTime) == 0x000010, "Member 'ABP_JP_TPP_C_Event_PlayDynamicTransition::BlendInTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_Event_PlayDynamicTransition, BlendOutTime) == 0x000014, "Member 'ABP_JP_TPP_C_Event_PlayDynamicTransition::BlendOutTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_Event_PlayDynamicTransition, InPlayRate) == 0x000018, "Member 'ABP_JP_TPP_C_Event_PlayDynamicTransition::InPlayRate' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_Event_PlayDynamicTransition, InTimeToStartMontageAt) == 0x00001C, "Member 'ABP_JP_TPP_C_Event_PlayDynamicTransition::InTimeToStartMontageAt' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.ExecuteUbergraph_ABP_JP_TPP
// 0x05D0 (0x05D0 - 0x0000)
struct ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bReady;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   Temp_name_Variable;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0060(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x0078(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x0090(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x00A8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x00BC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x00D8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0100(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  CallFunc_Quat_MakeFromEuler_ReturnValue;           // 0x0110(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Quat_Rotator_ReturnValue;                 // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_4;          // 0x0186(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_5;          // 0x0187(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_6;          // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_7;          // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_8;          // 0x018B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x018E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x018F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bADS;                                 // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_9;          // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_10;         // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Blocked;                              // 0x0196(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0197(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_11;         // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_10;       // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_12;         // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19B[0x5];                                      // 0x019B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Time;                                 // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_PlayRate_1;                           // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B2[0x2];                                      // 0x01B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue; // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Rotate;                               // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x01BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x01BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BF[0x1];                                      // 0x01BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_1; // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x01C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x01C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Jab;                                  // 0x01C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_4;       // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x01CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x01CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CF[0x1];                                      // 0x01CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_EffectCauser;                         // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_3;          // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x01E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_11;       // 0x01E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_13;         // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_12;       // 0x01E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_14;         // 0x01E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_15;         // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_16;         // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_13;       // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_17;         // 0x01EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_2; // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_18;         // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_14;       // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x01F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_19;         // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_15;       // 0x01F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_16;       // 0x01F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x01F7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_17;       // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_20;         // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_21;         // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_3;    // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20A[0x2];                                      // 0x020A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_4;          // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_22;         // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_212[0x2];                                      // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_23;         // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_18;       // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_24;         // 0x021B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_25;         // 0x021C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_26;         // 0x021D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_27;         // 0x021E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_19;       // 0x021F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_28;         // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_29;         // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_222[0x6];                                      // 0x0222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_HoldTime;                             // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_5;       // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_5;          // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_232[0x2];                                      // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_3; // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_6;          // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_20;       // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x023B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_PlayRate;                             // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_6;       // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_7;       // 0x024A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24B[0x1];                                      // 0x024B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_4; // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_7;          // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue;       // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_10;                 // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_4;    // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_11;                 // 0x025A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_12;                 // 0x025B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_1;     // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_30;         // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_5;    // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x0262(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x0263(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_31;         // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_6;    // 0x0265(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_8;       // 0x0266(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x0267(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_7;    // 0x026A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26B[0x5];                                      // 0x026B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_8;          // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x027A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x027B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_21;       // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_9;          // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_9;       // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28A[0x2];                                      // 0x028A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_4;              // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_5;              // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_10;         // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_32;         // 0x02AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_22;       // 0x02AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_23;       // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_24;       // 0x02AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Attacking;                            // 0x02AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Heavy;                                // 0x02AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Error_Tolerance;                      // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_25;       // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_26;       // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_27;       // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Throwing;                             // 0x02BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_28;       // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_33;         // 0x02BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BE[0x2];                                      // 0x02BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_34;         // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_35;         // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_36;         // 0x02DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_29;       // 0x02DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_30;       // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_37;         // 0x02DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_31;       // 0x02DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_32;       // 0x02DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_13;                 // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_38;         // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_39;         // 0x02E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_40;         // 0x02E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_33;       // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_34;       // 0x02E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_35;       // 0x02E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_41;         // 0x02E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_36;       // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_42;         // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_43;         // 0x02EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_44;         // 0x02EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_37;       // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_38;       // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_45;         // 0x030A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_39;       // 0x030B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_40;       // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_41;       // 0x030D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_42;       // 0x030E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_46;         // 0x030F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_47;         // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_43;       // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_44;       // 0x0312(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_45;       // 0x0313(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_46;       // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_48;         // 0x0315(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_49;         // 0x0316(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_47;       // 0x0317(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_50;         // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_48;       // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_49;       // 0x031A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_50;       // 0x031B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_51;         // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_51;       // 0x031D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_52;         // 0x031E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_53;         // 0x031F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_52;       // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_53;       // 0x0321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_54;         // 0x0322(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_54;       // 0x0323(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_55;       // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_56;       // 0x0325(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_57;       // 0x0326(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_58;       // 0x0327(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_59;       // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_60;       // 0x0329(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_61;       // 0x032A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_55;         // 0x032B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_62;       // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_56;         // 0x032D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_63;       // 0x032E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32F[0x1];                                      // 0x032F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x0338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_MovementCharacter_C*                K2Node_DynamicCast_AsBP_Movement_Character;        // 0x0340(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0350(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_64;       // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_CharacterIKOffset_TPP               CallFunc_GetDataTableRowFromName_OutRow;           // 0x0378(0x00F0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_57;         // 0x0469(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46A[0x6];                                      // 0x046A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_InteractedObject;                     // 0x0470(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EItemsJP                                      K2Node_Event_OverlayState;                         // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_65;       // 0x0479(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_66;       // 0x047A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_58;         // 0x047B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0481(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_67;       // 0x0482(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x0483(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 K2Node_CustomEvent_InSkeletalMeshComponent;        // 0x0488(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x0490(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFacialStatesJP                               K2Node_Event_FacialState;                          // 0x0499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49A[0x6];                                      // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_HoldStateDuration;                    // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Volume;                               // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_ReTriggerDelay;                 // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_CustomEvent_Animation_1;                    // 0x04B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_BlendInTime_1;                  // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_BlendOutTime_1;                 // 0x04C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_InPlayRate_1;                   // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_InTimeToStartMontageAt_1;       // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue; // 0x04D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_CustomEvent_Animation;                      // 0x04E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_BlendInTime;                    // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_BlendOutTime;                   // 0x04F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_InPlayRate;                     // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_InTimeToStartMontageAt;         // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue_1; // 0x0500(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Leloi_C*                            K2Node_Event_PetActor;                             // 0x0508(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_68;       // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_69;       // 0x0511(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_512[0x2];                                      // 0x0512(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x051C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast;     // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1;  // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1; // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast_1;       // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast_2;       // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast_3;       // 0x0568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_2; // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_3; // 0x0578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast_4;       // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast_1;                     // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_X_ImplicitCast;                // 0x05A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Y_ImplicitCast;                // 0x05A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast;                // 0x05B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_1;            // 0x05BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_2;            // 0x05C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP) == 0x000010, "Wrong alignment on ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP");
static_assert(sizeof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP) == 0x0005D0, "Wrong size on ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, EntryPoint) == 0x000000, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_bReady) == 0x000010, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_bReady' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, Temp_name_Variable) == 0x000030, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeVector_ReturnValue) == 0x000038, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_NotifyName_4) == 0x000050, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_NotifyName_3) == 0x000058, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CreateDelegate_OutputDelegate) == 0x000060, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_NotifyName_2) == 0x000070, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CreateDelegate_OutputDelegate_1) == 0x000078, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_NotifyName_1) == 0x000088, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CreateDelegate_OutputDelegate_2) == 0x000090, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_NotifyName) == 0x0000A0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000A8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000B8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000BC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000D0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000D8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeVector_ReturnValue_1) == 0x0000E8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000100, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Quat_MakeFromEuler_ReturnValue) == 0x000110, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Quat_MakeFromEuler_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Quat_Rotator_ReturnValue) == 0x000130, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Quat_Rotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Not_PreBool_ReturnValue) == 0x000148, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000149, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00014A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00014B, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_IsValid_ReturnValue) == 0x00014C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetSocketLocation_ReturnValue) == 0x000150, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000168, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x000180, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x000181, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000182, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000183, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000184, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000185, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_4) == 0x000186, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_5) == 0x000187, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_6) == 0x000188, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x000189, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_7) == 0x00018A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_8) == 0x00018B, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x00018C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Not_PreBool_ReturnValue_1) == 0x00018D, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00018E, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue) == 0x00018F, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x000190, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_bADS) == 0x000191, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_bADS' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000192, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_9) == 0x000193, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_10) == 0x000194, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x000195, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_Blocked) == 0x000196, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_Blocked' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_1) == 0x000197, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_11) == 0x000198, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_10) == 0x000199, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_12) == 0x00019A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_Time) == 0x0001A0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_PlayRate_1) == 0x0001A8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_PlayRate_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0001B0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0001B1, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue) == 0x0001B4, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_Rotate) == 0x0001B8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_Rotate' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x0001B9, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue) == 0x0001BA, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0001BB, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_1) == 0x0001BC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_2) == 0x0001BD, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x0001BE, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_1) == 0x0001C0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0001C4, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0001C5, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_3) == 0x0001C6, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_Jab) == 0x0001C7, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_Jab' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_4) == 0x0001C8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_5) == 0x0001C9, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_ReturnValue_4) == 0x0001CA, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_2) == 0x0001CB, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Not_PreBool_ReturnValue_2) == 0x0001CC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_3) == 0x0001CD, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x0001CE, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_EffectCauser) == 0x0001D0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_EffectCauser' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0001D8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Not_PreBool_ReturnValue_3) == 0x0001E0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue_3) == 0x0001E1, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_4) == 0x0001E2, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_11) == 0x0001E3, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_5) == 0x0001E4, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_13) == 0x0001E5, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_12) == 0x0001E6, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_14) == 0x0001E7, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_15) == 0x0001E8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_16) == 0x0001E9, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_13) == 0x0001EA, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_17) == 0x0001EB, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_2) == 0x0001EC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x0001F0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_18) == 0x0001F1, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_14) == 0x0001F2, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_6) == 0x0001F3, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_19) == 0x0001F4, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_15) == 0x0001F5, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_16) == 0x0001F6, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Not_PreBool_ReturnValue_4) == 0x0001F7, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Not_PreBool_ReturnValue_5) == 0x0001F8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_6) == 0x0001F9, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_17) == 0x0001FA, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_20) == 0x0001FB, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_21) == 0x0001FC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x000200, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x000204, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x000208, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_ReturnValue_3) == 0x000209, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetCurveValue_ReturnValue) == 0x00020C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue_4) == 0x000210, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_22) == 0x000211, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetCurveValue_ReturnValue_1) == 0x000214, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000218, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_23) == 0x000219, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_18) == 0x00021A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_24) == 0x00021B, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_25) == 0x00021C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_26) == 0x00021D, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_27) == 0x00021E, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_19) == 0x00021F, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_28) == 0x000220, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_29) == 0x000221, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_HoldTime) == 0x000228, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_HoldTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_ReturnValue_5) == 0x000230, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue_5) == 0x000231, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_3) == 0x000234, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue_6) == 0x000238, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_20) == 0x000239, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_7) == 0x00023A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_8) == 0x00023B, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_PlayRate) == 0x000240, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_9) == 0x000248, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_ReturnValue_6) == 0x000249, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_ReturnValue_7) == 0x00024A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_4) == 0x00024C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue_7) == 0x000250, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetInstanceStateWeight_ReturnValue) == 0x000254, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetInstanceStateWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_10) == 0x000258, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_ReturnValue_4) == 0x000259, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_11) == 0x00025A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_12) == 0x00025B, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetInstanceStateWeight_ReturnValue_1) == 0x00025C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetInstanceStateWeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_30) == 0x000260, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_ReturnValue_5) == 0x000261, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Not_PreBool_ReturnValue_6) == 0x000262, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_7) == 0x000263, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_31) == 0x000264, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_ReturnValue_6) == 0x000265, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_ReturnValue_8) == 0x000266, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Not_PreBool_ReturnValue_7) == 0x000267, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_8) == 0x000268, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_9) == 0x000269, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_ReturnValue_7) == 0x00026A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000270, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Not_PreBool_ReturnValue_8) == 0x000278, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue_8) == 0x000279, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_10) == 0x00027A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_11) == 0x00027B, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_21) == 0x00027C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetCurveValue_ReturnValue_2) == 0x000280, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetCurveValue_ReturnValue_3) == 0x000284, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue_9) == 0x000288, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_ReturnValue_9) == 0x000289, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetCurveValue_ReturnValue_4) == 0x00028C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetCurveValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetCurveValue_ReturnValue_5) == 0x000290, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetCurveValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Abs_ReturnValue) == 0x000298, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Abs_ReturnValue_1) == 0x0002A0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x0002A8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_ReturnValue_10) == 0x0002A9, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_32) == 0x0002AA, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_22) == 0x0002AB, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_23) == 0x0002AC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_24) == 0x0002AD, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_Attacking) == 0x0002AE, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_Attacking' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_Heavy) == 0x0002AF, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_Heavy' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_Error_Tolerance) == 0x0002B0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_Error_Tolerance' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_25) == 0x0002B8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_26) == 0x0002B9, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_27) == 0x0002BA, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_Throwing) == 0x0002BB, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_Throwing' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_28) == 0x0002BC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_33) == 0x0002BD, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeRotator_ReturnValue_1) == 0x0002C0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_34) == 0x0002D8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_35) == 0x0002D9, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_36) == 0x0002DA, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_29) == 0x0002DB, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_30) == 0x0002DC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_37) == 0x0002DD, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_31) == 0x0002DE, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_32) == 0x0002DF, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanOR_ReturnValue_13) == 0x0002E0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanOR_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_38) == 0x0002E1, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_38' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_39) == 0x0002E2, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_39' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_40) == 0x0002E3, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_40' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_33) == 0x0002E4, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_34) == 0x0002E5, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_35) == 0x0002E6, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_41) == 0x0002E7, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_41' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_36) == 0x0002E8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_42) == 0x0002E9, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_42' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_43) == 0x0002EA, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_43' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_44) == 0x0002EB, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_44' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeVector_ReturnValue_2) == 0x0002F0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_37) == 0x000308, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_38) == 0x000309, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_38' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_45) == 0x00030A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_45' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_39) == 0x00030B, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_39' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_40) == 0x00030C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_40' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_41) == 0x00030D, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_41' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_42) == 0x00030E, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_42' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_46) == 0x00030F, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_46' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_47) == 0x000310, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_47' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_43) == 0x000311, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_43' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_44) == 0x000312, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_44' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_45) == 0x000313, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_45' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_46) == 0x000314, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_46' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_48) == 0x000315, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_48' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_49) == 0x000316, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_49' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_47) == 0x000317, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_47' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_50) == 0x000318, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_50' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_48) == 0x000319, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_48' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_49) == 0x00031A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_49' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_50) == 0x00031B, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_50' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_51) == 0x00031C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_51' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_51) == 0x00031D, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_51' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_52) == 0x00031E, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_52' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_53) == 0x00031F, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_53' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_52) == 0x000320, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_52' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_53) == 0x000321, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_53' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_54) == 0x000322, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_54' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_54) == 0x000323, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_54' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_55) == 0x000324, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_55' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_56) == 0x000325, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_56' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_57) == 0x000326, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_57' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_58) == 0x000327, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_58' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_59) == 0x000328, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_59' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_60) == 0x000329, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_60' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_61) == 0x00032A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_61' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_55) == 0x00032B, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_55' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_62) == 0x00032C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_62' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_56) == 0x00032D, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_56' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_63) == 0x00032E, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_63' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000330, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x000338, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_DynamicCast_AsBP_Movement_Character) == 0x000340, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_DynamicCast_AsBP_Movement_Character' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_DynamicCast_bSuccess) == 0x000348, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000350, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_DynamicCast_bSuccess_1) == 0x000358, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_64) == 0x000359, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_64' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000360, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Conv_StringToName_ReturnValue) == 0x000370, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetDataTableRowFromName_OutRow) == 0x000378, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000468, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_57) == 0x000469, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_57' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_InteractedObject) == 0x000470, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_InteractedObject' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_OverlayState) == 0x000478, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_OverlayState' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_65) == 0x000479, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_65' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_66) == 0x00047A, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_66' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_ByteByte_ReturnValue_58) == 0x00047B, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_ByteByte_ReturnValue_58' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_DeltaTimeX) == 0x00047C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, Temp_bool_Has_Been_Initd_Variable) == 0x000480, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, Temp_bool_IsClosed_Variable) == 0x000481, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_67) == 0x000482, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_67' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_BooleanAND_ReturnValue_12) == 0x000483, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_InSkeletalMeshComponent) == 0x000488, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x000490, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_IsValid_ReturnValue_1) == 0x000498, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_FacialState) == 0x000499, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_FacialState' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_HoldStateDuration) == 0x0004A0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_HoldStateDuration' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_Volume) == 0x0004A8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_Volume' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_ReTriggerDelay) == 0x0004B0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_ReTriggerDelay' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_Animation_1) == 0x0004B8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_Animation_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_BlendInTime_1) == 0x0004C0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_BlendInTime_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_BlendOutTime_1) == 0x0004C4, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_BlendOutTime_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_InPlayRate_1) == 0x0004C8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_InPlayRate_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_InTimeToStartMontageAt_1) == 0x0004CC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_InTimeToStartMontageAt_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue) == 0x0004D0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_RandomFloatInRange_ReturnValue) == 0x0004D8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x0004E0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_Animation) == 0x0004E8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_Animation' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_BlendInTime) == 0x0004F0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_BlendInTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_BlendOutTime) == 0x0004F4, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_BlendOutTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_InPlayRate) == 0x0004F8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_InPlayRate' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_CustomEvent_InTimeToStartMontageAt) == 0x0004FC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_CustomEvent_InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue_1) == 0x000500, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, K2Node_Event_PetActor) == 0x000508, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::K2Node_Event_PetActor' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_68) == 0x000510, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_68' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_ByteByte_ReturnValue_69) == 0x000511, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_ByteByte_ReturnValue_69' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000514, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000518, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x00051C, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast) == 0x000520, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000528, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000530, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1) == 0x000538, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000540, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1) == 0x000548, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_A_ImplicitCast_1) == 0x000550, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000558, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_A_ImplicitCast_2) == 0x000560, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_A_ImplicitCast_3) == 0x000568, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_2) == 0x000570, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_3) == 0x000578, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Less_DoubleDouble_A_ImplicitCast_4) == 0x000580, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Less_DoubleDouble_A_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000588, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Abs_A_ImplicitCast) == 0x000590, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Abs_A_ImplicitCast_1) == 0x000598, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Abs_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeVector_X_ImplicitCast) == 0x0005A0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeVector_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeVector_Y_ImplicitCast) == 0x0005A8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeVector_Y_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_MakeVector_Z_ImplicitCast) == 0x0005B0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_MakeVector_Z_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Delay_Duration_ImplicitCast) == 0x0005B8, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Delay_Duration_ImplicitCast_1) == 0x0005BC, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Delay_Duration_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP, CallFunc_Delay_Duration_ImplicitCast_2) == 0x0005C0, "Member 'ABP_JP_TPP_C_ExecuteUbergraph_ABP_JP_TPP::CallFunc_Delay_Duration_ImplicitCast_2' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.FacialLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_JP_TPP_C_FacialLayer final
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FacialLayer_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_C_FacialLayer) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_FacialLayer");
static_assert(sizeof(ABP_JP_TPP_C_FacialLayer) == 0x000020, "Wrong size on ABP_JP_TPP_C_FacialLayer");
static_assert(offsetof(ABP_JP_TPP_C_FacialLayer, InputPose) == 0x000000, "Member 'ABP_JP_TPP_C_FacialLayer::InputPose' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_FacialLayer, FacialLayer_0) == 0x000010, "Member 'ABP_JP_TPP_C_FacialLayer::FacialLayer_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.FootIK
// 0x0020 (0x0020 - 0x0000)
struct ABP_JP_TPP_C_FootIK final
{
public:
	struct FPoseLink                              InPoseFootIK;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FootIK_0;                                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_C_FootIK) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_FootIK");
static_assert(sizeof(ABP_JP_TPP_C_FootIK) == 0x000020, "Wrong size on ABP_JP_TPP_C_FootIK");
static_assert(offsetof(ABP_JP_TPP_C_FootIK, InPoseFootIK) == 0x000000, "Member 'ABP_JP_TPP_C_FootIK::InPoseFootIK' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_FootIK, FootIK_0) == 0x000010, "Member 'ABP_JP_TPP_C_FootIK::FootIK_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.GetDebugTraceType
// 0x0002 (0x0002 - 0x0000)
struct ABP_JP_TPP_C_GetDebugTraceType final
{
public:
	EDrawDebugTrace                               ShowTraceType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DebugType;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_GetDebugTraceType) == 0x000001, "Wrong alignment on ABP_JP_TPP_C_GetDebugTraceType");
static_assert(sizeof(ABP_JP_TPP_C_GetDebugTraceType) == 0x000002, "Wrong size on ABP_JP_TPP_C_GetDebugTraceType");
static_assert(offsetof(ABP_JP_TPP_C_GetDebugTraceType, ShowTraceType) == 0x000000, "Member 'ABP_JP_TPP_C_GetDebugTraceType::ShowTraceType' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetDebugTraceType, DebugType) == 0x000001, "Member 'ABP_JP_TPP_C_GetDebugTraceType::DebugType' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.GetMovementComponent
// 0x0018 (0x0018 - 0x0000)
struct ABP_JP_TPP_C_GetMovementComponent final
{
public:
	class UCharacterMovementComponent*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            K2Node_DynamicCast_AsCharacter_Movement_Component; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_GetMovementComponent) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_GetMovementComponent");
static_assert(sizeof(ABP_JP_TPP_C_GetMovementComponent) == 0x000018, "Wrong size on ABP_JP_TPP_C_GetMovementComponent");
static_assert(offsetof(ABP_JP_TPP_C_GetMovementComponent, ReturnValue) == 0x000000, "Member 'ABP_JP_TPP_C_GetMovementComponent::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetMovementComponent, K2Node_DynamicCast_AsCharacter_Movement_Component) == 0x000008, "Member 'ABP_JP_TPP_C_GetMovementComponent::K2Node_DynamicCast_AsCharacter_Movement_Component' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetMovementComponent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_JP_TPP_C_GetMovementComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.GetStandingPlayRate
// 0x0078 (0x0078 - 0x0000)
struct ABP_JP_TPP_C_GetStandingPlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_GetStandingPlayRate) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_GetStandingPlayRate");
static_assert(sizeof(ABP_JP_TPP_C_GetStandingPlayRate) == 0x000078, "Wrong size on ABP_JP_TPP_C_GetStandingPlayRate");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, PlayRate) == 0x000000, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_GetCurveValue_ReturnValue) == 0x000008, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_FClamp_ReturnValue_1) == 0x000030, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000040, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_Lerp_ReturnValue) == 0x000048, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_Lerp_ReturnValue_1) == 0x000050, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x000058, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_FClamp_ReturnValue_2) == 0x000060, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000068, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_GetStandingPlayRate, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x000070, "Member 'ABP_JP_TPP_C_GetStandingPlayRate::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.HandIK
// 0x0020 (0x0020 - 0x0000)
struct ABP_JP_TPP_C_HandIK final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HandIK_0;                                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_C_HandIK) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_HandIK");
static_assert(sizeof(ABP_JP_TPP_C_HandIK) == 0x000020, "Wrong size on ABP_JP_TPP_C_HandIK");
static_assert(offsetof(ABP_JP_TPP_C_HandIK, InPose) == 0x000000, "Member 'ABP_JP_TPP_C_HandIK::InPose' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_HandIK, HandIK_0) == 0x000010, "Member 'ABP_JP_TPP_C_HandIK::HandIK_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.HeadRotation
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_TPP_C_HeadRotation final
{
public:
	bool                                          Rotate;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_HeadRotation) == 0x000001, "Wrong alignment on ABP_JP_TPP_C_HeadRotation");
static_assert(sizeof(ABP_JP_TPP_C_HeadRotation) == 0x000001, "Wrong size on ABP_JP_TPP_C_HeadRotation");
static_assert(offsetof(ABP_JP_TPP_C_HeadRotation, Rotate) == 0x000000, "Member 'ABP_JP_TPP_C_HeadRotation::Rotate' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.Hit
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_TPP_C_Hit final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayRate;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_Hit) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_Hit");
static_assert(sizeof(ABP_JP_TPP_C_Hit) == 0x000010, "Wrong size on ABP_JP_TPP_C_Hit");
static_assert(offsetof(ABP_JP_TPP_C_Hit, Time) == 0x000000, "Member 'ABP_JP_TPP_C_Hit::Time' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_Hit, PlayRate) == 0x000008, "Member 'ABP_JP_TPP_C_Hit::PlayRate' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.Interacted
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_Interacted final
{
public:
	class UObject*                                InteractedObject;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_Interacted) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_Interacted");
static_assert(sizeof(ABP_JP_TPP_C_Interacted) == 0x000008, "Wrong size on ABP_JP_TPP_C_Interacted");
static_assert(offsetof(ABP_JP_TPP_C_Interacted, InteractedObject) == 0x000000, "Member 'ABP_JP_TPP_C_Interacted::InteractedObject' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.InterpLeanAmount
// 0x0080 (0x0080 - 0x0000)
struct ABP_JP_TPP_C_InterpLeanAmount final
{
public:
	struct FVector2D                              Current;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Target;                                            // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpSpeed;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_InterpLeanAmount) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_InterpLeanAmount");
static_assert(sizeof(ABP_JP_TPP_C_InterpLeanAmount) == 0x000080, "Wrong size on ABP_JP_TPP_C_InterpLeanAmount");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, Current) == 0x000000, "Member 'ABP_JP_TPP_C_InterpLeanAmount::Current' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, Target) == 0x000010, "Member 'ABP_JP_TPP_C_InterpLeanAmount::Target' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, InterpSpeed) == 0x000020, "Member 'ABP_JP_TPP_C_InterpLeanAmount::InterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, DeltaTime) == 0x000028, "Member 'ABP_JP_TPP_C_InterpLeanAmount::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, ReturnValue) == 0x000030, "Member 'ABP_JP_TPP_C_InterpLeanAmount::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, CallFunc_BreakVector2D_X) == 0x000040, "Member 'ABP_JP_TPP_C_InterpLeanAmount::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, CallFunc_BreakVector2D_Y) == 0x000048, "Member 'ABP_JP_TPP_C_InterpLeanAmount::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, CallFunc_BreakVector2D_X_1) == 0x000050, "Member 'ABP_JP_TPP_C_InterpLeanAmount::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, CallFunc_BreakVector2D_Y_1) == 0x000058, "Member 'ABP_JP_TPP_C_InterpLeanAmount::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, CallFunc_FInterpTo_ReturnValue) == 0x000060, "Member 'ABP_JP_TPP_C_InterpLeanAmount::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, CallFunc_FInterpTo_ReturnValue_1) == 0x000068, "Member 'ABP_JP_TPP_C_InterpLeanAmount::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpLeanAmount, CallFunc_MakeVector2D_ReturnValue) == 0x000070, "Member 'ABP_JP_TPP_C_InterpLeanAmount::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.InterpVelocityBlend
// 0x00B0 (0x00B0 - 0x0000)
struct ABP_JP_TPP_C_InterpVelocityBlend final
{
public:
	struct FS_VelocityBlend                       Current;                                           // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_VelocityBlend                       Target;                                            // 0x0020(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpSpeed;                                       // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_VelocityBlend                       ReturnValue;                                       // 0x0050(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_2;                  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_3;                  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_VelocityBlend                       K2Node_MakeStruct_S_VelocityBlend;                 // 0x0090(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_InterpVelocityBlend) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_InterpVelocityBlend");
static_assert(sizeof(ABP_JP_TPP_C_InterpVelocityBlend) == 0x0000B0, "Wrong size on ABP_JP_TPP_C_InterpVelocityBlend");
static_assert(offsetof(ABP_JP_TPP_C_InterpVelocityBlend, Current) == 0x000000, "Member 'ABP_JP_TPP_C_InterpVelocityBlend::Current' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpVelocityBlend, Target) == 0x000020, "Member 'ABP_JP_TPP_C_InterpVelocityBlend::Target' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpVelocityBlend, InterpSpeed) == 0x000040, "Member 'ABP_JP_TPP_C_InterpVelocityBlend::InterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpVelocityBlend, DeltaTime) == 0x000048, "Member 'ABP_JP_TPP_C_InterpVelocityBlend::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpVelocityBlend, ReturnValue) == 0x000050, "Member 'ABP_JP_TPP_C_InterpVelocityBlend::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpVelocityBlend, CallFunc_FInterpTo_ReturnValue) == 0x000070, "Member 'ABP_JP_TPP_C_InterpVelocityBlend::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpVelocityBlend, CallFunc_FInterpTo_ReturnValue_1) == 0x000078, "Member 'ABP_JP_TPP_C_InterpVelocityBlend::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpVelocityBlend, CallFunc_FInterpTo_ReturnValue_2) == 0x000080, "Member 'ABP_JP_TPP_C_InterpVelocityBlend::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpVelocityBlend, CallFunc_FInterpTo_ReturnValue_3) == 0x000088, "Member 'ABP_JP_TPP_C_InterpVelocityBlend::CallFunc_FInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_InterpVelocityBlend, K2Node_MakeStruct_S_VelocityBlend) == 0x000090, "Member 'ABP_JP_TPP_C_InterpVelocityBlend::K2Node_MakeStruct_S_VelocityBlend' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.ItemReady
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_TPP_C_ItemReady final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_ItemReady) == 0x000001, "Wrong alignment on ABP_JP_TPP_C_ItemReady");
static_assert(sizeof(ABP_JP_TPP_C_ItemReady) == 0x000001, "Wrong size on ABP_JP_TPP_C_ItemReady");
static_assert(offsetof(ABP_JP_TPP_C_ItemReady, bReady) == 0x000000, "Member 'ABP_JP_TPP_C_ItemReady::bReady' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.Jab
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_TPP_C_Jab final
{
public:
	bool                                          Jab_0;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_Jab) == 0x000001, "Wrong alignment on ABP_JP_TPP_C_Jab");
static_assert(sizeof(ABP_JP_TPP_C_Jab) == 0x000001, "Wrong size on ABP_JP_TPP_C_Jab");
static_assert(offsetof(ABP_JP_TPP_C_Jab, Jab_0) == 0x000000, "Member 'ABP_JP_TPP_C_Jab::Jab_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.MovingCheck
// 0x0004 (0x0004 - 0x0000)
struct ABP_JP_TPP_C_MovingCheck final
{
public:
	bool                                          Return_Value;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_MovingCheck) == 0x000001, "Wrong alignment on ABP_JP_TPP_C_MovingCheck");
static_assert(sizeof(ABP_JP_TPP_C_MovingCheck) == 0x000004, "Wrong size on ABP_JP_TPP_C_MovingCheck");
static_assert(offsetof(ABP_JP_TPP_C_MovingCheck, Return_Value) == 0x000000, "Member 'ABP_JP_TPP_C_MovingCheck::Return_Value' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_MovingCheck, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000001, "Member 'ABP_JP_TPP_C_MovingCheck::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_MovingCheck, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'ABP_JP_TPP_C_MovingCheck::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_MovingCheck, CallFunc_BooleanOR_ReturnValue_1) == 0x000003, "Member 'ABP_JP_TPP_C_MovingCheck::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.OnBlendOut_4741DD0C499665CDD2B6DD8A72B174F6
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_OnBlendOut_4741DD0C499665CDD2B6DD8A72B174F6 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_OnBlendOut_4741DD0C499665CDD2B6DD8A72B174F6) == 0x000004, "Wrong alignment on ABP_JP_TPP_C_OnBlendOut_4741DD0C499665CDD2B6DD8A72B174F6");
static_assert(sizeof(ABP_JP_TPP_C_OnBlendOut_4741DD0C499665CDD2B6DD8A72B174F6) == 0x000008, "Wrong size on ABP_JP_TPP_C_OnBlendOut_4741DD0C499665CDD2B6DD8A72B174F6");
static_assert(offsetof(ABP_JP_TPP_C_OnBlendOut_4741DD0C499665CDD2B6DD8A72B174F6, NotifyName) == 0x000000, "Member 'ABP_JP_TPP_C_OnBlendOut_4741DD0C499665CDD2B6DD8A72B174F6::NotifyName' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.OnCompleted_4741DD0C499665CDD2B6DD8A72B174F6
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_OnCompleted_4741DD0C499665CDD2B6DD8A72B174F6 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_OnCompleted_4741DD0C499665CDD2B6DD8A72B174F6) == 0x000004, "Wrong alignment on ABP_JP_TPP_C_OnCompleted_4741DD0C499665CDD2B6DD8A72B174F6");
static_assert(sizeof(ABP_JP_TPP_C_OnCompleted_4741DD0C499665CDD2B6DD8A72B174F6) == 0x000008, "Wrong size on ABP_JP_TPP_C_OnCompleted_4741DD0C499665CDD2B6DD8A72B174F6");
static_assert(offsetof(ABP_JP_TPP_C_OnCompleted_4741DD0C499665CDD2B6DD8A72B174F6, NotifyName) == 0x000000, "Member 'ABP_JP_TPP_C_OnCompleted_4741DD0C499665CDD2B6DD8A72B174F6::NotifyName' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.OnInterrupted_4741DD0C499665CDD2B6DD8A72B174F6
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_OnInterrupted_4741DD0C499665CDD2B6DD8A72B174F6 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_OnInterrupted_4741DD0C499665CDD2B6DD8A72B174F6) == 0x000004, "Wrong alignment on ABP_JP_TPP_C_OnInterrupted_4741DD0C499665CDD2B6DD8A72B174F6");
static_assert(sizeof(ABP_JP_TPP_C_OnInterrupted_4741DD0C499665CDD2B6DD8A72B174F6) == 0x000008, "Wrong size on ABP_JP_TPP_C_OnInterrupted_4741DD0C499665CDD2B6DD8A72B174F6");
static_assert(offsetof(ABP_JP_TPP_C_OnInterrupted_4741DD0C499665CDD2B6DD8A72B174F6, NotifyName) == 0x000000, "Member 'ABP_JP_TPP_C_OnInterrupted_4741DD0C499665CDD2B6DD8A72B174F6::NotifyName' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.OnNotifyBegin_4741DD0C499665CDD2B6DD8A72B174F6
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_OnNotifyBegin_4741DD0C499665CDD2B6DD8A72B174F6 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_OnNotifyBegin_4741DD0C499665CDD2B6DD8A72B174F6) == 0x000004, "Wrong alignment on ABP_JP_TPP_C_OnNotifyBegin_4741DD0C499665CDD2B6DD8A72B174F6");
static_assert(sizeof(ABP_JP_TPP_C_OnNotifyBegin_4741DD0C499665CDD2B6DD8A72B174F6) == 0x000008, "Wrong size on ABP_JP_TPP_C_OnNotifyBegin_4741DD0C499665CDD2B6DD8A72B174F6");
static_assert(offsetof(ABP_JP_TPP_C_OnNotifyBegin_4741DD0C499665CDD2B6DD8A72B174F6, NotifyName) == 0x000000, "Member 'ABP_JP_TPP_C_OnNotifyBegin_4741DD0C499665CDD2B6DD8A72B174F6::NotifyName' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.OnNotifyEnd_4741DD0C499665CDD2B6DD8A72B174F6
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_OnNotifyEnd_4741DD0C499665CDD2B6DD8A72B174F6 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_OnNotifyEnd_4741DD0C499665CDD2B6DD8A72B174F6) == 0x000004, "Wrong alignment on ABP_JP_TPP_C_OnNotifyEnd_4741DD0C499665CDD2B6DD8A72B174F6");
static_assert(sizeof(ABP_JP_TPP_C_OnNotifyEnd_4741DD0C499665CDD2B6DD8A72B174F6) == 0x000008, "Wrong size on ABP_JP_TPP_C_OnNotifyEnd_4741DD0C499665CDD2B6DD8A72B174F6");
static_assert(offsetof(ABP_JP_TPP_C_OnNotifyEnd_4741DD0C499665CDD2B6DD8A72B174F6, NotifyName) == 0x000000, "Member 'ABP_JP_TPP_C_OnNotifyEnd_4741DD0C499665CDD2B6DD8A72B174F6::NotifyName' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.Overlay
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_TPP_C_Overlay final
{
public:
	struct FPoseLink                              Overlay_0;                                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_C_Overlay) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_Overlay");
static_assert(sizeof(ABP_JP_TPP_C_Overlay) == 0x000010, "Wrong size on ABP_JP_TPP_C_Overlay");
static_assert(offsetof(ABP_JP_TPP_C_Overlay, Overlay_0) == 0x000000, "Member 'ABP_JP_TPP_C_Overlay::Overlay_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.PettheDogFixups
// 0x0020 (0x0020 - 0x0000)
struct ABP_JP_TPP_C_PettheDogFixups final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              PettheDogFixups_0;                                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_C_PettheDogFixups) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_PettheDogFixups");
static_assert(sizeof(ABP_JP_TPP_C_PettheDogFixups) == 0x000020, "Wrong size on ABP_JP_TPP_C_PettheDogFixups");
static_assert(offsetof(ABP_JP_TPP_C_PettheDogFixups, InPose_0) == 0x000000, "Member 'ABP_JP_TPP_C_PettheDogFixups::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_PettheDogFixups, PettheDogFixups_0) == 0x000010, "Member 'ABP_JP_TPP_C_PettheDogFixups::PettheDogFixups_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.play montage test
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_Play_montage_test final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_Play_montage_test) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_Play_montage_test");
static_assert(sizeof(ABP_JP_TPP_C_Play_montage_test) == 0x000008, "Wrong size on ABP_JP_TPP_C_Play_montage_test");
static_assert(offsetof(ABP_JP_TPP_C_Play_montage_test, InSkeletalMeshComponent) == 0x000000, "Member 'ABP_JP_TPP_C_Play_montage_test::InSkeletalMeshComponent' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.PlayTransition
// 0x0018 (0x0018 - 0x0000)
struct ABP_JP_TPP_C_PlayTransition final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         BlendInTime;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InTimeToStartMontageAt;                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_PlayTransition) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_PlayTransition");
static_assert(sizeof(ABP_JP_TPP_C_PlayTransition) == 0x000018, "Wrong size on ABP_JP_TPP_C_PlayTransition");
static_assert(offsetof(ABP_JP_TPP_C_PlayTransition, Animation) == 0x000000, "Member 'ABP_JP_TPP_C_PlayTransition::Animation' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_PlayTransition, BlendInTime) == 0x000008, "Member 'ABP_JP_TPP_C_PlayTransition::BlendInTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_PlayTransition, BlendOutTime) == 0x00000C, "Member 'ABP_JP_TPP_C_PlayTransition::BlendOutTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_PlayTransition, InPlayRate) == 0x000010, "Member 'ABP_JP_TPP_C_PlayTransition::InPlayRate' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_PlayTransition, InTimeToStartMontageAt) == 0x000014, "Member 'ABP_JP_TPP_C_PlayTransition::InTimeToStartMontageAt' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.ResetIKOffsets
// 0x0060 (0x0060 - 0x0000)
struct ABP_JP_TPP_C_ResetIKOffsets final
{
public:
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue_1;                  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue_1;                  // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_JP_TPP_C_ResetIKOffsets) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_ResetIKOffsets");
static_assert(sizeof(ABP_JP_TPP_C_ResetIKOffsets) == 0x000060, "Wrong size on ABP_JP_TPP_C_ResetIKOffsets");
static_assert(offsetof(ABP_JP_TPP_C_ResetIKOffsets, CallFunc_VInterpTo_ReturnValue) == 0x000000, "Member 'ABP_JP_TPP_C_ResetIKOffsets::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ResetIKOffsets, CallFunc_VInterpTo_ReturnValue_1) == 0x000018, "Member 'ABP_JP_TPP_C_ResetIKOffsets::CallFunc_VInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ResetIKOffsets, CallFunc_RInterpTo_ReturnValue) == 0x000030, "Member 'ABP_JP_TPP_C_ResetIKOffsets::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_ResetIKOffsets, CallFunc_RInterpTo_ReturnValue_1) == 0x000048, "Member 'ABP_JP_TPP_C_ResetIKOffsets::CallFunc_RInterpTo_ReturnValue_1' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.SetChargeHoldTime
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_SetChargeHoldTime final
{
public:
	double                                        HoldTime;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_SetChargeHoldTime) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_SetChargeHoldTime");
static_assert(sizeof(ABP_JP_TPP_C_SetChargeHoldTime) == 0x000008, "Wrong size on ABP_JP_TPP_C_SetChargeHoldTime");
static_assert(offsetof(ABP_JP_TPP_C_SetChargeHoldTime, HoldTime) == 0x000000, "Member 'ABP_JP_TPP_C_SetChargeHoldTime::HoldTime' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.SetEffectCauser
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_SetEffectCauser final
{
public:
	class AActor*                                 EffectCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_SetEffectCauser) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_SetEffectCauser");
static_assert(sizeof(ABP_JP_TPP_C_SetEffectCauser) == 0x000008, "Wrong size on ABP_JP_TPP_C_SetEffectCauser");
static_assert(offsetof(ABP_JP_TPP_C_SetEffectCauser, EffectCauser) == 0x000000, "Member 'ABP_JP_TPP_C_SetEffectCauser::EffectCauser' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.SetFacialStates
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_TPP_C_SetFacialStates final
{
public:
	EFacialStatesJP                               FacialState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HoldStateDuration;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_SetFacialStates) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_SetFacialStates");
static_assert(sizeof(ABP_JP_TPP_C_SetFacialStates) == 0x000010, "Wrong size on ABP_JP_TPP_C_SetFacialStates");
static_assert(offsetof(ABP_JP_TPP_C_SetFacialStates, FacialState) == 0x000000, "Member 'ABP_JP_TPP_C_SetFacialStates::FacialState' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFacialStates, HoldStateDuration) == 0x000008, "Member 'ABP_JP_TPP_C_SetFacialStates::HoldStateDuration' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.SetFootLocking
// 0x0140 (0x0140 - 0x0000)
struct ABP_JP_TPP_C_SetFootLocking final
{
public:
	class FName                                   Enable_FootIK_Curve;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FootLockCurve;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   IKFootBone;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentFootLockAlpha;                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentFootLockLocation;                           // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentFootLockRotation;                           // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	double                                        FootLockCurveValue;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_FootLockCurveValue_ImplicitCast; // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_SetFootLocking) == 0x000010, "Wrong alignment on ABP_JP_TPP_C_SetFootLocking");
static_assert(sizeof(ABP_JP_TPP_C_SetFootLocking) == 0x000140, "Wrong size on ABP_JP_TPP_C_SetFootLocking");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, Enable_FootIK_Curve) == 0x000000, "Member 'ABP_JP_TPP_C_SetFootLocking::Enable_FootIK_Curve' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, FootLockCurve) == 0x000008, "Member 'ABP_JP_TPP_C_SetFootLocking::FootLockCurve' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, IKFootBone) == 0x000010, "Member 'ABP_JP_TPP_C_SetFootLocking::IKFootBone' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CurrentFootLockAlpha) == 0x000018, "Member 'ABP_JP_TPP_C_SetFootLocking::CurrentFootLockAlpha' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CurrentFootLockLocation) == 0x000020, "Member 'ABP_JP_TPP_C_SetFootLocking::CurrentFootLockLocation' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CurrentFootLockRotation) == 0x000038, "Member 'ABP_JP_TPP_C_SetFootLocking::CurrentFootLockRotation' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, FootLockCurveValue) == 0x000050, "Member 'ABP_JP_TPP_C_SetFootLocking::FootLockCurveValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_GetCurveValue_ReturnValue) == 0x000058, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00005C, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_GetOwningComponent_ReturnValue) == 0x000060, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_GetSocketTransform_ReturnValue) == 0x000070, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_BreakTransform_Location) == 0x0000D0, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_BreakTransform_Rotation) == 0x0000E8, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_BreakTransform_Scale) == 0x000100, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000118, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000119, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_GetCurveValue_ReturnValue_1) == 0x00011C, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000120, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_BooleanOR_ReturnValue) == 0x000121, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000128, "Member 'ABP_JP_TPP_C_SetFootLocking::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLocking, K2Node_VariableSet_FootLockCurveValue_ImplicitCast) == 0x000130, "Member 'ABP_JP_TPP_C_SetFootLocking::K2Node_VariableSet_FootLockCurveValue_ImplicitCast' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.SetFootLockOffsets
// 0x0128 (0x0128 - 0x0000)
struct ABP_JP_TPP_C_SetFootLockOffsets final
{
public:
	struct FVector                                LocalLocation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LocalRotation;                                     // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FVector                                LocationDifference;                                // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationDifference;                                // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_1;     // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_SetFootLockOffsets) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_SetFootLockOffsets");
static_assert(sizeof(ABP_JP_TPP_C_SetFootLockOffsets) == 0x000128, "Wrong size on ABP_JP_TPP_C_SetFootLockOffsets");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, LocalLocation) == 0x000000, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::LocalLocation' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, LocalRotation) == 0x000018, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::LocalRotation' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, LocationDifference) == 0x000030, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::LocationDifference' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, RotationDifference) == 0x000048, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::RotationDifference' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000060, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_BreakRotator_Roll) == 0x000078, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_BreakRotator_Pitch) == 0x00007C, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_BreakRotator_Yaw) == 0x000080, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000088, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_GetOwningComponent_ReturnValue) == 0x0000A0, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000A8, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0000C0, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000D8, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000E0, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_NormalizedDeltaRotator_ReturnValue_1) == 0x0000F8, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_NormalizedDeltaRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootLockOffsets, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000110, "Member 'ABP_JP_TPP_C_SetFootLockOffsets::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.SetFootOffsets
// 0x04E8 (0x04E8 - 0x0000)
struct ABP_JP_TPP_C_SetFootOffsets final
{
public:
	class FName                                   Enable_FootIK_Curve;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   IKFootBone;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RootBone;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLocationTarget;                             // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLocationOffset;                             // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRotationOffset;                             // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FRotator                               TargetRotationOffset;                              // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ImpactNormal;                                      // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactPoint;                                       // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IKFootFloorLocation;                               // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00C8(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0140(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23B[0x1];                                      // 0x023B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWalkable_ReturnValue;                   // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0330(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0348(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0360(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0378(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VInterpTo_ReturnValue_1;                  // 0x03B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAtan2_ReturnValue;                     // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAtan2_ReturnValue_1;                   // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x03F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0410(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0428(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0440(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0448(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0460(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0490(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_4;                          // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_4;                          // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_4;                          // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x04C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_SetFootOffsets) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_SetFootOffsets");
static_assert(sizeof(ABP_JP_TPP_C_SetFootOffsets) == 0x0004E8, "Wrong size on ABP_JP_TPP_C_SetFootOffsets");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, Enable_FootIK_Curve) == 0x000000, "Member 'ABP_JP_TPP_C_SetFootOffsets::Enable_FootIK_Curve' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, IKFootBone) == 0x000008, "Member 'ABP_JP_TPP_C_SetFootOffsets::IKFootBone' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, RootBone) == 0x000010, "Member 'ABP_JP_TPP_C_SetFootOffsets::RootBone' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CurrentLocationTarget) == 0x000018, "Member 'ABP_JP_TPP_C_SetFootOffsets::CurrentLocationTarget' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CurrentLocationOffset) == 0x000030, "Member 'ABP_JP_TPP_C_SetFootOffsets::CurrentLocationOffset' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CurrentRotationOffset) == 0x000048, "Member 'ABP_JP_TPP_C_SetFootOffsets::CurrentRotationOffset' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, TargetRotationOffset) == 0x000060, "Member 'ABP_JP_TPP_C_SetFootOffsets::TargetRotationOffset' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, ImpactNormal) == 0x000078, "Member 'ABP_JP_TPP_C_SetFootOffsets::ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, ImpactPoint) == 0x000090, "Member 'ABP_JP_TPP_C_SetFootOffsets::ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, IKFootFloorLocation) == 0x0000A8, "Member 'ABP_JP_TPP_C_SetFootOffsets::IKFootFloorLocation' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_GetCurveValue_ReturnValue) == 0x0000C0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, Temp_object_Variable) == 0x0000C8, "Member 'ABP_JP_TPP_C_SetFootOffsets::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_MakeVector_ReturnValue) == 0x0000E0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_MakeVector_ReturnValue_1) == 0x0000F8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Add_VectorVector_ReturnValue) == 0x000110, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000128, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_LineTraceSingle_OutHit) == 0x000140, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_LineTraceSingle_ReturnValue) == 0x000238, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_bBlockingHit) == 0x000239, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_bInitialOverlap) == 0x00023A, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_Time) == 0x00023C, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_Distance) == 0x000240, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_Location) == 0x000248, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_ImpactPoint) == 0x000260, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_Normal) == 0x000278, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_ImpactNormal) == 0x000290, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_PhysMat) == 0x0002A8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_HitActor) == 0x0002B0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_HitComponent) == 0x0002B8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_HitBoneName) == 0x0002C0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_BoneName) == 0x0002C8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_HitItem) == 0x0002D0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_ElementIndex) == 0x0002D4, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_FaceIndex) == 0x0002D8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_TraceStart) == 0x0002E0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakHitResult_TraceEnd) == 0x0002F8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_IsWalkable_ReturnValue) == 0x000310, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_IsWalkable_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_X) == 0x000318, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_Y) == 0x000320, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_Z) == 0x000328, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_VInterpTo_ReturnValue) == 0x000330, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000348, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000360, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_RInterpTo_ReturnValue) == 0x000378, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_X_1) == 0x000390, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_Y_1) == 0x000398, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_Z_1) == 0x0003A0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0003A8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_VInterpTo_ReturnValue_1) == 0x0003B0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_VInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_X_2) == 0x0003C8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_Y_2) == 0x0003D0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_Z_2) == 0x0003D8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_DegAtan2_ReturnValue) == 0x0003E0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_DegAtan2_ReturnValue_1) == 0x0003E8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_DegAtan2_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0003F0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_MakeRotator_ReturnValue) == 0x0003F8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000410, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000428, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_GetOwningComponent_ReturnValue) == 0x000440, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000448, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_GetSocketLocation_ReturnValue) == 0x000460, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_X_3) == 0x000478, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_Y_3) == 0x000480, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_Z_3) == 0x000488, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000490, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_X_4) == 0x0004A8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_Y_4) == 0x0004B0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_BreakVector_Z_4) == 0x0004B8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_MakeVector_ReturnValue_2) == 0x0004C0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0004D8, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0004E0, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetFootOffsets, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0004E4, "Member 'ABP_JP_TPP_C_SetFootOffsets::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.SetOverlayState
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_TPP_C_SetOverlayState final
{
public:
	EItemsJP                                      OverlayState_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_SetOverlayState) == 0x000001, "Wrong alignment on ABP_JP_TPP_C_SetOverlayState");
static_assert(sizeof(ABP_JP_TPP_C_SetOverlayState) == 0x000001, "Wrong size on ABP_JP_TPP_C_SetOverlayState");
static_assert(offsetof(ABP_JP_TPP_C_SetOverlayState, OverlayState_0) == 0x000000, "Member 'ABP_JP_TPP_C_SetOverlayState::OverlayState_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.SetPelvisIKOffset
// 0x0118 (0x0118 - 0x0000)
struct ABP_JP_TPP_C_SetPelvisIKOffset final
{
public:
	struct FVector                                FootOffset_L_Target_0;                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FootOffset_R_Target_0;                             // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PelvisTarget;                                      // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VInterpTo_ReturnValue_1;                  // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_SetPelvisIKOffset) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_SetPelvisIKOffset");
static_assert(sizeof(ABP_JP_TPP_C_SetPelvisIKOffset) == 0x000118, "Wrong size on ABP_JP_TPP_C_SetPelvisIKOffset");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, FootOffset_L_Target_0) == 0x000000, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::FootOffset_L_Target_0' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, FootOffset_R_Target_0) == 0x000018, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::FootOffset_R_Target_0' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, PelvisTarget) == 0x000030, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::PelvisTarget' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_VInterpTo_ReturnValue) == 0x000048, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000060, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_VInterpTo_ReturnValue_1) == 0x000068, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_VInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_X) == 0x000080, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_Y) == 0x000088, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_Z) == 0x000090, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_X_1) == 0x000098, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_Y_1) == 0x0000A0, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_Z_1) == 0x0000A8, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_GetCurveValue_ReturnValue) == 0x0000B0, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000B4, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_GetCurveValue_ReturnValue_1) == 0x0000B8, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_X_2) == 0x0000D0, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_Y_2) == 0x0000D8, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_Z_2) == 0x0000E0, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_X_3) == 0x0000E8, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_Y_3) == 0x0000F0, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_BreakVector_Z_3) == 0x0000F8, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000100, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000108, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_SetPelvisIKOffset, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000110, "Member 'ABP_JP_TPP_C_SetPelvisIKOffset::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.SetPetActor
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_SetPetActor final
{
public:
	class ABP_Leloi_C*                            PetActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_SetPetActor) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_SetPetActor");
static_assert(sizeof(ABP_JP_TPP_C_SetPetActor) == 0x000008, "Wrong size on ABP_JP_TPP_C_SetPetActor");
static_assert(offsetof(ABP_JP_TPP_C_SetPetActor, PetActor) == 0x000000, "Member 'ABP_JP_TPP_C_SetPetActor::PetActor' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.SetPlayRate
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_SetPlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_SetPlayRate) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_SetPlayRate");
static_assert(sizeof(ABP_JP_TPP_C_SetPlayRate) == 0x000008, "Wrong size on ABP_JP_TPP_C_SetPlayRate");
static_assert(offsetof(ABP_JP_TPP_C_SetPlayRate, PlayRate) == 0x000000, "Member 'ABP_JP_TPP_C_SetPlayRate::PlayRate' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.Talking
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_TPP_C_Talking final
{
public:
	double                                        Volume_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_Talking) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_Talking");
static_assert(sizeof(ABP_JP_TPP_C_Talking) == 0x000008, "Wrong size on ABP_JP_TPP_C_Talking");
static_assert(offsetof(ABP_JP_TPP_C_Talking, Volume_0) == 0x000000, "Member 'ABP_JP_TPP_C_Talking::Volume_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.Throwing
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_TPP_C_Throwing final
{
public:
	bool                                          Throwing_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_Throwing) == 0x000001, "Wrong alignment on ABP_JP_TPP_C_Throwing");
static_assert(sizeof(ABP_JP_TPP_C_Throwing) == 0x000001, "Wrong size on ABP_JP_TPP_C_Throwing");
static_assert(offsetof(ABP_JP_TPP_C_Throwing, Throwing_0) == 0x000000, "Member 'ABP_JP_TPP_C_Throwing::Throwing_0' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.UpdateAccelerationData
// 0x0100 (0x0100 - 0x0000)
struct ABP_JP_TPP_C_UpdateAccelerationData final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_VelocityBlend                       CallFunc_CalculateVelocityBlend_VelocityBlend;     // 0x0028(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalculateAcceleration_ReturnValue;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_VelocityBlend                       CallFunc_InterpVelocityBlend_ReturnValue;          // 0x0060(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalculateRelativeAccelerationAmount_ReturnValue; // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_InterpLeanAmount_ReturnValue;             // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_UpdateAccelerationData) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_UpdateAccelerationData");
static_assert(sizeof(ABP_JP_TPP_C_UpdateAccelerationData) == 0x000100, "Wrong size on ABP_JP_TPP_C_UpdateAccelerationData");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, DeltaTime) == 0x000000, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_VSize_ReturnValue) == 0x000008, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_BreakVector2D_X) == 0x000018, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_CalculateVelocityBlend_VelocityBlend) == 0x000028, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_CalculateVelocityBlend_VelocityBlend' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_CalculateAcceleration_ReturnValue) == 0x000048, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_CalculateAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_InterpVelocityBlend_ReturnValue) == 0x000060, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_InterpVelocityBlend_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_CalculateRelativeAccelerationAmount_ReturnValue) == 0x000080, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_CalculateRelativeAccelerationAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_BreakVector_X) == 0x000098, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_BreakVector_Y) == 0x0000A0, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_BreakVector_Z) == 0x0000A8, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_MakeVector2D_ReturnValue) == 0x0000B0, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_InterpLeanAmount_ReturnValue) == 0x0000C0, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_InterpLeanAmount_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_BreakVector2D_X_1) == 0x0000D0, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_BreakVector2D_Y_1) == 0x0000D8, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000E8, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAccelerationData, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000F0, "Member 'ABP_JP_TPP_C_UpdateAccelerationData::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.UpdateAimOffsetData
// 0x0038 (0x0038 - 0x0000)
struct ABP_JP_TPP_C_UpdateAimOffsetData final
{
public:
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_Roll_ImplicitCast;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Pitch_ImplicitCast;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_UpdateAimOffsetData) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_UpdateAimOffsetData");
static_assert(sizeof(ABP_JP_TPP_C_UpdateAimOffsetData) == 0x000038, "Wrong size on ABP_JP_TPP_C_UpdateAimOffsetData");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAimOffsetData, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000000, "Member 'ABP_JP_TPP_C_UpdateAimOffsetData::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAimOffsetData, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'ABP_JP_TPP_C_UpdateAimOffsetData::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAimOffsetData, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'ABP_JP_TPP_C_UpdateAimOffsetData::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAimOffsetData, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'ABP_JP_TPP_C_UpdateAimOffsetData::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAimOffsetData, K2Node_VariableSet_Roll_ImplicitCast) == 0x000028, "Member 'ABP_JP_TPP_C_UpdateAimOffsetData::K2Node_VariableSet_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateAimOffsetData, K2Node_VariableSet_Pitch_ImplicitCast) == 0x000030, "Member 'ABP_JP_TPP_C_UpdateAimOffsetData::K2Node_VariableSet_Pitch_ImplicitCast' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.UpdateBlendWeightData
// 0x0028 (0x0028 - 0x0000)
struct ABP_JP_TPP_C_UpdateBlendWeightData final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_UpdateBlendWeightData) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_UpdateBlendWeightData");
static_assert(sizeof(ABP_JP_TPP_C_UpdateBlendWeightData) == 0x000028, "Wrong size on ABP_JP_TPP_C_UpdateBlendWeightData");
static_assert(offsetof(ABP_JP_TPP_C_UpdateBlendWeightData, DeltaTime) == 0x000000, "Member 'ABP_JP_TPP_C_UpdateBlendWeightData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateBlendWeightData, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000008, "Member 'ABP_JP_TPP_C_UpdateBlendWeightData::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateBlendWeightData, CallFunc_FInterpTo_ReturnValue) == 0x000010, "Member 'ABP_JP_TPP_C_UpdateBlendWeightData::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateBlendWeightData, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'ABP_JP_TPP_C_UpdateBlendWeightData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateBlendWeightData, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'ABP_JP_TPP_C_UpdateBlendWeightData::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateBlendWeightData, CallFunc_BooleanAND_ReturnValue_1) == 0x00001A, "Member 'ABP_JP_TPP_C_UpdateBlendWeightData::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateBlendWeightData, CallFunc_SelectFloat_ReturnValue) == 0x000020, "Member 'ABP_JP_TPP_C_UpdateBlendWeightData::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.UpdateDirectionData
// 0x0080 (0x0080 - 0x0000)
struct ABP_JP_TPP_C_UpdateDirectionData final
{
public:
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalculateDirection_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Direction_ImplicitCast;         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_UpdateDirectionData) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_UpdateDirectionData");
static_assert(sizeof(ABP_JP_TPP_C_UpdateDirectionData) == 0x000080, "Wrong size on ABP_JP_TPP_C_UpdateDirectionData");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000000, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_CalculateDirection_ReturnValue) == 0x000004, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_CalculateDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_BreakVector_X) == 0x000008, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_BreakVector_Y) == 0x000010, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_BreakVector_Z) == 0x000018, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_VSize_ReturnValue) == 0x000038, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000040, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_VSize_ReturnValue_1) == 0x000058, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_BreakVector_X_1) == 0x000060, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_BreakVector_Y_1) == 0x000068, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, CallFunc_BreakVector_Z_1) == 0x000070, "Member 'ABP_JP_TPP_C_UpdateDirectionData::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateDirectionData, K2Node_VariableSet_Direction_ImplicitCast) == 0x000078, "Member 'ABP_JP_TPP_C_UpdateDirectionData::K2Node_VariableSet_Direction_ImplicitCast' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.UpdateFootIK
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_TPP_C_UpdateFootIK final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_UpdateFootIK) == 0x000001, "Wrong alignment on ABP_JP_TPP_C_UpdateFootIK");
static_assert(sizeof(ABP_JP_TPP_C_UpdateFootIK) == 0x000001, "Wrong size on ABP_JP_TPP_C_UpdateFootIK");
static_assert(offsetof(ABP_JP_TPP_C_UpdateFootIK, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'ABP_JP_TPP_C_UpdateFootIK::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.UpdateLayerData
// 0x01B8 (0x01B8 - 0x0000)
struct ABP_JP_TPP_C_UpdateLayerData final
{
public:
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_1;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_4;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_3;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_5;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_6;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_7;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_8;              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_9;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_10;             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_11;             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_12;             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_13;             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_14;             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_15;             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_16;             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_17;             // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_18;             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_19;             // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_20;             // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_21;             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Value_ImplicitCast;                // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaryKnittingbagScale_ImplicitCast; // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Value_ImplicitCast_1;              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_RightHandCopyBoneWeight_ImplicitCast; // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_NewVar_ImplicitCast;            // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_Hand_FK_Weight_ImplicitCast;    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_LeftHandCopyBoneWeight_ImplicitCast; // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Value_ImplicitCast_2;              // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_NewVar_1_ImplicitCast;          // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_B_ImplicitCast;                      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_1;                // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_B_ImplicitCast_1;                    // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_L_LS_ImplicitCast;          // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_R_LS_ImplicitCast;          // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_R_Add_ImplicitCast;         // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_L_Add_ImplicitCast;         // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Head_Add_ImplicitCast;          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Spine_Add_ImplicitCast;         // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Hand_L_ImplicitCast;            // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Hand_R_ImplicitCast;            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_B_ImplicitCast_2;                    // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_2;                // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_B_ImplicitCast_3;                    // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_3;                // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_UpdateLayerData) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_UpdateLayerData");
static_assert(sizeof(ABP_JP_TPP_C_UpdateLayerData) == 0x0001B8, "Wrong size on ABP_JP_TPP_C_UpdateLayerData");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_FFloor_ReturnValue) == 0x000000, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_FFloor_ReturnValue_1) == 0x000004, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_FFloor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00000C, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000010, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000018, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue) == 0x000020, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_1) == 0x000024, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_FClamp_ReturnValue) == 0x000030, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_FClamp_ReturnValue_1) == 0x000040, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_2) == 0x000048, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x00004C, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_3) == 0x000050, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_SelectFloat_ReturnValue) == 0x000058, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_FClamp_ReturnValue_2) == 0x000060, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_SelectFloat_ReturnValue_1) == 0x000068, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_4) == 0x000070, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_FClamp_ReturnValue_3) == 0x000078, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_5) == 0x000080, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_6) == 0x000084, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_7) == 0x000088, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_ReturnValue) == 0x000090, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_8) == 0x000098, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_ReturnValue_1) == 0x0000A0, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_9) == 0x0000A8, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_10) == 0x0000AC, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_11) == 0x0000B0, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_12) == 0x0000B4, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_13) == 0x0000B8, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_14) == 0x0000BC, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_15) == 0x0000C0, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_16) == 0x0000C4, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_17) == 0x0000C8, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_18) == 0x0000CC, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_19) == 0x0000D0, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_20) == 0x0000D4, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_ReturnValue_2) == 0x0000D8, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_21) == 0x0000E0, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_ReturnValue_3) == 0x0000E8, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0000F0, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_FClamp_Value_ImplicitCast) == 0x0000F8, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_FClamp_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_MaryKnittingbagScale_ImplicitCast) == 0x000100, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_MaryKnittingbagScale_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000108, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_FClamp_Value_ImplicitCast_1) == 0x000110, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_FClamp_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_RightHandCopyBoneWeight_ImplicitCast) == 0x000118, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_RightHandCopyBoneWeight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_NewVar_ImplicitCast) == 0x00011C, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_NewVar_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_Hand_FK_Weight_ImplicitCast) == 0x000120, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_Hand_FK_Weight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_LeftHandCopyBoneWeight_ImplicitCast) == 0x000124, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_LeftHandCopyBoneWeight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_FClamp_Value_ImplicitCast_2) == 0x000128, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_FClamp_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_NewVar_1_ImplicitCast) == 0x000130, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_NewVar_1_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_B_ImplicitCast) == 0x000138, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_Alpha_ImplicitCast) == 0x000140, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_Alpha_ImplicitCast_1) == 0x000148, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_B_ImplicitCast_1) == 0x000150, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_Arm_L_LS_ImplicitCast) == 0x000158, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_Arm_L_LS_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_Arm_R_LS_ImplicitCast) == 0x000160, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_Arm_R_LS_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_Arm_R_Add_ImplicitCast) == 0x000168, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_Arm_R_Add_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_Arm_L_Add_ImplicitCast) == 0x000170, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_Arm_L_Add_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_Head_Add_ImplicitCast) == 0x000178, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_Head_Add_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_Spine_Add_ImplicitCast) == 0x000180, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_Spine_Add_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_Hand_L_ImplicitCast) == 0x000188, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_Hand_L_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, K2Node_VariableSet_Hand_R_ImplicitCast) == 0x000190, "Member 'ABP_JP_TPP_C_UpdateLayerData::K2Node_VariableSet_Hand_R_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_B_ImplicitCast_2) == 0x000198, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_Alpha_ImplicitCast_2) == 0x0001A0, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_B_ImplicitCast_3) == 0x0001A8, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_B_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateLayerData, CallFunc_Lerp_Alpha_ImplicitCast_3) == 0x0001B0, "Member 'ABP_JP_TPP_C_UpdateLayerData::CallFunc_Lerp_Alpha_ImplicitCast_3' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.UpdatePlayerStateData
// 0x0048 (0x0048 - 0x0000)
struct ABP_JP_TPP_C_UpdatePlayerStateData final
{
public:
	EStanceJP                                     Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStanceJP                                     Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStanceJP                                     K2Node_Select_Default;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetStandingPlayRate_PlayRate;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_UpdatePlayerStateData) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_UpdatePlayerStateData");
static_assert(sizeof(ABP_JP_TPP_C_UpdatePlayerStateData) == 0x000048, "Wrong size on ABP_JP_TPP_C_UpdatePlayerStateData");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, Temp_byte_Variable) == 0x000000, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, Temp_byte_Variable_1) == 0x000001, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, Temp_bool_Variable) == 0x000002, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, CallFunc_BreakVector_X) == 0x000008, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, CallFunc_BreakVector_Y) == 0x000010, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, CallFunc_BreakVector_Z) == 0x000018, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, K2Node_Select_Default) == 0x000020, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000021, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, CallFunc_GetStandingPlayRate_PlayRate) == 0x000038, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::CallFunc_GetStandingPlayRate_PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdatePlayerStateData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000040, "Member 'ABP_JP_TPP_C_UpdatePlayerStateData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ABP_JP_TPP.ABP_JP_TPP_C.UpdateRotateInPlaceData
// 0x0110 (0x0110 - 0x0000)
struct ABP_JP_TPP_C_UpdateRotateInPlaceData final
{
public:
	double                                        YawToSubtract;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ABSRootYawOffset;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceCurveDiff;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NegOrPos;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceCurveLastFrame;                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YawChangeOverFrame;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PrevYaw;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MovingCheck_Return_Value;                 // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_ReturnValue;                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_4;      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_DistanceCurve_ImplicitCast;     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Turning_ImplicitCast;           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_Angle_ImplicitCast;         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_RootYawOffset_ImplicitCast;     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_TPP_C_UpdateRotateInPlaceData) == 0x000008, "Wrong alignment on ABP_JP_TPP_C_UpdateRotateInPlaceData");
static_assert(sizeof(ABP_JP_TPP_C_UpdateRotateInPlaceData) == 0x000110, "Wrong size on ABP_JP_TPP_C_UpdateRotateInPlaceData");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, YawToSubtract) == 0x000000, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::YawToSubtract' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, ABSRootYawOffset) == 0x000008, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::ABSRootYawOffset' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, DistanceCurveDiff) == 0x000010, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::DistanceCurveDiff' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, NegOrPos) == 0x000018, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::NegOrPos' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, DistanceCurveLastFrame) == 0x000020, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::DistanceCurveLastFrame' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, YawChangeOverFrame) == 0x000028, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::YawChangeOverFrame' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, PrevYaw) == 0x000030, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::PrevYaw' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, Temp_bool_Variable) == 0x000038, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Abs_ReturnValue) == 0x000040, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, Temp_bool_Variable_1) == 0x000048, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, Temp_real_Variable) == 0x000050, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, Temp_real_Variable_1) == 0x000058, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_MovingCheck_Return_Value) == 0x000060, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_MovingCheck_Return_Value' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000068, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000070, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000078, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000088, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000090, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, K2Node_Select_Default) == 0x0000A0, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0000A8, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x0000B0, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x0000B8, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x0000C0, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_GetCurveValue_ReturnValue) == 0x0000C4, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, K2Node_Select_Default_1) == 0x0000C8, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_GetCurveValue_ReturnValue_1) == 0x0000D0, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_NormalizeAxis_ReturnValue) == 0x0000E0, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_NormalizeAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_Subtract_DoubleDouble_ReturnValue_4) == 0x0000E8, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_Subtract_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, K2Node_VariableSet_DistanceCurve_ImplicitCast) == 0x0000F0, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::K2Node_VariableSet_DistanceCurve_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, K2Node_VariableSet_Turning_ImplicitCast) == 0x0000F8, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::K2Node_VariableSet_Turning_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, CallFunc_NormalizeAxis_Angle_ImplicitCast) == 0x000100, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::CallFunc_NormalizeAxis_Angle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_TPP_C_UpdateRotateInPlaceData, K2Node_VariableSet_RootYawOffset_ImplicitCast) == 0x000108, "Member 'ABP_JP_TPP_C_UpdateRotateInPlaceData::K2Node_VariableSet_RootYawOffset_ImplicitCast' has a wrong offset!");

}

