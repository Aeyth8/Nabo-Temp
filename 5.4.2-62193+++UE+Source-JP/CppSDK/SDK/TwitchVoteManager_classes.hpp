#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TwitchVoteManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_TwitchVoteReward_structs.hpp"
#include "E_TimeOfDay_structs.hpp"
#include "JP_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TwitchVoteManager.TwitchVoteManager_C
// 0x00B8 (0x0348 - 0x0290)
class ATwitchVoteManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerControllerJP_MatchBP_C*>  LoggedInPlayerControllers;                         // 0x02A0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         RewardIndex;                                       // 0x02B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           VoteStartTimer;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          TwitchEnabled;                                     // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTwitchConnected;                                 // 0x02C8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<int32>                                 TwitchVotes;                                       // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_TwitchVoteReward>            Rewards;                                           // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_TwitchVoteReward                    SelectedReward;                                    // 0x02F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 VoteMessage;                                       // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FString>                         TwitchVoters;                                      // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        VoteLength;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           VoteEndTimer;                                      // 0x0340(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddPlayerController(class APlayerControllerJP_MatchBP_C* Controller);
	void CreateWidget(const class FText& VoteName);
	void EndVote();
	void ExecuteUbergraph_TwitchVoteManager(int32 EntryPoint);
	void FormatWinMessage(const struct FTeam& WinningTeam, class FText* Message);
	void GetWinningTeam(struct FTeam* Team);
	void IsDraw(bool* Draw);
	void Multi_UpdateWidget(ETeamType Team, int32 Votes);
	void OnEnded_9432BB71462ECDDA1C10C7BF77BE2C69();
	void OnFailure_D403CAE34F215B98F9EC60B91F41EDD9(const struct FTwitchAuthResponse& AuthResponse, const struct FTwitchError& TwitchError);
	void OnSuccess_D403CAE34F215B98F9EC60B91F41EDD9(const struct FTwitchAuthResponse& AuthResponse, const struct FTwitchError& TwitchError);
	void OnTwitchConnected__DelegateSignature(class APlayerControllerJP_MatchBP_C* Controller);
	void PrintThePlayerWhoHadAVoteStarted(const class UObject* Object, int32 InInt);
	void ProcessTwitchVote(const class FString& Message, const class FString& Username);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RemoveVoteWidget();
	void RunVote();
	void Server_SetRewardIndex();
	void SetRewardAndMessage();
	void StartChatIntegration();
	void StartVoteEvent(E_TimeOfDay TimeOfDay);
	void VoteMessageReceived(const class FString& Message, const class FString& Username);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TwitchVoteManager_C">();
	}
	static class ATwitchVoteManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATwitchVoteManager_C>();
	}
};
static_assert(alignof(ATwitchVoteManager_C) == 0x000008, "Wrong alignment on ATwitchVoteManager_C");
static_assert(sizeof(ATwitchVoteManager_C) == 0x000348, "Wrong size on ATwitchVoteManager_C");
static_assert(offsetof(ATwitchVoteManager_C, UberGraphFrame) == 0x000290, "Member 'ATwitchVoteManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, DefaultSceneRoot) == 0x000298, "Member 'ATwitchVoteManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, LoggedInPlayerControllers) == 0x0002A0, "Member 'ATwitchVoteManager_C::LoggedInPlayerControllers' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, RewardIndex) == 0x0002B0, "Member 'ATwitchVoteManager_C::RewardIndex' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, VoteStartTimer) == 0x0002B8, "Member 'ATwitchVoteManager_C::VoteStartTimer' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, TwitchEnabled) == 0x0002C0, "Member 'ATwitchVoteManager_C::TwitchEnabled' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, OnTwitchConnected) == 0x0002C8, "Member 'ATwitchVoteManager_C::OnTwitchConnected' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, TwitchVotes) == 0x0002D8, "Member 'ATwitchVoteManager_C::TwitchVotes' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, Rewards) == 0x0002E8, "Member 'ATwitchVoteManager_C::Rewards' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, SelectedReward) == 0x0002F8, "Member 'ATwitchVoteManager_C::SelectedReward' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, VoteMessage) == 0x000318, "Member 'ATwitchVoteManager_C::VoteMessage' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, TwitchVoters) == 0x000328, "Member 'ATwitchVoteManager_C::TwitchVoters' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, VoteLength) == 0x000338, "Member 'ATwitchVoteManager_C::VoteLength' has a wrong offset!");
static_assert(offsetof(ATwitchVoteManager_C, VoteEndTimer) == 0x000340, "Member 'ATwitchVoteManager_C::VoteEndTimer' has a wrong offset!");

}

