#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_CharacterNamePlate

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_NameplateDistanceState_structs.hpp"
#include "JP_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_CharacterNamePlate.AC_CharacterNamePlate_C
// 0x00F0 (0x0780 - 0x0690)
class UAC_CharacterNamePlate_C final : public UWidgetComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0690(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        DistanceToShowForEnemies;                          // 0x0698(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Line_Of_Sight;                                 // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A1[0x7];                                      // 0x06A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceToCamera;                                  // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TargetVisibility;                                  // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B1[0x3];                                      // 0x06B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            Render_Scale_Minus_Distance_Range;                 // 0x06B4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                            Render_Scale_Minus_Scale_Range;                    // 0x06C4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentHealth;                                     // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHealth;                                         // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PlayerName;                                        // 0x06E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	ETeamType                                     Team;                                              // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         TeamId;                                            // 0x06F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FA[0x6];                                      // 0x06FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        VisibilityComponent;                               // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DefaultLocation;                                   // 0x0708(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HeighReduction;                                    // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearDistanceCameraThreshold;                       // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NeverCullDistanceForTeammate;                      // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FarDistance;                                       // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MediumDistance;                                    // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NearDistance;                                      // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NameplateDistanceState                      CurrentState;                                      // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OwnedByFriendlyPlayer;                             // 0x0751(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_752[0x2];                                      // 0x0752(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            Locator_Render_Scale_Minus_Distance_Range;         // 0x0754(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatRange                            Locator_Render_Scale_Minus_Scale_Range;            // 0x0764(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x0774(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindHealthChangedListeners();
	void BindTeamChangedListeners();
	void DebugPrintHealth(const class FString& ContextName);
	void DebugPrintPlayerName(const class FString& ContextName);
	void DebugPrintTeam(const class FString& ContextName);
	void ExecuteUbergraph_AC_CharacterNamePlate(int32 EntryPoint);
	void Get_Distance_To_Camera(class APlayerCameraManager* Player_Camera_Manager, double* Distance_To_Camera);
	void GetCharacterLocatorWidget(class UWI_CharacterLocator_C** WI_CharacterLocator);
	void GetCharacterNamePlateWidget(class UWI_CharacterNamePlate_C** Character_Name_Plate);
	void GetHasLineOfSight(class APlayerCameraManager* Player_Camera_Manager, bool* Has_Line_Of_Sight_0);
	void GetStealthActive(bool* Return);
	void HandleHealthChanged(double CurrentHealth_0, double MaxHealth_0, double CurrentHealthFraction);
	void HandleTeamChanged(uint8 Team_ID, ETeamType Team_Type);
	void HideIfControlledByLocalPlayer();
	void InitialiseWidgetPlayerName();
	bool IsComponentAboveCameraCenter(class APlayerCameraManager* PlayerCameraManager);
	void IsInfrontOfCamera(class APlayerCameraManager* PlayerCameraManager, bool* InfrontOfCamera);
	bool IsOwnerCharacterLocallyControlled();
	void ModifyVisibilityBasedOnDistanceState();
	void OnDead();
	void OnEnded_DA25560D477FD30929755AB6A60D9EBC();
	void OnStealthToggle(bool StealthActive, bool IsEnemyToLocalPlayer);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ScaleWidgetAccordingToDistance();
	void SetCurrentHealth(double CurrentHealth_0);
	void SetDistanceState();
	void SetForcedStealth(bool Enable);
	void SetFriendlyOwner();
	void SetIsTalking(bool IsTalking);
	void SetMaxHealth(double MaxHealth_0);
	void SetOwnerInLocator();
	void SetPlayerName(const class FString& PlayerName_0);
	void StoreVisibilityComponent();
	void ToggleInCombatVisuals(bool Active);
	void Try_Repositioning_WidgetIfOffScreen(class APlayerCameraManager* PlayerCameraManager);
	void TryReadHealthStateVariablesFromCharacter(bool* Success);
	void TryReadNameStateVariablesFromCharacter(bool* Success);
	void TryReadTeamStateVariablesFromCharacter(bool* Success);
	void UnbindHealthChangedListeners();
	void UnbindTeamChangedListeners();
	void Update_Widget_Player_Name();
	void UpdateLocatorScale();
	void UpdateStateVariables(class APlayerCameraManager* Player_Camera_Manager);
	void UpdateTeam();
	void UpdateWidgetActivationState();
	void UpdateWidgetHealthBar();
	void UpdateWidgetTeam();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_CharacterNamePlate_C">();
	}
	static class UAC_CharacterNamePlate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_CharacterNamePlate_C>();
	}
};
static_assert(alignof(UAC_CharacterNamePlate_C) == 0x000010, "Wrong alignment on UAC_CharacterNamePlate_C");
static_assert(sizeof(UAC_CharacterNamePlate_C) == 0x000780, "Wrong size on UAC_CharacterNamePlate_C");
static_assert(offsetof(UAC_CharacterNamePlate_C, UberGraphFrame) == 0x000690, "Member 'UAC_CharacterNamePlate_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, DistanceToShowForEnemies) == 0x000698, "Member 'UAC_CharacterNamePlate_C::DistanceToShowForEnemies' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, Has_Line_Of_Sight) == 0x0006A0, "Member 'UAC_CharacterNamePlate_C::Has_Line_Of_Sight' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, DistanceToCamera) == 0x0006A8, "Member 'UAC_CharacterNamePlate_C::DistanceToCamera' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, TargetVisibility) == 0x0006B0, "Member 'UAC_CharacterNamePlate_C::TargetVisibility' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, Render_Scale_Minus_Distance_Range) == 0x0006B4, "Member 'UAC_CharacterNamePlate_C::Render_Scale_Minus_Distance_Range' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, Render_Scale_Minus_Scale_Range) == 0x0006C4, "Member 'UAC_CharacterNamePlate_C::Render_Scale_Minus_Scale_Range' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, CurrentHealth) == 0x0006D8, "Member 'UAC_CharacterNamePlate_C::CurrentHealth' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, MaxHealth) == 0x0006E0, "Member 'UAC_CharacterNamePlate_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, PlayerName) == 0x0006E8, "Member 'UAC_CharacterNamePlate_C::PlayerName' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, Team) == 0x0006F8, "Member 'UAC_CharacterNamePlate_C::Team' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, TeamId) == 0x0006F9, "Member 'UAC_CharacterNamePlate_C::TeamId' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, VisibilityComponent) == 0x000700, "Member 'UAC_CharacterNamePlate_C::VisibilityComponent' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, DefaultLocation) == 0x000708, "Member 'UAC_CharacterNamePlate_C::DefaultLocation' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, HeighReduction) == 0x000720, "Member 'UAC_CharacterNamePlate_C::HeighReduction' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, NearDistanceCameraThreshold) == 0x000728, "Member 'UAC_CharacterNamePlate_C::NearDistanceCameraThreshold' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, NeverCullDistanceForTeammate) == 0x000730, "Member 'UAC_CharacterNamePlate_C::NeverCullDistanceForTeammate' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, FarDistance) == 0x000738, "Member 'UAC_CharacterNamePlate_C::FarDistance' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, MediumDistance) == 0x000740, "Member 'UAC_CharacterNamePlate_C::MediumDistance' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, NearDistance) == 0x000748, "Member 'UAC_CharacterNamePlate_C::NearDistance' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, CurrentState) == 0x000750, "Member 'UAC_CharacterNamePlate_C::CurrentState' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, OwnedByFriendlyPlayer) == 0x000751, "Member 'UAC_CharacterNamePlate_C::OwnedByFriendlyPlayer' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, Locator_Render_Scale_Minus_Distance_Range) == 0x000754, "Member 'UAC_CharacterNamePlate_C::Locator_Render_Scale_Minus_Distance_Range' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, Locator_Render_Scale_Minus_Scale_Range) == 0x000764, "Member 'UAC_CharacterNamePlate_C::Locator_Render_Scale_Minus_Scale_Range' has a wrong offset!");
static_assert(offsetof(UAC_CharacterNamePlate_C, IsDead) == 0x000774, "Member 'UAC_CharacterNamePlate_C::IsDead' has a wrong offset!");

}

