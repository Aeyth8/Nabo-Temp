#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JP

#include "Basic.hpp"

#include "JP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "IWOnlineServices_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "IWCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "NetCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "AudioCapture_structs.hpp"
#include "AudioMixer_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonUser_structs.hpp"


namespace SDK::Params
{

// Function JP.LobbyConfigurationSummaryWidget.ApplyViewModel
// 0x0001 (0x0001 - 0x0000)
struct LobbyConfigurationSummaryWidget_ApplyViewModel final
{
public:
	struct FLobbyConfigurationSummaryViewModel    InModel;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyConfigurationSummaryWidget_ApplyViewModel) == 0x000001, "Wrong alignment on LobbyConfigurationSummaryWidget_ApplyViewModel");
static_assert(sizeof(LobbyConfigurationSummaryWidget_ApplyViewModel) == 0x000001, "Wrong size on LobbyConfigurationSummaryWidget_ApplyViewModel");
static_assert(offsetof(LobbyConfigurationSummaryWidget_ApplyViewModel, InModel) == 0x000000, "Member 'LobbyConfigurationSummaryWidget_ApplyViewModel::InModel' has a wrong offset!");

// Function JP.LobbyConfigurationSummaryWidget.CanUserEditConfiguration
// 0x0001 (0x0001 - 0x0000)
struct LobbyConfigurationSummaryWidget_CanUserEditConfiguration final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyConfigurationSummaryWidget_CanUserEditConfiguration) == 0x000001, "Wrong alignment on LobbyConfigurationSummaryWidget_CanUserEditConfiguration");
static_assert(sizeof(LobbyConfigurationSummaryWidget_CanUserEditConfiguration) == 0x000001, "Wrong size on LobbyConfigurationSummaryWidget_CanUserEditConfiguration");
static_assert(offsetof(LobbyConfigurationSummaryWidget_CanUserEditConfiguration, ReturnValue) == 0x000000, "Member 'LobbyConfigurationSummaryWidget_CanUserEditConfiguration::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_GetCurrencyAmountWhenReady.GetCurrencyAmountWhenReady
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CurrencyTag;                                       // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_GetCurrencyAmountWhenReady* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady) == 0x000008, "Wrong alignment on AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady");
static_assert(sizeof(AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady) == 0x000018, "Wrong size on AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady");
static_assert(offsetof(AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady, WorldContextObject) == 0x000000, "Member 'AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady, CurrencyTag) == 0x000008, "Member 'AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady::CurrencyTag' has a wrong offset!");
static_assert(offsetof(AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady, ReturnValue) == 0x000010, "Member 'AsyncAction_GetCurrencyAmountWhenReady_GetCurrencyAmountWhenReady::ReturnValue' has a wrong offset!");

// Function JP.SeasonPassSingleRewardEntryWidget.HandleRewardContentCreated
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassSingleRewardEntryWidget_HandleRewardContentCreated final
{
public:
	class UUserWidget*                            NewRewardWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESeasonPassRewardType                         RewardType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassSingleRewardEntryWidget_HandleRewardContentCreated) == 0x000008, "Wrong alignment on SeasonPassSingleRewardEntryWidget_HandleRewardContentCreated");
static_assert(sizeof(SeasonPassSingleRewardEntryWidget_HandleRewardContentCreated) == 0x000010, "Wrong size on SeasonPassSingleRewardEntryWidget_HandleRewardContentCreated");
static_assert(offsetof(SeasonPassSingleRewardEntryWidget_HandleRewardContentCreated, NewRewardWidget) == 0x000000, "Member 'SeasonPassSingleRewardEntryWidget_HandleRewardContentCreated::NewRewardWidget' has a wrong offset!");
static_assert(offsetof(SeasonPassSingleRewardEntryWidget_HandleRewardContentCreated, RewardType) == 0x000008, "Member 'SeasonPassSingleRewardEntryWidget_HandleRewardContentCreated::RewardType' has a wrong offset!");

// Function JP.AsyncAction_GetProfileXPWhenReady.GetProfileXPWhenReady
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_GetProfileXPWhenReady_GetProfileXPWhenReady final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_GetProfileXPWhenReady*     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_GetProfileXPWhenReady_GetProfileXPWhenReady) == 0x000008, "Wrong alignment on AsyncAction_GetProfileXPWhenReady_GetProfileXPWhenReady");
static_assert(sizeof(AsyncAction_GetProfileXPWhenReady_GetProfileXPWhenReady) == 0x000010, "Wrong size on AsyncAction_GetProfileXPWhenReady_GetProfileXPWhenReady");
static_assert(offsetof(AsyncAction_GetProfileXPWhenReady_GetProfileXPWhenReady, WorldContextObject) == 0x000000, "Member 'AsyncAction_GetProfileXPWhenReady_GetProfileXPWhenReady::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_GetProfileXPWhenReady_GetProfileXPWhenReady, ReturnValue) == 0x000008, "Member 'AsyncAction_GetProfileXPWhenReady_GetProfileXPWhenReady::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetAllowAudioInBackgroundSetting
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetAllowAudioInBackgroundSetting final
{
public:
	ELyraAllowBackgroundAudioSetting              NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetAllowAudioInBackgroundSetting) == 0x000001, "Wrong alignment on LyraSettingsShared_SetAllowAudioInBackgroundSetting");
static_assert(sizeof(LyraSettingsShared_SetAllowAudioInBackgroundSetting) == 0x000001, "Wrong size on LyraSettingsShared_SetAllowAudioInBackgroundSetting");
static_assert(offsetof(LyraSettingsShared_SetAllowAudioInBackgroundSetting, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetAllowAudioInBackgroundSetting::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetColorBlindMode
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetColorBlindMode final
{
public:
	EColorBlindMode                               InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetColorBlindMode) == 0x000001, "Wrong alignment on LyraSettingsShared_SetColorBlindMode");
static_assert(sizeof(LyraSettingsShared_SetColorBlindMode) == 0x000001, "Wrong size on LyraSettingsShared_SetColorBlindMode");
static_assert(offsetof(LyraSettingsShared_SetColorBlindMode, InMode) == 0x000000, "Member 'LyraSettingsShared_SetColorBlindMode::InMode' has a wrong offset!");

// Function JP.LyraSettingsShared.SetColorBlindStrength
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_SetColorBlindStrength final
{
public:
	int32                                         InColorBlindStrength;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetColorBlindStrength) == 0x000004, "Wrong alignment on LyraSettingsShared_SetColorBlindStrength");
static_assert(sizeof(LyraSettingsShared_SetColorBlindStrength) == 0x000004, "Wrong size on LyraSettingsShared_SetColorBlindStrength");
static_assert(offsetof(LyraSettingsShared_SetColorBlindStrength, InColorBlindStrength) == 0x000000, "Member 'LyraSettingsShared_SetColorBlindStrength::InColorBlindStrength' has a wrong offset!");

// Function JP.LyraSettingsShared.SetForceFeedbackEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetForceFeedbackEnabled final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetForceFeedbackEnabled) == 0x000001, "Wrong alignment on LyraSettingsShared_SetForceFeedbackEnabled");
static_assert(sizeof(LyraSettingsShared_SetForceFeedbackEnabled) == 0x000001, "Wrong size on LyraSettingsShared_SetForceFeedbackEnabled");
static_assert(offsetof(LyraSettingsShared_SetForceFeedbackEnabled, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetForceFeedbackEnabled::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetFOV
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_SetFOV final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetFOV) == 0x000004, "Wrong alignment on LyraSettingsShared_SetFOV");
static_assert(sizeof(LyraSettingsShared_SetFOV) == 0x000004, "Wrong size on LyraSettingsShared_SetFOV");
static_assert(offsetof(LyraSettingsShared_SetFOV, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetFOV::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetGamepadLookStickDeadZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_SetGamepadLookStickDeadZone final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetGamepadLookStickDeadZone) == 0x000004, "Wrong alignment on LyraSettingsShared_SetGamepadLookStickDeadZone");
static_assert(sizeof(LyraSettingsShared_SetGamepadLookStickDeadZone) == 0x000004, "Wrong size on LyraSettingsShared_SetGamepadLookStickDeadZone");
static_assert(offsetof(LyraSettingsShared_SetGamepadLookStickDeadZone, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetGamepadLookStickDeadZone::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetGamepadMoveStickDeadZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_SetGamepadMoveStickDeadZone final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetGamepadMoveStickDeadZone) == 0x000004, "Wrong alignment on LyraSettingsShared_SetGamepadMoveStickDeadZone");
static_assert(sizeof(LyraSettingsShared_SetGamepadMoveStickDeadZone) == 0x000004, "Wrong size on LyraSettingsShared_SetGamepadMoveStickDeadZone");
static_assert(offsetof(LyraSettingsShared_SetGamepadMoveStickDeadZone, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetGamepadMoveStickDeadZone::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetGamepadTargetingSensitivityPreset
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetGamepadTargetingSensitivityPreset final
{
public:
	ELyraGamepadSensitivity                       NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetGamepadTargetingSensitivityPreset) == 0x000001, "Wrong alignment on LyraSettingsShared_SetGamepadTargetingSensitivityPreset");
static_assert(sizeof(LyraSettingsShared_SetGamepadTargetingSensitivityPreset) == 0x000001, "Wrong size on LyraSettingsShared_SetGamepadTargetingSensitivityPreset");
static_assert(offsetof(LyraSettingsShared_SetGamepadTargetingSensitivityPreset, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetGamepadTargetingSensitivityPreset::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetInvertHorizontalAxis
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetInvertHorizontalAxis final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetInvertHorizontalAxis) == 0x000001, "Wrong alignment on LyraSettingsShared_SetInvertHorizontalAxis");
static_assert(sizeof(LyraSettingsShared_SetInvertHorizontalAxis) == 0x000001, "Wrong size on LyraSettingsShared_SetInvertHorizontalAxis");
static_assert(offsetof(LyraSettingsShared_SetInvertHorizontalAxis, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetInvertHorizontalAxis::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetInvertHorizontalAxisMouse
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetInvertHorizontalAxisMouse final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetInvertHorizontalAxisMouse) == 0x000001, "Wrong alignment on LyraSettingsShared_SetInvertHorizontalAxisMouse");
static_assert(sizeof(LyraSettingsShared_SetInvertHorizontalAxisMouse) == 0x000001, "Wrong size on LyraSettingsShared_SetInvertHorizontalAxisMouse");
static_assert(offsetof(LyraSettingsShared_SetInvertHorizontalAxisMouse, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetInvertHorizontalAxisMouse::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetInvertVerticalAxis
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetInvertVerticalAxis final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetInvertVerticalAxis) == 0x000001, "Wrong alignment on LyraSettingsShared_SetInvertVerticalAxis");
static_assert(sizeof(LyraSettingsShared_SetInvertVerticalAxis) == 0x000001, "Wrong size on LyraSettingsShared_SetInvertVerticalAxis");
static_assert(offsetof(LyraSettingsShared_SetInvertVerticalAxis, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetInvertVerticalAxis::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetInvertVerticalAxisMouse
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetInvertVerticalAxisMouse final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetInvertVerticalAxisMouse) == 0x000001, "Wrong alignment on LyraSettingsShared_SetInvertVerticalAxisMouse");
static_assert(sizeof(LyraSettingsShared_SetInvertVerticalAxisMouse) == 0x000001, "Wrong size on LyraSettingsShared_SetInvertVerticalAxisMouse");
static_assert(offsetof(LyraSettingsShared_SetInvertVerticalAxisMouse, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetInvertVerticalAxisMouse::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetLookSensitivityPreset
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetLookSensitivityPreset final
{
public:
	ELyraGamepadSensitivity                       NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetLookSensitivityPreset) == 0x000001, "Wrong alignment on LyraSettingsShared_SetLookSensitivityPreset");
static_assert(sizeof(LyraSettingsShared_SetLookSensitivityPreset) == 0x000001, "Wrong size on LyraSettingsShared_SetLookSensitivityPreset");
static_assert(offsetof(LyraSettingsShared_SetLookSensitivityPreset, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetLookSensitivityPreset::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetMouseSensitivityX
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsShared_SetMouseSensitivityX final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetMouseSensitivityX) == 0x000008, "Wrong alignment on LyraSettingsShared_SetMouseSensitivityX");
static_assert(sizeof(LyraSettingsShared_SetMouseSensitivityX) == 0x000008, "Wrong size on LyraSettingsShared_SetMouseSensitivityX");
static_assert(offsetof(LyraSettingsShared_SetMouseSensitivityX, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetMouseSensitivityX::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetMouseSensitivityY
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsShared_SetMouseSensitivityY final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetMouseSensitivityY) == 0x000008, "Wrong alignment on LyraSettingsShared_SetMouseSensitivityY");
static_assert(sizeof(LyraSettingsShared_SetMouseSensitivityY) == 0x000008, "Wrong size on LyraSettingsShared_SetMouseSensitivityY");
static_assert(offsetof(LyraSettingsShared_SetMouseSensitivityY, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetMouseSensitivityY::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetTargetingMultiplier
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsShared_SetTargetingMultiplier final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTargetingMultiplier) == 0x000008, "Wrong alignment on LyraSettingsShared_SetTargetingMultiplier");
static_assert(sizeof(LyraSettingsShared_SetTargetingMultiplier) == 0x000008, "Wrong size on LyraSettingsShared_SetTargetingMultiplier");
static_assert(offsetof(LyraSettingsShared_SetTargetingMultiplier, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetTargetingMultiplier::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetTriggerHapticsEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetTriggerHapticsEnabled final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTriggerHapticsEnabled) == 0x000001, "Wrong alignment on LyraSettingsShared_SetTriggerHapticsEnabled");
static_assert(sizeof(LyraSettingsShared_SetTriggerHapticsEnabled) == 0x000001, "Wrong size on LyraSettingsShared_SetTriggerHapticsEnabled");
static_assert(offsetof(LyraSettingsShared_SetTriggerHapticsEnabled, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetTriggerHapticsEnabled::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetTriggerHapticStartPosition
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetTriggerHapticStartPosition final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTriggerHapticStartPosition) == 0x000001, "Wrong alignment on LyraSettingsShared_SetTriggerHapticStartPosition");
static_assert(sizeof(LyraSettingsShared_SetTriggerHapticStartPosition) == 0x000001, "Wrong size on LyraSettingsShared_SetTriggerHapticStartPosition");
static_assert(offsetof(LyraSettingsShared_SetTriggerHapticStartPosition, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetTriggerHapticStartPosition::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetTriggerHapticStrength
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetTriggerHapticStrength final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTriggerHapticStrength) == 0x000001, "Wrong alignment on LyraSettingsShared_SetTriggerHapticStrength");
static_assert(sizeof(LyraSettingsShared_SetTriggerHapticStrength) == 0x000001, "Wrong size on LyraSettingsShared_SetTriggerHapticStrength");
static_assert(offsetof(LyraSettingsShared_SetTriggerHapticStrength, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetTriggerHapticStrength::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.SetTriggerPullUsesHapticThreshold
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_SetTriggerPullUsesHapticThreshold final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_SetTriggerPullUsesHapticThreshold) == 0x000001, "Wrong alignment on LyraSettingsShared_SetTriggerPullUsesHapticThreshold");
static_assert(sizeof(LyraSettingsShared_SetTriggerPullUsesHapticThreshold) == 0x000001, "Wrong size on LyraSettingsShared_SetTriggerPullUsesHapticThreshold");
static_assert(offsetof(LyraSettingsShared_SetTriggerPullUsesHapticThreshold, NewValue) == 0x000000, "Member 'LyraSettingsShared_SetTriggerPullUsesHapticThreshold::NewValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetAllowAudioInBackgroundSetting
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetAllowAudioInBackgroundSetting final
{
public:
	ELyraAllowBackgroundAudioSetting              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetAllowAudioInBackgroundSetting) == 0x000001, "Wrong alignment on LyraSettingsShared_GetAllowAudioInBackgroundSetting");
static_assert(sizeof(LyraSettingsShared_GetAllowAudioInBackgroundSetting) == 0x000001, "Wrong size on LyraSettingsShared_GetAllowAudioInBackgroundSetting");
static_assert(offsetof(LyraSettingsShared_GetAllowAudioInBackgroundSetting, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetAllowAudioInBackgroundSetting::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetColorBlindMode
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetColorBlindMode final
{
public:
	EColorBlindMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetColorBlindMode) == 0x000001, "Wrong alignment on LyraSettingsShared_GetColorBlindMode");
static_assert(sizeof(LyraSettingsShared_GetColorBlindMode) == 0x000001, "Wrong size on LyraSettingsShared_GetColorBlindMode");
static_assert(offsetof(LyraSettingsShared_GetColorBlindMode, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetColorBlindMode::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetColorBlindStrength
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_GetColorBlindStrength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetColorBlindStrength) == 0x000004, "Wrong alignment on LyraSettingsShared_GetColorBlindStrength");
static_assert(sizeof(LyraSettingsShared_GetColorBlindStrength) == 0x000004, "Wrong size on LyraSettingsShared_GetColorBlindStrength");
static_assert(offsetof(LyraSettingsShared_GetColorBlindStrength, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetColorBlindStrength::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetForceFeedbackEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetForceFeedbackEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetForceFeedbackEnabled) == 0x000001, "Wrong alignment on LyraSettingsShared_GetForceFeedbackEnabled");
static_assert(sizeof(LyraSettingsShared_GetForceFeedbackEnabled) == 0x000001, "Wrong size on LyraSettingsShared_GetForceFeedbackEnabled");
static_assert(offsetof(LyraSettingsShared_GetForceFeedbackEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetForceFeedbackEnabled::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetFOV
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_GetFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetFOV) == 0x000004, "Wrong alignment on LyraSettingsShared_GetFOV");
static_assert(sizeof(LyraSettingsShared_GetFOV) == 0x000004, "Wrong size on LyraSettingsShared_GetFOV");
static_assert(offsetof(LyraSettingsShared_GetFOV, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetFOV::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetGamepadLookSensitivityPreset
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetGamepadLookSensitivityPreset final
{
public:
	ELyraGamepadSensitivity                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetGamepadLookSensitivityPreset) == 0x000001, "Wrong alignment on LyraSettingsShared_GetGamepadLookSensitivityPreset");
static_assert(sizeof(LyraSettingsShared_GetGamepadLookSensitivityPreset) == 0x000001, "Wrong size on LyraSettingsShared_GetGamepadLookSensitivityPreset");
static_assert(offsetof(LyraSettingsShared_GetGamepadLookSensitivityPreset, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetGamepadLookSensitivityPreset::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetGamepadLookStickDeadZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_GetGamepadLookStickDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetGamepadLookStickDeadZone) == 0x000004, "Wrong alignment on LyraSettingsShared_GetGamepadLookStickDeadZone");
static_assert(sizeof(LyraSettingsShared_GetGamepadLookStickDeadZone) == 0x000004, "Wrong size on LyraSettingsShared_GetGamepadLookStickDeadZone");
static_assert(offsetof(LyraSettingsShared_GetGamepadLookStickDeadZone, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetGamepadLookStickDeadZone::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetGamepadMoveStickDeadZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsShared_GetGamepadMoveStickDeadZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetGamepadMoveStickDeadZone) == 0x000004, "Wrong alignment on LyraSettingsShared_GetGamepadMoveStickDeadZone");
static_assert(sizeof(LyraSettingsShared_GetGamepadMoveStickDeadZone) == 0x000004, "Wrong size on LyraSettingsShared_GetGamepadMoveStickDeadZone");
static_assert(offsetof(LyraSettingsShared_GetGamepadMoveStickDeadZone, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetGamepadMoveStickDeadZone::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetGamepadTargetingSensitivityPreset
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetGamepadTargetingSensitivityPreset final
{
public:
	ELyraGamepadSensitivity                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetGamepadTargetingSensitivityPreset) == 0x000001, "Wrong alignment on LyraSettingsShared_GetGamepadTargetingSensitivityPreset");
static_assert(sizeof(LyraSettingsShared_GetGamepadTargetingSensitivityPreset) == 0x000001, "Wrong size on LyraSettingsShared_GetGamepadTargetingSensitivityPreset");
static_assert(offsetof(LyraSettingsShared_GetGamepadTargetingSensitivityPreset, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetGamepadTargetingSensitivityPreset::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetInvertHorizontalAxis
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetInvertHorizontalAxis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetInvertHorizontalAxis) == 0x000001, "Wrong alignment on LyraSettingsShared_GetInvertHorizontalAxis");
static_assert(sizeof(LyraSettingsShared_GetInvertHorizontalAxis) == 0x000001, "Wrong size on LyraSettingsShared_GetInvertHorizontalAxis");
static_assert(offsetof(LyraSettingsShared_GetInvertHorizontalAxis, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetInvertHorizontalAxis::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetInvertHorizontalAxisMouse
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetInvertHorizontalAxisMouse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetInvertHorizontalAxisMouse) == 0x000001, "Wrong alignment on LyraSettingsShared_GetInvertHorizontalAxisMouse");
static_assert(sizeof(LyraSettingsShared_GetInvertHorizontalAxisMouse) == 0x000001, "Wrong size on LyraSettingsShared_GetInvertHorizontalAxisMouse");
static_assert(offsetof(LyraSettingsShared_GetInvertHorizontalAxisMouse, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetInvertHorizontalAxisMouse::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetInvertVerticalAxis
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetInvertVerticalAxis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetInvertVerticalAxis) == 0x000001, "Wrong alignment on LyraSettingsShared_GetInvertVerticalAxis");
static_assert(sizeof(LyraSettingsShared_GetInvertVerticalAxis) == 0x000001, "Wrong size on LyraSettingsShared_GetInvertVerticalAxis");
static_assert(offsetof(LyraSettingsShared_GetInvertVerticalAxis, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetInvertVerticalAxis::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetInvertVerticalAxisMouse
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetInvertVerticalAxisMouse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetInvertVerticalAxisMouse) == 0x000001, "Wrong alignment on LyraSettingsShared_GetInvertVerticalAxisMouse");
static_assert(sizeof(LyraSettingsShared_GetInvertVerticalAxisMouse) == 0x000001, "Wrong size on LyraSettingsShared_GetInvertVerticalAxisMouse");
static_assert(offsetof(LyraSettingsShared_GetInvertVerticalAxisMouse, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetInvertVerticalAxisMouse::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetMouseSensitivityX
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsShared_GetMouseSensitivityX final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetMouseSensitivityX) == 0x000008, "Wrong alignment on LyraSettingsShared_GetMouseSensitivityX");
static_assert(sizeof(LyraSettingsShared_GetMouseSensitivityX) == 0x000008, "Wrong size on LyraSettingsShared_GetMouseSensitivityX");
static_assert(offsetof(LyraSettingsShared_GetMouseSensitivityX, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetMouseSensitivityX::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetMouseSensitivityY
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsShared_GetMouseSensitivityY final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetMouseSensitivityY) == 0x000008, "Wrong alignment on LyraSettingsShared_GetMouseSensitivityY");
static_assert(sizeof(LyraSettingsShared_GetMouseSensitivityY) == 0x000008, "Wrong size on LyraSettingsShared_GetMouseSensitivityY");
static_assert(offsetof(LyraSettingsShared_GetMouseSensitivityY, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetMouseSensitivityY::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetTargetingMultiplier
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsShared_GetTargetingMultiplier final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetTargetingMultiplier) == 0x000008, "Wrong alignment on LyraSettingsShared_GetTargetingMultiplier");
static_assert(sizeof(LyraSettingsShared_GetTargetingMultiplier) == 0x000008, "Wrong size on LyraSettingsShared_GetTargetingMultiplier");
static_assert(offsetof(LyraSettingsShared_GetTargetingMultiplier, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetTargetingMultiplier::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetTriggerHapticsEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetTriggerHapticsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetTriggerHapticsEnabled) == 0x000001, "Wrong alignment on LyraSettingsShared_GetTriggerHapticsEnabled");
static_assert(sizeof(LyraSettingsShared_GetTriggerHapticsEnabled) == 0x000001, "Wrong size on LyraSettingsShared_GetTriggerHapticsEnabled");
static_assert(offsetof(LyraSettingsShared_GetTriggerHapticsEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetTriggerHapticsEnabled::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetTriggerHapticStartPosition
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetTriggerHapticStartPosition final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetTriggerHapticStartPosition) == 0x000001, "Wrong alignment on LyraSettingsShared_GetTriggerHapticStartPosition");
static_assert(sizeof(LyraSettingsShared_GetTriggerHapticStartPosition) == 0x000001, "Wrong size on LyraSettingsShared_GetTriggerHapticStartPosition");
static_assert(offsetof(LyraSettingsShared_GetTriggerHapticStartPosition, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetTriggerHapticStartPosition::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetTriggerHapticStrength
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetTriggerHapticStrength final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetTriggerHapticStrength) == 0x000001, "Wrong alignment on LyraSettingsShared_GetTriggerHapticStrength");
static_assert(sizeof(LyraSettingsShared_GetTriggerHapticStrength) == 0x000001, "Wrong size on LyraSettingsShared_GetTriggerHapticStrength");
static_assert(offsetof(LyraSettingsShared_GetTriggerHapticStrength, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetTriggerHapticStrength::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsShared.GetTriggerPullUsesHapticThreshold
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsShared_GetTriggerPullUsesHapticThreshold final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsShared_GetTriggerPullUsesHapticThreshold) == 0x000001, "Wrong alignment on LyraSettingsShared_GetTriggerPullUsesHapticThreshold");
static_assert(sizeof(LyraSettingsShared_GetTriggerPullUsesHapticThreshold) == 0x000001, "Wrong size on LyraSettingsShared_GetTriggerPullUsesHapticThreshold");
static_assert(offsetof(LyraSettingsShared_GetTriggerPullUsesHapticThreshold, ReturnValue) == 0x000000, "Member 'LyraSettingsShared_GetTriggerPullUsesHapticThreshold::ReturnValue' has a wrong offset!");

// Function JP.AnimNotify_PlaySoundForPerspective.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct AnimNotify_PlaySoundForPerspective_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimNotify_PlaySoundForPerspective_OnMontageEnded) == 0x000008, "Wrong alignment on AnimNotify_PlaySoundForPerspective_OnMontageEnded");
static_assert(sizeof(AnimNotify_PlaySoundForPerspective_OnMontageEnded) == 0x000010, "Wrong size on AnimNotify_PlaySoundForPerspective_OnMontageEnded");
static_assert(offsetof(AnimNotify_PlaySoundForPerspective_OnMontageEnded, Montage) == 0x000000, "Member 'AnimNotify_PlaySoundForPerspective_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(AnimNotify_PlaySoundForPerspective_OnMontageEnded, bInterrupted) == 0x000008, "Member 'AnimNotify_PlaySoundForPerspective_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function JP.SeasonPassRewardWidgetCatalogItemInterface.ApplyCatalogItemData
// 0x0018 (0x0018 - 0x0000)
struct SeasonPassRewardWidgetCatalogItemInterface_ApplyCatalogItemData final
{
public:
	struct FSeasonPassCatalogItem                 Item;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRewardWidgetCatalogItemInterface_ApplyCatalogItemData) == 0x000008, "Wrong alignment on SeasonPassRewardWidgetCatalogItemInterface_ApplyCatalogItemData");
static_assert(sizeof(SeasonPassRewardWidgetCatalogItemInterface_ApplyCatalogItemData) == 0x000018, "Wrong size on SeasonPassRewardWidgetCatalogItemInterface_ApplyCatalogItemData");
static_assert(offsetof(SeasonPassRewardWidgetCatalogItemInterface_ApplyCatalogItemData, Item) == 0x000000, "Member 'SeasonPassRewardWidgetCatalogItemInterface_ApplyCatalogItemData::Item' has a wrong offset!");

// Function JP.AuthenticationInitializationStep_AccountData.HandleUserAvatarLoaded
// 0x0030 (0x0030 - 0x0000)
struct AuthenticationInitializationStep_AccountData_HandleUserAvatarLoaded final
{
public:
	bool                                          bInWasSuccessful;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                InResultTexture;                                   // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuthenticationInitializationStep_AccountData_HandleUserAvatarLoaded) == 0x000008, "Wrong alignment on AuthenticationInitializationStep_AccountData_HandleUserAvatarLoaded");
static_assert(sizeof(AuthenticationInitializationStep_AccountData_HandleUserAvatarLoaded) == 0x000030, "Wrong size on AuthenticationInitializationStep_AccountData_HandleUserAvatarLoaded");
static_assert(offsetof(AuthenticationInitializationStep_AccountData_HandleUserAvatarLoaded, bInWasSuccessful) == 0x000000, "Member 'AuthenticationInitializationStep_AccountData_HandleUserAvatarLoaded::bInWasSuccessful' has a wrong offset!");
static_assert(offsetof(AuthenticationInitializationStep_AccountData_HandleUserAvatarLoaded, InResultTexture) == 0x000008, "Member 'AuthenticationInitializationStep_AccountData_HandleUserAvatarLoaded::InResultTexture' has a wrong offset!");

// Function JP.EndCondition.EliminateTeam
// 0x0001 (0x0001 - 0x0000)
struct EndCondition_EliminateTeam final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondition_EliminateTeam) == 0x000001, "Wrong alignment on EndCondition_EliminateTeam");
static_assert(sizeof(EndCondition_EliminateTeam) == 0x000001, "Wrong size on EndCondition_EliminateTeam");
static_assert(offsetof(EndCondition_EliminateTeam, TeamId) == 0x000000, "Member 'EndCondition_EliminateTeam::TeamId' has a wrong offset!");

// Function JP.EndCondition.GetEndConditionName
// 0x0008 (0x0008 - 0x0000)
struct EndCondition_GetEndConditionName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndCondition_GetEndConditionName) == 0x000004, "Wrong alignment on EndCondition_GetEndConditionName");
static_assert(sizeof(EndCondition_GetEndConditionName) == 0x000008, "Wrong size on EndCondition_GetEndConditionName");
static_assert(offsetof(EndCondition_GetEndConditionName, ReturnValue) == 0x000000, "Member 'EndCondition_GetEndConditionName::ReturnValue' has a wrong offset!");

// Function JP.TeamColorFunctionLibrary.GetLocalPlayerTeamId
// 0x0010 (0x0010 - 0x0000)
struct TeamColorFunctionLibrary_GetLocalPlayerTeamId final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamColorFunctionLibrary_GetLocalPlayerTeamId) == 0x000008, "Wrong alignment on TeamColorFunctionLibrary_GetLocalPlayerTeamId");
static_assert(sizeof(TeamColorFunctionLibrary_GetLocalPlayerTeamId) == 0x000010, "Wrong size on TeamColorFunctionLibrary_GetLocalPlayerTeamId");
static_assert(offsetof(TeamColorFunctionLibrary_GetLocalPlayerTeamId, WorldContext) == 0x000000, "Member 'TeamColorFunctionLibrary_GetLocalPlayerTeamId::WorldContext' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetLocalPlayerTeamId, ReturnValue) == 0x000008, "Member 'TeamColorFunctionLibrary_GetLocalPlayerTeamId::ReturnValue' has a wrong offset!");

// Function JP.TeamColorFunctionLibrary.GetTeamColorForTeamId
// 0x0020 (0x0020 - 0x0000)
struct TeamColorFunctionLibrary_GetTeamColorForTeamId final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamColorFunctionLibrary_GetTeamColorForTeamId) == 0x000008, "Wrong alignment on TeamColorFunctionLibrary_GetTeamColorForTeamId");
static_assert(sizeof(TeamColorFunctionLibrary_GetTeamColorForTeamId) == 0x000020, "Wrong size on TeamColorFunctionLibrary_GetTeamColorForTeamId");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamColorForTeamId, WorldContext) == 0x000000, "Member 'TeamColorFunctionLibrary_GetTeamColorForTeamId::WorldContext' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamColorForTeamId, TeamId) == 0x000008, "Member 'TeamColorFunctionLibrary_GetTeamColorForTeamId::TeamId' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamColorForTeamId, ReturnValue) == 0x00000C, "Member 'TeamColorFunctionLibrary_GetTeamColorForTeamId::ReturnValue' has a wrong offset!");

// Function JP.TeamColorFunctionLibrary.GetTeamColorForTeamType
// 0x0014 (0x0014 - 0x0000)
struct TeamColorFunctionLibrary_GetTeamColorForTeamType final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamColorFunctionLibrary_GetTeamColorForTeamType) == 0x000004, "Wrong alignment on TeamColorFunctionLibrary_GetTeamColorForTeamType");
static_assert(sizeof(TeamColorFunctionLibrary_GetTeamColorForTeamType) == 0x000014, "Wrong size on TeamColorFunctionLibrary_GetTeamColorForTeamType");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamColorForTeamType, TeamType) == 0x000000, "Member 'TeamColorFunctionLibrary_GetTeamColorForTeamType::TeamType' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamColorForTeamType, ReturnValue) == 0x000004, "Member 'TeamColorFunctionLibrary_GetTeamColorForTeamType::ReturnValue' has a wrong offset!");

// Function JP.TeamColorFunctionLibrary.GetTeamIdFromTeamType
// 0x0010 (0x0010 - 0x0000)
struct TeamColorFunctionLibrary_GetTeamIdFromTeamType final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamType                                     TeamType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamColorFunctionLibrary_GetTeamIdFromTeamType) == 0x000008, "Wrong alignment on TeamColorFunctionLibrary_GetTeamIdFromTeamType");
static_assert(sizeof(TeamColorFunctionLibrary_GetTeamIdFromTeamType) == 0x000010, "Wrong size on TeamColorFunctionLibrary_GetTeamIdFromTeamType");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamIdFromTeamType, WorldContext) == 0x000000, "Member 'TeamColorFunctionLibrary_GetTeamIdFromTeamType::WorldContext' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamIdFromTeamType, TeamType) == 0x000008, "Member 'TeamColorFunctionLibrary_GetTeamIdFromTeamType::TeamType' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamIdFromTeamType, ReturnValue) == 0x000009, "Member 'TeamColorFunctionLibrary_GetTeamIdFromTeamType::ReturnValue' has a wrong offset!");

// Function JP.TeamColorFunctionLibrary.GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView
// 0x0010 (0x0010 - 0x0000)
struct TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamType                                     TeamTypeToConvert;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView) == 0x000008, "Wrong alignment on TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView");
static_assert(sizeof(TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView) == 0x000010, "Wrong size on TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView, PlayerController) == 0x000000, "Member 'TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView::PlayerController' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView, TeamTypeToConvert) == 0x000008, "Member 'TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView::TeamTypeToConvert' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView, ReturnValue) == 0x000009, "Member 'TeamColorFunctionLibrary_GetTeamIdFromTeamTypeFromSpecificPlayerPointOfView::ReturnValue' has a wrong offset!");

// Function JP.TeamColorFunctionLibrary.GetTeamTypeFromTeamId
// 0x0010 (0x0010 - 0x0000)
struct TeamColorFunctionLibrary_GetTeamTypeFromTeamId final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamType                                     ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamColorFunctionLibrary_GetTeamTypeFromTeamId) == 0x000008, "Wrong alignment on TeamColorFunctionLibrary_GetTeamTypeFromTeamId");
static_assert(sizeof(TeamColorFunctionLibrary_GetTeamTypeFromTeamId) == 0x000010, "Wrong size on TeamColorFunctionLibrary_GetTeamTypeFromTeamId");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamTypeFromTeamId, WorldContext) == 0x000000, "Member 'TeamColorFunctionLibrary_GetTeamTypeFromTeamId::WorldContext' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamTypeFromTeamId, TeamId) == 0x000008, "Member 'TeamColorFunctionLibrary_GetTeamTypeFromTeamId::TeamId' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamTypeFromTeamId, ReturnValue) == 0x000009, "Member 'TeamColorFunctionLibrary_GetTeamTypeFromTeamId::ReturnValue' has a wrong offset!");

// Function JP.TeamColorFunctionLibrary.GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView
// 0x0010 (0x0010 - 0x0000)
struct TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamIdToConvert;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamType                                     ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView) == 0x000008, "Wrong alignment on TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView");
static_assert(sizeof(TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView) == 0x000010, "Wrong size on TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView, PlayerController) == 0x000000, "Member 'TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView::PlayerController' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView, TeamIdToConvert) == 0x000008, "Member 'TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView::TeamIdToConvert' has a wrong offset!");
static_assert(offsetof(TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView, ReturnValue) == 0x000009, "Member 'TeamColorFunctionLibrary_GetTeamTypeFromTeamIdFromSpecificPlayerPointOfView::ReturnValue' has a wrong offset!");

// Function JP.SocialListWidget.BlueprintApplyListStateNoAnimation
// 0x0001 (0x0001 - 0x0000)
struct SocialListWidget_BlueprintApplyListStateNoAnimation final
{
public:
	ESocialListState                              InListState;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialListWidget_BlueprintApplyListStateNoAnimation) == 0x000001, "Wrong alignment on SocialListWidget_BlueprintApplyListStateNoAnimation");
static_assert(sizeof(SocialListWidget_BlueprintApplyListStateNoAnimation) == 0x000001, "Wrong size on SocialListWidget_BlueprintApplyListStateNoAnimation");
static_assert(offsetof(SocialListWidget_BlueprintApplyListStateNoAnimation, InListState) == 0x000000, "Member 'SocialListWidget_BlueprintApplyListStateNoAnimation::InListState' has a wrong offset!");

// Function JP.SocialListWidget.SetHeader
// 0x0010 (0x0010 - 0x0000)
struct SocialListWidget_SetHeader final
{
public:
	class FString                                 StringToAppend;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialListWidget_SetHeader) == 0x000008, "Wrong alignment on SocialListWidget_SetHeader");
static_assert(sizeof(SocialListWidget_SetHeader) == 0x000010, "Wrong size on SocialListWidget_SetHeader");
static_assert(offsetof(SocialListWidget_SetHeader, StringToAppend) == 0x000000, "Member 'SocialListWidget_SetHeader::StringToAppend' has a wrong offset!");

// Function JP.AchievementsGameInstanceSubsystem.UnlockAchievement
// 0x0028 (0x0028 - 0x0000)
struct AchievementsGameInstanceSubsystem_UnlockAchievement final
{
public:
	TSoftObjectPtr<class UAchievementMetaData>    AchievementMetaData;                               // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementsGameInstanceSubsystem_UnlockAchievement) == 0x000008, "Wrong alignment on AchievementsGameInstanceSubsystem_UnlockAchievement");
static_assert(sizeof(AchievementsGameInstanceSubsystem_UnlockAchievement) == 0x000028, "Wrong size on AchievementsGameInstanceSubsystem_UnlockAchievement");
static_assert(offsetof(AchievementsGameInstanceSubsystem_UnlockAchievement, AchievementMetaData) == 0x000000, "Member 'AchievementsGameInstanceSubsystem_UnlockAchievement::AchievementMetaData' has a wrong offset!");

// Function JP.AchievementsGameInstanceSubsystem.UpdateAchievementStatFloat
// 0x0030 (0x0030 - 0x0000)
struct AchievementsGameInstanceSubsystem_UpdateAchievementStatFloat final
{
public:
	TSoftObjectPtr<class UAchievementStatMetaData> AchievementStatMetaData;                           // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StatValue;                                         // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AchievementsGameInstanceSubsystem_UpdateAchievementStatFloat) == 0x000008, "Wrong alignment on AchievementsGameInstanceSubsystem_UpdateAchievementStatFloat");
static_assert(sizeof(AchievementsGameInstanceSubsystem_UpdateAchievementStatFloat) == 0x000030, "Wrong size on AchievementsGameInstanceSubsystem_UpdateAchievementStatFloat");
static_assert(offsetof(AchievementsGameInstanceSubsystem_UpdateAchievementStatFloat, AchievementStatMetaData) == 0x000000, "Member 'AchievementsGameInstanceSubsystem_UpdateAchievementStatFloat::AchievementStatMetaData' has a wrong offset!");
static_assert(offsetof(AchievementsGameInstanceSubsystem_UpdateAchievementStatFloat, StatValue) == 0x000028, "Member 'AchievementsGameInstanceSubsystem_UpdateAchievementStatFloat::StatValue' has a wrong offset!");

// Function JP.AchievementsGameInstanceSubsystem.UpdateAchievementStatInt
// 0x0030 (0x0030 - 0x0000)
struct AchievementsGameInstanceSubsystem_UpdateAchievementStatInt final
{
public:
	TSoftObjectPtr<class UAchievementStatMetaData> AchievementStatMetaData;                           // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AchievementsGameInstanceSubsystem_UpdateAchievementStatInt) == 0x000008, "Wrong alignment on AchievementsGameInstanceSubsystem_UpdateAchievementStatInt");
static_assert(sizeof(AchievementsGameInstanceSubsystem_UpdateAchievementStatInt) == 0x000030, "Wrong size on AchievementsGameInstanceSubsystem_UpdateAchievementStatInt");
static_assert(offsetof(AchievementsGameInstanceSubsystem_UpdateAchievementStatInt, AchievementStatMetaData) == 0x000000, "Member 'AchievementsGameInstanceSubsystem_UpdateAchievementStatInt::AchievementStatMetaData' has a wrong offset!");
static_assert(offsetof(AchievementsGameInstanceSubsystem_UpdateAchievementStatInt, StatValue) == 0x000028, "Member 'AchievementsGameInstanceSubsystem_UpdateAchievementStatInt::StatValue' has a wrong offset!");

// Function JP.TeamableInterface.GetTeam
// 0x0038 (0x0038 - 0x0000)
struct TeamableInterface_GetTeam final
{
public:
	struct FTeam                                  ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamableInterface_GetTeam) == 0x000008, "Wrong alignment on TeamableInterface_GetTeam");
static_assert(sizeof(TeamableInterface_GetTeam) == 0x000038, "Wrong size on TeamableInterface_GetTeam");
static_assert(offsetof(TeamableInterface_GetTeam, ReturnValue) == 0x000000, "Member 'TeamableInterface_GetTeam::ReturnValue' has a wrong offset!");

// Function JP.TeamableInterface.GetTeamID
// 0x0001 (0x0001 - 0x0000)
struct TeamableInterface_GetTeamID final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamableInterface_GetTeamID) == 0x000001, "Wrong alignment on TeamableInterface_GetTeamID");
static_assert(sizeof(TeamableInterface_GetTeamID) == 0x000001, "Wrong size on TeamableInterface_GetTeamID");
static_assert(offsetof(TeamableInterface_GetTeamID, ReturnValue) == 0x000000, "Member 'TeamableInterface_GetTeamID::ReturnValue' has a wrong offset!");

// Function JP.TeamableInterface.HasTeam
// 0x0001 (0x0001 - 0x0000)
struct TeamableInterface_HasTeam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamableInterface_HasTeam) == 0x000001, "Wrong alignment on TeamableInterface_HasTeam");
static_assert(sizeof(TeamableInterface_HasTeam) == 0x000001, "Wrong size on TeamableInterface_HasTeam");
static_assert(offsetof(TeamableInterface_HasTeam, ReturnValue) == 0x000000, "Member 'TeamableInterface_HasTeam::ReturnValue' has a wrong offset!");

// Function JP.TeamableInterface.TakeDamageFromAllTeams
// 0x0001 (0x0001 - 0x0000)
struct TeamableInterface_TakeDamageFromAllTeams final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamableInterface_TakeDamageFromAllTeams) == 0x000001, "Wrong alignment on TeamableInterface_TakeDamageFromAllTeams");
static_assert(sizeof(TeamableInterface_TakeDamageFromAllTeams) == 0x000001, "Wrong size on TeamableInterface_TakeDamageFromAllTeams");
static_assert(offsetof(TeamableInterface_TakeDamageFromAllTeams, ReturnValue) == 0x000000, "Member 'TeamableInterface_TakeDamageFromAllTeams::ReturnValue' has a wrong offset!");

// Function JP.AmmoAttributeSet.OnRep_FireworkBoxAmmo
// 0x0010 (0x0010 - 0x0000)
struct AmmoAttributeSet_OnRep_FireworkBoxAmmo final
{
public:
	struct FGameplayAttributeData                 OldFireworkBoxAmmo;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSet_OnRep_FireworkBoxAmmo) == 0x000008, "Wrong alignment on AmmoAttributeSet_OnRep_FireworkBoxAmmo");
static_assert(sizeof(AmmoAttributeSet_OnRep_FireworkBoxAmmo) == 0x000010, "Wrong size on AmmoAttributeSet_OnRep_FireworkBoxAmmo");
static_assert(offsetof(AmmoAttributeSet_OnRep_FireworkBoxAmmo, OldFireworkBoxAmmo) == 0x000000, "Member 'AmmoAttributeSet_OnRep_FireworkBoxAmmo::OldFireworkBoxAmmo' has a wrong offset!");

// Function JP.AmmoAttributeSet.OnRep_FireworkBoxMaxAmmo
// 0x0010 (0x0010 - 0x0000)
struct AmmoAttributeSet_OnRep_FireworkBoxMaxAmmo final
{
public:
	struct FGameplayAttributeData                 OldFireworkBoxAmmoMax;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSet_OnRep_FireworkBoxMaxAmmo) == 0x000008, "Wrong alignment on AmmoAttributeSet_OnRep_FireworkBoxMaxAmmo");
static_assert(sizeof(AmmoAttributeSet_OnRep_FireworkBoxMaxAmmo) == 0x000010, "Wrong size on AmmoAttributeSet_OnRep_FireworkBoxMaxAmmo");
static_assert(offsetof(AmmoAttributeSet_OnRep_FireworkBoxMaxAmmo, OldFireworkBoxAmmoMax) == 0x000000, "Member 'AmmoAttributeSet_OnRep_FireworkBoxMaxAmmo::OldFireworkBoxAmmoMax' has a wrong offset!");

// Function JP.AmmoAttributeSet.OnRep_OrangeCannonAmmo
// 0x0010 (0x0010 - 0x0000)
struct AmmoAttributeSet_OnRep_OrangeCannonAmmo final
{
public:
	struct FGameplayAttributeData                 OldOrangeCannonAmmo;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSet_OnRep_OrangeCannonAmmo) == 0x000008, "Wrong alignment on AmmoAttributeSet_OnRep_OrangeCannonAmmo");
static_assert(sizeof(AmmoAttributeSet_OnRep_OrangeCannonAmmo) == 0x000010, "Wrong size on AmmoAttributeSet_OnRep_OrangeCannonAmmo");
static_assert(offsetof(AmmoAttributeSet_OnRep_OrangeCannonAmmo, OldOrangeCannonAmmo) == 0x000000, "Member 'AmmoAttributeSet_OnRep_OrangeCannonAmmo::OldOrangeCannonAmmo' has a wrong offset!");

// Function JP.AmmoAttributeSet.OnRep_OrangeCannonMaxAmmo
// 0x0010 (0x0010 - 0x0000)
struct AmmoAttributeSet_OnRep_OrangeCannonMaxAmmo final
{
public:
	struct FGameplayAttributeData                 OldOrangeCannonAmmoMax;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSet_OnRep_OrangeCannonMaxAmmo) == 0x000008, "Wrong alignment on AmmoAttributeSet_OnRep_OrangeCannonMaxAmmo");
static_assert(sizeof(AmmoAttributeSet_OnRep_OrangeCannonMaxAmmo) == 0x000010, "Wrong size on AmmoAttributeSet_OnRep_OrangeCannonMaxAmmo");
static_assert(offsetof(AmmoAttributeSet_OnRep_OrangeCannonMaxAmmo, OldOrangeCannonAmmoMax) == 0x000000, "Member 'AmmoAttributeSet_OnRep_OrangeCannonMaxAmmo::OldOrangeCannonAmmoMax' has a wrong offset!");

// Function JP.AmmoAttributeSet.OnRep_SlingshotAmmo
// 0x0010 (0x0010 - 0x0000)
struct AmmoAttributeSet_OnRep_SlingshotAmmo final
{
public:
	struct FGameplayAttributeData                 OldSlingshotAmmo;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSet_OnRep_SlingshotAmmo) == 0x000008, "Wrong alignment on AmmoAttributeSet_OnRep_SlingshotAmmo");
static_assert(sizeof(AmmoAttributeSet_OnRep_SlingshotAmmo) == 0x000010, "Wrong size on AmmoAttributeSet_OnRep_SlingshotAmmo");
static_assert(offsetof(AmmoAttributeSet_OnRep_SlingshotAmmo, OldSlingshotAmmo) == 0x000000, "Member 'AmmoAttributeSet_OnRep_SlingshotAmmo::OldSlingshotAmmo' has a wrong offset!");

// Function JP.AmmoAttributeSet.OnRep_SlingshotMaxAmmo
// 0x0010 (0x0010 - 0x0000)
struct AmmoAttributeSet_OnRep_SlingshotMaxAmmo final
{
public:
	struct FGameplayAttributeData                 OldSlingshotAmmoMax;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSet_OnRep_SlingshotMaxAmmo) == 0x000008, "Wrong alignment on AmmoAttributeSet_OnRep_SlingshotMaxAmmo");
static_assert(sizeof(AmmoAttributeSet_OnRep_SlingshotMaxAmmo) == 0x000010, "Wrong size on AmmoAttributeSet_OnRep_SlingshotMaxAmmo");
static_assert(offsetof(AmmoAttributeSet_OnRep_SlingshotMaxAmmo, OldSlingshotAmmoMax) == 0x000000, "Member 'AmmoAttributeSet_OnRep_SlingshotMaxAmmo::OldSlingshotAmmoMax' has a wrong offset!");

// Function JP.AmmoAttributeSet.OnRep_WrenchAmmo
// 0x0010 (0x0010 - 0x0000)
struct AmmoAttributeSet_OnRep_WrenchAmmo final
{
public:
	struct FGameplayAttributeData                 OldWrenchAmmo;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSet_OnRep_WrenchAmmo) == 0x000008, "Wrong alignment on AmmoAttributeSet_OnRep_WrenchAmmo");
static_assert(sizeof(AmmoAttributeSet_OnRep_WrenchAmmo) == 0x000010, "Wrong size on AmmoAttributeSet_OnRep_WrenchAmmo");
static_assert(offsetof(AmmoAttributeSet_OnRep_WrenchAmmo, OldWrenchAmmo) == 0x000000, "Member 'AmmoAttributeSet_OnRep_WrenchAmmo::OldWrenchAmmo' has a wrong offset!");

// Function JP.AmmoAttributeSet.OnRep_WrenchMaxAmmo
// 0x0010 (0x0010 - 0x0000)
struct AmmoAttributeSet_OnRep_WrenchMaxAmmo final
{
public:
	struct FGameplayAttributeData                 OldWrenchAmmoMax;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSet_OnRep_WrenchMaxAmmo) == 0x000008, "Wrong alignment on AmmoAttributeSet_OnRep_WrenchMaxAmmo");
static_assert(sizeof(AmmoAttributeSet_OnRep_WrenchMaxAmmo) == 0x000010, "Wrong size on AmmoAttributeSet_OnRep_WrenchMaxAmmo");
static_assert(offsetof(AmmoAttributeSet_OnRep_WrenchMaxAmmo, OldWrenchAmmoMax) == 0x000000, "Member 'AmmoAttributeSet_OnRep_WrenchMaxAmmo::OldWrenchAmmoMax' has a wrong offset!");

// Function JP.SocialFriendEntryWidget.GetLocalizedStatusInfo
// 0x0028 (0x0028 - 0x0000)
struct SocialFriendEntryWidget_GetLocalizedStatusInfo final
{
public:
	EOnlineServicesFriendStatus                   Status;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   StatusText;                                        // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialFriendEntryWidget_GetLocalizedStatusInfo) == 0x000008, "Wrong alignment on SocialFriendEntryWidget_GetLocalizedStatusInfo");
static_assert(sizeof(SocialFriendEntryWidget_GetLocalizedStatusInfo) == 0x000028, "Wrong size on SocialFriendEntryWidget_GetLocalizedStatusInfo");
static_assert(offsetof(SocialFriendEntryWidget_GetLocalizedStatusInfo, Status) == 0x000000, "Member 'SocialFriendEntryWidget_GetLocalizedStatusInfo::Status' has a wrong offset!");
static_assert(offsetof(SocialFriendEntryWidget_GetLocalizedStatusInfo, StatusText) == 0x000008, "Member 'SocialFriendEntryWidget_GetLocalizedStatusInfo::StatusText' has a wrong offset!");
static_assert(offsetof(SocialFriendEntryWidget_GetLocalizedStatusInfo, Color) == 0x000018, "Member 'SocialFriendEntryWidget_GetLocalizedStatusInfo::Color' has a wrong offset!");

// Function JP.SocialFriendEntryWidget.SetIsInviteSent
// 0x0001 (0x0001 - 0x0000)
struct SocialFriendEntryWidget_SetIsInviteSent final
{
public:
	bool                                          bIsInviteSent;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialFriendEntryWidget_SetIsInviteSent) == 0x000001, "Wrong alignment on SocialFriendEntryWidget_SetIsInviteSent");
static_assert(sizeof(SocialFriendEntryWidget_SetIsInviteSent) == 0x000001, "Wrong size on SocialFriendEntryWidget_SetIsInviteSent");
static_assert(offsetof(SocialFriendEntryWidget_SetIsInviteSent, bIsInviteSent) == 0x000000, "Member 'SocialFriendEntryWidget_SetIsInviteSent::bIsInviteSent' has a wrong offset!");

// Function JP.SocialFriendEntryWidget.SetStatus
// 0x0001 (0x0001 - 0x0000)
struct SocialFriendEntryWidget_SetStatus final
{
public:
	EOnlineServicesFriendStatus                   Status;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialFriendEntryWidget_SetStatus) == 0x000001, "Wrong alignment on SocialFriendEntryWidget_SetStatus");
static_assert(sizeof(SocialFriendEntryWidget_SetStatus) == 0x000001, "Wrong size on SocialFriendEntryWidget_SetStatus");
static_assert(offsetof(SocialFriendEntryWidget_SetStatus, Status) == 0x000000, "Member 'SocialFriendEntryWidget_SetStatus::Status' has a wrong offset!");

// Function JP.AsyncAction_WaitForClientAuthenticationInitialized.WaitForClientAuthenticationInitialized
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_WaitForClientAuthenticationInitialized_WaitForClientAuthenticationInitialized final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_WaitForClientAuthenticationInitialized* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_WaitForClientAuthenticationInitialized_WaitForClientAuthenticationInitialized) == 0x000008, "Wrong alignment on AsyncAction_WaitForClientAuthenticationInitialized_WaitForClientAuthenticationInitialized");
static_assert(sizeof(AsyncAction_WaitForClientAuthenticationInitialized_WaitForClientAuthenticationInitialized) == 0x000010, "Wrong size on AsyncAction_WaitForClientAuthenticationInitialized_WaitForClientAuthenticationInitialized");
static_assert(offsetof(AsyncAction_WaitForClientAuthenticationInitialized_WaitForClientAuthenticationInitialized, WorldContextObject) == 0x000000, "Member 'AsyncAction_WaitForClientAuthenticationInitialized_WaitForClientAuthenticationInitialized::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_WaitForClientAuthenticationInitialized_WaitForClientAuthenticationInitialized, ReturnValue) == 0x000008, "Member 'AsyncAction_WaitForClientAuthenticationInitialized_WaitForClientAuthenticationInitialized::ReturnValue' has a wrong offset!");

// Function JP.GameModeJP.GetGameModeJP
// 0x0010 (0x0010 - 0x0000)
struct GameModeJP_GetGameModeJP final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameModeJP*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_GetGameModeJP) == 0x000008, "Wrong alignment on GameModeJP_GetGameModeJP");
static_assert(sizeof(GameModeJP_GetGameModeJP) == 0x000010, "Wrong size on GameModeJP_GetGameModeJP");
static_assert(offsetof(GameModeJP_GetGameModeJP, WorldContextObject) == 0x000000, "Member 'GameModeJP_GetGameModeJP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameModeJP_GetGameModeJP, ReturnValue) == 0x000008, "Member 'GameModeJP_GetGameModeJP::ReturnValue' has a wrong offset!");

// Function JP.GameModeJP.GetEnemyHouseEssentialKills
// 0x0010 (0x0010 - 0x0000)
struct GameModeJP_GetEnemyHouseEssentialKills final
{
public:
	const class APlayerStateJP*                   PlayerStateJP;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameModeJP_GetEnemyHouseEssentialKills) == 0x000008, "Wrong alignment on GameModeJP_GetEnemyHouseEssentialKills");
static_assert(sizeof(GameModeJP_GetEnemyHouseEssentialKills) == 0x000010, "Wrong size on GameModeJP_GetEnemyHouseEssentialKills");
static_assert(offsetof(GameModeJP_GetEnemyHouseEssentialKills, PlayerStateJP) == 0x000000, "Member 'GameModeJP_GetEnemyHouseEssentialKills::PlayerStateJP' has a wrong offset!");
static_assert(offsetof(GameModeJP_GetEnemyHouseEssentialKills, ReturnValue) == 0x000008, "Member 'GameModeJP_GetEnemyHouseEssentialKills::ReturnValue' has a wrong offset!");

// Function JP.GameModeJP.GetTeamHouseEssentialLost
// 0x0010 (0x0010 - 0x0000)
struct GameModeJP_GetTeamHouseEssentialLost final
{
public:
	const class APlayerStateJP*                   PlayerStateJP;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameModeJP_GetTeamHouseEssentialLost) == 0x000008, "Wrong alignment on GameModeJP_GetTeamHouseEssentialLost");
static_assert(sizeof(GameModeJP_GetTeamHouseEssentialLost) == 0x000010, "Wrong size on GameModeJP_GetTeamHouseEssentialLost");
static_assert(offsetof(GameModeJP_GetTeamHouseEssentialLost, PlayerStateJP) == 0x000000, "Member 'GameModeJP_GetTeamHouseEssentialLost::PlayerStateJP' has a wrong offset!");
static_assert(offsetof(GameModeJP_GetTeamHouseEssentialLost, ReturnValue) == 0x000008, "Member 'GameModeJP_GetTeamHouseEssentialLost::ReturnValue' has a wrong offset!");

// Function JP.GameModeJP.ServerTravel
// 0x0028 (0x0028 - 0x0000)
struct GameModeJP_ServerTravel final
{
public:
	TSoftObjectPtr<class UWorld>                  TargetLevel;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_ServerTravel) == 0x000008, "Wrong alignment on GameModeJP_ServerTravel");
static_assert(sizeof(GameModeJP_ServerTravel) == 0x000028, "Wrong size on GameModeJP_ServerTravel");
static_assert(offsetof(GameModeJP_ServerTravel, TargetLevel) == 0x000000, "Member 'GameModeJP_ServerTravel::TargetLevel' has a wrong offset!");

// Function JP.GameModeJP_Match.EndConditionEnabled
// 0x0018 (0x0018 - 0x0000)
struct GameModeJP_Match_EndConditionEnabled final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AEndCondition>              EndConditionType;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameModeJP_Match_EndConditionEnabled) == 0x000008, "Wrong alignment on GameModeJP_Match_EndConditionEnabled");
static_assert(sizeof(GameModeJP_Match_EndConditionEnabled) == 0x000018, "Wrong size on GameModeJP_Match_EndConditionEnabled");
static_assert(offsetof(GameModeJP_Match_EndConditionEnabled, WorldContextObject) == 0x000000, "Member 'GameModeJP_Match_EndConditionEnabled::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameModeJP_Match_EndConditionEnabled, EndConditionType) == 0x000008, "Member 'GameModeJP_Match_EndConditionEnabled::EndConditionType' has a wrong offset!");
static_assert(offsetof(GameModeJP_Match_EndConditionEnabled, ReturnValue) == 0x000010, "Member 'GameModeJP_Match_EndConditionEnabled::ReturnValue' has a wrong offset!");

// Function JP.GameModeJP_Match.GetEndCondition
// 0x0018 (0x0018 - 0x0000)
struct GameModeJP_Match_GetEndCondition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AEndCondition>              EndConditionType;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEndCondition*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Match_GetEndCondition) == 0x000008, "Wrong alignment on GameModeJP_Match_GetEndCondition");
static_assert(sizeof(GameModeJP_Match_GetEndCondition) == 0x000018, "Wrong size on GameModeJP_Match_GetEndCondition");
static_assert(offsetof(GameModeJP_Match_GetEndCondition, WorldContextObject) == 0x000000, "Member 'GameModeJP_Match_GetEndCondition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameModeJP_Match_GetEndCondition, EndConditionType) == 0x000008, "Member 'GameModeJP_Match_GetEndCondition::EndConditionType' has a wrong offset!");
static_assert(offsetof(GameModeJP_Match_GetEndCondition, ReturnValue) == 0x000010, "Member 'GameModeJP_Match_GetEndCondition::ReturnValue' has a wrong offset!");

// Function JP.GameModeJP_Match.CanShutdownGracefully
// 0x0001 (0x0001 - 0x0000)
struct GameModeJP_Match_CanShutdownGracefully final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Match_CanShutdownGracefully) == 0x000001, "Wrong alignment on GameModeJP_Match_CanShutdownGracefully");
static_assert(sizeof(GameModeJP_Match_CanShutdownGracefully) == 0x000001, "Wrong size on GameModeJP_Match_CanShutdownGracefully");
static_assert(offsetof(GameModeJP_Match_CanShutdownGracefully, ReturnValue) == 0x000000, "Member 'GameModeJP_Match_CanShutdownGracefully::ReturnValue' has a wrong offset!");

// Function JP.GameModeJP_Match.ChoosePlayerStart_Implementation
// 0x0010 (0x0010 - 0x0000)
struct GameModeJP_Match_ChoosePlayerStart_Implementation final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Match_ChoosePlayerStart_Implementation) == 0x000008, "Wrong alignment on GameModeJP_Match_ChoosePlayerStart_Implementation");
static_assert(sizeof(GameModeJP_Match_ChoosePlayerStart_Implementation) == 0x000010, "Wrong size on GameModeJP_Match_ChoosePlayerStart_Implementation");
static_assert(offsetof(GameModeJP_Match_ChoosePlayerStart_Implementation, Player) == 0x000000, "Member 'GameModeJP_Match_ChoosePlayerStart_Implementation::Player' has a wrong offset!");
static_assert(offsetof(GameModeJP_Match_ChoosePlayerStart_Implementation, ReturnValue) == 0x000008, "Member 'GameModeJP_Match_ChoosePlayerStart_Implementation::ReturnValue' has a wrong offset!");

// Function JP.GameModeJP_Match.HandlePlayerBlockedListInitialized
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_Match_HandlePlayerBlockedListInitialized final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Match_HandlePlayerBlockedListInitialized) == 0x000008, "Wrong alignment on GameModeJP_Match_HandlePlayerBlockedListInitialized");
static_assert(sizeof(GameModeJP_Match_HandlePlayerBlockedListInitialized) == 0x000008, "Wrong size on GameModeJP_Match_HandlePlayerBlockedListInitialized");
static_assert(offsetof(GameModeJP_Match_HandlePlayerBlockedListInitialized, PlayerState) == 0x000000, "Member 'GameModeJP_Match_HandlePlayerBlockedListInitialized::PlayerState' has a wrong offset!");

// Function JP.GameModeJP_Match.OnKill
// 0x03E0 (0x03E0 - 0x0000)
struct GameModeJP_Match_OnKill final
{
public:
	struct FGameplayTag                           Channel;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKillGameplayMessage                   MessagePayload;                                    // 0x0008(0x03D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Match_OnKill) == 0x000008, "Wrong alignment on GameModeJP_Match_OnKill");
static_assert(sizeof(GameModeJP_Match_OnKill) == 0x0003E0, "Wrong size on GameModeJP_Match_OnKill");
static_assert(offsetof(GameModeJP_Match_OnKill, Channel) == 0x000000, "Member 'GameModeJP_Match_OnKill::Channel' has a wrong offset!");
static_assert(offsetof(GameModeJP_Match_OnKill, MessagePayload) == 0x000008, "Member 'GameModeJP_Match_OnKill::MessagePayload' has a wrong offset!");

// Function JP.GameModeJP_Match.AddEndCondition
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_Match_AddEndCondition final
{
public:
	TSubclassOf<class AEndCondition>              EndConditionType;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Match_AddEndCondition) == 0x000008, "Wrong alignment on GameModeJP_Match_AddEndCondition");
static_assert(sizeof(GameModeJP_Match_AddEndCondition) == 0x000008, "Wrong size on GameModeJP_Match_AddEndCondition");
static_assert(offsetof(GameModeJP_Match_AddEndCondition, EndConditionType) == 0x000000, "Member 'GameModeJP_Match_AddEndCondition::EndConditionType' has a wrong offset!");

// Function JP.GameModeJP_Match.IsAllClientsHousesLoaded
// 0x0001 (0x0001 - 0x0000)
struct GameModeJP_Match_IsAllClientsHousesLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Match_IsAllClientsHousesLoaded) == 0x000001, "Wrong alignment on GameModeJP_Match_IsAllClientsHousesLoaded");
static_assert(sizeof(GameModeJP_Match_IsAllClientsHousesLoaded) == 0x000001, "Wrong size on GameModeJP_Match_IsAllClientsHousesLoaded");
static_assert(offsetof(GameModeJP_Match_IsAllClientsHousesLoaded, ReturnValue) == 0x000000, "Member 'GameModeJP_Match_IsAllClientsHousesLoaded::ReturnValue' has a wrong offset!");

// Function JP.AbilityTask_WaitForActorOutOfFocus.WaitForActorOutOfFocus
// 0x0040 (0x0040 - 0x0000)
struct AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToFind;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToLookFor;                                     // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         CheckInterval;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitForActorOutOfFocus*    ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus) == 0x000008, "Wrong alignment on AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus");
static_assert(sizeof(AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus) == 0x000040, "Wrong size on AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus");
static_assert(offsetof(AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus, ActorToFind) == 0x000008, "Member 'AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus::ActorToFind' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus, TagsToLookFor) == 0x000010, "Member 'AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus::TagsToLookFor' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus, CheckInterval) == 0x000030, "Member 'AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus::CheckInterval' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus, ReturnValue) == 0x000038, "Member 'AbilityTask_WaitForActorOutOfFocus_WaitForActorOutOfFocus::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingValueDiscreteDynamic_AudioOutputDevice.DefaultDeviceChanged
// 0x0018 (0x0018 - 0x0000)
struct LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged final
{
public:
	EAudioDeviceChangedRole                       InRole;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceID;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged) == 0x000008, "Wrong alignment on LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged");
static_assert(sizeof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged) == 0x000018, "Wrong size on LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged, InRole) == 0x000000, "Member 'LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged::InRole' has a wrong offset!");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged, DeviceID) == 0x000008, "Member 'LyraSettingValueDiscreteDynamic_AudioOutputDevice_DefaultDeviceChanged::DeviceID' has a wrong offset!");

// Function JP.LyraSettingValueDiscreteDynamic_AudioOutputDevice.DeviceAddedOrRemoved
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved) == 0x000008, "Wrong alignment on LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved");
static_assert(sizeof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved) == 0x000010, "Wrong size on LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved, DeviceID) == 0x000000, "Member 'LyraSettingValueDiscreteDynamic_AudioOutputDevice_DeviceAddedOrRemoved::DeviceID' has a wrong offset!");

// Function JP.LyraSettingValueDiscreteDynamic_AudioOutputDevice.OnAudioOutputDevicesObtained
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained final
{
public:
	TArray<struct FAudioOutputDeviceInfo>         AvailableDevices;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained) == 0x000008, "Wrong alignment on LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained");
static_assert(sizeof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained) == 0x000010, "Wrong size on LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained, AvailableDevices) == 0x000000, "Member 'LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnAudioOutputDevicesObtained::AvailableDevices' has a wrong offset!");

// Function JP.LyraSettingValueDiscreteDynamic_AudioOutputDevice.OnCompletedDeviceSwap
// 0x0028 (0x0028 - 0x0000)
struct LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap final
{
public:
	struct FSwapAudioOutputResult                 SwapResult;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap) == 0x000008, "Wrong alignment on LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap");
static_assert(sizeof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap) == 0x000028, "Wrong size on LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap, SwapResult) == 0x000000, "Member 'LyraSettingValueDiscreteDynamic_AudioOutputDevice_OnCompletedDeviceSwap::SwapResult' has a wrong offset!");

// Function JP.SocialBlockedPlayerEntryWidget.GetLocalizedStatusInfo
// 0x0020 (0x0020 - 0x0000)
struct SocialBlockedPlayerEntryWidget_GetLocalizedStatusInfo final
{
public:
	class FText                                   StatusText;                                        // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialBlockedPlayerEntryWidget_GetLocalizedStatusInfo) == 0x000008, "Wrong alignment on SocialBlockedPlayerEntryWidget_GetLocalizedStatusInfo");
static_assert(sizeof(SocialBlockedPlayerEntryWidget_GetLocalizedStatusInfo) == 0x000020, "Wrong size on SocialBlockedPlayerEntryWidget_GetLocalizedStatusInfo");
static_assert(offsetof(SocialBlockedPlayerEntryWidget_GetLocalizedStatusInfo, StatusText) == 0x000000, "Member 'SocialBlockedPlayerEntryWidget_GetLocalizedStatusInfo::StatusText' has a wrong offset!");
static_assert(offsetof(SocialBlockedPlayerEntryWidget_GetLocalizedStatusInfo, Color) == 0x000010, "Member 'SocialBlockedPlayerEntryWidget_GetLocalizedStatusInfo::Color' has a wrong offset!");

// Function JP.AbilityTask_WaitInputReleaseOrTimer.WaitInputReleaseOrTimer
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestAlreadyReleased;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputReleaseOrTimer*   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer) == 0x000008, "Wrong alignment on AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer");
static_assert(sizeof(AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer) == 0x000018, "Wrong size on AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer");
static_assert(offsetof(AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer, Time) == 0x000008, "Member 'AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer::Time' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer, bTestAlreadyReleased) == 0x00000C, "Member 'AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer::bTestAlreadyReleased' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer, ReturnValue) == 0x000010, "Member 'AbilityTask_WaitInputReleaseOrTimer_WaitInputReleaseOrTimer::ReturnValue' has a wrong offset!");

// Function JP.AsyncTaskEffectStackChanged.ListenForGameplayEffectStackChange
// 0x0018 (0x0018 - 0x0000)
struct AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange final
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectGameplayTag;                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncTaskEffectStackChanged*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange) == 0x000008, "Wrong alignment on AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange");
static_assert(sizeof(AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange) == 0x000018, "Wrong size on AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange");
static_assert(offsetof(AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange, AbilitySystemComponent) == 0x000000, "Member 'AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange::AbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange, EffectGameplayTag) == 0x000008, "Member 'AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange::EffectGameplayTag' has a wrong offset!");
static_assert(offsetof(AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange, ReturnValue) == 0x000010, "Member 'AsyncTaskEffectStackChanged_ListenForGameplayEffectStackChange::ReturnValue' has a wrong offset!");

// Function JP.PlayerJoinHandShakePlayerStateComponent.GetIsBlockedListInitialized
// 0x0001 (0x0001 - 0x0000)
struct PlayerJoinHandShakePlayerStateComponent_GetIsBlockedListInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerJoinHandShakePlayerStateComponent_GetIsBlockedListInitialized) == 0x000001, "Wrong alignment on PlayerJoinHandShakePlayerStateComponent_GetIsBlockedListInitialized");
static_assert(sizeof(PlayerJoinHandShakePlayerStateComponent_GetIsBlockedListInitialized) == 0x000001, "Wrong size on PlayerJoinHandShakePlayerStateComponent_GetIsBlockedListInitialized");
static_assert(offsetof(PlayerJoinHandShakePlayerStateComponent_GetIsBlockedListInitialized, ReturnValue) == 0x000000, "Member 'PlayerJoinHandShakePlayerStateComponent_GetIsBlockedListInitialized::ReturnValue' has a wrong offset!");

// Function JP.PlayerJoinHandShakePlayerStateComponent.GetJoinStatus
// 0x0001 (0x0001 - 0x0000)
struct PlayerJoinHandShakePlayerStateComponent_GetJoinStatus final
{
public:
	EPlayerStateJoinStatus                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerJoinHandShakePlayerStateComponent_GetJoinStatus) == 0x000001, "Wrong alignment on PlayerJoinHandShakePlayerStateComponent_GetJoinStatus");
static_assert(sizeof(PlayerJoinHandShakePlayerStateComponent_GetJoinStatus) == 0x000001, "Wrong size on PlayerJoinHandShakePlayerStateComponent_GetJoinStatus");
static_assert(offsetof(PlayerJoinHandShakePlayerStateComponent_GetJoinStatus, ReturnValue) == 0x000000, "Member 'PlayerJoinHandShakePlayerStateComponent_GetJoinStatus::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_WaitForLoadingScreenToHide.WaitForLoadingScreenToHide
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_WaitForLoadingScreenToHide_WaitForLoadingScreenToHide final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_WaitForLoadingScreenToHide* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_WaitForLoadingScreenToHide_WaitForLoadingScreenToHide) == 0x000008, "Wrong alignment on AsyncAction_WaitForLoadingScreenToHide_WaitForLoadingScreenToHide");
static_assert(sizeof(AsyncAction_WaitForLoadingScreenToHide_WaitForLoadingScreenToHide) == 0x000010, "Wrong size on AsyncAction_WaitForLoadingScreenToHide_WaitForLoadingScreenToHide");
static_assert(offsetof(AsyncAction_WaitForLoadingScreenToHide_WaitForLoadingScreenToHide, WorldContextObject) == 0x000000, "Member 'AsyncAction_WaitForLoadingScreenToHide_WaitForLoadingScreenToHide::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_WaitForLoadingScreenToHide_WaitForLoadingScreenToHide, ReturnValue) == 0x000008, "Member 'AsyncAction_WaitForLoadingScreenToHide_WaitForLoadingScreenToHide::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_WaitForLoadingScreenToHide.OnLoadingScreenStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct AsyncAction_WaitForLoadingScreenToHide_OnLoadingScreenStatusChanged final
{
public:
	bool                                          LoadingScreenVisibilityChanged;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_WaitForLoadingScreenToHide_OnLoadingScreenStatusChanged) == 0x000001, "Wrong alignment on AsyncAction_WaitForLoadingScreenToHide_OnLoadingScreenStatusChanged");
static_assert(sizeof(AsyncAction_WaitForLoadingScreenToHide_OnLoadingScreenStatusChanged) == 0x000001, "Wrong size on AsyncAction_WaitForLoadingScreenToHide_OnLoadingScreenStatusChanged");
static_assert(offsetof(AsyncAction_WaitForLoadingScreenToHide_OnLoadingScreenStatusChanged, LoadingScreenVisibilityChanged) == 0x000000, "Member 'AsyncAction_WaitForLoadingScreenToHide_OnLoadingScreenStatusChanged::LoadingScreenVisibilityChanged' has a wrong offset!");

// Function JP.AuthenticationInitialization_RecoverMatch.Reconnect
// 0x0010 (0x0010 - 0x0000)
struct AuthenticationInitialization_RecoverMatch_Reconnect final
{
public:
	TDelegate<void(bool Success)>                 OnComplete;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuthenticationInitialization_RecoverMatch_Reconnect) == 0x000004, "Wrong alignment on AuthenticationInitialization_RecoverMatch_Reconnect");
static_assert(sizeof(AuthenticationInitialization_RecoverMatch_Reconnect) == 0x000010, "Wrong size on AuthenticationInitialization_RecoverMatch_Reconnect");
static_assert(offsetof(AuthenticationInitialization_RecoverMatch_Reconnect, OnComplete) == 0x000000, "Member 'AuthenticationInitialization_RecoverMatch_Reconnect::OnComplete' has a wrong offset!");

// Function JP.AsyncAction_WaitForCoordinatorActivation_UIDataIsReady.WaitForUIDataIsReadyCoordinator
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_WaitForUIDataIsReadyCoordinator final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_WaitForCoordinatorActivation_UIDataIsReady* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_WaitForUIDataIsReadyCoordinator) == 0x000008, "Wrong alignment on AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_WaitForUIDataIsReadyCoordinator");
static_assert(sizeof(AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_WaitForUIDataIsReadyCoordinator) == 0x000010, "Wrong size on AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_WaitForUIDataIsReadyCoordinator");
static_assert(offsetof(AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_WaitForUIDataIsReadyCoordinator, WorldContextObject) == 0x000000, "Member 'AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_WaitForUIDataIsReadyCoordinator::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_WaitForUIDataIsReadyCoordinator, ReturnValue) == 0x000008, "Member 'AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_WaitForUIDataIsReadyCoordinator::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_WaitForCoordinatorActivation_UIDataIsReady.HandleCoordinatorActivated
// 0x0008 (0x0008 - 0x0000)
struct AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_HandleCoordinatorActivated final
{
public:
	class UBaseCoordinator*                       Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_HandleCoordinatorActivated) == 0x000008, "Wrong alignment on AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_HandleCoordinatorActivated");
static_assert(sizeof(AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_HandleCoordinatorActivated) == 0x000008, "Wrong size on AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_HandleCoordinatorActivated");
static_assert(offsetof(AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_HandleCoordinatorActivated, Coordinator) == 0x000000, "Member 'AsyncAction_WaitForCoordinatorActivation_UIDataIsReady_HandleCoordinatorActivated::Coordinator' has a wrong offset!");

// Function JP.PlayerControllerJP.ExecuteCheat
// 0x0018 (0x0018 - 0x0000)
struct PlayerControllerJP_ExecuteCheat final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_ExecuteCheat) == 0x000008, "Wrong alignment on PlayerControllerJP_ExecuteCheat");
static_assert(sizeof(PlayerControllerJP_ExecuteCheat) == 0x000018, "Wrong size on PlayerControllerJP_ExecuteCheat");
static_assert(offsetof(PlayerControllerJP_ExecuteCheat, Command) == 0x000000, "Member 'PlayerControllerJP_ExecuteCheat::Command' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_ExecuteCheat, WorldContextObject) == 0x000010, "Member 'PlayerControllerJP_ExecuteCheat::WorldContextObject' has a wrong offset!");

// Function JP.PlayerControllerJP.BlueprintLog
// 0x0020 (0x0020 - 0x0000)
struct PlayerControllerJP_BlueprintLog final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewMinVerbosityLevel;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_BlueprintLog) == 0x000008, "Wrong alignment on PlayerControllerJP_BlueprintLog");
static_assert(sizeof(PlayerControllerJP_BlueprintLog) == 0x000020, "Wrong size on PlayerControllerJP_BlueprintLog");
static_assert(offsetof(PlayerControllerJP_BlueprintLog, CategoryName) == 0x000000, "Member 'PlayerControllerJP_BlueprintLog::CategoryName' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_BlueprintLog, NewMinVerbosityLevel) == 0x000010, "Member 'PlayerControllerJP_BlueprintLog::NewMinVerbosityLevel' has a wrong offset!");

// Function JP.PlayerControllerJP.ChangeTeam
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerJP_ChangeTeam final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_ChangeTeam) == 0x000001, "Wrong alignment on PlayerControllerJP_ChangeTeam");
static_assert(sizeof(PlayerControllerJP_ChangeTeam) == 0x000001, "Wrong size on PlayerControllerJP_ChangeTeam");
static_assert(offsetof(PlayerControllerJP_ChangeTeam, Team) == 0x000000, "Member 'PlayerControllerJP_ChangeTeam::Team' has a wrong offset!");

// Function JP.PlayerControllerJP.Client_ReceiveMessage
// 0x0018 (0x0018 - 0x0000)
struct PlayerControllerJP_Client_ReceiveMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMessageType                                  Type;                                              // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerControllerJP_Client_ReceiveMessage) == 0x000008, "Wrong alignment on PlayerControllerJP_Client_ReceiveMessage");
static_assert(sizeof(PlayerControllerJP_Client_ReceiveMessage) == 0x000018, "Wrong size on PlayerControllerJP_Client_ReceiveMessage");
static_assert(offsetof(PlayerControllerJP_Client_ReceiveMessage, Message) == 0x000000, "Member 'PlayerControllerJP_Client_ReceiveMessage::Message' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_Client_ReceiveMessage, Type) == 0x000010, "Member 'PlayerControllerJP_Client_ReceiveMessage::Type' has a wrong offset!");

// Function JP.PlayerControllerJP.OnOwnedHousesUpdated
// 0x0020 (0x0020 - 0x0000)
struct PlayerControllerJP_OnOwnedHousesUpdated final
{
public:
	TArray<struct FOnlineStoreItemData>           OwnedItems;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FOnlineStoreItemData>           UnownedItems;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_OnOwnedHousesUpdated) == 0x000008, "Wrong alignment on PlayerControllerJP_OnOwnedHousesUpdated");
static_assert(sizeof(PlayerControllerJP_OnOwnedHousesUpdated) == 0x000020, "Wrong size on PlayerControllerJP_OnOwnedHousesUpdated");
static_assert(offsetof(PlayerControllerJP_OnOwnedHousesUpdated, OwnedItems) == 0x000000, "Member 'PlayerControllerJP_OnOwnedHousesUpdated::OwnedItems' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_OnOwnedHousesUpdated, UnownedItems) == 0x000010, "Member 'PlayerControllerJP_OnOwnedHousesUpdated::UnownedItems' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_ChangeCharacterRole
// 0x0060 (0x0060 - 0x0000)
struct PlayerControllerJP_Server_ChangeCharacterRole final
{
public:
	struct FCharacterRoleData                     NewCharacterRole;                                  // 0x0000(0x0060)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_ChangeCharacterRole) == 0x000008, "Wrong alignment on PlayerControllerJP_Server_ChangeCharacterRole");
static_assert(sizeof(PlayerControllerJP_Server_ChangeCharacterRole) == 0x000060, "Wrong size on PlayerControllerJP_Server_ChangeCharacterRole");
static_assert(offsetof(PlayerControllerJP_Server_ChangeCharacterRole, NewCharacterRole) == 0x000000, "Member 'PlayerControllerJP_Server_ChangeCharacterRole::NewCharacterRole' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_ChangeHouseIdentifierVote
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerJP_Server_ChangeHouseIdentifierVote final
{
public:
	struct FGameplayTag                           HouseIdentifierVote;                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_ChangeHouseIdentifierVote) == 0x000004, "Wrong alignment on PlayerControllerJP_Server_ChangeHouseIdentifierVote");
static_assert(sizeof(PlayerControllerJP_Server_ChangeHouseIdentifierVote) == 0x000008, "Wrong size on PlayerControllerJP_Server_ChangeHouseIdentifierVote");
static_assert(offsetof(PlayerControllerJP_Server_ChangeHouseIdentifierVote, HouseIdentifierVote) == 0x000000, "Member 'PlayerControllerJP_Server_ChangeHouseIdentifierVote::HouseIdentifierVote' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_ChangeMatchConfiguration
// 0x0058 (0x0058 - 0x0000)
struct PlayerControllerJP_Server_ChangeMatchConfiguration final
{
public:
	struct FMatchConfiguration                    InNewConfig;                                       // 0x0000(0x0058)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_ChangeMatchConfiguration) == 0x000008, "Wrong alignment on PlayerControllerJP_Server_ChangeMatchConfiguration");
static_assert(sizeof(PlayerControllerJP_Server_ChangeMatchConfiguration) == 0x000058, "Wrong size on PlayerControllerJP_Server_ChangeMatchConfiguration");
static_assert(offsetof(PlayerControllerJP_Server_ChangeMatchConfiguration, InNewConfig) == 0x000000, "Member 'PlayerControllerJP_Server_ChangeMatchConfiguration::InNewConfig' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_ChangeOwnedHouses
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_Server_ChangeOwnedHouses final
{
public:
	TArray<struct FGameplayTag>                   OwnedHouses;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_ChangeOwnedHouses) == 0x000008, "Wrong alignment on PlayerControllerJP_Server_ChangeOwnedHouses");
static_assert(sizeof(PlayerControllerJP_Server_ChangeOwnedHouses) == 0x000010, "Wrong size on PlayerControllerJP_Server_ChangeOwnedHouses");
static_assert(offsetof(PlayerControllerJP_Server_ChangeOwnedHouses, OwnedHouses) == 0x000000, "Member 'PlayerControllerJP_Server_ChangeOwnedHouses::OwnedHouses' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_ChangeTeam
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerJP_Server_ChangeTeam final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_ChangeTeam) == 0x000001, "Wrong alignment on PlayerControllerJP_Server_ChangeTeam");
static_assert(sizeof(PlayerControllerJP_Server_ChangeTeam) == 0x000001, "Wrong size on PlayerControllerJP_Server_ChangeTeam");
static_assert(offsetof(PlayerControllerJP_Server_ChangeTeam, TeamId) == 0x000000, "Member 'PlayerControllerJP_Server_ChangeTeam::TeamId' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_ExecuteCheat
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_Server_ExecuteCheat final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_ExecuteCheat) == 0x000008, "Wrong alignment on PlayerControllerJP_Server_ExecuteCheat");
static_assert(sizeof(PlayerControllerJP_Server_ExecuteCheat) == 0x000010, "Wrong size on PlayerControllerJP_Server_ExecuteCheat");
static_assert(offsetof(PlayerControllerJP_Server_ExecuteCheat, Command) == 0x000000, "Member 'PlayerControllerJP_Server_ExecuteCheat::Command' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_SendMasterPlayerAccountId
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_Server_SendMasterPlayerAccountId final
{
public:
	class FString                                 MasterPlayerAccountId;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_SendMasterPlayerAccountId) == 0x000008, "Wrong alignment on PlayerControllerJP_Server_SendMasterPlayerAccountId");
static_assert(sizeof(PlayerControllerJP_Server_SendMasterPlayerAccountId) == 0x000010, "Wrong size on PlayerControllerJP_Server_SendMasterPlayerAccountId");
static_assert(offsetof(PlayerControllerJP_Server_SendMasterPlayerAccountId, MasterPlayerAccountId) == 0x000000, "Member 'PlayerControllerJP_Server_SendMasterPlayerAccountId::MasterPlayerAccountId' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_SendMessageToAll
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_Server_SendMessageToAll final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_SendMessageToAll) == 0x000008, "Wrong alignment on PlayerControllerJP_Server_SendMessageToAll");
static_assert(sizeof(PlayerControllerJP_Server_SendMessageToAll) == 0x000010, "Wrong size on PlayerControllerJP_Server_SendMessageToAll");
static_assert(offsetof(PlayerControllerJP_Server_SendMessageToAll, Message) == 0x000000, "Member 'PlayerControllerJP_Server_SendMessageToAll::Message' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_SendTitlePlayerAccountId
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_Server_SendTitlePlayerAccountId final
{
public:
	class FString                                 TitlePlayerAccountId;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_SendTitlePlayerAccountId) == 0x000008, "Wrong alignment on PlayerControllerJP_Server_SendTitlePlayerAccountId");
static_assert(sizeof(PlayerControllerJP_Server_SendTitlePlayerAccountId) == 0x000010, "Wrong size on PlayerControllerJP_Server_SendTitlePlayerAccountId");
static_assert(offsetof(PlayerControllerJP_Server_SendTitlePlayerAccountId, TitlePlayerAccountId) == 0x000000, "Member 'PlayerControllerJP_Server_SendTitlePlayerAccountId::TitlePlayerAccountId' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_SetOwnedNeighbors
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_Server_SetOwnedNeighbors final
{
public:
	TArray<struct FGameplayTag>                   InOwnedNeighbors;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_SetOwnedNeighbors) == 0x000008, "Wrong alignment on PlayerControllerJP_Server_SetOwnedNeighbors");
static_assert(sizeof(PlayerControllerJP_Server_SetOwnedNeighbors) == 0x000010, "Wrong size on PlayerControllerJP_Server_SetOwnedNeighbors");
static_assert(offsetof(PlayerControllerJP_Server_SetOwnedNeighbors, InOwnedNeighbors) == 0x000000, "Member 'PlayerControllerJP_Server_SetOwnedNeighbors::InOwnedNeighbors' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_SetPartyIdString
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_Server_SetPartyIdString final
{
public:
	class FString                                 InPartyIdString;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_SetPartyIdString) == 0x000008, "Wrong alignment on PlayerControllerJP_Server_SetPartyIdString");
static_assert(sizeof(PlayerControllerJP_Server_SetPartyIdString) == 0x000010, "Wrong size on PlayerControllerJP_Server_SetPartyIdString");
static_assert(offsetof(PlayerControllerJP_Server_SetPartyIdString, InPartyIdString) == 0x000000, "Member 'PlayerControllerJP_Server_SetPartyIdString::InPartyIdString' has a wrong offset!");

// Function JP.PlayerControllerJP.Server_SetUserOnlineID
// 0x0030 (0x0030 - 0x0000)
struct PlayerControllerJP_Server_SetUserOnlineID final
{
public:
	struct FUniqueNetIdRepl                       InID;                                              // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Server_SetUserOnlineID) == 0x000008, "Wrong alignment on PlayerControllerJP_Server_SetUserOnlineID");
static_assert(sizeof(PlayerControllerJP_Server_SetUserOnlineID) == 0x000030, "Wrong size on PlayerControllerJP_Server_SetUserOnlineID");
static_assert(offsetof(PlayerControllerJP_Server_SetUserOnlineID, InID) == 0x000000, "Member 'PlayerControllerJP_Server_SetUserOnlineID::InID' has a wrong offset!");

// Function JP.PlayerControllerJP.StartMatchmaking
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_StartMatchmaking final
{
public:
	class FString                                 QueueName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_StartMatchmaking) == 0x000008, "Wrong alignment on PlayerControllerJP_StartMatchmaking");
static_assert(sizeof(PlayerControllerJP_StartMatchmaking) == 0x000010, "Wrong size on PlayerControllerJP_StartMatchmaking");
static_assert(offsetof(PlayerControllerJP_StartMatchmaking, QueueName) == 0x000000, "Member 'PlayerControllerJP_StartMatchmaking::QueueName' has a wrong offset!");

// Function JP.PlayerControllerJP.HasJoinedMatchInProgress
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerJP_HasJoinedMatchInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_HasJoinedMatchInProgress) == 0x000001, "Wrong alignment on PlayerControllerJP_HasJoinedMatchInProgress");
static_assert(sizeof(PlayerControllerJP_HasJoinedMatchInProgress) == 0x000001, "Wrong size on PlayerControllerJP_HasJoinedMatchInProgress");
static_assert(offsetof(PlayerControllerJP_HasJoinedMatchInProgress, ReturnValue) == 0x000000, "Member 'PlayerControllerJP_HasJoinedMatchInProgress::ReturnValue' has a wrong offset!");

// Function JP.PlayerControllerJP.JoinSession
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_JoinSession final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_JoinSession) == 0x000008, "Wrong alignment on PlayerControllerJP_JoinSession");
static_assert(sizeof(PlayerControllerJP_JoinSession) == 0x000010, "Wrong size on PlayerControllerJP_JoinSession");
static_assert(offsetof(PlayerControllerJP_JoinSession, SessionId) == 0x000000, "Member 'PlayerControllerJP_JoinSession::SessionId' has a wrong offset!");

// Function JP.PlayerControllerJP.UpdateSeasonPass
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_UpdateSeasonPass final
{
public:
	class FString                                 SeasonPassName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_UpdateSeasonPass) == 0x000008, "Wrong alignment on PlayerControllerJP_UpdateSeasonPass");
static_assert(sizeof(PlayerControllerJP_UpdateSeasonPass) == 0x000010, "Wrong size on PlayerControllerJP_UpdateSeasonPass");
static_assert(offsetof(PlayerControllerJP_UpdateSeasonPass, SeasonPassName) == 0x000000, "Member 'PlayerControllerJP_UpdateSeasonPass::SeasonPassName' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.AddMoney
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerJP_Match_AddMoney final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_AddMoney) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_AddMoney");
static_assert(sizeof(PlayerControllerJP_Match_AddMoney) == 0x000004, "Wrong size on PlayerControllerJP_Match_AddMoney");
static_assert(offsetof(PlayerControllerJP_Match_AddMoney, Amount) == 0x000000, "Member 'PlayerControllerJP_Match_AddMoney::Amount' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.AddPassiveIncome
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerJP_Match_AddPassiveIncome final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_AddPassiveIncome) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_AddPassiveIncome");
static_assert(sizeof(PlayerControllerJP_Match_AddPassiveIncome) == 0x000004, "Wrong size on PlayerControllerJP_Match_AddPassiveIncome");
static_assert(offsetof(PlayerControllerJP_Match_AddPassiveIncome, Amount) == 0x000000, "Member 'PlayerControllerJP_Match_AddPassiveIncome::Amount' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.AddPerfectness
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerJP_Match_AddPerfectness final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_AddPerfectness) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_AddPerfectness");
static_assert(sizeof(PlayerControllerJP_Match_AddPerfectness) == 0x000004, "Wrong size on PlayerControllerJP_Match_AddPerfectness");
static_assert(offsetof(PlayerControllerJP_Match_AddPerfectness, Amount) == 0x000000, "Member 'PlayerControllerJP_Match_AddPerfectness::Amount' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.AddWood
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerJP_Match_AddWood final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_AddWood) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_AddWood");
static_assert(sizeof(PlayerControllerJP_Match_AddWood) == 0x000004, "Wrong size on PlayerControllerJP_Match_AddWood");
static_assert(offsetof(PlayerControllerJP_Match_AddWood, Amount) == 0x000000, "Member 'PlayerControllerJP_Match_AddWood::Amount' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.CheatRespawnAsNeighbor
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerJP_Match_CheatRespawnAsNeighbor final
{
public:
	class FName                                   NeighborID;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_CheatRespawnAsNeighbor) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_CheatRespawnAsNeighbor");
static_assert(sizeof(PlayerControllerJP_Match_CheatRespawnAsNeighbor) == 0x000008, "Wrong size on PlayerControllerJP_Match_CheatRespawnAsNeighbor");
static_assert(offsetof(PlayerControllerJP_Match_CheatRespawnAsNeighbor, NeighborID) == 0x000000, "Member 'PlayerControllerJP_Match_CheatRespawnAsNeighbor::NeighborID' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.CheatSpawnActor
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerJP_Match_CheatSpawnActor final
{
public:
	class FName                                   DataTableRowName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_CheatSpawnActor) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_CheatSpawnActor");
static_assert(sizeof(PlayerControllerJP_Match_CheatSpawnActor) == 0x000008, "Wrong size on PlayerControllerJP_Match_CheatSpawnActor");
static_assert(offsetof(PlayerControllerJP_Match_CheatSpawnActor, DataTableRowName) == 0x000000, "Member 'PlayerControllerJP_Match_CheatSpawnActor::DataTableRowName' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.Client_AssignMatchRewards
// 0x0020 (0x0020 - 0x0000)
struct PlayerControllerJP_Match_Client_AssignMatchRewards final
{
public:
	struct FMatchRewards                          Rewards;                                           // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_Client_AssignMatchRewards) == 0x000008, "Wrong alignment on PlayerControllerJP_Match_Client_AssignMatchRewards");
static_assert(sizeof(PlayerControllerJP_Match_Client_AssignMatchRewards) == 0x000020, "Wrong size on PlayerControllerJP_Match_Client_AssignMatchRewards");
static_assert(offsetof(PlayerControllerJP_Match_Client_AssignMatchRewards, Rewards) == 0x000000, "Member 'PlayerControllerJP_Match_Client_AssignMatchRewards::Rewards' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.GetMatchRewards
// 0x0020 (0x0020 - 0x0000)
struct PlayerControllerJP_Match_GetMatchRewards final
{
public:
	struct FMatchRewards                          ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_GetMatchRewards) == 0x000008, "Wrong alignment on PlayerControllerJP_Match_GetMatchRewards");
static_assert(sizeof(PlayerControllerJP_Match_GetMatchRewards) == 0x000020, "Wrong size on PlayerControllerJP_Match_GetMatchRewards");
static_assert(offsetof(PlayerControllerJP_Match_GetMatchRewards, ReturnValue) == 0x000000, "Member 'PlayerControllerJP_Match_GetMatchRewards::ReturnValue' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.HandleHUDMatchWidgetAdded
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerJP_Match_HandleHUDMatchWidgetAdded final
{
public:
	class UJPHUDWidget_Match*                     HUDWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_HandleHUDMatchWidgetAdded) == 0x000008, "Wrong alignment on PlayerControllerJP_Match_HandleHUDMatchWidgetAdded");
static_assert(sizeof(PlayerControllerJP_Match_HandleHUDMatchWidgetAdded) == 0x000008, "Wrong size on PlayerControllerJP_Match_HandleHUDMatchWidgetAdded");
static_assert(offsetof(PlayerControllerJP_Match_HandleHUDMatchWidgetAdded, HUDWidget) == 0x000000, "Member 'PlayerControllerJP_Match_HandleHUDMatchWidgetAdded::HUDWidget' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.Server_CheatSpawnActor
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerJP_Match_Server_CheatSpawnActor final
{
public:
	class FName                                   DataTableRowName;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_Server_CheatSpawnActor) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_Server_CheatSpawnActor");
static_assert(sizeof(PlayerControllerJP_Match_Server_CheatSpawnActor) == 0x000008, "Wrong size on PlayerControllerJP_Match_Server_CheatSpawnActor");
static_assert(offsetof(PlayerControllerJP_Match_Server_CheatSpawnActor, DataTableRowName) == 0x000000, "Member 'PlayerControllerJP_Match_Server_CheatSpawnActor::DataTableRowName' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.Server_RespawnAsNeighbor
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerJP_Match_Server_RespawnAsNeighbor final
{
public:
	struct FGameplayTag                           NewNeighbor;                                       // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_Server_RespawnAsNeighbor) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_Server_RespawnAsNeighbor");
static_assert(sizeof(PlayerControllerJP_Match_Server_RespawnAsNeighbor) == 0x000008, "Wrong size on PlayerControllerJP_Match_Server_RespawnAsNeighbor");
static_assert(offsetof(PlayerControllerJP_Match_Server_RespawnAsNeighbor, NewNeighbor) == 0x000000, "Member 'PlayerControllerJP_Match_Server_RespawnAsNeighbor::NewNeighbor' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.Server_SpawnItem
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerJP_Match_Server_SpawnItem final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_Server_SpawnItem) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_Server_SpawnItem");
static_assert(sizeof(PlayerControllerJP_Match_Server_SpawnItem) == 0x000008, "Wrong size on PlayerControllerJP_Match_Server_SpawnItem");
static_assert(offsetof(PlayerControllerJP_Match_Server_SpawnItem, ItemName) == 0x000000, "Member 'PlayerControllerJP_Match_Server_SpawnItem::ItemName' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.Server_TeleportToLocation
// 0x000C (0x000C - 0x0000)
struct PlayerControllerJP_Match_Server_TeleportToLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_Server_TeleportToLocation) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_Server_TeleportToLocation");
static_assert(sizeof(PlayerControllerJP_Match_Server_TeleportToLocation) == 0x00000C, "Wrong size on PlayerControllerJP_Match_Server_TeleportToLocation");
static_assert(offsetof(PlayerControllerJP_Match_Server_TeleportToLocation, X) == 0x000000, "Member 'PlayerControllerJP_Match_Server_TeleportToLocation::X' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_Match_Server_TeleportToLocation, Y) == 0x000004, "Member 'PlayerControllerJP_Match_Server_TeleportToLocation::Y' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_Match_Server_TeleportToLocation, Z) == 0x000008, "Member 'PlayerControllerJP_Match_Server_TeleportToLocation::Z' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.SpawnItem
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerJP_Match_SpawnItem final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_SpawnItem) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_SpawnItem");
static_assert(sizeof(PlayerControllerJP_Match_SpawnItem) == 0x000008, "Wrong size on PlayerControllerJP_Match_SpawnItem");
static_assert(offsetof(PlayerControllerJP_Match_SpawnItem, ItemName) == 0x000000, "Member 'PlayerControllerJP_Match_SpawnItem::ItemName' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.TeleportToLocation
// 0x000C (0x000C - 0x0000)
struct PlayerControllerJP_Match_TeleportToLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_TeleportToLocation) == 0x000004, "Wrong alignment on PlayerControllerJP_Match_TeleportToLocation");
static_assert(sizeof(PlayerControllerJP_Match_TeleportToLocation) == 0x00000C, "Wrong size on PlayerControllerJP_Match_TeleportToLocation");
static_assert(offsetof(PlayerControllerJP_Match_TeleportToLocation, X) == 0x000000, "Member 'PlayerControllerJP_Match_TeleportToLocation::X' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_Match_TeleportToLocation, Y) == 0x000004, "Member 'PlayerControllerJP_Match_TeleportToLocation::Y' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_Match_TeleportToLocation, Z) == 0x000008, "Member 'PlayerControllerJP_Match_TeleportToLocation::Z' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.GetMatchHUDWidget
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerJP_Match_GetMatchHUDWidget final
{
public:
	class UJPHUDWidget_Match*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_GetMatchHUDWidget) == 0x000008, "Wrong alignment on PlayerControllerJP_Match_GetMatchHUDWidget");
static_assert(sizeof(PlayerControllerJP_Match_GetMatchHUDWidget) == 0x000008, "Wrong size on PlayerControllerJP_Match_GetMatchHUDWidget");
static_assert(offsetof(PlayerControllerJP_Match_GetMatchHUDWidget, ReturnValue) == 0x000000, "Member 'PlayerControllerJP_Match_GetMatchHUDWidget::ReturnValue' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.HasMatchRewards
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerJP_Match_HasMatchRewards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_HasMatchRewards) == 0x000001, "Wrong alignment on PlayerControllerJP_Match_HasMatchRewards");
static_assert(sizeof(PlayerControllerJP_Match_HasMatchRewards) == 0x000001, "Wrong size on PlayerControllerJP_Match_HasMatchRewards");
static_assert(offsetof(PlayerControllerJP_Match_HasMatchRewards, ReturnValue) == 0x000000, "Member 'PlayerControllerJP_Match_HasMatchRewards::ReturnValue' has a wrong offset!");

// Function JP.PlayerControllerJP_Match.IsHousesLoadedOnClient
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerJP_Match_IsHousesLoadedOnClient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Match_IsHousesLoadedOnClient) == 0x000001, "Wrong alignment on PlayerControllerJP_Match_IsHousesLoadedOnClient");
static_assert(sizeof(PlayerControllerJP_Match_IsHousesLoadedOnClient) == 0x000001, "Wrong size on PlayerControllerJP_Match_IsHousesLoadedOnClient");
static_assert(offsetof(PlayerControllerJP_Match_IsHousesLoadedOnClient, ReturnValue) == 0x000000, "Member 'PlayerControllerJP_Match_IsHousesLoadedOnClient::ReturnValue' has a wrong offset!");

// Function JP.JPHUDWidget_Match.GetMatchHUDWidget
// 0x0010 (0x0010 - 0x0000)
struct JPHUDWidget_Match_GetMatchHUDWidget final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJPHUDWidget_Match*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPHUDWidget_Match_GetMatchHUDWidget) == 0x000008, "Wrong alignment on JPHUDWidget_Match_GetMatchHUDWidget");
static_assert(sizeof(JPHUDWidget_Match_GetMatchHUDWidget) == 0x000010, "Wrong size on JPHUDWidget_Match_GetMatchHUDWidget");
static_assert(offsetof(JPHUDWidget_Match_GetMatchHUDWidget, WorldContext) == 0x000000, "Member 'JPHUDWidget_Match_GetMatchHUDWidget::WorldContext' has a wrong offset!");
static_assert(offsetof(JPHUDWidget_Match_GetMatchHUDWidget, ReturnValue) == 0x000008, "Member 'JPHUDWidget_Match_GetMatchHUDWidget::ReturnValue' has a wrong offset!");

// Function JP.JPHUDWidget_Match.AddRuntimeChildWidget
// 0x0010 (0x0010 - 0x0000)
struct JPHUDWidget_Match_AddRuntimeChildWidget final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JPHUDWidget_Match_AddRuntimeChildWidget) == 0x000008, "Wrong alignment on JPHUDWidget_Match_AddRuntimeChildWidget");
static_assert(sizeof(JPHUDWidget_Match_AddRuntimeChildWidget) == 0x000010, "Wrong size on JPHUDWidget_Match_AddRuntimeChildWidget");
static_assert(offsetof(JPHUDWidget_Match_AddRuntimeChildWidget, Widget) == 0x000000, "Member 'JPHUDWidget_Match_AddRuntimeChildWidget::Widget' has a wrong offset!");
static_assert(offsetof(JPHUDWidget_Match_AddRuntimeChildWidget, ReturnValue) == 0x000008, "Member 'JPHUDWidget_Match_AddRuntimeChildWidget::ReturnValue' has a wrong offset!");

// Function JP.JPHUDWidget_Match.AddRuntimeChildWidgetAt
// 0x0010 (0x0010 - 0x0000)
struct JPHUDWidget_Match_AddRuntimeChildWidgetAt final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JPHUDWidget_Match_AddRuntimeChildWidgetAt) == 0x000008, "Wrong alignment on JPHUDWidget_Match_AddRuntimeChildWidgetAt");
static_assert(sizeof(JPHUDWidget_Match_AddRuntimeChildWidgetAt) == 0x000010, "Wrong size on JPHUDWidget_Match_AddRuntimeChildWidgetAt");
static_assert(offsetof(JPHUDWidget_Match_AddRuntimeChildWidgetAt, Widget) == 0x000000, "Member 'JPHUDWidget_Match_AddRuntimeChildWidgetAt::Widget' has a wrong offset!");
static_assert(offsetof(JPHUDWidget_Match_AddRuntimeChildWidgetAt, Index_0) == 0x000008, "Member 'JPHUDWidget_Match_AddRuntimeChildWidgetAt::Index_0' has a wrong offset!");
static_assert(offsetof(JPHUDWidget_Match_AddRuntimeChildWidgetAt, ReturnValue) == 0x00000C, "Member 'JPHUDWidget_Match_AddRuntimeChildWidgetAt::ReturnValue' has a wrong offset!");

// Function JP.JPHUDWidget_Match.RemoveRuntimeChildWidget
// 0x0010 (0x0010 - 0x0000)
struct JPHUDWidget_Match_RemoveRuntimeChildWidget final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JPHUDWidget_Match_RemoveRuntimeChildWidget) == 0x000008, "Wrong alignment on JPHUDWidget_Match_RemoveRuntimeChildWidget");
static_assert(sizeof(JPHUDWidget_Match_RemoveRuntimeChildWidget) == 0x000010, "Wrong size on JPHUDWidget_Match_RemoveRuntimeChildWidget");
static_assert(offsetof(JPHUDWidget_Match_RemoveRuntimeChildWidget, Widget) == 0x000000, "Member 'JPHUDWidget_Match_RemoveRuntimeChildWidget::Widget' has a wrong offset!");
static_assert(offsetof(JPHUDWidget_Match_RemoveRuntimeChildWidget, ReturnValue) == 0x000008, "Member 'JPHUDWidget_Match_RemoveRuntimeChildWidget::ReturnValue' has a wrong offset!");

// Function JP.WarmupComponent.IsWarmupActive
// 0x0001 (0x0001 - 0x0000)
struct WarmupComponent_IsWarmupActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WarmupComponent_IsWarmupActive) == 0x000001, "Wrong alignment on WarmupComponent_IsWarmupActive");
static_assert(sizeof(WarmupComponent_IsWarmupActive) == 0x000001, "Wrong size on WarmupComponent_IsWarmupActive");
static_assert(offsetof(WarmupComponent_IsWarmupActive, ReturnValue) == 0x000000, "Member 'WarmupComponent_IsWarmupActive::ReturnValue' has a wrong offset!");

// Function JP.WarmupComponent.ListenOnWarmupSecondsLeft
// 0x0014 (0x0014 - 0x0000)
struct WarmupComponent_ListenOnWarmupSecondsLeft final
{
public:
	float                                         SecondsLeft;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Delegate;                                          // 0x0004(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WarmupComponent_ListenOnWarmupSecondsLeft) == 0x000004, "Wrong alignment on WarmupComponent_ListenOnWarmupSecondsLeft");
static_assert(sizeof(WarmupComponent_ListenOnWarmupSecondsLeft) == 0x000014, "Wrong size on WarmupComponent_ListenOnWarmupSecondsLeft");
static_assert(offsetof(WarmupComponent_ListenOnWarmupSecondsLeft, SecondsLeft) == 0x000000, "Member 'WarmupComponent_ListenOnWarmupSecondsLeft::SecondsLeft' has a wrong offset!");
static_assert(offsetof(WarmupComponent_ListenOnWarmupSecondsLeft, Delegate) == 0x000004, "Member 'WarmupComponent_ListenOnWarmupSecondsLeft::Delegate' has a wrong offset!");

// Function JP.WarmupComponent.OnExperienceLoaded
// 0x0008 (0x0008 - 0x0000)
struct WarmupComponent_OnExperienceLoaded final
{
public:
	const class UExperienceDefinition*            Definition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WarmupComponent_OnExperienceLoaded) == 0x000008, "Wrong alignment on WarmupComponent_OnExperienceLoaded");
static_assert(sizeof(WarmupComponent_OnExperienceLoaded) == 0x000008, "Wrong size on WarmupComponent_OnExperienceLoaded");
static_assert(offsetof(WarmupComponent_OnExperienceLoaded, Definition) == 0x000000, "Member 'WarmupComponent_OnExperienceLoaded::Definition' has a wrong offset!");

// Function JP.WarmupComponent.GetEndTime
// 0x0004 (0x0004 - 0x0000)
struct WarmupComponent_GetEndTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WarmupComponent_GetEndTime) == 0x000004, "Wrong alignment on WarmupComponent_GetEndTime");
static_assert(sizeof(WarmupComponent_GetEndTime) == 0x000004, "Wrong size on WarmupComponent_GetEndTime");
static_assert(offsetof(WarmupComponent_GetEndTime, ReturnValue) == 0x000000, "Member 'WarmupComponent_GetEndTime::ReturnValue' has a wrong offset!");

// Function JP.WarmupComponent.GetTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct WarmupComponent_GetTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WarmupComponent_GetTimeLeft) == 0x000004, "Wrong alignment on WarmupComponent_GetTimeLeft");
static_assert(sizeof(WarmupComponent_GetTimeLeft) == 0x000004, "Wrong size on WarmupComponent_GetTimeLeft");
static_assert(offsetof(WarmupComponent_GetTimeLeft, ReturnValue) == 0x000000, "Member 'WarmupComponent_GetTimeLeft::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_AwaitPlayerStateJPLobbyReady.AwaitPlayerStateJPLobbyReady
// 0x0020 (0x0020 - 0x0000)
struct AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStateJP_Lobby*                   PlayerState_0;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeoutDuration_0;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncAction_AwaitPlayerStateJPLobbyReady* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady) == 0x000008, "Wrong alignment on AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady");
static_assert(sizeof(AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady) == 0x000020, "Wrong size on AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady");
static_assert(offsetof(AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady, WorldContextObject) == 0x000000, "Member 'AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady, PlayerState_0) == 0x000008, "Member 'AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady::PlayerState_0' has a wrong offset!");
static_assert(offsetof(AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady, TimeoutDuration_0) == 0x000010, "Member 'AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady::TimeoutDuration_0' has a wrong offset!");
static_assert(offsetof(AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady, ReturnValue) == 0x000018, "Member 'AsyncAction_AwaitPlayerStateJPLobbyReady_AwaitPlayerStateJPLobbyReady::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_AwaitPlayerStateJPLobbyReady.OnPlayerXPChanged
// 0x0028 (0x0028 - 0x0000)
struct AsyncAction_AwaitPlayerStateJPLobbyReady_OnPlayerXPChanged final
{
public:
	class APlayerStateJP*                         BroadcastPlayerState;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerXP                              PlayerXP;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_AwaitPlayerStateJPLobbyReady_OnPlayerXPChanged) == 0x000008, "Wrong alignment on AsyncAction_AwaitPlayerStateJPLobbyReady_OnPlayerXPChanged");
static_assert(sizeof(AsyncAction_AwaitPlayerStateJPLobbyReady_OnPlayerXPChanged) == 0x000028, "Wrong size on AsyncAction_AwaitPlayerStateJPLobbyReady_OnPlayerXPChanged");
static_assert(offsetof(AsyncAction_AwaitPlayerStateJPLobbyReady_OnPlayerXPChanged, BroadcastPlayerState) == 0x000000, "Member 'AsyncAction_AwaitPlayerStateJPLobbyReady_OnPlayerXPChanged::BroadcastPlayerState' has a wrong offset!");
static_assert(offsetof(AsyncAction_AwaitPlayerStateJPLobbyReady_OnPlayerXPChanged, PlayerXP) == 0x000008, "Member 'AsyncAction_AwaitPlayerStateJPLobbyReady_OnPlayerXPChanged::PlayerXP' has a wrong offset!");

// Function JP.AsyncAction_WaitForLocalPlayerStateSet.WaitForLocalPlayerStateSet
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_WaitForLocalPlayerStateSet_WaitForLocalPlayerStateSet final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_WaitForLocalPlayerStateSet* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_WaitForLocalPlayerStateSet_WaitForLocalPlayerStateSet) == 0x000008, "Wrong alignment on AsyncAction_WaitForLocalPlayerStateSet_WaitForLocalPlayerStateSet");
static_assert(sizeof(AsyncAction_WaitForLocalPlayerStateSet_WaitForLocalPlayerStateSet) == 0x000010, "Wrong size on AsyncAction_WaitForLocalPlayerStateSet_WaitForLocalPlayerStateSet");
static_assert(offsetof(AsyncAction_WaitForLocalPlayerStateSet_WaitForLocalPlayerStateSet, WorldContextObject) == 0x000000, "Member 'AsyncAction_WaitForLocalPlayerStateSet_WaitForLocalPlayerStateSet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_WaitForLocalPlayerStateSet_WaitForLocalPlayerStateSet, ReturnValue) == 0x000008, "Member 'AsyncAction_WaitForLocalPlayerStateSet_WaitForLocalPlayerStateSet::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_WaitForLocalPlayerStateSet.HandlePlayerStateSet
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_WaitForLocalPlayerStateSet_HandlePlayerStateSet final
{
public:
	class UCommonLocalPlayer*                     CommonLocalPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_WaitForLocalPlayerStateSet_HandlePlayerStateSet) == 0x000008, "Wrong alignment on AsyncAction_WaitForLocalPlayerStateSet_HandlePlayerStateSet");
static_assert(sizeof(AsyncAction_WaitForLocalPlayerStateSet_HandlePlayerStateSet) == 0x000010, "Wrong size on AsyncAction_WaitForLocalPlayerStateSet_HandlePlayerStateSet");
static_assert(offsetof(AsyncAction_WaitForLocalPlayerStateSet_HandlePlayerStateSet, CommonLocalPlayer) == 0x000000, "Member 'AsyncAction_WaitForLocalPlayerStateSet_HandlePlayerStateSet::CommonLocalPlayer' has a wrong offset!");
static_assert(offsetof(AsyncAction_WaitForLocalPlayerStateSet_HandlePlayerStateSet, PlayerState) == 0x000008, "Member 'AsyncAction_WaitForLocalPlayerStateSet_HandlePlayerStateSet::PlayerState' has a wrong offset!");

// Function JP.UpdateGameDataStep_ActiveNeighbors.GetActiveNeighbors
// 0x0018 (0x0018 - 0x0000)
struct UpdateGameDataStep_ActiveNeighbors_GetActiveNeighbors final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNeighborOnlineServicesContainer       ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateGameDataStep_ActiveNeighbors_GetActiveNeighbors) == 0x000008, "Wrong alignment on UpdateGameDataStep_ActiveNeighbors_GetActiveNeighbors");
static_assert(sizeof(UpdateGameDataStep_ActiveNeighbors_GetActiveNeighbors) == 0x000018, "Wrong size on UpdateGameDataStep_ActiveNeighbors_GetActiveNeighbors");
static_assert(offsetof(UpdateGameDataStep_ActiveNeighbors_GetActiveNeighbors, WorldContextObject) == 0x000000, "Member 'UpdateGameDataStep_ActiveNeighbors_GetActiveNeighbors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UpdateGameDataStep_ActiveNeighbors_GetActiveNeighbors, ReturnValue) == 0x000008, "Member 'UpdateGameDataStep_ActiveNeighbors_GetActiveNeighbors::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_StartMainMenuInitialization.StartMainMenuInitialization
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_StartMainMenuInitialization_StartMainMenuInitialization final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_StartMainMenuInitialization* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_StartMainMenuInitialization_StartMainMenuInitialization) == 0x000008, "Wrong alignment on AsyncAction_StartMainMenuInitialization_StartMainMenuInitialization");
static_assert(sizeof(AsyncAction_StartMainMenuInitialization_StartMainMenuInitialization) == 0x000010, "Wrong size on AsyncAction_StartMainMenuInitialization_StartMainMenuInitialization");
static_assert(offsetof(AsyncAction_StartMainMenuInitialization_StartMainMenuInitialization, WorldContextObject) == 0x000000, "Member 'AsyncAction_StartMainMenuInitialization_StartMainMenuInitialization::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_StartMainMenuInitialization_StartMainMenuInitialization, ReturnValue) == 0x000008, "Member 'AsyncAction_StartMainMenuInitialization_StartMainMenuInitialization::ReturnValue' has a wrong offset!");

// Function JP.UpdateGameDataStep_ActiveHouses.GetActiveHouses
// 0x0018 (0x0018 - 0x0000)
struct UpdateGameDataStep_ActiveHouses_GetActiveHouses final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHouseOnlineServicesContainer          ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateGameDataStep_ActiveHouses_GetActiveHouses) == 0x000008, "Wrong alignment on UpdateGameDataStep_ActiveHouses_GetActiveHouses");
static_assert(sizeof(UpdateGameDataStep_ActiveHouses_GetActiveHouses) == 0x000018, "Wrong size on UpdateGameDataStep_ActiveHouses_GetActiveHouses");
static_assert(offsetof(UpdateGameDataStep_ActiveHouses_GetActiveHouses, WorldContextObject) == 0x000000, "Member 'UpdateGameDataStep_ActiveHouses_GetActiveHouses::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UpdateGameDataStep_ActiveHouses_GetActiveHouses, ReturnValue) == 0x000008, "Member 'UpdateGameDataStep_ActiveHouses_GetActiveHouses::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_SetDefaultCharacterSettings.SetDefaultCharacterSettings
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDefaultCharacterSettings              DefaultCharacterSettings;                          // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UAsyncAction_SetDefaultCharacterSettings* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings) == 0x000008, "Wrong alignment on AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings");
static_assert(sizeof(AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings) == 0x000018, "Wrong size on AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings");
static_assert(offsetof(AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings, WorldContextObject) == 0x000000, "Member 'AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings, DefaultCharacterSettings) == 0x000008, "Member 'AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings::DefaultCharacterSettings' has a wrong offset!");
static_assert(offsetof(AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings, ReturnValue) == 0x000010, "Member 'AsyncAction_SetDefaultCharacterSettings_SetDefaultCharacterSettings::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_SetDefaultCharacterSettings.HandleError
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_SetDefaultCharacterSettings_HandleError final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_SetDefaultCharacterSettings_HandleError) == 0x000008, "Wrong alignment on AsyncAction_SetDefaultCharacterSettings_HandleError");
static_assert(sizeof(AsyncAction_SetDefaultCharacterSettings_HandleError) == 0x000018, "Wrong size on AsyncAction_SetDefaultCharacterSettings_HandleError");
static_assert(offsetof(AsyncAction_SetDefaultCharacterSettings_HandleError, ErrorCode) == 0x000000, "Member 'AsyncAction_SetDefaultCharacterSettings_HandleError::ErrorCode' has a wrong offset!");
static_assert(offsetof(AsyncAction_SetDefaultCharacterSettings_HandleError, ErrorMessage) == 0x000008, "Member 'AsyncAction_SetDefaultCharacterSettings_HandleError::ErrorMessage' has a wrong offset!");

// Function JP.SessionSearchStatics.CloneSearchResults
// 0x0020 (0x0020 - 0x0000)
struct SessionSearchStatics_CloneSearchResults final
{
public:
	TArray<class UCommonSession_SearchResult*>    Values;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UCommonSession_SearchResult*>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionSearchStatics_CloneSearchResults) == 0x000008, "Wrong alignment on SessionSearchStatics_CloneSearchResults");
static_assert(sizeof(SessionSearchStatics_CloneSearchResults) == 0x000020, "Wrong size on SessionSearchStatics_CloneSearchResults");
static_assert(offsetof(SessionSearchStatics_CloneSearchResults, Values) == 0x000000, "Member 'SessionSearchStatics_CloneSearchResults::Values' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_CloneSearchResults, ReturnValue) == 0x000010, "Member 'SessionSearchStatics_CloneSearchResults::ReturnValue' has a wrong offset!");

// Function JP.SessionSearchStatics.DebugDumpToString
// 0x0020 (0x0020 - 0x0000)
struct SessionSearchStatics_DebugDumpToString final
{
public:
	const class UCommonSession_SearchResult*      Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeResultValues;                               // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSessionValues;                              // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeBaseSettings;                               // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeMemberSettings;                             // 0x000B(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeCustomSettings;                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionSearchStatics_DebugDumpToString) == 0x000008, "Wrong alignment on SessionSearchStatics_DebugDumpToString");
static_assert(sizeof(SessionSearchStatics_DebugDumpToString) == 0x000020, "Wrong size on SessionSearchStatics_DebugDumpToString");
static_assert(offsetof(SessionSearchStatics_DebugDumpToString, Value) == 0x000000, "Member 'SessionSearchStatics_DebugDumpToString::Value' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_DebugDumpToString, IncludeResultValues) == 0x000008, "Member 'SessionSearchStatics_DebugDumpToString::IncludeResultValues' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_DebugDumpToString, IncludeSessionValues) == 0x000009, "Member 'SessionSearchStatics_DebugDumpToString::IncludeSessionValues' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_DebugDumpToString, IncludeBaseSettings) == 0x00000A, "Member 'SessionSearchStatics_DebugDumpToString::IncludeBaseSettings' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_DebugDumpToString, IncludeMemberSettings) == 0x00000B, "Member 'SessionSearchStatics_DebugDumpToString::IncludeMemberSettings' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_DebugDumpToString, IncludeCustomSettings) == 0x00000C, "Member 'SessionSearchStatics_DebugDumpToString::IncludeCustomSettings' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_DebugDumpToString, ReturnValue) == 0x000010, "Member 'SessionSearchStatics_DebugDumpToString::ReturnValue' has a wrong offset!");

// Function JP.SessionSearchStatics.RemoveEmpty
// 0x0020 (0x0020 - 0x0000)
struct SessionSearchStatics_RemoveEmpty final
{
public:
	TArray<class UCommonSession_SearchResult*>    Values;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UCommonSession_SearchResult*>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionSearchStatics_RemoveEmpty) == 0x000008, "Wrong alignment on SessionSearchStatics_RemoveEmpty");
static_assert(sizeof(SessionSearchStatics_RemoveEmpty) == 0x000020, "Wrong size on SessionSearchStatics_RemoveEmpty");
static_assert(offsetof(SessionSearchStatics_RemoveEmpty, Values) == 0x000000, "Member 'SessionSearchStatics_RemoveEmpty::Values' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_RemoveEmpty, ReturnValue) == 0x000010, "Member 'SessionSearchStatics_RemoveEmpty::ReturnValue' has a wrong offset!");

// Function JP.SessionSearchStatics.RemoveFull
// 0x0020 (0x0020 - 0x0000)
struct SessionSearchStatics_RemoveFull final
{
public:
	TArray<class UCommonSession_SearchResult*>    Values;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UCommonSession_SearchResult*>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionSearchStatics_RemoveFull) == 0x000008, "Wrong alignment on SessionSearchStatics_RemoveFull");
static_assert(sizeof(SessionSearchStatics_RemoveFull) == 0x000020, "Wrong size on SessionSearchStatics_RemoveFull");
static_assert(offsetof(SessionSearchStatics_RemoveFull, Values) == 0x000000, "Member 'SessionSearchStatics_RemoveFull::Values' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_RemoveFull, ReturnValue) == 0x000010, "Member 'SessionSearchStatics_RemoveFull::ReturnValue' has a wrong offset!");

// Function JP.SessionSearchStatics.RemoveVersionMismatch
// 0x0020 (0x0020 - 0x0000)
struct SessionSearchStatics_RemoveVersionMismatch final
{
public:
	TArray<class UCommonSession_SearchResult*>    Values;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UCommonSession_SearchResult*>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionSearchStatics_RemoveVersionMismatch) == 0x000008, "Wrong alignment on SessionSearchStatics_RemoveVersionMismatch");
static_assert(sizeof(SessionSearchStatics_RemoveVersionMismatch) == 0x000020, "Wrong size on SessionSearchStatics_RemoveVersionMismatch");
static_assert(offsetof(SessionSearchStatics_RemoveVersionMismatch, Values) == 0x000000, "Member 'SessionSearchStatics_RemoveVersionMismatch::Values' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_RemoveVersionMismatch, ReturnValue) == 0x000010, "Member 'SessionSearchStatics_RemoveVersionMismatch::ReturnValue' has a wrong offset!");

// Function JP.SessionSearchStatics.SortSearchResults
// 0x0028 (0x0028 - 0x0000)
struct SessionSearchStatics_SortSearchResults final
{
public:
	TArray<class UCommonSession_SearchResult*>    Values;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Ascending;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SortByPing;                                        // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SortByCreatedTimestamp;                            // 0x0012(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SortByLobbyName;                                   // 0x0013(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCommonSession_SearchResult*>    ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionSearchStatics_SortSearchResults) == 0x000008, "Wrong alignment on SessionSearchStatics_SortSearchResults");
static_assert(sizeof(SessionSearchStatics_SortSearchResults) == 0x000028, "Wrong size on SessionSearchStatics_SortSearchResults");
static_assert(offsetof(SessionSearchStatics_SortSearchResults, Values) == 0x000000, "Member 'SessionSearchStatics_SortSearchResults::Values' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_SortSearchResults, Ascending) == 0x000010, "Member 'SessionSearchStatics_SortSearchResults::Ascending' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_SortSearchResults, SortByPing) == 0x000011, "Member 'SessionSearchStatics_SortSearchResults::SortByPing' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_SortSearchResults, SortByCreatedTimestamp) == 0x000012, "Member 'SessionSearchStatics_SortSearchResults::SortByCreatedTimestamp' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_SortSearchResults, SortByLobbyName) == 0x000013, "Member 'SessionSearchStatics_SortSearchResults::SortByLobbyName' has a wrong offset!");
static_assert(offsetof(SessionSearchStatics_SortSearchResults, ReturnValue) == 0x000018, "Member 'SessionSearchStatics_SortSearchResults::ReturnValue' has a wrong offset!");

// Function JP.UpdateGameDataStep_ActivePerks.GetActivePerks
// 0x0068 (0x0068 - 0x0000)
struct UpdateGameDataStep_ActivePerks_GetActivePerks final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerkOnlineServicesContainer           ReturnValue;                                       // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateGameDataStep_ActivePerks_GetActivePerks) == 0x000008, "Wrong alignment on UpdateGameDataStep_ActivePerks_GetActivePerks");
static_assert(sizeof(UpdateGameDataStep_ActivePerks_GetActivePerks) == 0x000068, "Wrong size on UpdateGameDataStep_ActivePerks_GetActivePerks");
static_assert(offsetof(UpdateGameDataStep_ActivePerks_GetActivePerks, WorldContextObject) == 0x000000, "Member 'UpdateGameDataStep_ActivePerks_GetActivePerks::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UpdateGameDataStep_ActivePerks_GetActivePerks, ReturnValue) == 0x000008, "Member 'UpdateGameDataStep_ActivePerks_GetActivePerks::ReturnValue' has a wrong offset!");

// Function JP.GameModeJP_Lobby.HandlePlayerBlockedListInitialized
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_Lobby_HandlePlayerBlockedListInitialized final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Lobby_HandlePlayerBlockedListInitialized) == 0x000008, "Wrong alignment on GameModeJP_Lobby_HandlePlayerBlockedListInitialized");
static_assert(sizeof(GameModeJP_Lobby_HandlePlayerBlockedListInitialized) == 0x000008, "Wrong size on GameModeJP_Lobby_HandlePlayerBlockedListInitialized");
static_assert(offsetof(GameModeJP_Lobby_HandlePlayerBlockedListInitialized, PlayerState) == 0x000000, "Member 'GameModeJP_Lobby_HandlePlayerBlockedListInitialized::PlayerState' has a wrong offset!");

// Function JP.GameModeJP_Lobby.HandlePlayerControllerPartyIdChanged
// 0x0028 (0x0028 - 0x0000)
struct GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged final
{
public:
	class APlayerControllerJP*                    PlayerControllerJP;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OldPartyId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPartyId;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged) == 0x000008, "Wrong alignment on GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged");
static_assert(sizeof(GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged) == 0x000028, "Wrong size on GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged");
static_assert(offsetof(GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged, PlayerControllerJP) == 0x000000, "Member 'GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged::PlayerControllerJP' has a wrong offset!");
static_assert(offsetof(GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged, OldPartyId) == 0x000008, "Member 'GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged::OldPartyId' has a wrong offset!");
static_assert(offsetof(GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged, NewPartyId) == 0x000018, "Member 'GameModeJP_Lobby_HandlePlayerControllerPartyIdChanged::NewPartyId' has a wrong offset!");

// Function JP.GameModeJP_Lobby.HandlePlayerHouseVoteChanged
// 0x0018 (0x0018 - 0x0000)
struct GameModeJP_Lobby_HandlePlayerHouseVoteChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OldHouseIdentifier;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewHouseIdentifier;                                // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Lobby_HandlePlayerHouseVoteChanged) == 0x000008, "Wrong alignment on GameModeJP_Lobby_HandlePlayerHouseVoteChanged");
static_assert(sizeof(GameModeJP_Lobby_HandlePlayerHouseVoteChanged) == 0x000018, "Wrong size on GameModeJP_Lobby_HandlePlayerHouseVoteChanged");
static_assert(offsetof(GameModeJP_Lobby_HandlePlayerHouseVoteChanged, PlayerState) == 0x000000, "Member 'GameModeJP_Lobby_HandlePlayerHouseVoteChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(GameModeJP_Lobby_HandlePlayerHouseVoteChanged, OldHouseIdentifier) == 0x000008, "Member 'GameModeJP_Lobby_HandlePlayerHouseVoteChanged::OldHouseIdentifier' has a wrong offset!");
static_assert(offsetof(GameModeJP_Lobby_HandlePlayerHouseVoteChanged, NewHouseIdentifier) == 0x000010, "Member 'GameModeJP_Lobby_HandlePlayerHouseVoteChanged::NewHouseIdentifier' has a wrong offset!");

// Function JP.GameModeJP_Lobby.HandlePlayerTeamIdChanged
// 0x0010 (0x0010 - 0x0000)
struct GameModeJP_Lobby_HandlePlayerTeamIdChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameModeJP_Lobby_HandlePlayerTeamIdChanged) == 0x000008, "Wrong alignment on GameModeJP_Lobby_HandlePlayerTeamIdChanged");
static_assert(sizeof(GameModeJP_Lobby_HandlePlayerTeamIdChanged) == 0x000010, "Wrong size on GameModeJP_Lobby_HandlePlayerTeamIdChanged");
static_assert(offsetof(GameModeJP_Lobby_HandlePlayerTeamIdChanged, PlayerState) == 0x000000, "Member 'GameModeJP_Lobby_HandlePlayerTeamIdChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(GameModeJP_Lobby_HandlePlayerTeamIdChanged, TeamId) == 0x000008, "Member 'GameModeJP_Lobby_HandlePlayerTeamIdChanged::TeamId' has a wrong offset!");

// Function JP.GameModeJP_Lobby.HandleStartLobbyTravelCountdownBegun
// 0x0004 (0x0004 - 0x0000)
struct GameModeJP_Lobby_HandleStartLobbyTravelCountdownBegun final
{
public:
	float                                         InDesiredTravelTimestamp;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Lobby_HandleStartLobbyTravelCountdownBegun) == 0x000004, "Wrong alignment on GameModeJP_Lobby_HandleStartLobbyTravelCountdownBegun");
static_assert(sizeof(GameModeJP_Lobby_HandleStartLobbyTravelCountdownBegun) == 0x000004, "Wrong size on GameModeJP_Lobby_HandleStartLobbyTravelCountdownBegun");
static_assert(offsetof(GameModeJP_Lobby_HandleStartLobbyTravelCountdownBegun, InDesiredTravelTimestamp) == 0x000000, "Member 'GameModeJP_Lobby_HandleStartLobbyTravelCountdownBegun::InDesiredTravelTimestamp' has a wrong offset!");

// Function JP.GameModeJP_Lobby.IsLobbyFull
// 0x0001 (0x0001 - 0x0000)
struct GameModeJP_Lobby_IsLobbyFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Lobby_IsLobbyFull) == 0x000001, "Wrong alignment on GameModeJP_Lobby_IsLobbyFull");
static_assert(sizeof(GameModeJP_Lobby_IsLobbyFull) == 0x000001, "Wrong size on GameModeJP_Lobby_IsLobbyFull");
static_assert(offsetof(GameModeJP_Lobby_IsLobbyFull, ReturnValue) == 0x000000, "Member 'GameModeJP_Lobby_IsLobbyFull::ReturnValue' has a wrong offset!");

// Function JP.UpdateGameDataStep_ActiveRewards.GetActiveRewards
// 0x0058 (0x0058 - 0x0000)
struct UpdateGameDataStep_ActiveRewards_GetActiveRewards final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRewardOnlineServicesContainer         ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateGameDataStep_ActiveRewards_GetActiveRewards) == 0x000008, "Wrong alignment on UpdateGameDataStep_ActiveRewards_GetActiveRewards");
static_assert(sizeof(UpdateGameDataStep_ActiveRewards_GetActiveRewards) == 0x000058, "Wrong size on UpdateGameDataStep_ActiveRewards_GetActiveRewards");
static_assert(offsetof(UpdateGameDataStep_ActiveRewards_GetActiveRewards, WorldContextObject) == 0x000000, "Member 'UpdateGameDataStep_ActiveRewards_GetActiveRewards::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UpdateGameDataStep_ActiveRewards_GetActiveRewards, ReturnValue) == 0x000008, "Member 'UpdateGameDataStep_ActiveRewards_GetActiveRewards::ReturnValue' has a wrong offset!");

// Function JP.UpdateGameDataStep_FirstTimeLoginRewards.GetFirstTimeLoginRewards
// 0x0058 (0x0058 - 0x0000)
struct UpdateGameDataStep_FirstTimeLoginRewards_GetFirstTimeLoginRewards final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFirstTimeLoginRewardsData             ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateGameDataStep_FirstTimeLoginRewards_GetFirstTimeLoginRewards) == 0x000008, "Wrong alignment on UpdateGameDataStep_FirstTimeLoginRewards_GetFirstTimeLoginRewards");
static_assert(sizeof(UpdateGameDataStep_FirstTimeLoginRewards_GetFirstTimeLoginRewards) == 0x000058, "Wrong size on UpdateGameDataStep_FirstTimeLoginRewards_GetFirstTimeLoginRewards");
static_assert(offsetof(UpdateGameDataStep_FirstTimeLoginRewards_GetFirstTimeLoginRewards, WorldContextObject) == 0x000000, "Member 'UpdateGameDataStep_FirstTimeLoginRewards_GetFirstTimeLoginRewards::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UpdateGameDataStep_FirstTimeLoginRewards_GetFirstTimeLoginRewards, ReturnValue) == 0x000008, "Member 'UpdateGameDataStep_FirstTimeLoginRewards_GetFirstTimeLoginRewards::ReturnValue' has a wrong offset!");

// Function JP.UpdateGameDataStep_QuickPlay.GetQuickPlayConfiguration
// 0x0038 (0x0038 - 0x0000)
struct UpdateGameDataStep_QuickPlay_GetQuickPlayConfiguration final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuickPlaySettings                     ReturnValue;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateGameDataStep_QuickPlay_GetQuickPlayConfiguration) == 0x000008, "Wrong alignment on UpdateGameDataStep_QuickPlay_GetQuickPlayConfiguration");
static_assert(sizeof(UpdateGameDataStep_QuickPlay_GetQuickPlayConfiguration) == 0x000038, "Wrong size on UpdateGameDataStep_QuickPlay_GetQuickPlayConfiguration");
static_assert(offsetof(UpdateGameDataStep_QuickPlay_GetQuickPlayConfiguration, WorldContextObject) == 0x000000, "Member 'UpdateGameDataStep_QuickPlay_GetQuickPlayConfiguration::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UpdateGameDataStep_QuickPlay_GetQuickPlayConfiguration, ReturnValue) == 0x000008, "Member 'UpdateGameDataStep_QuickPlay_GetQuickPlayConfiguration::ReturnValue' has a wrong offset!");

// Function JP.AbilitySystemComponentJP.CopyComponent
// 0x0008 (0x0008 - 0x0000)
struct AbilitySystemComponentJP_CopyComponent final
{
public:
	class UAbilitySystemComponent*                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentJP_CopyComponent) == 0x000008, "Wrong alignment on AbilitySystemComponentJP_CopyComponent");
static_assert(sizeof(AbilitySystemComponentJP_CopyComponent) == 0x000008, "Wrong size on AbilitySystemComponentJP_CopyComponent");
static_assert(offsetof(AbilitySystemComponentJP_CopyComponent, Target) == 0x000000, "Member 'AbilitySystemComponentJP_CopyComponent::Target' has a wrong offset!");

// Function JP.AbilitySystemComponentJP.HasAnyAbilityByClass
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponentJP_HasAnyAbilityByClass final
{
public:
	TSubclassOf<class UGameplayAbility>           AbilityClass;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponentJP_HasAnyAbilityByClass) == 0x000008, "Wrong alignment on AbilitySystemComponentJP_HasAnyAbilityByClass");
static_assert(sizeof(AbilitySystemComponentJP_HasAnyAbilityByClass) == 0x000010, "Wrong size on AbilitySystemComponentJP_HasAnyAbilityByClass");
static_assert(offsetof(AbilitySystemComponentJP_HasAnyAbilityByClass, AbilityClass) == 0x000000, "Member 'AbilitySystemComponentJP_HasAnyAbilityByClass::AbilityClass' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentJP_HasAnyAbilityByClass, ReturnValue) == 0x000008, "Member 'AbilitySystemComponentJP_HasAnyAbilityByClass::ReturnValue' has a wrong offset!");

// Function JP.AbilitySystemComponentJP.HasAnyAbilityWithTag
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponentJP_HasAnyAbilityWithTag final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponentJP_HasAnyAbilityWithTag) == 0x000008, "Wrong alignment on AbilitySystemComponentJP_HasAnyAbilityWithTag");
static_assert(sizeof(AbilitySystemComponentJP_HasAnyAbilityWithTag) == 0x000028, "Wrong size on AbilitySystemComponentJP_HasAnyAbilityWithTag");
static_assert(offsetof(AbilitySystemComponentJP_HasAnyAbilityWithTag, Tags) == 0x000000, "Member 'AbilitySystemComponentJP_HasAnyAbilityWithTag::Tags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentJP_HasAnyAbilityWithTag, bExactMatch) == 0x000020, "Member 'AbilitySystemComponentJP_HasAnyAbilityWithTag::bExactMatch' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentJP_HasAnyAbilityWithTag, ReturnValue) == 0x000021, "Member 'AbilitySystemComponentJP_HasAnyAbilityWithTag::ReturnValue' has a wrong offset!");

// Function JP.AbilityTask_CreateChargeTimerWidget.CreateChargeTimerWidget
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestAlreadyReleased;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_CreateChargeTimerWidget*   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget) == 0x000008, "Wrong alignment on AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget");
static_assert(sizeof(AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget) == 0x000020, "Wrong size on AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget, OwningAbility) == 0x000000, "Member 'AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget, Class_0) == 0x000008, "Member 'AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget::Class_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget, Time) == 0x000010, "Member 'AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget::Time' has a wrong offset!");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget, bTestAlreadyReleased) == 0x000014, "Member 'AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget::bTestAlreadyReleased' has a wrong offset!");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget, ReturnValue) == 0x000018, "Member 'AbilityTask_CreateChargeTimerWidget_CreateChargeTimerWidget::ReturnValue' has a wrong offset!");

// Function JP.AbilityTask_CreateChargeTimerWidget.BeginSpawningActor
// 0x0048 (0x0048 - 0x0000)
struct AbilityTask_CreateChargeTimerWidget_BeginSpawningActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                Class_0;                                           // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedActor;                                      // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityTask_CreateChargeTimerWidget_BeginSpawningActor) == 0x000008, "Wrong alignment on AbilityTask_CreateChargeTimerWidget_BeginSpawningActor");
static_assert(sizeof(AbilityTask_CreateChargeTimerWidget_BeginSpawningActor) == 0x000048, "Wrong size on AbilityTask_CreateChargeTimerWidget_BeginSpawningActor");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_BeginSpawningActor, OwningAbility) == 0x000000, "Member 'AbilityTask_CreateChargeTimerWidget_BeginSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_BeginSpawningActor, TargetData) == 0x000008, "Member 'AbilityTask_CreateChargeTimerWidget_BeginSpawningActor::TargetData' has a wrong offset!");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_BeginSpawningActor, Class_0) == 0x000030, "Member 'AbilityTask_CreateChargeTimerWidget_BeginSpawningActor::Class_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_BeginSpawningActor, SpawnedActor) == 0x000038, "Member 'AbilityTask_CreateChargeTimerWidget_BeginSpawningActor::SpawnedActor' has a wrong offset!");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_BeginSpawningActor, ReturnValue) == 0x000040, "Member 'AbilityTask_CreateChargeTimerWidget_BeginSpawningActor::ReturnValue' has a wrong offset!");

// Function JP.AbilityTask_CreateChargeTimerWidget.FinishSpawningActor
// 0x0038 (0x0038 - 0x0000)
struct AbilityTask_CreateChargeTimerWidget_FinishSpawningActor final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedActor;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_CreateChargeTimerWidget_FinishSpawningActor) == 0x000008, "Wrong alignment on AbilityTask_CreateChargeTimerWidget_FinishSpawningActor");
static_assert(sizeof(AbilityTask_CreateChargeTimerWidget_FinishSpawningActor) == 0x000038, "Wrong size on AbilityTask_CreateChargeTimerWidget_FinishSpawningActor");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_FinishSpawningActor, OwningAbility) == 0x000000, "Member 'AbilityTask_CreateChargeTimerWidget_FinishSpawningActor::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_FinishSpawningActor, TargetData) == 0x000008, "Member 'AbilityTask_CreateChargeTimerWidget_FinishSpawningActor::TargetData' has a wrong offset!");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_FinishSpawningActor, SpawnedActor) == 0x000030, "Member 'AbilityTask_CreateChargeTimerWidget_FinishSpawningActor::SpawnedActor' has a wrong offset!");

// Function JP.AbilityTask_CreateChargeTimerWidget.OnReleaseCallback
// 0x0004 (0x0004 - 0x0000)
struct AbilityTask_CreateChargeTimerWidget_OnReleaseCallback final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_CreateChargeTimerWidget_OnReleaseCallback) == 0x000004, "Wrong alignment on AbilityTask_CreateChargeTimerWidget_OnReleaseCallback");
static_assert(sizeof(AbilityTask_CreateChargeTimerWidget_OnReleaseCallback) == 0x000004, "Wrong size on AbilityTask_CreateChargeTimerWidget_OnReleaseCallback");
static_assert(offsetof(AbilityTask_CreateChargeTimerWidget_OnReleaseCallback, ElapsedTime) == 0x000000, "Member 'AbilityTask_CreateChargeTimerWidget_OnReleaseCallback::ElapsedTime' has a wrong offset!");

// Function JP.TargetingFilterTask_BlueprintLogic.ShouldFilterTargetBP
// 0x0018 (0x0018 - 0x0000)
struct TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP final
{
public:
	const class AActor*                           HitActor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Source;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP) == 0x000008, "Wrong alignment on TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP");
static_assert(sizeof(TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP) == 0x000018, "Wrong size on TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP");
static_assert(offsetof(TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP, HitActor) == 0x000000, "Member 'TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP::HitActor' has a wrong offset!");
static_assert(offsetof(TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP, Source) == 0x000008, "Member 'TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP::Source' has a wrong offset!");
static_assert(offsetof(TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP, ReturnValue) == 0x000010, "Member 'TargetingFilterTask_BlueprintLogic_ShouldFilterTargetBP::ReturnValue' has a wrong offset!");

// Function JP.SessionResultViewModel.CreateViewModel
// 0x0010 (0x0010 - 0x0000)
struct SessionResultViewModel_CreateViewModel final
{
public:
	class UCommonSession_SearchResult*            Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USessionResultViewModel*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionResultViewModel_CreateViewModel) == 0x000008, "Wrong alignment on SessionResultViewModel_CreateViewModel");
static_assert(sizeof(SessionResultViewModel_CreateViewModel) == 0x000010, "Wrong size on SessionResultViewModel_CreateViewModel");
static_assert(offsetof(SessionResultViewModel_CreateViewModel, Target) == 0x000000, "Member 'SessionResultViewModel_CreateViewModel::Target' has a wrong offset!");
static_assert(offsetof(SessionResultViewModel_CreateViewModel, ReturnValue) == 0x000008, "Member 'SessionResultViewModel_CreateViewModel::ReturnValue' has a wrong offset!");

// Function JP.SessionResultViewModel.GetAvailablePlayerSlots
// 0x0004 (0x0004 - 0x0000)
struct SessionResultViewModel_GetAvailablePlayerSlots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionResultViewModel_GetAvailablePlayerSlots) == 0x000004, "Wrong alignment on SessionResultViewModel_GetAvailablePlayerSlots");
static_assert(sizeof(SessionResultViewModel_GetAvailablePlayerSlots) == 0x000004, "Wrong size on SessionResultViewModel_GetAvailablePlayerSlots");
static_assert(offsetof(SessionResultViewModel_GetAvailablePlayerSlots, ReturnValue) == 0x000000, "Member 'SessionResultViewModel_GetAvailablePlayerSlots::ReturnValue' has a wrong offset!");

// Function JP.SessionResultViewModel.GetIsReachable
// 0x0001 (0x0001 - 0x0000)
struct SessionResultViewModel_GetIsReachable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionResultViewModel_GetIsReachable) == 0x000001, "Wrong alignment on SessionResultViewModel_GetIsReachable");
static_assert(sizeof(SessionResultViewModel_GetIsReachable) == 0x000001, "Wrong size on SessionResultViewModel_GetIsReachable");
static_assert(offsetof(SessionResultViewModel_GetIsReachable, ReturnValue) == 0x000000, "Member 'SessionResultViewModel_GetIsReachable::ReturnValue' has a wrong offset!");

// Function JP.SessionResultViewModel.GetMaxPlayerSlots
// 0x0004 (0x0004 - 0x0000)
struct SessionResultViewModel_GetMaxPlayerSlots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionResultViewModel_GetMaxPlayerSlots) == 0x000004, "Wrong alignment on SessionResultViewModel_GetMaxPlayerSlots");
static_assert(sizeof(SessionResultViewModel_GetMaxPlayerSlots) == 0x000004, "Wrong size on SessionResultViewModel_GetMaxPlayerSlots");
static_assert(offsetof(SessionResultViewModel_GetMaxPlayerSlots, ReturnValue) == 0x000000, "Member 'SessionResultViewModel_GetMaxPlayerSlots::ReturnValue' has a wrong offset!");

// Function JP.SessionResultViewModel.GetPingInMs
// 0x0004 (0x0004 - 0x0000)
struct SessionResultViewModel_GetPingInMs final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionResultViewModel_GetPingInMs) == 0x000004, "Wrong alignment on SessionResultViewModel_GetPingInMs");
static_assert(sizeof(SessionResultViewModel_GetPingInMs) == 0x000004, "Wrong size on SessionResultViewModel_GetPingInMs");
static_assert(offsetof(SessionResultViewModel_GetPingInMs, ReturnValue) == 0x000000, "Member 'SessionResultViewModel_GetPingInMs::ReturnValue' has a wrong offset!");

// Function JP.SessionResultViewModel.GetSessionName
// 0x0010 (0x0010 - 0x0000)
struct SessionResultViewModel_GetSessionName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionResultViewModel_GetSessionName) == 0x000008, "Wrong alignment on SessionResultViewModel_GetSessionName");
static_assert(sizeof(SessionResultViewModel_GetSessionName) == 0x000010, "Wrong size on SessionResultViewModel_GetSessionName");
static_assert(offsetof(SessionResultViewModel_GetSessionName, ReturnValue) == 0x000000, "Member 'SessionResultViewModel_GetSessionName::ReturnValue' has a wrong offset!");

// Function JP.SessionResultViewModel.GetSessionOwner
// 0x0010 (0x0010 - 0x0000)
struct SessionResultViewModel_GetSessionOwner final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionResultViewModel_GetSessionOwner) == 0x000008, "Wrong alignment on SessionResultViewModel_GetSessionOwner");
static_assert(sizeof(SessionResultViewModel_GetSessionOwner) == 0x000010, "Wrong size on SessionResultViewModel_GetSessionOwner");
static_assert(offsetof(SessionResultViewModel_GetSessionOwner, ReturnValue) == 0x000000, "Member 'SessionResultViewModel_GetSessionOwner::ReturnValue' has a wrong offset!");

// Function JP.SessionResultViewModel.GetTakenPlayerSlots
// 0x0004 (0x0004 - 0x0000)
struct SessionResultViewModel_GetTakenPlayerSlots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionResultViewModel_GetTakenPlayerSlots) == 0x000004, "Wrong alignment on SessionResultViewModel_GetTakenPlayerSlots");
static_assert(sizeof(SessionResultViewModel_GetTakenPlayerSlots) == 0x000004, "Wrong size on SessionResultViewModel_GetTakenPlayerSlots");
static_assert(offsetof(SessionResultViewModel_GetTakenPlayerSlots, ReturnValue) == 0x000000, "Member 'SessionResultViewModel_GetTakenPlayerSlots::ReturnValue' has a wrong offset!");

// Function JP.AmmoAttributeSetListener.OnFireworkBoxAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct AmmoAttributeSetListener_OnFireworkBoxAmmoChanged final
{
public:
	float                                         Ammo;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSetListener_OnFireworkBoxAmmoChanged) == 0x000004, "Wrong alignment on AmmoAttributeSetListener_OnFireworkBoxAmmoChanged");
static_assert(sizeof(AmmoAttributeSetListener_OnFireworkBoxAmmoChanged) == 0x000004, "Wrong size on AmmoAttributeSetListener_OnFireworkBoxAmmoChanged");
static_assert(offsetof(AmmoAttributeSetListener_OnFireworkBoxAmmoChanged, Ammo) == 0x000000, "Member 'AmmoAttributeSetListener_OnFireworkBoxAmmoChanged::Ammo' has a wrong offset!");

// Function JP.AmmoAttributeSetListener.OnFireworkBoxMaxAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct AmmoAttributeSetListener_OnFireworkBoxMaxAmmoChanged final
{
public:
	float                                         MaxAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSetListener_OnFireworkBoxMaxAmmoChanged) == 0x000004, "Wrong alignment on AmmoAttributeSetListener_OnFireworkBoxMaxAmmoChanged");
static_assert(sizeof(AmmoAttributeSetListener_OnFireworkBoxMaxAmmoChanged) == 0x000004, "Wrong size on AmmoAttributeSetListener_OnFireworkBoxMaxAmmoChanged");
static_assert(offsetof(AmmoAttributeSetListener_OnFireworkBoxMaxAmmoChanged, MaxAmmo) == 0x000000, "Member 'AmmoAttributeSetListener_OnFireworkBoxMaxAmmoChanged::MaxAmmo' has a wrong offset!");

// Function JP.AmmoAttributeSetListener.OnOrangeCannonAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct AmmoAttributeSetListener_OnOrangeCannonAmmoChanged final
{
public:
	float                                         Ammo;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSetListener_OnOrangeCannonAmmoChanged) == 0x000004, "Wrong alignment on AmmoAttributeSetListener_OnOrangeCannonAmmoChanged");
static_assert(sizeof(AmmoAttributeSetListener_OnOrangeCannonAmmoChanged) == 0x000004, "Wrong size on AmmoAttributeSetListener_OnOrangeCannonAmmoChanged");
static_assert(offsetof(AmmoAttributeSetListener_OnOrangeCannonAmmoChanged, Ammo) == 0x000000, "Member 'AmmoAttributeSetListener_OnOrangeCannonAmmoChanged::Ammo' has a wrong offset!");

// Function JP.AmmoAttributeSetListener.OnOrangeCannonMaxAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct AmmoAttributeSetListener_OnOrangeCannonMaxAmmoChanged final
{
public:
	float                                         MaxAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSetListener_OnOrangeCannonMaxAmmoChanged) == 0x000004, "Wrong alignment on AmmoAttributeSetListener_OnOrangeCannonMaxAmmoChanged");
static_assert(sizeof(AmmoAttributeSetListener_OnOrangeCannonMaxAmmoChanged) == 0x000004, "Wrong size on AmmoAttributeSetListener_OnOrangeCannonMaxAmmoChanged");
static_assert(offsetof(AmmoAttributeSetListener_OnOrangeCannonMaxAmmoChanged, MaxAmmo) == 0x000000, "Member 'AmmoAttributeSetListener_OnOrangeCannonMaxAmmoChanged::MaxAmmo' has a wrong offset!");

// Function JP.AmmoAttributeSetListener.OnSlingshotAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct AmmoAttributeSetListener_OnSlingshotAmmoChanged final
{
public:
	float                                         Ammo;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSetListener_OnSlingshotAmmoChanged) == 0x000004, "Wrong alignment on AmmoAttributeSetListener_OnSlingshotAmmoChanged");
static_assert(sizeof(AmmoAttributeSetListener_OnSlingshotAmmoChanged) == 0x000004, "Wrong size on AmmoAttributeSetListener_OnSlingshotAmmoChanged");
static_assert(offsetof(AmmoAttributeSetListener_OnSlingshotAmmoChanged, Ammo) == 0x000000, "Member 'AmmoAttributeSetListener_OnSlingshotAmmoChanged::Ammo' has a wrong offset!");

// Function JP.AmmoAttributeSetListener.OnSlingshotMaxAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct AmmoAttributeSetListener_OnSlingshotMaxAmmoChanged final
{
public:
	float                                         MaxAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSetListener_OnSlingshotMaxAmmoChanged) == 0x000004, "Wrong alignment on AmmoAttributeSetListener_OnSlingshotMaxAmmoChanged");
static_assert(sizeof(AmmoAttributeSetListener_OnSlingshotMaxAmmoChanged) == 0x000004, "Wrong size on AmmoAttributeSetListener_OnSlingshotMaxAmmoChanged");
static_assert(offsetof(AmmoAttributeSetListener_OnSlingshotMaxAmmoChanged, MaxAmmo) == 0x000000, "Member 'AmmoAttributeSetListener_OnSlingshotMaxAmmoChanged::MaxAmmo' has a wrong offset!");

// Function JP.AmmoAttributeSetListener.OnWrenchAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct AmmoAttributeSetListener_OnWrenchAmmoChanged final
{
public:
	float                                         Ammo;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSetListener_OnWrenchAmmoChanged) == 0x000004, "Wrong alignment on AmmoAttributeSetListener_OnWrenchAmmoChanged");
static_assert(sizeof(AmmoAttributeSetListener_OnWrenchAmmoChanged) == 0x000004, "Wrong size on AmmoAttributeSetListener_OnWrenchAmmoChanged");
static_assert(offsetof(AmmoAttributeSetListener_OnWrenchAmmoChanged, Ammo) == 0x000000, "Member 'AmmoAttributeSetListener_OnWrenchAmmoChanged::Ammo' has a wrong offset!");

// Function JP.AmmoAttributeSetListener.OnWrenchMaxAmmoChanged
// 0x0004 (0x0004 - 0x0000)
struct AmmoAttributeSetListener_OnWrenchMaxAmmoChanged final
{
public:
	float                                         MaxAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoAttributeSetListener_OnWrenchMaxAmmoChanged) == 0x000004, "Wrong alignment on AmmoAttributeSetListener_OnWrenchMaxAmmoChanged");
static_assert(sizeof(AmmoAttributeSetListener_OnWrenchMaxAmmoChanged) == 0x000004, "Wrong size on AmmoAttributeSetListener_OnWrenchMaxAmmoChanged");
static_assert(offsetof(AmmoAttributeSetListener_OnWrenchMaxAmmoChanged, MaxAmmo) == 0x000000, "Member 'AmmoAttributeSetListener_OnWrenchMaxAmmoChanged::MaxAmmo' has a wrong offset!");

// Function JP.AsyncAction_GetDefaultCharacterSettings.GetDefaultCharacterSettings
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_GetDefaultCharacterSettings_GetDefaultCharacterSettings final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_GetDefaultCharacterSettings* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_GetDefaultCharacterSettings_GetDefaultCharacterSettings) == 0x000008, "Wrong alignment on AsyncAction_GetDefaultCharacterSettings_GetDefaultCharacterSettings");
static_assert(sizeof(AsyncAction_GetDefaultCharacterSettings_GetDefaultCharacterSettings) == 0x000010, "Wrong size on AsyncAction_GetDefaultCharacterSettings_GetDefaultCharacterSettings");
static_assert(offsetof(AsyncAction_GetDefaultCharacterSettings_GetDefaultCharacterSettings, WorldContextObject) == 0x000000, "Member 'AsyncAction_GetDefaultCharacterSettings_GetDefaultCharacterSettings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_GetDefaultCharacterSettings_GetDefaultCharacterSettings, ReturnValue) == 0x000008, "Member 'AsyncAction_GetDefaultCharacterSettings_GetDefaultCharacterSettings::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_GetDefaultCharacterSettings.HandleError
// 0x0018 (0x0018 - 0x0000)
struct AsyncAction_GetDefaultCharacterSettings_HandleError final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_GetDefaultCharacterSettings_HandleError) == 0x000008, "Wrong alignment on AsyncAction_GetDefaultCharacterSettings_HandleError");
static_assert(sizeof(AsyncAction_GetDefaultCharacterSettings_HandleError) == 0x000018, "Wrong size on AsyncAction_GetDefaultCharacterSettings_HandleError");
static_assert(offsetof(AsyncAction_GetDefaultCharacterSettings_HandleError, ErrorCode) == 0x000000, "Member 'AsyncAction_GetDefaultCharacterSettings_HandleError::ErrorCode' has a wrong offset!");
static_assert(offsetof(AsyncAction_GetDefaultCharacterSettings_HandleError, ErrorMessage) == 0x000008, "Member 'AsyncAction_GetDefaultCharacterSettings_HandleError::ErrorMessage' has a wrong offset!");

// Function JP.ShopWidgetMain.SetupControllerNavigation
// 0x0010 (0x0010 - 0x0000)
struct ShopWidgetMain_SetupControllerNavigation final
{
public:
	TArray<class UWrapBox*>                       WrapBoxes;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopWidgetMain_SetupControllerNavigation) == 0x000008, "Wrong alignment on ShopWidgetMain_SetupControllerNavigation");
static_assert(sizeof(ShopWidgetMain_SetupControllerNavigation) == 0x000010, "Wrong size on ShopWidgetMain_SetupControllerNavigation");
static_assert(offsetof(ShopWidgetMain_SetupControllerNavigation, WrapBoxes) == 0x000000, "Member 'ShopWidgetMain_SetupControllerNavigation::WrapBoxes' has a wrong offset!");

// Function JP.ShopWidgetMain.ShopItemUpdated
// 0x0088 (0x0088 - 0x0000)
struct ShopWidgetMain_ShopItemUpdated final
{
public:
	struct FShopItemViewModel                     ShopItemViewModel;                                 // 0x0000(0x0080)(ConstParm, Parm, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopWidgetMain_ShopItemUpdated) == 0x000008, "Wrong alignment on ShopWidgetMain_ShopItemUpdated");
static_assert(sizeof(ShopWidgetMain_ShopItemUpdated) == 0x000088, "Wrong size on ShopWidgetMain_ShopItemUpdated");
static_assert(offsetof(ShopWidgetMain_ShopItemUpdated, ShopItemViewModel) == 0x000000, "Member 'ShopWidgetMain_ShopItemUpdated::ShopItemViewModel' has a wrong offset!");
static_assert(offsetof(ShopWidgetMain_ShopItemUpdated, TeamId) == 0x000080, "Member 'ShopWidgetMain_ShopItemUpdated::TeamId' has a wrong offset!");

// Function JP.ShopWidgetMain.UpdateLastOpenedShopCategory
// 0x0001 (0x0001 - 0x0000)
struct ShopWidgetMain_UpdateLastOpenedShopCategory final
{
public:
	EShopItemCategory                             LastOpenShopCategory;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopWidgetMain_UpdateLastOpenedShopCategory) == 0x000001, "Wrong alignment on ShopWidgetMain_UpdateLastOpenedShopCategory");
static_assert(sizeof(ShopWidgetMain_UpdateLastOpenedShopCategory) == 0x000001, "Wrong size on ShopWidgetMain_UpdateLastOpenedShopCategory");
static_assert(offsetof(ShopWidgetMain_UpdateLastOpenedShopCategory, LastOpenShopCategory) == 0x000000, "Member 'ShopWidgetMain_UpdateLastOpenedShopCategory::LastOpenShopCategory' has a wrong offset!");

// Function JP.AsyncAction_ListenForOnJoinSessionComplete.ListenForOnJoinSessionComplete
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_ListenForOnJoinSessionComplete_ListenForOnJoinSessionComplete final
{
public:
	class UObject*                                WorldContextObject_0;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_ListenForOnJoinSessionComplete* ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_ListenForOnJoinSessionComplete_ListenForOnJoinSessionComplete) == 0x000008, "Wrong alignment on AsyncAction_ListenForOnJoinSessionComplete_ListenForOnJoinSessionComplete");
static_assert(sizeof(AsyncAction_ListenForOnJoinSessionComplete_ListenForOnJoinSessionComplete) == 0x000010, "Wrong size on AsyncAction_ListenForOnJoinSessionComplete_ListenForOnJoinSessionComplete");
static_assert(offsetof(AsyncAction_ListenForOnJoinSessionComplete_ListenForOnJoinSessionComplete, WorldContextObject_0) == 0x000000, "Member 'AsyncAction_ListenForOnJoinSessionComplete_ListenForOnJoinSessionComplete::WorldContextObject_0' has a wrong offset!");
static_assert(offsetof(AsyncAction_ListenForOnJoinSessionComplete_ListenForOnJoinSessionComplete, ReturnValue) == 0x000008, "Member 'AsyncAction_ListenForOnJoinSessionComplete_ListenForOnJoinSessionComplete::ReturnValue' has a wrong offset!");

// Function JP.ServiceMessage.GetBackgroundUrl
// 0x0010 (0x0010 - 0x0000)
struct ServiceMessage_GetBackgroundUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServiceMessage_GetBackgroundUrl) == 0x000008, "Wrong alignment on ServiceMessage_GetBackgroundUrl");
static_assert(sizeof(ServiceMessage_GetBackgroundUrl) == 0x000010, "Wrong size on ServiceMessage_GetBackgroundUrl");
static_assert(offsetof(ServiceMessage_GetBackgroundUrl, ReturnValue) == 0x000000, "Member 'ServiceMessage_GetBackgroundUrl::ReturnValue' has a wrong offset!");

// Function JP.ServiceMessage.GetId
// 0x0004 (0x0004 - 0x0000)
struct ServiceMessage_GetId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServiceMessage_GetId) == 0x000004, "Wrong alignment on ServiceMessage_GetId");
static_assert(sizeof(ServiceMessage_GetId) == 0x000004, "Wrong size on ServiceMessage_GetId");
static_assert(offsetof(ServiceMessage_GetId, ReturnValue) == 0x000000, "Member 'ServiceMessage_GetId::ReturnValue' has a wrong offset!");

// Function JP.ServiceMessage.GetMessage
// 0x0010 (0x0010 - 0x0000)
struct ServiceMessage_GetMessage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServiceMessage_GetMessage) == 0x000008, "Wrong alignment on ServiceMessage_GetMessage");
static_assert(sizeof(ServiceMessage_GetMessage) == 0x000010, "Wrong size on ServiceMessage_GetMessage");
static_assert(offsetof(ServiceMessage_GetMessage, ReturnValue) == 0x000000, "Member 'ServiceMessage_GetMessage::ReturnValue' has a wrong offset!");

// Function JP.ServiceMessage.GetMessageLink
// 0x0010 (0x0010 - 0x0000)
struct ServiceMessage_GetMessageLink final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServiceMessage_GetMessageLink) == 0x000008, "Wrong alignment on ServiceMessage_GetMessageLink");
static_assert(sizeof(ServiceMessage_GetMessageLink) == 0x000010, "Wrong size on ServiceMessage_GetMessageLink");
static_assert(offsetof(ServiceMessage_GetMessageLink, ReturnValue) == 0x000000, "Member 'ServiceMessage_GetMessageLink::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_LoadPawnDefinitionFromOnlineServiceId.LoadPawnDefinitionFromOnlineServiceId
// 0x0020 (0x0020 - 0x0000)
struct AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnlineServiceId;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_LoadPawnDefinitionFromOnlineServiceId* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId) == 0x000008, "Wrong alignment on AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId");
static_assert(sizeof(AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId) == 0x000020, "Wrong size on AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId");
static_assert(offsetof(AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId, WorldContextObject) == 0x000000, "Member 'AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId, OnlineServiceId) == 0x000008, "Member 'AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId::OnlineServiceId' has a wrong offset!");
static_assert(offsetof(AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId, ReturnValue) == 0x000018, "Member 'AsyncAction_LoadPawnDefinitionFromOnlineServiceId_LoadPawnDefinitionFromOnlineServiceId::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_LoginWithInitialization.LoginWithInitialization
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_LoginWithInitialization_LoginWithInitialization final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_LoginWithInitialization*   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_LoginWithInitialization_LoginWithInitialization) == 0x000008, "Wrong alignment on AsyncAction_LoginWithInitialization_LoginWithInitialization");
static_assert(sizeof(AsyncAction_LoginWithInitialization_LoginWithInitialization) == 0x000010, "Wrong size on AsyncAction_LoginWithInitialization_LoginWithInitialization");
static_assert(offsetof(AsyncAction_LoginWithInitialization_LoginWithInitialization, WorldContextObject) == 0x000000, "Member 'AsyncAction_LoginWithInitialization_LoginWithInitialization::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_LoginWithInitialization_LoginWithInitialization, ReturnValue) == 0x000008, "Member 'AsyncAction_LoginWithInitialization_LoginWithInitialization::ReturnValue' has a wrong offset!");

// Function JP.AsyncAction_WaitForLoggedIn.WaitForLoggedIn
// 0x0010 (0x0010 - 0x0000)
struct AsyncAction_WaitForLoggedIn_WaitForLoggedIn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncAction_WaitForLoggedIn*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_WaitForLoggedIn_WaitForLoggedIn) == 0x000008, "Wrong alignment on AsyncAction_WaitForLoggedIn_WaitForLoggedIn");
static_assert(sizeof(AsyncAction_WaitForLoggedIn_WaitForLoggedIn) == 0x000010, "Wrong size on AsyncAction_WaitForLoggedIn_WaitForLoggedIn");
static_assert(offsetof(AsyncAction_WaitForLoggedIn_WaitForLoggedIn, WorldContextObject) == 0x000000, "Member 'AsyncAction_WaitForLoggedIn_WaitForLoggedIn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_WaitForLoggedIn_WaitForLoggedIn, ReturnValue) == 0x000008, "Member 'AsyncAction_WaitForLoggedIn_WaitForLoggedIn::ReturnValue' has a wrong offset!");

// Function JP.BasePlayerStateWatcher.HandlePlayerStateAddedToGameState
// 0x0008 (0x0008 - 0x0000)
struct BasePlayerStateWatcher_HandlePlayerStateAddedToGameState final
{
public:
	class APlayerState*                           AddedPlayerState;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerStateWatcher_HandlePlayerStateAddedToGameState) == 0x000008, "Wrong alignment on BasePlayerStateWatcher_HandlePlayerStateAddedToGameState");
static_assert(sizeof(BasePlayerStateWatcher_HandlePlayerStateAddedToGameState) == 0x000008, "Wrong size on BasePlayerStateWatcher_HandlePlayerStateAddedToGameState");
static_assert(offsetof(BasePlayerStateWatcher_HandlePlayerStateAddedToGameState, AddedPlayerState) == 0x000000, "Member 'BasePlayerStateWatcher_HandlePlayerStateAddedToGameState::AddedPlayerState' has a wrong offset!");

// Function JP.BasePlayerStateWatcher.HandlePlayerStateRemovedFromGameState
// 0x0008 (0x0008 - 0x0000)
struct BasePlayerStateWatcher_HandlePlayerStateRemovedFromGameState final
{
public:
	class APlayerState*                           RemovedPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePlayerStateWatcher_HandlePlayerStateRemovedFromGameState) == 0x000008, "Wrong alignment on BasePlayerStateWatcher_HandlePlayerStateRemovedFromGameState");
static_assert(sizeof(BasePlayerStateWatcher_HandlePlayerStateRemovedFromGameState) == 0x000008, "Wrong size on BasePlayerStateWatcher_HandlePlayerStateRemovedFromGameState");
static_assert(offsetof(BasePlayerStateWatcher_HandlePlayerStateRemovedFromGameState, RemovedPlayerState) == 0x000000, "Member 'BasePlayerStateWatcher_HandlePlayerStateRemovedFromGameState::RemovedPlayerState' has a wrong offset!");

// Function JP.BattlePassConfigurationAsset.GetCurrentBattlePassConfiguration
// 0x0008 (0x0008 - 0x0000)
struct BattlePassConfigurationAsset_GetCurrentBattlePassConfiguration final
{
public:
	const class UBattlePassConfigurationAsset*    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassConfigurationAsset_GetCurrentBattlePassConfiguration) == 0x000008, "Wrong alignment on BattlePassConfigurationAsset_GetCurrentBattlePassConfiguration");
static_assert(sizeof(BattlePassConfigurationAsset_GetCurrentBattlePassConfiguration) == 0x000008, "Wrong size on BattlePassConfigurationAsset_GetCurrentBattlePassConfiguration");
static_assert(offsetof(BattlePassConfigurationAsset_GetCurrentBattlePassConfiguration, ReturnValue) == 0x000000, "Member 'BattlePassConfigurationAsset_GetCurrentBattlePassConfiguration::ReturnValue' has a wrong offset!");

// Function JP.BattlePassConfigurationAsset.GetAllBattlePassRewardsBetweenLevels
// 0x0018 (0x0018 - 0x0000)
struct BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels final
{
public:
	int32                                         FromBattlePassLevelInclusive;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToBattlePassLevelInclusive;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBattlePassLevelRewards>        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels) == 0x000008, "Wrong alignment on BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels");
static_assert(sizeof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels) == 0x000018, "Wrong size on BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels");
static_assert(offsetof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels, FromBattlePassLevelInclusive) == 0x000000, "Member 'BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels::FromBattlePassLevelInclusive' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels, ToBattlePassLevelInclusive) == 0x000004, "Member 'BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels::ToBattlePassLevelInclusive' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels, ReturnValue) == 0x000008, "Member 'BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevels::ReturnValue' has a wrong offset!");

// Function JP.BattlePassConfigurationAsset.GetAllBattlePassRewardsBetweenLevelsFlattened
// 0x0020 (0x0020 - 0x0000)
struct BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened final
{
public:
	int32                                         FromBattlePassLevelInclusive;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToBattlePassLevelInclusive;                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeFreeRewards;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludePremiumRewards;                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened) == 0x000008, "Wrong alignment on BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened");
static_assert(sizeof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened) == 0x000020, "Wrong size on BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened");
static_assert(offsetof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened, FromBattlePassLevelInclusive) == 0x000000, "Member 'BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened::FromBattlePassLevelInclusive' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened, ToBattlePassLevelInclusive) == 0x000004, "Member 'BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened::ToBattlePassLevelInclusive' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened, IncludeFreeRewards) == 0x000008, "Member 'BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened::IncludeFreeRewards' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened, IncludePremiumRewards) == 0x000009, "Member 'BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened::IncludePremiumRewards' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened, ReturnValue) == 0x000010, "Member 'BattlePassConfigurationAsset_GetAllBattlePassRewardsBetweenLevelsFlattened::ReturnValue' has a wrong offset!");

// Function JP.BattlePassConfigurationAsset.TryGetBattlePassRewardsAtLevel
// 0x0028 (0x0028 - 0x0000)
struct BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel final
{
public:
	bool                                          Found;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BattlePassLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBattlePassLevelRewards                ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel) == 0x000008, "Wrong alignment on BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel");
static_assert(sizeof(BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel) == 0x000028, "Wrong size on BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel");
static_assert(offsetof(BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel, Found) == 0x000000, "Member 'BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel::Found' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel, BattlePassLevel) == 0x000004, "Member 'BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel::BattlePassLevel' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel, ReturnValue) == 0x000008, "Member 'BattlePassConfigurationAsset_TryGetBattlePassRewardsAtLevel::ReturnValue' has a wrong offset!");

// Function JP.BattlePassConfigurationAsset.ClampBattlePassIndexToValidRange
// 0x000C (0x000C - 0x0000)
struct BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange final
{
public:
	int32                                         BattlePassIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutValidRange;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange) == 0x000004, "Wrong alignment on BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange");
static_assert(sizeof(BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange) == 0x00000C, "Wrong size on BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange");
static_assert(offsetof(BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange, BattlePassIndex) == 0x000000, "Member 'BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange::BattlePassIndex' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange, OutValidRange) == 0x000004, "Member 'BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange::OutValidRange' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange, ReturnValue) == 0x000008, "Member 'BattlePassConfigurationAsset_ClampBattlePassIndexToValidRange::ReturnValue' has a wrong offset!");

// Function JP.BattlePassConfigurationAsset.ClampBattlePassLevelToValidRange
// 0x000C (0x000C - 0x0000)
struct BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange final
{
public:
	int32                                         BattlePassLevel;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutValidRange;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange) == 0x000004, "Wrong alignment on BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange");
static_assert(sizeof(BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange) == 0x00000C, "Wrong size on BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange");
static_assert(offsetof(BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange, BattlePassLevel) == 0x000000, "Member 'BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange::BattlePassLevel' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange, OutValidRange) == 0x000004, "Member 'BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange::OutValidRange' has a wrong offset!");
static_assert(offsetof(BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange, ReturnValue) == 0x000008, "Member 'BattlePassConfigurationAsset_ClampBattlePassLevelToValidRange::ReturnValue' has a wrong offset!");

// Function JP.PlayerStartQueryWorldSubsystem.Query
// 0x0028 (0x0028 - 0x0000)
struct PlayerStartQueryWorldSubsystem_Query final
{
public:
	struct FPlayerStartQueryRequest               Request;                                           // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPlayerStartQueryResult                ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStartQueryWorldSubsystem_Query) == 0x000008, "Wrong alignment on PlayerStartQueryWorldSubsystem_Query");
static_assert(sizeof(PlayerStartQueryWorldSubsystem_Query) == 0x000028, "Wrong size on PlayerStartQueryWorldSubsystem_Query");
static_assert(offsetof(PlayerStartQueryWorldSubsystem_Query, Request) == 0x000000, "Member 'PlayerStartQueryWorldSubsystem_Query::Request' has a wrong offset!");
static_assert(offsetof(PlayerStartQueryWorldSubsystem_Query, ReturnValue) == 0x000018, "Member 'PlayerStartQueryWorldSubsystem_Query::ReturnValue' has a wrong offset!");

// Function JP.PlayerRewardDataAsset.Sort
// 0x0010 (0x0010 - 0x0000)
struct PlayerRewardDataAsset_Sort final
{
public:
	TArray<class UPlayerRewardDataAsset*>         PlayerRewardDataAssets;                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerRewardDataAsset_Sort) == 0x000008, "Wrong alignment on PlayerRewardDataAsset_Sort");
static_assert(sizeof(PlayerRewardDataAsset_Sort) == 0x000010, "Wrong size on PlayerRewardDataAsset_Sort");
static_assert(offsetof(PlayerRewardDataAsset_Sort, PlayerRewardDataAssets) == 0x000000, "Member 'PlayerRewardDataAsset_Sort::PlayerRewardDataAssets' has a wrong offset!");

// Function JP.PlayerRewardDataAsset.TryGetPlayerRewardDataAsset
// 0x0038 (0x0038 - 0x0000)
struct PlayerRewardDataAsset_TryGetPlayerRewardDataAsset final
{
public:
	struct FGameplayTag                           PlayerRewardDataAssetID;                           // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPlayerRewardDataAsset>  OutSoftPlayerRewardDataAsset;                      // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerRewardDataAsset_TryGetPlayerRewardDataAsset) == 0x000008, "Wrong alignment on PlayerRewardDataAsset_TryGetPlayerRewardDataAsset");
static_assert(sizeof(PlayerRewardDataAsset_TryGetPlayerRewardDataAsset) == 0x000038, "Wrong size on PlayerRewardDataAsset_TryGetPlayerRewardDataAsset");
static_assert(offsetof(PlayerRewardDataAsset_TryGetPlayerRewardDataAsset, PlayerRewardDataAssetID) == 0x000000, "Member 'PlayerRewardDataAsset_TryGetPlayerRewardDataAsset::PlayerRewardDataAssetID' has a wrong offset!");
static_assert(offsetof(PlayerRewardDataAsset_TryGetPlayerRewardDataAsset, OutSoftPlayerRewardDataAsset) == 0x000008, "Member 'PlayerRewardDataAsset_TryGetPlayerRewardDataAsset::OutSoftPlayerRewardDataAsset' has a wrong offset!");
static_assert(offsetof(PlayerRewardDataAsset_TryGetPlayerRewardDataAsset, ReturnValue) == 0x000030, "Member 'PlayerRewardDataAsset_TryGetPlayerRewardDataAsset::ReturnValue' has a wrong offset!");

// Function JP.BattlePassCurrencyRewardDefinition.TryGetBattlePassCurrencyRewardDefinition
// 0x0038 (0x0038 - 0x0000)
struct BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition final
{
public:
	struct FGameplayTag                           BattlePassRewardCurrencyID;                        // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBattlePassCurrencyRewardDefinition> OutSoftBattlePassCurrencyRewardDefinition;         // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition) == 0x000008, "Wrong alignment on BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition");
static_assert(sizeof(BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition) == 0x000038, "Wrong size on BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition");
static_assert(offsetof(BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition, BattlePassRewardCurrencyID) == 0x000000, "Member 'BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition::BattlePassRewardCurrencyID' has a wrong offset!");
static_assert(offsetof(BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition, OutSoftBattlePassCurrencyRewardDefinition) == 0x000008, "Member 'BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition::OutSoftBattlePassCurrencyRewardDefinition' has a wrong offset!");
static_assert(offsetof(BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition, ReturnValue) == 0x000030, "Member 'BattlePassCurrencyRewardDefinition_TryGetBattlePassCurrencyRewardDefinition::ReturnValue' has a wrong offset!");

// Function JP.BattlePassMetaData.TryGetBattlePassMetaData
// 0x0038 (0x0038 - 0x0000)
struct BattlePassMetaData_TryGetBattlePassMetaData final
{
public:
	struct FGameplayTag                           BattlePassID;                                      // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBattlePassMetaData>     OutSoftBattlePassMetaData;                         // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassMetaData_TryGetBattlePassMetaData) == 0x000008, "Wrong alignment on BattlePassMetaData_TryGetBattlePassMetaData");
static_assert(sizeof(BattlePassMetaData_TryGetBattlePassMetaData) == 0x000038, "Wrong size on BattlePassMetaData_TryGetBattlePassMetaData");
static_assert(offsetof(BattlePassMetaData_TryGetBattlePassMetaData, BattlePassID) == 0x000000, "Member 'BattlePassMetaData_TryGetBattlePassMetaData::BattlePassID' has a wrong offset!");
static_assert(offsetof(BattlePassMetaData_TryGetBattlePassMetaData, OutSoftBattlePassMetaData) == 0x000008, "Member 'BattlePassMetaData_TryGetBattlePassMetaData::OutSoftBattlePassMetaData' has a wrong offset!");
static_assert(offsetof(BattlePassMetaData_TryGetBattlePassMetaData, ReturnValue) == 0x000030, "Member 'BattlePassMetaData_TryGetBattlePassMetaData::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.CompletedTooltip
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateJP_CompletedTooltip final
{
public:
	struct FGameplayTag                           TooltipTag;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_CompletedTooltip) == 0x000004, "Wrong alignment on PlayerStateJP_CompletedTooltip");
static_assert(sizeof(PlayerStateJP_CompletedTooltip) == 0x000008, "Wrong size on PlayerStateJP_CompletedTooltip");
static_assert(offsetof(PlayerStateJP_CompletedTooltip, TooltipTag) == 0x000000, "Member 'PlayerStateJP_CompletedTooltip::TooltipTag' has a wrong offset!");

// Function JP.PlayerStateJP.GetCompletedTooltips
// 0x0050 (0x0050 - 0x0000)
struct PlayerStateJP_GetCompletedTooltips final
{
public:
	struct FTooltipTagCollection                  ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetCompletedTooltips) == 0x000008, "Wrong alignment on PlayerStateJP_GetCompletedTooltips");
static_assert(sizeof(PlayerStateJP_GetCompletedTooltips) == 0x000050, "Wrong size on PlayerStateJP_GetCompletedTooltips");
static_assert(offsetof(PlayerStateJP_GetCompletedTooltips, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetCompletedTooltips::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetCurrentlySelectedSkinDefinition
// 0x0028 (0x0028 - 0x0000)
struct PlayerStateJP_GetCurrentlySelectedSkinDefinition final
{
public:
	TSoftObjectPtr<class UNeighborSkinDefinition> ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetCurrentlySelectedSkinDefinition) == 0x000008, "Wrong alignment on PlayerStateJP_GetCurrentlySelectedSkinDefinition");
static_assert(sizeof(PlayerStateJP_GetCurrentlySelectedSkinDefinition) == 0x000028, "Wrong size on PlayerStateJP_GetCurrentlySelectedSkinDefinition");
static_assert(offsetof(PlayerStateJP_GetCurrentlySelectedSkinDefinition, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetCurrentlySelectedSkinDefinition::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetCurrentlySelectedSkinIdentifier
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateJP_GetCurrentlySelectedSkinIdentifier final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetCurrentlySelectedSkinIdentifier) == 0x000004, "Wrong alignment on PlayerStateJP_GetCurrentlySelectedSkinIdentifier");
static_assert(sizeof(PlayerStateJP_GetCurrentlySelectedSkinIdentifier) == 0x000008, "Wrong size on PlayerStateJP_GetCurrentlySelectedSkinIdentifier");
static_assert(offsetof(PlayerStateJP_GetCurrentlySelectedSkinIdentifier, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetCurrentlySelectedSkinIdentifier::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetCurrentlySelectedUniqueItemSkinIdentifier
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateJP_GetCurrentlySelectedUniqueItemSkinIdentifier final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetCurrentlySelectedUniqueItemSkinIdentifier) == 0x000004, "Wrong alignment on PlayerStateJP_GetCurrentlySelectedUniqueItemSkinIdentifier");
static_assert(sizeof(PlayerStateJP_GetCurrentlySelectedUniqueItemSkinIdentifier) == 0x000008, "Wrong size on PlayerStateJP_GetCurrentlySelectedUniqueItemSkinIdentifier");
static_assert(offsetof(PlayerStateJP_GetCurrentlySelectedUniqueItemSkinIdentifier, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetCurrentlySelectedUniqueItemSkinIdentifier::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetSelectedNeighborLoadout
// 0x0030 (0x0030 - 0x0000)
struct PlayerStateJP_GetSelectedNeighborLoadout final
{
public:
	struct FNeighborLoadout                       ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetSelectedNeighborLoadout) == 0x000008, "Wrong alignment on PlayerStateJP_GetSelectedNeighborLoadout");
static_assert(sizeof(PlayerStateJP_GetSelectedNeighborLoadout) == 0x000030, "Wrong size on PlayerStateJP_GetSelectedNeighborLoadout");
static_assert(offsetof(PlayerStateJP_GetSelectedNeighborLoadout, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetSelectedNeighborLoadout::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetShowTooltips
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateJP_GetShowTooltips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetShowTooltips) == 0x000001, "Wrong alignment on PlayerStateJP_GetShowTooltips");
static_assert(sizeof(PlayerStateJP_GetShowTooltips) == 0x000001, "Wrong size on PlayerStateJP_GetShowTooltips");
static_assert(offsetof(PlayerStateJP_GetShowTooltips, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetShowTooltips::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetUniqueItemSkinDefinitionForNeighbor
// 0x0030 (0x0030 - 0x0000)
struct PlayerStateJP_GetUniqueItemSkinDefinitionForNeighbor final
{
public:
	struct FGameplayTag                           NeighborIdentifier;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemSkinDefinition>     ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetUniqueItemSkinDefinitionForNeighbor) == 0x000008, "Wrong alignment on PlayerStateJP_GetUniqueItemSkinDefinitionForNeighbor");
static_assert(sizeof(PlayerStateJP_GetUniqueItemSkinDefinitionForNeighbor) == 0x000030, "Wrong size on PlayerStateJP_GetUniqueItemSkinDefinitionForNeighbor");
static_assert(offsetof(PlayerStateJP_GetUniqueItemSkinDefinitionForNeighbor, NeighborIdentifier) == 0x000000, "Member 'PlayerStateJP_GetUniqueItemSkinDefinitionForNeighbor::NeighborIdentifier' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_GetUniqueItemSkinDefinitionForNeighbor, ReturnValue) == 0x000008, "Member 'PlayerStateJP_GetUniqueItemSkinDefinitionForNeighbor::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.HandleUserAvatarLoaded
// 0x0030 (0x0030 - 0x0000)
struct PlayerStateJP_HandleUserAvatarLoaded final
{
public:
	bool                                          bInWasSuccessful;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                InResultTexture;                                   // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_HandleUserAvatarLoaded) == 0x000008, "Wrong alignment on PlayerStateJP_HandleUserAvatarLoaded");
static_assert(sizeof(PlayerStateJP_HandleUserAvatarLoaded) == 0x000030, "Wrong size on PlayerStateJP_HandleUserAvatarLoaded");
static_assert(offsetof(PlayerStateJP_HandleUserAvatarLoaded, bInWasSuccessful) == 0x000000, "Member 'PlayerStateJP_HandleUserAvatarLoaded::bInWasSuccessful' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_HandleUserAvatarLoaded, InResultTexture) == 0x000008, "Member 'PlayerStateJP_HandleUserAvatarLoaded::InResultTexture' has a wrong offset!");

// Function JP.PlayerStateJP.OnRep_HouseIdentifierVote
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateJP_OnRep_HouseIdentifierVote final
{
public:
	struct FGameplayTag                           OldValue;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_OnRep_HouseIdentifierVote) == 0x000004, "Wrong alignment on PlayerStateJP_OnRep_HouseIdentifierVote");
static_assert(sizeof(PlayerStateJP_OnRep_HouseIdentifierVote) == 0x000008, "Wrong size on PlayerStateJP_OnRep_HouseIdentifierVote");
static_assert(offsetof(PlayerStateJP_OnRep_HouseIdentifierVote, OldValue) == 0x000000, "Member 'PlayerStateJP_OnRep_HouseIdentifierVote::OldValue' has a wrong offset!");

// Function JP.PlayerStateJP.Server_SetShowTooltips
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateJP_Server_SetShowTooltips final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_Server_SetShowTooltips) == 0x000001, "Wrong alignment on PlayerStateJP_Server_SetShowTooltips");
static_assert(sizeof(PlayerStateJP_Server_SetShowTooltips) == 0x000001, "Wrong size on PlayerStateJP_Server_SetShowTooltips");
static_assert(offsetof(PlayerStateJP_Server_SetShowTooltips, Show) == 0x000000, "Member 'PlayerStateJP_Server_SetShowTooltips::Show' has a wrong offset!");

// Function JP.PlayerStateJP.SetAssists
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateJP_SetAssists final
{
public:
	int32                                         NewAssists;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_SetAssists) == 0x000004, "Wrong alignment on PlayerStateJP_SetAssists");
static_assert(sizeof(PlayerStateJP_SetAssists) == 0x000004, "Wrong size on PlayerStateJP_SetAssists");
static_assert(offsetof(PlayerStateJP_SetAssists, NewAssists) == 0x000000, "Member 'PlayerStateJP_SetAssists::NewAssists' has a wrong offset!");

// Function JP.PlayerStateJP.SetDeaths
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateJP_SetDeaths final
{
public:
	int32                                         NewDeaths;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_SetDeaths) == 0x000004, "Wrong alignment on PlayerStateJP_SetDeaths");
static_assert(sizeof(PlayerStateJP_SetDeaths) == 0x000004, "Wrong size on PlayerStateJP_SetDeaths");
static_assert(offsetof(PlayerStateJP_SetDeaths, NewDeaths) == 0x000000, "Member 'PlayerStateJP_SetDeaths::NewDeaths' has a wrong offset!");

// Function JP.PlayerStateJP.SetKills
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateJP_SetKills final
{
public:
	int32                                         NewKills;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_SetKills) == 0x000004, "Wrong alignment on PlayerStateJP_SetKills");
static_assert(sizeof(PlayerStateJP_SetKills) == 0x000004, "Wrong size on PlayerStateJP_SetKills");
static_assert(offsetof(PlayerStateJP_SetKills, NewKills) == 0x000000, "Member 'PlayerStateJP_SetKills::NewKills' has a wrong offset!");

// Function JP.PlayerStateJP.TryGetItemSkinDefinition
// 0x0040 (0x0040 - 0x0000)
struct PlayerStateJP_TryGetItemSkinDefinition final
{
public:
	struct FGameplayTag                           ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NeighborIdentifier;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemSkinDefinition>     OutSkinDefinition;                                 // 0x0010(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStateJP_TryGetItemSkinDefinition) == 0x000008, "Wrong alignment on PlayerStateJP_TryGetItemSkinDefinition");
static_assert(sizeof(PlayerStateJP_TryGetItemSkinDefinition) == 0x000040, "Wrong size on PlayerStateJP_TryGetItemSkinDefinition");
static_assert(offsetof(PlayerStateJP_TryGetItemSkinDefinition, ItemId) == 0x000000, "Member 'PlayerStateJP_TryGetItemSkinDefinition::ItemId' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_TryGetItemSkinDefinition, NeighborIdentifier) == 0x000008, "Member 'PlayerStateJP_TryGetItemSkinDefinition::NeighborIdentifier' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_TryGetItemSkinDefinition, OutSkinDefinition) == 0x000010, "Member 'PlayerStateJP_TryGetItemSkinDefinition::OutSkinDefinition' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_TryGetItemSkinDefinition, ReturnValue) == 0x000038, "Member 'PlayerStateJP_TryGetItemSkinDefinition::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.TryGetItemSkinDefinitionForCurrentNeighbor
// 0x0038 (0x0038 - 0x0000)
struct PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor final
{
public:
	struct FGameplayTag                           ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemSkinDefinition>     OutSkinDefinition;                                 // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor) == 0x000008, "Wrong alignment on PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor");
static_assert(sizeof(PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor) == 0x000038, "Wrong size on PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor");
static_assert(offsetof(PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor, ItemId) == 0x000000, "Member 'PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor::ItemId' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor, OutSkinDefinition) == 0x000008, "Member 'PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor::OutSkinDefinition' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor, ReturnValue) == 0x000030, "Member 'PlayerStateJP_TryGetItemSkinDefinitionForCurrentNeighbor::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetAssists
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateJP_GetAssists final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetAssists) == 0x000004, "Wrong alignment on PlayerStateJP_GetAssists");
static_assert(sizeof(PlayerStateJP_GetAssists) == 0x000004, "Wrong size on PlayerStateJP_GetAssists");
static_assert(offsetof(PlayerStateJP_GetAssists, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetAssists::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetCharacterRole
// 0x0060 (0x0060 - 0x0000)
struct PlayerStateJP_GetCharacterRole final
{
public:
	struct FCharacterRoleData                     ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetCharacterRole) == 0x000008, "Wrong alignment on PlayerStateJP_GetCharacterRole");
static_assert(sizeof(PlayerStateJP_GetCharacterRole) == 0x000060, "Wrong size on PlayerStateJP_GetCharacterRole");
static_assert(offsetof(PlayerStateJP_GetCharacterRole, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetCharacterRole::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetCharacterXP
// 0x000C (0x000C - 0x0000)
struct PlayerStateJP_GetCharacterXP final
{
public:
	struct FGameplayTag                           CharacterTag;                                      // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetCharacterXP) == 0x000004, "Wrong alignment on PlayerStateJP_GetCharacterXP");
static_assert(sizeof(PlayerStateJP_GetCharacterXP) == 0x00000C, "Wrong size on PlayerStateJP_GetCharacterXP");
static_assert(offsetof(PlayerStateJP_GetCharacterXP, CharacterTag) == 0x000000, "Member 'PlayerStateJP_GetCharacterXP::CharacterTag' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_GetCharacterXP, ReturnValue) == 0x000008, "Member 'PlayerStateJP_GetCharacterXP::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetDeaths
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateJP_GetDeaths final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetDeaths) == 0x000004, "Wrong alignment on PlayerStateJP_GetDeaths");
static_assert(sizeof(PlayerStateJP_GetDeaths) == 0x000004, "Wrong size on PlayerStateJP_GetDeaths");
static_assert(offsetof(PlayerStateJP_GetDeaths, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetDeaths::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetEndOfMatchData
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateJP_GetEndOfMatchData final
{
public:
	struct FEndOfMatchPlayerData                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetEndOfMatchData) == 0x000001, "Wrong alignment on PlayerStateJP_GetEndOfMatchData");
static_assert(sizeof(PlayerStateJP_GetEndOfMatchData) == 0x000001, "Wrong size on PlayerStateJP_GetEndOfMatchData");
static_assert(offsetof(PlayerStateJP_GetEndOfMatchData, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetEndOfMatchData::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetHouseIdentifierVote
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateJP_GetHouseIdentifierVote final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetHouseIdentifierVote) == 0x000004, "Wrong alignment on PlayerStateJP_GetHouseIdentifierVote");
static_assert(sizeof(PlayerStateJP_GetHouseIdentifierVote) == 0x000008, "Wrong size on PlayerStateJP_GetHouseIdentifierVote");
static_assert(offsetof(PlayerStateJP_GetHouseIdentifierVote, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetHouseIdentifierVote::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetIsInParty
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateJP_GetIsInParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetIsInParty) == 0x000001, "Wrong alignment on PlayerStateJP_GetIsInParty");
static_assert(sizeof(PlayerStateJP_GetIsInParty) == 0x000001, "Wrong size on PlayerStateJP_GetIsInParty");
static_assert(offsetof(PlayerStateJP_GetIsInParty, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetIsInParty::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetKills
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateJP_GetKills final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetKills) == 0x000004, "Wrong alignment on PlayerStateJP_GetKills");
static_assert(sizeof(PlayerStateJP_GetKills) == 0x000004, "Wrong size on PlayerStateJP_GetKills");
static_assert(offsetof(PlayerStateJP_GetKills, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetKills::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetLoadout
// 0x0028 (0x0028 - 0x0000)
struct PlayerStateJP_GetLoadout final
{
public:
	struct FPlayerLoadout                         ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetLoadout) == 0x000008, "Wrong alignment on PlayerStateJP_GetLoadout");
static_assert(sizeof(PlayerStateJP_GetLoadout) == 0x000028, "Wrong size on PlayerStateJP_GetLoadout");
static_assert(offsetof(PlayerStateJP_GetLoadout, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetLoadout::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetMasterPlayerAccountId
// 0x0010 (0x0010 - 0x0000)
struct PlayerStateJP_GetMasterPlayerAccountId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetMasterPlayerAccountId) == 0x000008, "Wrong alignment on PlayerStateJP_GetMasterPlayerAccountId");
static_assert(sizeof(PlayerStateJP_GetMasterPlayerAccountId) == 0x000010, "Wrong size on PlayerStateJP_GetMasterPlayerAccountId");
static_assert(offsetof(PlayerStateJP_GetMasterPlayerAccountId, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetMasterPlayerAccountId::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetNeighborDefinition
// 0x0028 (0x0028 - 0x0000)
struct PlayerStateJP_GetNeighborDefinition final
{
public:
	TSoftObjectPtr<class UNeighborDefinition>     ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetNeighborDefinition) == 0x000008, "Wrong alignment on PlayerStateJP_GetNeighborDefinition");
static_assert(sizeof(PlayerStateJP_GetNeighborDefinition) == 0x000028, "Wrong size on PlayerStateJP_GetNeighborDefinition");
static_assert(offsetof(PlayerStateJP_GetNeighborDefinition, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetNeighborDefinition::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetNeighborIdentifier
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateJP_GetNeighborIdentifier final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetNeighborIdentifier) == 0x000004, "Wrong alignment on PlayerStateJP_GetNeighborIdentifier");
static_assert(sizeof(PlayerStateJP_GetNeighborIdentifier) == 0x000008, "Wrong size on PlayerStateJP_GetNeighborIdentifier");
static_assert(offsetof(PlayerStateJP_GetNeighborIdentifier, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetNeighborIdentifier::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetOwnedHouses
// 0x0010 (0x0010 - 0x0000)
struct PlayerStateJP_GetOwnedHouses final
{
public:
	TArray<struct FGameplayTag>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetOwnedHouses) == 0x000008, "Wrong alignment on PlayerStateJP_GetOwnedHouses");
static_assert(sizeof(PlayerStateJP_GetOwnedHouses) == 0x000010, "Wrong size on PlayerStateJP_GetOwnedHouses");
static_assert(offsetof(PlayerStateJP_GetOwnedHouses, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetOwnedHouses::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetPerkManagerComponent
// 0x0008 (0x0008 - 0x0000)
struct PlayerStateJP_GetPerkManagerComponent final
{
public:
	class UPerkManagerComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetPerkManagerComponent) == 0x000008, "Wrong alignment on PlayerStateJP_GetPerkManagerComponent");
static_assert(sizeof(PlayerStateJP_GetPerkManagerComponent) == 0x000008, "Wrong size on PlayerStateJP_GetPerkManagerComponent");
static_assert(offsetof(PlayerStateJP_GetPerkManagerComponent, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetPerkManagerComponent::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetPlayerDisplayName
// 0x0010 (0x0010 - 0x0000)
struct PlayerStateJP_GetPlayerDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetPlayerDisplayName) == 0x000008, "Wrong alignment on PlayerStateJP_GetPlayerDisplayName");
static_assert(sizeof(PlayerStateJP_GetPlayerDisplayName) == 0x000010, "Wrong size on PlayerStateJP_GetPlayerDisplayName");
static_assert(offsetof(PlayerStateJP_GetPlayerDisplayName, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetPlayerDisplayName::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetProfileXP
// 0x0004 (0x0004 - 0x0000)
struct PlayerStateJP_GetProfileXP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetProfileXP) == 0x000004, "Wrong alignment on PlayerStateJP_GetProfileXP");
static_assert(sizeof(PlayerStateJP_GetProfileXP) == 0x000004, "Wrong size on PlayerStateJP_GetProfileXP");
static_assert(offsetof(PlayerStateJP_GetProfileXP, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetProfileXP::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetSkinDefinitionForNeighbor
// 0x0030 (0x0030 - 0x0000)
struct PlayerStateJP_GetSkinDefinitionForNeighbor final
{
public:
	struct FGameplayTag                           NeighborIdentifier;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNeighborSkinDefinition> ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetSkinDefinitionForNeighbor) == 0x000008, "Wrong alignment on PlayerStateJP_GetSkinDefinitionForNeighbor");
static_assert(sizeof(PlayerStateJP_GetSkinDefinitionForNeighbor) == 0x000030, "Wrong size on PlayerStateJP_GetSkinDefinitionForNeighbor");
static_assert(offsetof(PlayerStateJP_GetSkinDefinitionForNeighbor, NeighborIdentifier) == 0x000000, "Member 'PlayerStateJP_GetSkinDefinitionForNeighbor::NeighborIdentifier' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_GetSkinDefinitionForNeighbor, ReturnValue) == 0x000008, "Member 'PlayerStateJP_GetSkinDefinitionForNeighbor::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetTeam
// 0x0038 (0x0038 - 0x0000)
struct PlayerStateJP_GetTeam final
{
public:
	struct FTeam                                  ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetTeam) == 0x000008, "Wrong alignment on PlayerStateJP_GetTeam");
static_assert(sizeof(PlayerStateJP_GetTeam) == 0x000038, "Wrong size on PlayerStateJP_GetTeam");
static_assert(offsetof(PlayerStateJP_GetTeam, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetTeam::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetTeamID
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateJP_GetTeamID final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetTeamID) == 0x000001, "Wrong alignment on PlayerStateJP_GetTeamID");
static_assert(sizeof(PlayerStateJP_GetTeamID) == 0x000001, "Wrong size on PlayerStateJP_GetTeamID");
static_assert(offsetof(PlayerStateJP_GetTeamID, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetTeamID::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetTitlePlayerAccountId
// 0x0010 (0x0010 - 0x0000)
struct PlayerStateJP_GetTitlePlayerAccountId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetTitlePlayerAccountId) == 0x000008, "Wrong alignment on PlayerStateJP_GetTitlePlayerAccountId");
static_assert(sizeof(PlayerStateJP_GetTitlePlayerAccountId) == 0x000010, "Wrong size on PlayerStateJP_GetTitlePlayerAccountId");
static_assert(offsetof(PlayerStateJP_GetTitlePlayerAccountId, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetTitlePlayerAccountId::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.GetUserAvatar
// 0x0028 (0x0028 - 0x0000)
struct PlayerStateJP_GetUserAvatar final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_GetUserAvatar) == 0x000008, "Wrong alignment on PlayerStateJP_GetUserAvatar");
static_assert(sizeof(PlayerStateJP_GetUserAvatar) == 0x000028, "Wrong size on PlayerStateJP_GetUserAvatar");
static_assert(offsetof(PlayerStateJP_GetUserAvatar, ReturnValue) == 0x000000, "Member 'PlayerStateJP_GetUserAvatar::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.HasLoadout
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateJP_HasLoadout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_HasLoadout) == 0x000001, "Wrong alignment on PlayerStateJP_HasLoadout");
static_assert(sizeof(PlayerStateJP_HasLoadout) == 0x000001, "Wrong size on PlayerStateJP_HasLoadout");
static_assert(offsetof(PlayerStateJP_HasLoadout, ReturnValue) == 0x000000, "Member 'PlayerStateJP_HasLoadout::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP.IsLocalPlayerState
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateJP_IsLocalPlayerState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_IsLocalPlayerState) == 0x000001, "Wrong alignment on PlayerStateJP_IsLocalPlayerState");
static_assert(sizeof(PlayerStateJP_IsLocalPlayerState) == 0x000001, "Wrong size on PlayerStateJP_IsLocalPlayerState");
static_assert(offsetof(PlayerStateJP_IsLocalPlayerState, ReturnValue) == 0x000000, "Member 'PlayerStateJP_IsLocalPlayerState::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP_Match.SetDeathRespawnTimeWindow
// 0x0010 (0x0010 - 0x0000)
struct PlayerStateJP_Match_SetDeathRespawnTimeWindow final
{
public:
	struct FDeathRespawnTimeWindow                NewDeathRespawnTimeWindow;                         // 0x0000(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_Match_SetDeathRespawnTimeWindow) == 0x000008, "Wrong alignment on PlayerStateJP_Match_SetDeathRespawnTimeWindow");
static_assert(sizeof(PlayerStateJP_Match_SetDeathRespawnTimeWindow) == 0x000010, "Wrong size on PlayerStateJP_Match_SetDeathRespawnTimeWindow");
static_assert(offsetof(PlayerStateJP_Match_SetDeathRespawnTimeWindow, NewDeathRespawnTimeWindow) == 0x000000, "Member 'PlayerStateJP_Match_SetDeathRespawnTimeWindow::NewDeathRespawnTimeWindow' has a wrong offset!");

// Function JP.PlayerStateJP_Match.GetDeathRespawnTimeWindow
// 0x0010 (0x0010 - 0x0000)
struct PlayerStateJP_Match_GetDeathRespawnTimeWindow final
{
public:
	struct FDeathRespawnTimeWindow                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_Match_GetDeathRespawnTimeWindow) == 0x000008, "Wrong alignment on PlayerStateJP_Match_GetDeathRespawnTimeWindow");
static_assert(sizeof(PlayerStateJP_Match_GetDeathRespawnTimeWindow) == 0x000010, "Wrong size on PlayerStateJP_Match_GetDeathRespawnTimeWindow");
static_assert(offsetof(PlayerStateJP_Match_GetDeathRespawnTimeWindow, ReturnValue) == 0x000000, "Member 'PlayerStateJP_Match_GetDeathRespawnTimeWindow::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.CanNeighborBePicked
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_CanNeighborBePicked final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NeighborIDTag;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_CanNeighborBePicked) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_CanNeighborBePicked");
static_assert(sizeof(BlueprintFunctionLibraryJP_CanNeighborBePicked) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_CanNeighborBePicked");
static_assert(offsetof(BlueprintFunctionLibraryJP_CanNeighborBePicked, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_CanNeighborBePicked::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_CanNeighborBePicked, NeighborIDTag) == 0x000008, "Member 'BlueprintFunctionLibraryJP_CanNeighborBePicked::NeighborIDTag' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_CanNeighborBePicked, TeamId) == 0x000010, "Member 'BlueprintFunctionLibraryJP_CanNeighborBePicked::TeamId' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_CanNeighborBePicked, ReturnValue) == 0x000011, "Member 'BlueprintFunctionLibraryJP_CanNeighborBePicked::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.ContainsTagStack
// 0x0190 (0x0190 - 0x0000)
struct BlueprintFunctionLibraryJP_ContainsTagStack final
{
public:
	struct FGameplayTagStackContainer             Container;                                         // 0x0000(0x0180)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0180(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0188(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_ContainsTagStack) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_ContainsTagStack");
static_assert(sizeof(BlueprintFunctionLibraryJP_ContainsTagStack) == 0x000190, "Wrong size on BlueprintFunctionLibraryJP_ContainsTagStack");
static_assert(offsetof(BlueprintFunctionLibraryJP_ContainsTagStack, Container) == 0x000000, "Member 'BlueprintFunctionLibraryJP_ContainsTagStack::Container' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_ContainsTagStack, Tag) == 0x000180, "Member 'BlueprintFunctionLibraryJP_ContainsTagStack::Tag' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_ContainsTagStack, ReturnValue) == 0x000188, "Member 'BlueprintFunctionLibraryJP_ContainsTagStack::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.CopyToClipboard
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_CopyToClipboard final
{
public:
	class FString                                 NewClipboard;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_CopyToClipboard) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_CopyToClipboard");
static_assert(sizeof(BlueprintFunctionLibraryJP_CopyToClipboard) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_CopyToClipboard");
static_assert(offsetof(BlueprintFunctionLibraryJP_CopyToClipboard, NewClipboard) == 0x000000, "Member 'BlueprintFunctionLibraryJP_CopyToClipboard::NewClipboard' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.CreateCombatParticipantFromPlayer
// 0x0068 (0x0068 - 0x0000)
struct BlueprintFunctionLibraryJP_CreateCombatParticipantFromPlayer final
{
public:
	class APlayerStateJP_Match*                   Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCombatParticipant                     ReturnValue;                                       // 0x0008(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_CreateCombatParticipantFromPlayer) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_CreateCombatParticipantFromPlayer");
static_assert(sizeof(BlueprintFunctionLibraryJP_CreateCombatParticipantFromPlayer) == 0x000068, "Wrong size on BlueprintFunctionLibraryJP_CreateCombatParticipantFromPlayer");
static_assert(offsetof(BlueprintFunctionLibraryJP_CreateCombatParticipantFromPlayer, Player) == 0x000000, "Member 'BlueprintFunctionLibraryJP_CreateCombatParticipantFromPlayer::Player' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_CreateCombatParticipantFromPlayer, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_CreateCombatParticipantFromPlayer::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.EffectContextAddCombatParticipant
// 0x0078 (0x0078 - 0x0000)
struct BlueprintFunctionLibraryJP_EffectContextAddCombatParticipant final
{
public:
	struct FGameplayEffectContextHandle           EffectContextHandle;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FCombatParticipant                     Data;                                              // 0x0018(0x0060)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_EffectContextAddCombatParticipant) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_EffectContextAddCombatParticipant");
static_assert(sizeof(BlueprintFunctionLibraryJP_EffectContextAddCombatParticipant) == 0x000078, "Wrong size on BlueprintFunctionLibraryJP_EffectContextAddCombatParticipant");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextAddCombatParticipant, EffectContextHandle) == 0x000000, "Member 'BlueprintFunctionLibraryJP_EffectContextAddCombatParticipant::EffectContextHandle' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextAddCombatParticipant, Data) == 0x000018, "Member 'BlueprintFunctionLibraryJP_EffectContextAddCombatParticipant::Data' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.EffectContextAddKillData
// 0x00D8 (0x00D8 - 0x0000)
struct BlueprintFunctionLibraryJP_EffectContextAddKillData final
{
public:
	struct FGameplayEffectContextHandle           EffectContextHandle;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FKillData                              Data;                                              // 0x0018(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_EffectContextAddKillData) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_EffectContextAddKillData");
static_assert(sizeof(BlueprintFunctionLibraryJP_EffectContextAddKillData) == 0x0000D8, "Wrong size on BlueprintFunctionLibraryJP_EffectContextAddKillData");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextAddKillData, EffectContextHandle) == 0x000000, "Member 'BlueprintFunctionLibraryJP_EffectContextAddKillData::EffectContextHandle' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextAddKillData, Data) == 0x000018, "Member 'BlueprintFunctionLibraryJP_EffectContextAddKillData::Data' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.EffectContextAddKillMethod
// 0x0060 (0x0060 - 0x0000)
struct BlueprintFunctionLibraryJP_EffectContextAddKillMethod final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemDefinition>         ItemDefinition;                                    // 0x0010(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   GameplayAbility;                                   // 0x0038(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_EffectContextAddKillMethod) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_EffectContextAddKillMethod");
static_assert(sizeof(BlueprintFunctionLibraryJP_EffectContextAddKillMethod) == 0x000060, "Wrong size on BlueprintFunctionLibraryJP_EffectContextAddKillMethod");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextAddKillMethod, SpecHandle) == 0x000000, "Member 'BlueprintFunctionLibraryJP_EffectContextAddKillMethod::SpecHandle' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextAddKillMethod, ItemDefinition) == 0x000010, "Member 'BlueprintFunctionLibraryJP_EffectContextAddKillMethod::ItemDefinition' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextAddKillMethod, GameplayAbility) == 0x000038, "Member 'BlueprintFunctionLibraryJP_EffectContextAddKillMethod::GameplayAbility' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.EffectContextGetCombatParticipant
// 0x0078 (0x0078 - 0x0000)
struct BlueprintFunctionLibraryJP_EffectContextGetCombatParticipant final
{
public:
	struct FGameplayEffectContextHandle           EffectContextHandle;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FCombatParticipant                     ReturnValue;                                       // 0x0018(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_EffectContextGetCombatParticipant) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_EffectContextGetCombatParticipant");
static_assert(sizeof(BlueprintFunctionLibraryJP_EffectContextGetCombatParticipant) == 0x000078, "Wrong size on BlueprintFunctionLibraryJP_EffectContextGetCombatParticipant");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextGetCombatParticipant, EffectContextHandle) == 0x000000, "Member 'BlueprintFunctionLibraryJP_EffectContextGetCombatParticipant::EffectContextHandle' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextGetCombatParticipant, ReturnValue) == 0x000018, "Member 'BlueprintFunctionLibraryJP_EffectContextGetCombatParticipant::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.EffectContextGetKillData
// 0x00D8 (0x00D8 - 0x0000)
struct BlueprintFunctionLibraryJP_EffectContextGetKillData final
{
public:
	struct FGameplayEffectContextHandle           EffectContextHandle;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FKillData                              ReturnValue;                                       // 0x0018(0x00C0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_EffectContextGetKillData) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_EffectContextGetKillData");
static_assert(sizeof(BlueprintFunctionLibraryJP_EffectContextGetKillData) == 0x0000D8, "Wrong size on BlueprintFunctionLibraryJP_EffectContextGetKillData");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextGetKillData, EffectContextHandle) == 0x000000, "Member 'BlueprintFunctionLibraryJP_EffectContextGetKillData::EffectContextHandle' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EffectContextGetKillData, ReturnValue) == 0x000018, "Member 'BlueprintFunctionLibraryJP_EffectContextGetKillData::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.EvaluateFloatValue
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_EvaluateFloatValue final
{
public:
	EArithmeticOperators                          Operator;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value1;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value2;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_EvaluateFloatValue) == 0x000004, "Wrong alignment on BlueprintFunctionLibraryJP_EvaluateFloatValue");
static_assert(sizeof(BlueprintFunctionLibraryJP_EvaluateFloatValue) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_EvaluateFloatValue");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateFloatValue, Operator) == 0x000000, "Member 'BlueprintFunctionLibraryJP_EvaluateFloatValue::Operator' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateFloatValue, Value1) == 0x000004, "Member 'BlueprintFunctionLibraryJP_EvaluateFloatValue::Value1' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateFloatValue, Value2) == 0x000008, "Member 'BlueprintFunctionLibraryJP_EvaluateFloatValue::Value2' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateFloatValue, ReturnValue) == 0x00000C, "Member 'BlueprintFunctionLibraryJP_EvaluateFloatValue::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.EvaluateIntValue
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_EvaluateIntValue final
{
public:
	EArithmeticOperators                          Operator;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value1;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value2;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_EvaluateIntValue) == 0x000004, "Wrong alignment on BlueprintFunctionLibraryJP_EvaluateIntValue");
static_assert(sizeof(BlueprintFunctionLibraryJP_EvaluateIntValue) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_EvaluateIntValue");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateIntValue, Operator) == 0x000000, "Member 'BlueprintFunctionLibraryJP_EvaluateIntValue::Operator' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateIntValue, Value1) == 0x000004, "Member 'BlueprintFunctionLibraryJP_EvaluateIntValue::Value1' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateIntValue, Value2) == 0x000008, "Member 'BlueprintFunctionLibraryJP_EvaluateIntValue::Value2' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateIntValue, ReturnValue) == 0x00000C, "Member 'BlueprintFunctionLibraryJP_EvaluateIntValue::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.EvaluateRuntimeFloatCurve
// 0x0098 (0x0098 - 0x0000)
struct BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     Curve;                                             // 0x0008(0x0088)(Parm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0094(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve");
static_assert(sizeof(BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve) == 0x000098, "Wrong size on BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve, Curve) == 0x000008, "Member 'BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve::Curve' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve, Time) == 0x000090, "Member 'BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve::Time' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve, ReturnValue) == 0x000094, "Member 'BlueprintFunctionLibraryJP_EvaluateRuntimeFloatCurve::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.EvaluateVectorValue
// 0x0028 (0x0028 - 0x0000)
struct BlueprintFunctionLibraryJP_EvaluateVectorValue final
{
public:
	EArithmeticOperators                          Operator;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector3f                              Value1;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Value2;                                            // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_EvaluateVectorValue) == 0x000004, "Wrong alignment on BlueprintFunctionLibraryJP_EvaluateVectorValue");
static_assert(sizeof(BlueprintFunctionLibraryJP_EvaluateVectorValue) == 0x000028, "Wrong size on BlueprintFunctionLibraryJP_EvaluateVectorValue");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateVectorValue, Operator) == 0x000000, "Member 'BlueprintFunctionLibraryJP_EvaluateVectorValue::Operator' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateVectorValue, Value1) == 0x000004, "Member 'BlueprintFunctionLibraryJP_EvaluateVectorValue::Value1' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateVectorValue, Value2) == 0x000010, "Member 'BlueprintFunctionLibraryJP_EvaluateVectorValue::Value2' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_EvaluateVectorValue, ReturnValue) == 0x00001C, "Member 'BlueprintFunctionLibraryJP_EvaluateVectorValue::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.FindComponents
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibraryJP_FindComponents final
{
public:
	TSubclassOf<class UGameplayEffectIW>          GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffectComponent>   ClassToFind;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGameplayEffectComponent*>       ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_FindComponents) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_FindComponents");
static_assert(sizeof(BlueprintFunctionLibraryJP_FindComponents) == 0x000020, "Wrong size on BlueprintFunctionLibraryJP_FindComponents");
static_assert(offsetof(BlueprintFunctionLibraryJP_FindComponents, GameplayEffect) == 0x000000, "Member 'BlueprintFunctionLibraryJP_FindComponents::GameplayEffect' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_FindComponents, ClassToFind) == 0x000008, "Member 'BlueprintFunctionLibraryJP_FindComponents::ClassToFind' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_FindComponents, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibraryJP_FindComponents::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.FindScreenEdgeLocationForWorldLocation
// 0x0050 (0x0050 - 0x0000)
struct BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgePercent;                                       // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ViewportCenterLoc;                                 // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutScreenPosition;                                 // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRotationAngleDegrees;                           // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnScreen;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation");
static_assert(sizeof(BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation) == 0x000050, "Wrong size on BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation");
static_assert(offsetof(BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation, InLocation) == 0x000008, "Member 'BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation::InLocation' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation, EdgePercent) == 0x000020, "Member 'BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation::EdgePercent' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation, ViewportCenterLoc) == 0x000028, "Member 'BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation::ViewportCenterLoc' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation, OutScreenPosition) == 0x000038, "Member 'BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation::OutScreenPosition' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation, OutRotationAngleDegrees) == 0x000048, "Member 'BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation::OutRotationAngleDegrees' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation, bIsOnScreen) == 0x00004C, "Member 'BlueprintFunctionLibraryJP_FindScreenEdgeLocationForWorldLocation::bIsOnScreen' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.FlushPlayerControllerInput
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibraryJP_FlushPlayerControllerInput final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_FlushPlayerControllerInput) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_FlushPlayerControllerInput");
static_assert(sizeof(BlueprintFunctionLibraryJP_FlushPlayerControllerInput) == 0x000008, "Wrong size on BlueprintFunctionLibraryJP_FlushPlayerControllerInput");
static_assert(offsetof(BlueprintFunctionLibraryJP_FlushPlayerControllerInput, PlayerController) == 0x000000, "Member 'BlueprintFunctionLibraryJP_FlushPlayerControllerInput::PlayerController' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetAbilityTagsFromSpec
// 0x02B8 (0x02B8 - 0x0000)
struct BlueprintFunctionLibraryJP_GetAbilityTagsFromSpec final
{
public:
	struct FGameplayEffectSpec                    Spec;                                              // 0x0000(0x0298)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0298(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetAbilityTagsFromSpec) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetAbilityTagsFromSpec");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetAbilityTagsFromSpec) == 0x0002B8, "Wrong size on BlueprintFunctionLibraryJP_GetAbilityTagsFromSpec");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetAbilityTagsFromSpec, Spec) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetAbilityTagsFromSpec::Spec' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetAbilityTagsFromSpec, ReturnValue) == 0x000298, "Member 'BlueprintFunctionLibraryJP_GetAbilityTagsFromSpec::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetAssistingCombatParticipantFromASC
// 0x0078 (0x0078 - 0x0000)
struct BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC final
{
public:
	struct FGameplayTag                           AssistType;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                ASC;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerMatchRecord*                     PlayerToIgnore;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCombatParticipant                     ReturnValue;                                       // 0x0018(0x0060)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC) == 0x000078, "Wrong size on BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC, AssistType) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC::AssistType' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC, ASC) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC::ASC' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC, PlayerToIgnore) == 0x000010, "Member 'BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC::PlayerToIgnore' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC, ReturnValue) == 0x000018, "Member 'BlueprintFunctionLibraryJP_GetAssistingCombatParticipantFromASC::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetDefaultPerkColor
// 0x0004 (0x0004 - 0x0000)
struct BlueprintFunctionLibraryJP_GetDefaultPerkColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetDefaultPerkColor) == 0x000004, "Wrong alignment on BlueprintFunctionLibraryJP_GetDefaultPerkColor");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetDefaultPerkColor) == 0x000004, "Wrong size on BlueprintFunctionLibraryJP_GetDefaultPerkColor");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetDefaultPerkColor, ReturnValue) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetDefaultPerkColor::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetDirectionAxisFromVector
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibraryJP_GetDirectionAxisFromVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionAxis                                ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetDirectionAxisFromVector) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetDirectionAxisFromVector");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetDirectionAxisFromVector) == 0x000020, "Wrong size on BlueprintFunctionLibraryJP_GetDirectionAxisFromVector");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetDirectionAxisFromVector, Vector) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetDirectionAxisFromVector::Vector' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetDirectionAxisFromVector, ReturnValue) == 0x000018, "Member 'BlueprintFunctionLibraryJP_GetDirectionAxisFromVector::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetDisplayNameFromCombatParticipant
// 0x0078 (0x0078 - 0x0000)
struct BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCombatParticipant                     Participant;                                       // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0068(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant) == 0x000078, "Wrong size on BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant, Participant) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant::Participant' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant, ReturnValue) == 0x000068, "Member 'BlueprintFunctionLibraryJP_GetDisplayNameFromCombatParticipant::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetEffectContextHandleFromGameplayEffectSpec
// 0x02B0 (0x02B0 - 0x0000)
struct BlueprintFunctionLibraryJP_GetEffectContextHandleFromGameplayEffectSpec final
{
public:
	struct FGameplayEffectSpec                    Spec;                                              // 0x0000(0x0298)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0298(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetEffectContextHandleFromGameplayEffectSpec) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetEffectContextHandleFromGameplayEffectSpec");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetEffectContextHandleFromGameplayEffectSpec) == 0x0002B0, "Wrong size on BlueprintFunctionLibraryJP_GetEffectContextHandleFromGameplayEffectSpec");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetEffectContextHandleFromGameplayEffectSpec, Spec) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetEffectContextHandleFromGameplayEffectSpec::Spec' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetEffectContextHandleFromGameplayEffectSpec, ReturnValue) == 0x000298, "Member 'BlueprintFunctionLibraryJP_GetEffectContextHandleFromGameplayEffectSpec::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetExpectedDuration
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_GetExpectedDuration final
{
public:
	TSubclassOf<class UGameplayEffectIW>          GameplayEffect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetExpectedDuration) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetExpectedDuration");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetExpectedDuration) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_GetExpectedDuration");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetExpectedDuration, GameplayEffect) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetExpectedDuration::GameplayEffect' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetExpectedDuration, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetExpectedDuration::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetFirstPlayerControllerJP
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerControllerJP*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetFirstPlayerControllerJP_Lobby
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrintError;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Lobby*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby, PrintError) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby::PrintError' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Lobby::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetFirstPlayerControllerJP_Match
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrintError;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match, PrintError) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match::PrintError' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerControllerJP_Match::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetFirstPlayerStateJP
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_GetFirstPlayerStateJP final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStateJP*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetFirstPlayerStateJP");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_GetFirstPlayerStateJP");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerStateJP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerStateJP::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetFirstPlayerStateJP_Lobby
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Lobby final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStateJP_Lobby*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Lobby) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Lobby");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Lobby) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Lobby");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Lobby, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Lobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Lobby, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Lobby::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetFirstPlayerStateJP_Match
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Match final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStateJP_Match*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Match) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Match");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Match) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Match");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Match, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Match::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Match, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetFirstPlayerStateJP_Match::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetGameModeJP_Lobby
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_GetGameModeJP_Lobby final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameModeJP_Lobby*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetGameModeJP_Lobby) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetGameModeJP_Lobby");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetGameModeJP_Lobby) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_GetGameModeJP_Lobby");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameModeJP_Lobby, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetGameModeJP_Lobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameModeJP_Lobby, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetGameModeJP_Lobby::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetGameModeJP_Match
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_GetGameModeJP_Match final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameModeJP_Match*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetGameModeJP_Match) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetGameModeJP_Match");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetGameModeJP_Match) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_GetGameModeJP_Match");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameModeJP_Match, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetGameModeJP_Match::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameModeJP_Match, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetGameModeJP_Match::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetGameplayAbilityForInputTag
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag final
{
public:
	class UEquipmentInstance*                     EquipmentInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag, EquipmentInstance) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag, GameplayTag) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibraryJP_GetGameplayAbilityForInputTag::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetGameplayTagChildren
// 0x0028 (0x0028 - 0x0000)
struct BlueprintFunctionLibraryJP_GetGameplayTagChildren final
{
public:
	struct FGameplayTag                           ParentGameplayTag;                                 // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetGameplayTagChildren) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetGameplayTagChildren");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetGameplayTagChildren) == 0x000028, "Wrong size on BlueprintFunctionLibraryJP_GetGameplayTagChildren");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameplayTagChildren, ParentGameplayTag) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetGameplayTagChildren::ParentGameplayTag' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameplayTagChildren, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetGameplayTagChildren::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetGameplayTagRootName
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_GetGameplayTagRootName final
{
public:
	struct FGameplayTag                           TagToSplit;                                        // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetGameplayTagRootName) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetGameplayTagRootName");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetGameplayTagRootName) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_GetGameplayTagRootName");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameplayTagRootName, TagToSplit) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetGameplayTagRootName::TagToSplit' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameplayTagRootName, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetGameplayTagRootName::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetGameStateJP
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_GetGameStateJP final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameStateJP*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetGameStateJP) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetGameStateJP");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetGameStateJP) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_GetGameStateJP");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameStateJP, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetGameStateJP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameStateJP, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetGameStateJP::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetGameStateJP_Lobby
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_GetGameStateJP_Lobby final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameStateJP_Lobby*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetGameStateJP_Lobby) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetGameStateJP_Lobby");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetGameStateJP_Lobby) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_GetGameStateJP_Lobby");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameStateJP_Lobby, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetGameStateJP_Lobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameStateJP_Lobby, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetGameStateJP_Lobby::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetGameStateJP_Match
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_GetGameStateJP_Match final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameStateJP_Match*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetGameStateJP_Match) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetGameStateJP_Match");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetGameStateJP_Match) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_GetGameStateJP_Match");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameStateJP_Match, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetGameStateJP_Match::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetGameStateJP_Match, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetGameStateJP_Match::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetIsPie
// 0x0001 (0x0001 - 0x0000)
struct BlueprintFunctionLibraryJP_GetIsPie final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetIsPie) == 0x000001, "Wrong alignment on BlueprintFunctionLibraryJP_GetIsPie");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetIsPie) == 0x000001, "Wrong size on BlueprintFunctionLibraryJP_GetIsPie");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetIsPie, ReturnValue) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetIsPie::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetLocalPlayerControllerJP_Lobby
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrintError;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Lobby*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby, PrintError) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby::PrintError' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Lobby::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetLocalPlayerControllerJP_Match
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrintError;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match, PrintError) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match::PrintError' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibraryJP_GetLocalPlayerControllerJP_Match::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetOnlineServicesID
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_GetOnlineServicesID final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetOnlineServicesID) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetOnlineServicesID");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetOnlineServicesID) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_GetOnlineServicesID");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetOnlineServicesID, Object) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetOnlineServicesID::Object' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetOnlineServicesID, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetOnlineServicesID::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetStencilValueFromMask
// 0x000C (0x000C - 0x0000)
struct BlueprintFunctionLibraryJP_GetStencilValueFromMask final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetStencilValueFromMask) == 0x000004, "Wrong alignment on BlueprintFunctionLibraryJP_GetStencilValueFromMask");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetStencilValueFromMask) == 0x00000C, "Wrong size on BlueprintFunctionLibraryJP_GetStencilValueFromMask");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetStencilValueFromMask, InTag) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetStencilValueFromMask::InTag' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetStencilValueFromMask, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_GetStencilValueFromMask::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetTagStackAmount
// 0x001C (0x001C - 0x0000)
struct BlueprintFunctionLibraryJP_GetTagStackAmount final
{
public:
	struct FGameplayTagStack                      TagStack;                                          // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetTagStackAmount) == 0x000004, "Wrong alignment on BlueprintFunctionLibraryJP_GetTagStackAmount");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetTagStackAmount) == 0x00001C, "Wrong size on BlueprintFunctionLibraryJP_GetTagStackAmount");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTagStackAmount, TagStack) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetTagStackAmount::TagStack' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTagStackAmount, ReturnValue) == 0x000018, "Member 'BlueprintFunctionLibraryJP_GetTagStackAmount::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetTagStackCount
// 0x0190 (0x0190 - 0x0000)
struct BlueprintFunctionLibraryJP_GetTagStackCount final
{
public:
	struct FGameplayTagStackContainer             Container;                                         // 0x0000(0x0180)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0180(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0188(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetTagStackCount) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetTagStackCount");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetTagStackCount) == 0x000190, "Wrong size on BlueprintFunctionLibraryJP_GetTagStackCount");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTagStackCount, Container) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetTagStackCount::Container' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTagStackCount, Tag) == 0x000180, "Member 'BlueprintFunctionLibraryJP_GetTagStackCount::Tag' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTagStackCount, ReturnValue) == 0x000188, "Member 'BlueprintFunctionLibraryJP_GetTagStackCount::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetTagStackTag
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibraryJP_GetTagStackTag final
{
public:
	struct FGameplayTagStack                      TagStack;                                          // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetTagStackTag) == 0x000004, "Wrong alignment on BlueprintFunctionLibraryJP_GetTagStackTag");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetTagStackTag) == 0x000020, "Wrong size on BlueprintFunctionLibraryJP_GetTagStackTag");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTagStackTag, TagStack) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetTagStackTag::TagStack' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTagStackTag, ReturnValue) == 0x000018, "Member 'BlueprintFunctionLibraryJP_GetTagStackTag::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetTargetTagsFromSpec
// 0x02B8 (0x02B8 - 0x0000)
struct BlueprintFunctionLibraryJP_GetTargetTagsFromSpec final
{
public:
	struct FGameplayEffectSpec                    Spec;                                              // 0x0000(0x0298)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0298(0x0020)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetTargetTagsFromSpec) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetTargetTagsFromSpec");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetTargetTagsFromSpec) == 0x0002B8, "Wrong size on BlueprintFunctionLibraryJP_GetTargetTagsFromSpec");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTargetTagsFromSpec, Spec) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetTargetTagsFromSpec::Spec' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTargetTagsFromSpec, ReturnValue) == 0x000298, "Member 'BlueprintFunctionLibraryJP_GetTargetTagsFromSpec::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetTutorialPromptDialogDescriptor
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_GetTutorialPromptDialogDescriptor final
{
public:
	class FText                                   Body;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCommonGameDialogDescriptor*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetTutorialPromptDialogDescriptor) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetTutorialPromptDialogDescriptor");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetTutorialPromptDialogDescriptor) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_GetTutorialPromptDialogDescriptor");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTutorialPromptDialogDescriptor, Body) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetTutorialPromptDialogDescriptor::Body' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTutorialPromptDialogDescriptor, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibraryJP_GetTutorialPromptDialogDescriptor::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.GetTweakableData
// 0x0008 (0x0008 - 0x0000)
struct BlueprintFunctionLibraryJP_GetTweakableData final
{
public:
	const class UTweakableData*                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_GetTweakableData) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_GetTweakableData");
static_assert(sizeof(BlueprintFunctionLibraryJP_GetTweakableData) == 0x000008, "Wrong size on BlueprintFunctionLibraryJP_GetTweakableData");
static_assert(offsetof(BlueprintFunctionLibraryJP_GetTweakableData, ReturnValue) == 0x000000, "Member 'BlueprintFunctionLibraryJP_GetTweakableData::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.IsActorReplicatingMovement
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_IsActorReplicatingMovement final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_IsActorReplicatingMovement) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_IsActorReplicatingMovement");
static_assert(sizeof(BlueprintFunctionLibraryJP_IsActorReplicatingMovement) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_IsActorReplicatingMovement");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsActorReplicatingMovement, Actor) == 0x000000, "Member 'BlueprintFunctionLibraryJP_IsActorReplicatingMovement::Actor' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsActorReplicatingMovement, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_IsActorReplicatingMovement::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.IsKeyboardFocused
// 0x0001 (0x0001 - 0x0000)
struct BlueprintFunctionLibraryJP_IsKeyboardFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_IsKeyboardFocused) == 0x000001, "Wrong alignment on BlueprintFunctionLibraryJP_IsKeyboardFocused");
static_assert(sizeof(BlueprintFunctionLibraryJP_IsKeyboardFocused) == 0x000001, "Wrong size on BlueprintFunctionLibraryJP_IsKeyboardFocused");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsKeyboardFocused, ReturnValue) == 0x000000, "Member 'BlueprintFunctionLibraryJP_IsKeyboardFocused::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.IsSceneComponentOnScreen
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_IsSceneComponentOnScreen final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USceneComponent*                  SceneComponent;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreen) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_IsSceneComponentOnScreen");
static_assert(sizeof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreen) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_IsSceneComponentOnScreen");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreen, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_IsSceneComponentOnScreen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreen, SceneComponent) == 0x000008, "Member 'BlueprintFunctionLibraryJP_IsSceneComponentOnScreen::SceneComponent' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreen, ReturnValue) == 0x000010, "Member 'BlueprintFunctionLibraryJP_IsSceneComponentOnScreen::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.IsSceneComponentOnScreenWithSlack
// 0x0030 (0x0030 - 0x0000)
struct BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USceneComponent*                  SceneComponent;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalSpaceExtraSize;                               // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack");
static_assert(sizeof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack) == 0x000030, "Wrong size on BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack, SceneComponent) == 0x000008, "Member 'BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack::SceneComponent' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack, LocalSpaceExtraSize) == 0x000010, "Member 'BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack::LocalSpaceExtraSize' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack, ReturnValue) == 0x000028, "Member 'BlueprintFunctionLibraryJP_IsSceneComponentOnScreenWithSlack::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.IsWorldPositionOnScreen
// 0x0028 (0x0028 - 0x0000)
struct BlueprintFunctionLibraryJP_IsWorldPositionOnScreen final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_IsWorldPositionOnScreen) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_IsWorldPositionOnScreen");
static_assert(sizeof(BlueprintFunctionLibraryJP_IsWorldPositionOnScreen) == 0x000028, "Wrong size on BlueprintFunctionLibraryJP_IsWorldPositionOnScreen");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsWorldPositionOnScreen, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_IsWorldPositionOnScreen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsWorldPositionOnScreen, WorldLocation) == 0x000008, "Member 'BlueprintFunctionLibraryJP_IsWorldPositionOnScreen::WorldLocation' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_IsWorldPositionOnScreen, ReturnValue) == 0x000020, "Member 'BlueprintFunctionLibraryJP_IsWorldPositionOnScreen::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.LegalPlacement
// 0x000C (0x000C - 0x0000)
struct BlueprintFunctionLibraryJP_LegalPlacement final
{
public:
	struct FDeployabeLegality                     LegalityStruct;                                    // 0x0000(0x000B)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_LegalPlacement) == 0x000001, "Wrong alignment on BlueprintFunctionLibraryJP_LegalPlacement");
static_assert(sizeof(BlueprintFunctionLibraryJP_LegalPlacement) == 0x00000C, "Wrong size on BlueprintFunctionLibraryJP_LegalPlacement");
static_assert(offsetof(BlueprintFunctionLibraryJP_LegalPlacement, LegalityStruct) == 0x000000, "Member 'BlueprintFunctionLibraryJP_LegalPlacement::LegalityStruct' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_LegalPlacement, ReturnValue) == 0x00000B, "Member 'BlueprintFunctionLibraryJP_LegalPlacement::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.SendMessageToAll
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_SendMessageToAll final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_SendMessageToAll) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_SendMessageToAll");
static_assert(sizeof(BlueprintFunctionLibraryJP_SendMessageToAll) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_SendMessageToAll");
static_assert(offsetof(BlueprintFunctionLibraryJP_SendMessageToAll, Message) == 0x000000, "Member 'BlueprintFunctionLibraryJP_SendMessageToAll::Message' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_SendMessageToAll, WorldContextObject) == 0x000010, "Member 'BlueprintFunctionLibraryJP_SendMessageToAll::WorldContextObject' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.SetTagStack
// 0x0190 (0x0190 - 0x0000)
struct BlueprintFunctionLibraryJP_SetTagStack final
{
public:
	struct FGameplayTagStackContainer             Container;                                         // 0x0000(0x0180)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0180(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewStacks;                                         // 0x0188(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_SetTagStack) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_SetTagStack");
static_assert(sizeof(BlueprintFunctionLibraryJP_SetTagStack) == 0x000190, "Wrong size on BlueprintFunctionLibraryJP_SetTagStack");
static_assert(offsetof(BlueprintFunctionLibraryJP_SetTagStack, Container) == 0x000000, "Member 'BlueprintFunctionLibraryJP_SetTagStack::Container' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_SetTagStack, Tag) == 0x000180, "Member 'BlueprintFunctionLibraryJP_SetTagStack::Tag' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_SetTagStack, NewStacks) == 0x000188, "Member 'BlueprintFunctionLibraryJP_SetTagStack::NewStacks' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.SimulateMouseScrollInput
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibraryJP_SimulateMouseScrollInput final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_SimulateMouseScrollInput) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_SimulateMouseScrollInput");
static_assert(sizeof(BlueprintFunctionLibraryJP_SimulateMouseScrollInput) == 0x000020, "Wrong size on BlueprintFunctionLibraryJP_SimulateMouseScrollInput");
static_assert(offsetof(BlueprintFunctionLibraryJP_SimulateMouseScrollInput, InKey) == 0x000000, "Member 'BlueprintFunctionLibraryJP_SimulateMouseScrollInput::InKey' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_SimulateMouseScrollInput, Value) == 0x000018, "Member 'BlueprintFunctionLibraryJP_SimulateMouseScrollInput::Value' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.SimulatePlayerAnalogInput
// 0x0020 (0x0020 - 0x0000)
struct BlueprintFunctionLibraryJP_SimulatePlayerAnalogInput final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_SimulatePlayerAnalogInput) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_SimulatePlayerAnalogInput");
static_assert(sizeof(BlueprintFunctionLibraryJP_SimulatePlayerAnalogInput) == 0x000020, "Wrong size on BlueprintFunctionLibraryJP_SimulatePlayerAnalogInput");
static_assert(offsetof(BlueprintFunctionLibraryJP_SimulatePlayerAnalogInput, InKey) == 0x000000, "Member 'BlueprintFunctionLibraryJP_SimulatePlayerAnalogInput::InKey' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_SimulatePlayerAnalogInput, Value) == 0x000018, "Member 'BlueprintFunctionLibraryJP_SimulatePlayerAnalogInput::Value' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.SimulatePlayerInputKeyDown
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_SimulatePlayerInputKeyDown final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_SimulatePlayerInputKeyDown) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_SimulatePlayerInputKeyDown");
static_assert(sizeof(BlueprintFunctionLibraryJP_SimulatePlayerInputKeyDown) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_SimulatePlayerInputKeyDown");
static_assert(offsetof(BlueprintFunctionLibraryJP_SimulatePlayerInputKeyDown, InKey) == 0x000000, "Member 'BlueprintFunctionLibraryJP_SimulatePlayerInputKeyDown::InKey' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.SimulatePlayerInputKeyUp
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_SimulatePlayerInputKeyUp final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_SimulatePlayerInputKeyUp) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_SimulatePlayerInputKeyUp");
static_assert(sizeof(BlueprintFunctionLibraryJP_SimulatePlayerInputKeyUp) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_SimulatePlayerInputKeyUp");
static_assert(offsetof(BlueprintFunctionLibraryJP_SimulatePlayerInputKeyUp, InKey) == 0x000000, "Member 'BlueprintFunctionLibraryJP_SimulatePlayerInputKeyUp::InKey' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.SortRoomData
// 0x0010 (0x0010 - 0x0000)
struct BlueprintFunctionLibraryJP_SortRoomData final
{
public:
	TArray<struct FRoomData>                      RoomCollection;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_SortRoomData) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_SortRoomData");
static_assert(sizeof(BlueprintFunctionLibraryJP_SortRoomData) == 0x000010, "Wrong size on BlueprintFunctionLibraryJP_SortRoomData");
static_assert(offsetof(BlueprintFunctionLibraryJP_SortRoomData, RoomCollection) == 0x000000, "Member 'BlueprintFunctionLibraryJP_SortRoomData::RoomCollection' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.SplitGameplayTagName
// 0x0018 (0x0018 - 0x0000)
struct BlueprintFunctionLibraryJP_SplitGameplayTagName final
{
public:
	struct FGameplayTag                           TagToSplit;                                        // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_SplitGameplayTagName) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_SplitGameplayTagName");
static_assert(sizeof(BlueprintFunctionLibraryJP_SplitGameplayTagName) == 0x000018, "Wrong size on BlueprintFunctionLibraryJP_SplitGameplayTagName");
static_assert(offsetof(BlueprintFunctionLibraryJP_SplitGameplayTagName, TagToSplit) == 0x000000, "Member 'BlueprintFunctionLibraryJP_SplitGameplayTagName::TagToSplit' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_SplitGameplayTagName, ReturnValue) == 0x000008, "Member 'BlueprintFunctionLibraryJP_SplitGameplayTagName::ReturnValue' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.TraceForHitsWithInterface
// 0x00A8 (0x00A8 - 0x0000)
struct BlueprintFunctionLibraryJP_TraceForHitsWithInterface final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Range;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Width;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Height;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TraceHeightOffset;                                 // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceFromLocation;                                 // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TraceRotation;                                     // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class IInterface>                 Interface;                                         // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0080(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     AcceptedHits;                                      // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NoHits;                                            // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyHitWorldStatic;                                // 0x00A1(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_TraceForHitsWithInterface");
static_assert(sizeof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface) == 0x0000A8, "Wrong size on BlueprintFunctionLibraryJP_TraceForHitsWithInterface");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, WorldContextObject) == 0x000000, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, Range) == 0x000008, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::Range' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, Width) == 0x000010, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::Width' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, Height) == 0x000018, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::Height' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, TraceHeightOffset) == 0x000020, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::TraceHeightOffset' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, TraceFromLocation) == 0x000028, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::TraceFromLocation' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, TraceRotation) == 0x000040, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::TraceRotation' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, Owner) == 0x000058, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::Owner' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, Interface) == 0x000060, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::Interface' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, Debug) == 0x000068, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::Debug' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, ObjectTypes) == 0x000070, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, ActorsToIgnore) == 0x000080, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, AcceptedHits) == 0x000090, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::AcceptedHits' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, NoHits) == 0x0000A0, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::NoHits' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TraceForHitsWithInterface, OnlyHitWorldStatic) == 0x0000A1, "Member 'BlueprintFunctionLibraryJP_TraceForHitsWithInterface::OnlyHitWorldStatic' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.TryAddTagStacksToItemInInventory
// 0x0080 (0x0080 - 0x0000)
struct BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory final
{
public:
	class UGameplayAbility*                       Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemDefinition>         ItemDefinition;                                    // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, int32>              TagStacksToAdd;                                    // 0x0030(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory");
static_assert(sizeof(BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory) == 0x000080, "Wrong size on BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory");
static_assert(offsetof(BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory, Ability) == 0x000000, "Member 'BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory::Ability' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory, ItemDefinition) == 0x000008, "Member 'BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory::ItemDefinition' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory, TagStacksToAdd) == 0x000030, "Member 'BlueprintFunctionLibraryJP_TryAddTagStacksToItemInInventory::TagStacksToAdd' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.TrySetTagStacksForItemInInventory
// 0x0080 (0x0080 - 0x0000)
struct BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory final
{
public:
	class UGameplayAbility*                       Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemDefinition>         ItemDefinition;                                    // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, int32>              TagStacksToSet;                                    // 0x0030(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory");
static_assert(sizeof(BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory) == 0x000080, "Wrong size on BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory");
static_assert(offsetof(BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory, Ability) == 0x000000, "Member 'BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory::Ability' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory, ItemDefinition) == 0x000008, "Member 'BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory::ItemDefinition' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory, TagStacksToSet) == 0x000030, "Member 'BlueprintFunctionLibraryJP_TrySetTagStacksForItemInInventory::TagStacksToSet' has a wrong offset!");

// Function JP.BlueprintFunctionLibraryJP.TrySubtractTagStacksFromItemInInventory
// 0x0080 (0x0080 - 0x0000)
struct BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory final
{
public:
	class UGameplayAbility*                       Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemDefinition>         ItemDefinition;                                    // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, int32>              TagStacksToSubtract;                               // 0x0030(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory");
static_assert(sizeof(BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory) == 0x000080, "Wrong size on BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory");
static_assert(offsetof(BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory, Ability) == 0x000000, "Member 'BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory::Ability' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory, ItemDefinition) == 0x000008, "Member 'BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory::ItemDefinition' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory, TagStacksToSubtract) == 0x000030, "Member 'BlueprintFunctionLibraryJP_TrySubtractTagStacksFromItemInInventory::TagStacksToSubtract' has a wrong offset!");

// Function JP.BlueprintLogging.Print
// 0x0038 (0x0038 - 0x0000)
struct BlueprintLogging_Print final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerbosity                                    Verbosity;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TextColor;                                         // 0x0024(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintLogging_Print) == 0x000008, "Wrong alignment on BlueprintLogging_Print");
static_assert(sizeof(BlueprintLogging_Print) == 0x000038, "Wrong size on BlueprintLogging_Print");
static_assert(offsetof(BlueprintLogging_Print, CategoryName) == 0x000000, "Member 'BlueprintLogging_Print::CategoryName' has a wrong offset!");
static_assert(offsetof(BlueprintLogging_Print, InString) == 0x000010, "Member 'BlueprintLogging_Print::InString' has a wrong offset!");
static_assert(offsetof(BlueprintLogging_Print, Verbosity) == 0x000020, "Member 'BlueprintLogging_Print::Verbosity' has a wrong offset!");
static_assert(offsetof(BlueprintLogging_Print, TextColor) == 0x000024, "Member 'BlueprintLogging_Print::TextColor' has a wrong offset!");
static_assert(offsetof(BlueprintLogging_Print, Duration) == 0x000034, "Member 'BlueprintLogging_Print::Duration' has a wrong offset!");

// Function JP.BlueprintStringLibraryJP.Conv_PlayerLoadoutToString
// 0x0038 (0x0038 - 0x0000)
struct BlueprintStringLibraryJP_Conv_PlayerLoadoutToString final
{
public:
	struct FPlayerLoadout                         InLoadout;                                         // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintStringLibraryJP_Conv_PlayerLoadoutToString) == 0x000008, "Wrong alignment on BlueprintStringLibraryJP_Conv_PlayerLoadoutToString");
static_assert(sizeof(BlueprintStringLibraryJP_Conv_PlayerLoadoutToString) == 0x000038, "Wrong size on BlueprintStringLibraryJP_Conv_PlayerLoadoutToString");
static_assert(offsetof(BlueprintStringLibraryJP_Conv_PlayerLoadoutToString, InLoadout) == 0x000000, "Member 'BlueprintStringLibraryJP_Conv_PlayerLoadoutToString::InLoadout' has a wrong offset!");
static_assert(offsetof(BlueprintStringLibraryJP_Conv_PlayerLoadoutToString, ReturnValue) == 0x000028, "Member 'BlueprintStringLibraryJP_Conv_PlayerLoadoutToString::ReturnValue' has a wrong offset!");

// Function JP.BuyAmmoBehavior.GetAmmoToAdd
// 0x0010 (0x0010 - 0x0000)
struct BuyAmmoBehavior_GetAmmoToAdd final
{
public:
	class UItemInstance*                          Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuyAmmoBehavior_GetAmmoToAdd) == 0x000008, "Wrong alignment on BuyAmmoBehavior_GetAmmoToAdd");
static_assert(sizeof(BuyAmmoBehavior_GetAmmoToAdd) == 0x000010, "Wrong size on BuyAmmoBehavior_GetAmmoToAdd");
static_assert(offsetof(BuyAmmoBehavior_GetAmmoToAdd, Item) == 0x000000, "Member 'BuyAmmoBehavior_GetAmmoToAdd::Item' has a wrong offset!");
static_assert(offsetof(BuyAmmoBehavior_GetAmmoToAdd, ReturnValue) == 0x000008, "Member 'BuyAmmoBehavior_GetAmmoToAdd::ReturnValue' has a wrong offset!");

// Function JP.SocialPartyFollowLeaderPasswordMenu.EnteredPassword
// 0x0010 (0x0010 - 0x0000)
struct SocialPartyFollowLeaderPasswordMenu_EnteredPassword final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialPartyFollowLeaderPasswordMenu_EnteredPassword) == 0x000008, "Wrong alignment on SocialPartyFollowLeaderPasswordMenu_EnteredPassword");
static_assert(sizeof(SocialPartyFollowLeaderPasswordMenu_EnteredPassword) == 0x000010, "Wrong size on SocialPartyFollowLeaderPasswordMenu_EnteredPassword");
static_assert(offsetof(SocialPartyFollowLeaderPasswordMenu_EnteredPassword, Password) == 0x000000, "Member 'SocialPartyFollowLeaderPasswordMenu_EnteredPassword::Password' has a wrong offset!");

// Function JP.TeamAssignableManager.FindOwningGroundsKeeper
// 0x0008 (0x0008 - 0x0000)
struct TeamAssignableManager_FindOwningGroundsKeeper final
{
public:
	class AGroundsKeeper*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamAssignableManager_FindOwningGroundsKeeper) == 0x000008, "Wrong alignment on TeamAssignableManager_FindOwningGroundsKeeper");
static_assert(sizeof(TeamAssignableManager_FindOwningGroundsKeeper) == 0x000008, "Wrong size on TeamAssignableManager_FindOwningGroundsKeeper");
static_assert(offsetof(TeamAssignableManager_FindOwningGroundsKeeper, ReturnValue) == 0x000000, "Member 'TeamAssignableManager_FindOwningGroundsKeeper::ReturnValue' has a wrong offset!");

// Function JP.CharacterDeathComponent.GetOriginalController
// 0x0008 (0x0008 - 0x0000)
struct CharacterDeathComponent_GetOriginalController final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_GetOriginalController) == 0x000008, "Wrong alignment on CharacterDeathComponent_GetOriginalController");
static_assert(sizeof(CharacterDeathComponent_GetOriginalController) == 0x000008, "Wrong size on CharacterDeathComponent_GetOriginalController");
static_assert(offsetof(CharacterDeathComponent_GetOriginalController, ReturnValue) == 0x000000, "Member 'CharacterDeathComponent_GetOriginalController::ReturnValue' has a wrong offset!");

// Function JP.CharacterDeathComponent.GetOriginalPawn
// 0x0008 (0x0008 - 0x0000)
struct CharacterDeathComponent_GetOriginalPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_GetOriginalPawn) == 0x000008, "Wrong alignment on CharacterDeathComponent_GetOriginalPawn");
static_assert(sizeof(CharacterDeathComponent_GetOriginalPawn) == 0x000008, "Wrong size on CharacterDeathComponent_GetOriginalPawn");
static_assert(offsetof(CharacterDeathComponent_GetOriginalPawn, ReturnValue) == 0x000000, "Member 'CharacterDeathComponent_GetOriginalPawn::ReturnValue' has a wrong offset!");

// Function JP.CharacterDeathComponent.GetSpectatorPawn
// 0x0008 (0x0008 - 0x0000)
struct CharacterDeathComponent_GetSpectatorPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_GetSpectatorPawn) == 0x000008, "Wrong alignment on CharacterDeathComponent_GetSpectatorPawn");
static_assert(sizeof(CharacterDeathComponent_GetSpectatorPawn) == 0x000008, "Wrong size on CharacterDeathComponent_GetSpectatorPawn");
static_assert(offsetof(CharacterDeathComponent_GetSpectatorPawn, ReturnValue) == 0x000000, "Member 'CharacterDeathComponent_GetSpectatorPawn::ReturnValue' has a wrong offset!");

// Function JP.CharacterDeathComponent.KillCharacter
// 0x0004 (0x0004 - 0x0000)
struct CharacterDeathComponent_KillCharacter final
{
public:
	float                                         RespawnTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_KillCharacter) == 0x000004, "Wrong alignment on CharacterDeathComponent_KillCharacter");
static_assert(sizeof(CharacterDeathComponent_KillCharacter) == 0x000004, "Wrong size on CharacterDeathComponent_KillCharacter");
static_assert(offsetof(CharacterDeathComponent_KillCharacter, RespawnTime) == 0x000000, "Member 'CharacterDeathComponent_KillCharacter::RespawnTime' has a wrong offset!");

// Function JP.CharacterDeathComponent.RespawnCharacter
// 0x0008 (0x0008 - 0x0000)
struct CharacterDeathComponent_RespawnCharacter final
{
public:
	class AActor*                                 NewCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_RespawnCharacter) == 0x000008, "Wrong alignment on CharacterDeathComponent_RespawnCharacter");
static_assert(sizeof(CharacterDeathComponent_RespawnCharacter) == 0x000008, "Wrong size on CharacterDeathComponent_RespawnCharacter");
static_assert(offsetof(CharacterDeathComponent_RespawnCharacter, NewCharacter) == 0x000000, "Member 'CharacterDeathComponent_RespawnCharacter::NewCharacter' has a wrong offset!");

// Function JP.CharacterDeathComponent.SetWantsToRespawn
// 0x0001 (0x0001 - 0x0000)
struct CharacterDeathComponent_SetWantsToRespawn final
{
public:
	bool                                          InWantsToRespawn;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_SetWantsToRespawn) == 0x000001, "Wrong alignment on CharacterDeathComponent_SetWantsToRespawn");
static_assert(sizeof(CharacterDeathComponent_SetWantsToRespawn) == 0x000001, "Wrong size on CharacterDeathComponent_SetWantsToRespawn");
static_assert(offsetof(CharacterDeathComponent_SetWantsToRespawn, InWantsToRespawn) == 0x000000, "Member 'CharacterDeathComponent_SetWantsToRespawn::InWantsToRespawn' has a wrong offset!");

// Function JP.CharacterDeathComponent.GetWantsToRespawn
// 0x0001 (0x0001 - 0x0000)
struct CharacterDeathComponent_GetWantsToRespawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDeathComponent_GetWantsToRespawn) == 0x000001, "Wrong alignment on CharacterDeathComponent_GetWantsToRespawn");
static_assert(sizeof(CharacterDeathComponent_GetWantsToRespawn) == 0x000001, "Wrong size on CharacterDeathComponent_GetWantsToRespawn");
static_assert(offsetof(CharacterDeathComponent_GetWantsToRespawn, ReturnValue) == 0x000000, "Member 'CharacterDeathComponent_GetWantsToRespawn::ReturnValue' has a wrong offset!");

// Function JP.CharacterJP.GetDefinition
// 0x0008 (0x0008 - 0x0000)
struct CharacterJP_GetDefinition final
{
public:
	class UNeighborDefinition*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterJP_GetDefinition) == 0x000008, "Wrong alignment on CharacterJP_GetDefinition");
static_assert(sizeof(CharacterJP_GetDefinition) == 0x000008, "Wrong size on CharacterJP_GetDefinition");
static_assert(offsetof(CharacterJP_GetDefinition, ReturnValue) == 0x000000, "Member 'CharacterJP_GetDefinition::ReturnValue' has a wrong offset!");

// Function JP.CharacterJP.GetTransformOfThirdPersonBone
// 0x0070 (0x0070 - 0x0000)
struct CharacterJP_GetTransformOfThirdPersonBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterJP_GetTransformOfThirdPersonBone) == 0x000010, "Wrong alignment on CharacterJP_GetTransformOfThirdPersonBone");
static_assert(sizeof(CharacterJP_GetTransformOfThirdPersonBone) == 0x000070, "Wrong size on CharacterJP_GetTransformOfThirdPersonBone");
static_assert(offsetof(CharacterJP_GetTransformOfThirdPersonBone, BoneName) == 0x000000, "Member 'CharacterJP_GetTransformOfThirdPersonBone::BoneName' has a wrong offset!");
static_assert(offsetof(CharacterJP_GetTransformOfThirdPersonBone, ReturnValue) == 0x000010, "Member 'CharacterJP_GetTransformOfThirdPersonBone::ReturnValue' has a wrong offset!");

// Function JP.CharacterJP.K2_HealthAttributeChanged
// 0x0008 (0x0008 - 0x0000)
struct CharacterJP_K2_HealthAttributeChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterJP_K2_HealthAttributeChanged) == 0x000004, "Wrong alignment on CharacterJP_K2_HealthAttributeChanged");
static_assert(sizeof(CharacterJP_K2_HealthAttributeChanged) == 0x000008, "Wrong size on CharacterJP_K2_HealthAttributeChanged");
static_assert(offsetof(CharacterJP_K2_HealthAttributeChanged, OldValue) == 0x000000, "Member 'CharacterJP_K2_HealthAttributeChanged::OldValue' has a wrong offset!");
static_assert(offsetof(CharacterJP_K2_HealthAttributeChanged, NewValue) == 0x000004, "Member 'CharacterJP_K2_HealthAttributeChanged::NewValue' has a wrong offset!");

// Function JP.CharacterJP.K2_OnRep_PlayerState
// 0x0008 (0x0008 - 0x0000)
struct CharacterJP_K2_OnRep_PlayerState final
{
public:
	const class APlayerStateJP_Match*             PlayerStateJP_Match;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterJP_K2_OnRep_PlayerState) == 0x000008, "Wrong alignment on CharacterJP_K2_OnRep_PlayerState");
static_assert(sizeof(CharacterJP_K2_OnRep_PlayerState) == 0x000008, "Wrong size on CharacterJP_K2_OnRep_PlayerState");
static_assert(offsetof(CharacterJP_K2_OnRep_PlayerState, PlayerStateJP_Match) == 0x000000, "Member 'CharacterJP_K2_OnRep_PlayerState::PlayerStateJP_Match' has a wrong offset!");

// Function JP.CharacterJP.KilledByNonPlayer
// 0x0010 (0x0010 - 0x0000)
struct CharacterJP_KilledByNonPlayer final
{
public:
	class FString                                 KillerObject;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterJP_KilledByNonPlayer) == 0x000008, "Wrong alignment on CharacterJP_KilledByNonPlayer");
static_assert(sizeof(CharacterJP_KilledByNonPlayer) == 0x000010, "Wrong size on CharacterJP_KilledByNonPlayer");
static_assert(offsetof(CharacterJP_KilledByNonPlayer, KillerObject) == 0x000000, "Member 'CharacterJP_KilledByNonPlayer::KillerObject' has a wrong offset!");

// Function JP.CharacterJP.KilledByPlayer
// 0x0008 (0x0008 - 0x0000)
struct CharacterJP_KilledByPlayer final
{
public:
	struct FGameplayTag                           KillerPawnTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterJP_KilledByPlayer) == 0x000004, "Wrong alignment on CharacterJP_KilledByPlayer");
static_assert(sizeof(CharacterJP_KilledByPlayer) == 0x000008, "Wrong size on CharacterJP_KilledByPlayer");
static_assert(offsetof(CharacterJP_KilledByPlayer, KillerPawnTag) == 0x000000, "Member 'CharacterJP_KilledByPlayer::KillerPawnTag' has a wrong offset!");

// Function JP.CharacterJP.MovementInputPreProcess
// 0x0020 (0x0020 - 0x0000)
struct CharacterJP_MovementInputPreProcess final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleValue;                                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterJP_MovementInputPreProcess) == 0x000008, "Wrong alignment on CharacterJP_MovementInputPreProcess");
static_assert(sizeof(CharacterJP_MovementInputPreProcess) == 0x000020, "Wrong size on CharacterJP_MovementInputPreProcess");
static_assert(offsetof(CharacterJP_MovementInputPreProcess, WorldDirection) == 0x000000, "Member 'CharacterJP_MovementInputPreProcess::WorldDirection' has a wrong offset!");
static_assert(offsetof(CharacterJP_MovementInputPreProcess, ScaleValue) == 0x000018, "Member 'CharacterJP_MovementInputPreProcess::ScaleValue' has a wrong offset!");
static_assert(offsetof(CharacterJP_MovementInputPreProcess, bForce) == 0x00001C, "Member 'CharacterJP_MovementInputPreProcess::bForce' has a wrong offset!");

// Function JP.CharacterJP.GetCharacterIdTag
// 0x0008 (0x0008 - 0x0000)
struct CharacterJP_GetCharacterIdTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterJP_GetCharacterIdTag) == 0x000004, "Wrong alignment on CharacterJP_GetCharacterIdTag");
static_assert(sizeof(CharacterJP_GetCharacterIdTag) == 0x000008, "Wrong size on CharacterJP_GetCharacterIdTag");
static_assert(offsetof(CharacterJP_GetCharacterIdTag, ReturnValue) == 0x000000, "Member 'CharacterJP_GetCharacterIdTag::ReturnValue' has a wrong offset!");

// Function JP.CharacterJP.GetTeamMaterial
// 0x0008 (0x0008 - 0x0000)
struct CharacterJP_GetTeamMaterial final
{
public:
	class UMaterialInstance*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterJP_GetTeamMaterial) == 0x000008, "Wrong alignment on CharacterJP_GetTeamMaterial");
static_assert(sizeof(CharacterJP_GetTeamMaterial) == 0x000008, "Wrong size on CharacterJP_GetTeamMaterial");
static_assert(offsetof(CharacterJP_GetTeamMaterial, ReturnValue) == 0x000000, "Member 'CharacterJP_GetTeamMaterial::ReturnValue' has a wrong offset!");

// Function JP.CharacterMaskComponent.PopMask
// 0x0008 (0x0008 - 0x0000)
struct CharacterMaskComponent_PopMask final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMaskComponent_PopMask) == 0x000004, "Wrong alignment on CharacterMaskComponent_PopMask");
static_assert(sizeof(CharacterMaskComponent_PopMask) == 0x000008, "Wrong size on CharacterMaskComponent_PopMask");
static_assert(offsetof(CharacterMaskComponent_PopMask, InTag) == 0x000000, "Member 'CharacterMaskComponent_PopMask::InTag' has a wrong offset!");

// Function JP.CharacterMaskComponent.PushMask
// 0x0008 (0x0008 - 0x0000)
struct CharacterMaskComponent_PushMask final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMaskComponent_PushMask) == 0x000004, "Wrong alignment on CharacterMaskComponent_PushMask");
static_assert(sizeof(CharacterMaskComponent_PushMask) == 0x000008, "Wrong size on CharacterMaskComponent_PushMask");
static_assert(offsetof(CharacterMaskComponent_PushMask, InTag) == 0x000000, "Member 'CharacterMaskComponent_PushMask::InTag' has a wrong offset!");

// Function JP.ChargeableWidget.OnStartCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableWidget_OnStartCharge final
{
public:
	float                                         ChargeTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableWidget_OnStartCharge) == 0x000004, "Wrong alignment on ChargeableWidget_OnStartCharge");
static_assert(sizeof(ChargeableWidget_OnStartCharge) == 0x000004, "Wrong size on ChargeableWidget_OnStartCharge");
static_assert(offsetof(ChargeableWidget_OnStartCharge, ChargeTime) == 0x000000, "Member 'ChargeableWidget_OnStartCharge::ChargeTime' has a wrong offset!");

// Function JP.ClientAuthenticationInitializationGameInstanceSubsystem.GetClientGameInitializationFailedDescriptor
// 0x0018 (0x0018 - 0x0000)
struct ClientAuthenticationInitializationGameInstanceSubsystem_GetClientGameInitializationFailedDescriptor final
{
public:
	class FText                                   Body;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCommonGameDialogDescriptor*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientAuthenticationInitializationGameInstanceSubsystem_GetClientGameInitializationFailedDescriptor) == 0x000008, "Wrong alignment on ClientAuthenticationInitializationGameInstanceSubsystem_GetClientGameInitializationFailedDescriptor");
static_assert(sizeof(ClientAuthenticationInitializationGameInstanceSubsystem_GetClientGameInitializationFailedDescriptor) == 0x000018, "Wrong size on ClientAuthenticationInitializationGameInstanceSubsystem_GetClientGameInitializationFailedDescriptor");
static_assert(offsetof(ClientAuthenticationInitializationGameInstanceSubsystem_GetClientGameInitializationFailedDescriptor, Body) == 0x000000, "Member 'ClientAuthenticationInitializationGameInstanceSubsystem_GetClientGameInitializationFailedDescriptor::Body' has a wrong offset!");
static_assert(offsetof(ClientAuthenticationInitializationGameInstanceSubsystem_GetClientGameInitializationFailedDescriptor, ReturnValue) == 0x000010, "Member 'ClientAuthenticationInitializationGameInstanceSubsystem_GetClientGameInitializationFailedDescriptor::ReturnValue' has a wrong offset!");

// Function JP.ClientAuthenticationInitializationGameInstanceSubsystem.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct ClientAuthenticationInitializationGameInstanceSubsystem_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientAuthenticationInitializationGameInstanceSubsystem_IsFinished) == 0x000001, "Wrong alignment on ClientAuthenticationInitializationGameInstanceSubsystem_IsFinished");
static_assert(sizeof(ClientAuthenticationInitializationGameInstanceSubsystem_IsFinished) == 0x000001, "Wrong size on ClientAuthenticationInitializationGameInstanceSubsystem_IsFinished");
static_assert(offsetof(ClientAuthenticationInitializationGameInstanceSubsystem_IsFinished, ReturnValue) == 0x000000, "Member 'ClientAuthenticationInitializationGameInstanceSubsystem_IsFinished::ReturnValue' has a wrong offset!");

// Function JP.SocialUserEntryWidget.GetListItemPadding
// 0x0010 (0x0010 - 0x0000)
struct SocialUserEntryWidget_GetListItemPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialUserEntryWidget_GetListItemPadding) == 0x000004, "Wrong alignment on SocialUserEntryWidget_GetListItemPadding");
static_assert(sizeof(SocialUserEntryWidget_GetListItemPadding) == 0x000010, "Wrong size on SocialUserEntryWidget_GetListItemPadding");
static_assert(offsetof(SocialUserEntryWidget_GetListItemPadding, ReturnValue) == 0x000000, "Member 'SocialUserEntryWidget_GetListItemPadding::ReturnValue' has a wrong offset!");

// Function JP.SocialUserEntryWidget.SetAvatar
// 0x0008 (0x0008 - 0x0000)
struct SocialUserEntryWidget_SetAvatar final
{
public:
	class UOnlineServicesUserBase*                User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialUserEntryWidget_SetAvatar) == 0x000008, "Wrong alignment on SocialUserEntryWidget_SetAvatar");
static_assert(sizeof(SocialUserEntryWidget_SetAvatar) == 0x000008, "Wrong size on SocialUserEntryWidget_SetAvatar");
static_assert(offsetof(SocialUserEntryWidget_SetAvatar, User) == 0x000000, "Member 'SocialUserEntryWidget_SetAvatar::User' has a wrong offset!");

// Function JP.DeathDurabilityChangeBehavior.GetNewDurability
// 0x0010 (0x0010 - 0x0000)
struct DeathDurabilityChangeBehavior_GetNewDurability final
{
public:
	class UItemInstance*                          Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeathDurabilityChangeBehavior_GetNewDurability) == 0x000008, "Wrong alignment on DeathDurabilityChangeBehavior_GetNewDurability");
static_assert(sizeof(DeathDurabilityChangeBehavior_GetNewDurability) == 0x000010, "Wrong size on DeathDurabilityChangeBehavior_GetNewDurability");
static_assert(offsetof(DeathDurabilityChangeBehavior_GetNewDurability, Item) == 0x000000, "Member 'DeathDurabilityChangeBehavior_GetNewDurability::Item' has a wrong offset!");
static_assert(offsetof(DeathDurabilityChangeBehavior_GetNewDurability, ReturnValue) == 0x000008, "Member 'DeathDurabilityChangeBehavior_GetNewDurability::ReturnValue' has a wrong offset!");

// Function JP.LyraConfirmationScreen.HandleTapToCloseZoneMouseButtonDown
// 0x0168 (0x0168 - 0x0000)
struct LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown) == 0x000008, "Wrong alignment on LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown");
static_assert(sizeof(LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown) == 0x000168, "Wrong size on LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown");
static_assert(offsetof(LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown, MyGeometry) == 0x000000, "Member 'LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown, MouseEvent) == 0x000038, "Member 'LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown, ReturnValue) == 0x0000B0, "Member 'LyraConfirmationScreen_HandleTapToCloseZoneMouseButtonDown::ReturnValue' has a wrong offset!");

// Function JP.LyraConfirmationScreen.GetEntryBoxButtonsWidget
// 0x0008 (0x0008 - 0x0000)
struct LyraConfirmationScreen_GetEntryBoxButtonsWidget final
{
public:
	class UDynamicEntryBox*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraConfirmationScreen_GetEntryBoxButtonsWidget) == 0x000008, "Wrong alignment on LyraConfirmationScreen_GetEntryBoxButtonsWidget");
static_assert(sizeof(LyraConfirmationScreen_GetEntryBoxButtonsWidget) == 0x000008, "Wrong size on LyraConfirmationScreen_GetEntryBoxButtonsWidget");
static_assert(offsetof(LyraConfirmationScreen_GetEntryBoxButtonsWidget, ReturnValue) == 0x000000, "Member 'LyraConfirmationScreen_GetEntryBoxButtonsWidget::ReturnValue' has a wrong offset!");

// Function JP.DeathRespawnTimeWindowFunctionLibrary.GetTimeUntilEndOfTimeWindow
// 0x0020 (0x0020 - 0x0000)
struct DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeathRespawnTimeWindow                DeathRespawnTimeWindow;                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow) == 0x000008, "Wrong alignment on DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow");
static_assert(sizeof(DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow) == 0x000020, "Wrong size on DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow, WorldContext) == 0x000000, "Member 'DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow::WorldContext' has a wrong offset!");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow, DeathRespawnTimeWindow) == 0x000008, "Member 'DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow::DeathRespawnTimeWindow' has a wrong offset!");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow, ReturnValue) == 0x000018, "Member 'DeathRespawnTimeWindowFunctionLibrary_GetTimeUntilEndOfTimeWindow::ReturnValue' has a wrong offset!");

// Function JP.DeathRespawnTimeWindowFunctionLibrary.IsAfterTimeWindow
// 0x0020 (0x0020 - 0x0000)
struct DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeathRespawnTimeWindow                DeathRespawnTimeWindow;                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow) == 0x000008, "Wrong alignment on DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow");
static_assert(sizeof(DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow) == 0x000020, "Wrong size on DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow, WorldContext) == 0x000000, "Member 'DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow::WorldContext' has a wrong offset!");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow, DeathRespawnTimeWindow) == 0x000008, "Member 'DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow::DeathRespawnTimeWindow' has a wrong offset!");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow, ReturnValue) == 0x000018, "Member 'DeathRespawnTimeWindowFunctionLibrary_IsAfterTimeWindow::ReturnValue' has a wrong offset!");

// Function JP.DeathRespawnTimeWindowFunctionLibrary.IsBeforeTimeWindow
// 0x0020 (0x0020 - 0x0000)
struct DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeathRespawnTimeWindow                DeathRespawnTimeWindow;                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow) == 0x000008, "Wrong alignment on DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow");
static_assert(sizeof(DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow) == 0x000020, "Wrong size on DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow, WorldContext) == 0x000000, "Member 'DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow::WorldContext' has a wrong offset!");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow, DeathRespawnTimeWindow) == 0x000008, "Member 'DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow::DeathRespawnTimeWindow' has a wrong offset!");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow, ReturnValue) == 0x000018, "Member 'DeathRespawnTimeWindowFunctionLibrary_IsBeforeTimeWindow::ReturnValue' has a wrong offset!");

// Function JP.DeathRespawnTimeWindowFunctionLibrary.IsInTimeWindow
// 0x0020 (0x0020 - 0x0000)
struct DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeathRespawnTimeWindow                DeathRespawnTimeWindow;                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow) == 0x000008, "Wrong alignment on DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow");
static_assert(sizeof(DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow) == 0x000020, "Wrong size on DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow, WorldContext) == 0x000000, "Member 'DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow::WorldContext' has a wrong offset!");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow, DeathRespawnTimeWindow) == 0x000008, "Member 'DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow::DeathRespawnTimeWindow' has a wrong offset!");
static_assert(offsetof(DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow, ReturnValue) == 0x000018, "Member 'DeathRespawnTimeWindowFunctionLibrary_IsInTimeWindow::ReturnValue' has a wrong offset!");

// Function JP.LyraFrontendStateComponent.OnUserInitialized
// 0x0028 (0x0028 - 0x0000)
struct LyraFrontendStateComponent_OnUserInitialized final
{
public:
	const class UCommonUserInfo*                  UserInfo;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Error;                                             // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	ECommonUserPrivilege                          RequestedPrivilege;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonUserOnlineContext                      OnlineContext;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraFrontendStateComponent_OnUserInitialized) == 0x000008, "Wrong alignment on LyraFrontendStateComponent_OnUserInitialized");
static_assert(sizeof(LyraFrontendStateComponent_OnUserInitialized) == 0x000028, "Wrong size on LyraFrontendStateComponent_OnUserInitialized");
static_assert(offsetof(LyraFrontendStateComponent_OnUserInitialized, UserInfo) == 0x000000, "Member 'LyraFrontendStateComponent_OnUserInitialized::UserInfo' has a wrong offset!");
static_assert(offsetof(LyraFrontendStateComponent_OnUserInitialized, bSuccess) == 0x000008, "Member 'LyraFrontendStateComponent_OnUserInitialized::bSuccess' has a wrong offset!");
static_assert(offsetof(LyraFrontendStateComponent_OnUserInitialized, Error) == 0x000010, "Member 'LyraFrontendStateComponent_OnUserInitialized::Error' has a wrong offset!");
static_assert(offsetof(LyraFrontendStateComponent_OnUserInitialized, RequestedPrivilege) == 0x000020, "Member 'LyraFrontendStateComponent_OnUserInitialized::RequestedPrivilege' has a wrong offset!");
static_assert(offsetof(LyraFrontendStateComponent_OnUserInitialized, OnlineContext) == 0x000021, "Member 'LyraFrontendStateComponent_OnUserInitialized::OnlineContext' has a wrong offset!");

// Function JP.IndicatorLibrary.GetIndicatorManagerComponent
// 0x0010 (0x0010 - 0x0000)
struct IndicatorLibrary_GetIndicatorManagerComponent final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULyraIndicatorManagerComponent*         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorLibrary_GetIndicatorManagerComponent) == 0x000008, "Wrong alignment on IndicatorLibrary_GetIndicatorManagerComponent");
static_assert(sizeof(IndicatorLibrary_GetIndicatorManagerComponent) == 0x000010, "Wrong size on IndicatorLibrary_GetIndicatorManagerComponent");
static_assert(offsetof(IndicatorLibrary_GetIndicatorManagerComponent, Controller) == 0x000000, "Member 'IndicatorLibrary_GetIndicatorManagerComponent::Controller' has a wrong offset!");
static_assert(offsetof(IndicatorLibrary_GetIndicatorManagerComponent, ReturnValue) == 0x000008, "Member 'IndicatorLibrary_GetIndicatorManagerComponent::ReturnValue' has a wrong offset!");

// Function JP.DropBehavior.GetDroppedAmmoCount
// 0x0010 (0x0010 - 0x0000)
struct DropBehavior_GetDroppedAmmoCount final
{
public:
	class UItemInstance*                          Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DropBehavior_GetDroppedAmmoCount) == 0x000008, "Wrong alignment on DropBehavior_GetDroppedAmmoCount");
static_assert(sizeof(DropBehavior_GetDroppedAmmoCount) == 0x000010, "Wrong size on DropBehavior_GetDroppedAmmoCount");
static_assert(offsetof(DropBehavior_GetDroppedAmmoCount, Item) == 0x000000, "Member 'DropBehavior_GetDroppedAmmoCount::Item' has a wrong offset!");
static_assert(offsetof(DropBehavior_GetDroppedAmmoCount, ReturnValue) == 0x000008, "Member 'DropBehavior_GetDroppedAmmoCount::ReturnValue' has a wrong offset!");

// Function JP.PlayerEconomy.OnRep_Money
// 0x0008 (0x0008 - 0x0000)
struct PlayerEconomy_OnRep_Money final
{
public:
	struct FResourceData                          OldMoney;                                          // 0x0000(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerEconomy_OnRep_Money) == 0x000004, "Wrong alignment on PlayerEconomy_OnRep_Money");
static_assert(sizeof(PlayerEconomy_OnRep_Money) == 0x000008, "Wrong size on PlayerEconomy_OnRep_Money");
static_assert(offsetof(PlayerEconomy_OnRep_Money, OldMoney) == 0x000000, "Member 'PlayerEconomy_OnRep_Money::OldMoney' has a wrong offset!");

// Function JP.PlayerEconomy.OnRep_PassiveIncomeAmount
// 0x0008 (0x0008 - 0x0000)
struct PlayerEconomy_OnRep_PassiveIncomeAmount final
{
public:
	struct FResourceData                          OldPassiveIncome;                                  // 0x0000(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerEconomy_OnRep_PassiveIncomeAmount) == 0x000004, "Wrong alignment on PlayerEconomy_OnRep_PassiveIncomeAmount");
static_assert(sizeof(PlayerEconomy_OnRep_PassiveIncomeAmount) == 0x000008, "Wrong size on PlayerEconomy_OnRep_PassiveIncomeAmount");
static_assert(offsetof(PlayerEconomy_OnRep_PassiveIncomeAmount, OldPassiveIncome) == 0x000000, "Member 'PlayerEconomy_OnRep_PassiveIncomeAmount::OldPassiveIncome' has a wrong offset!");

// Function JP.PlayerEconomy.OnRep_Wood
// 0x0008 (0x0008 - 0x0000)
struct PlayerEconomy_OnRep_Wood final
{
public:
	struct FResourceData                          OldWood;                                           // 0x0000(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerEconomy_OnRep_Wood) == 0x000004, "Wrong alignment on PlayerEconomy_OnRep_Wood");
static_assert(sizeof(PlayerEconomy_OnRep_Wood) == 0x000008, "Wrong size on PlayerEconomy_OnRep_Wood");
static_assert(offsetof(PlayerEconomy_OnRep_Wood, OldWood) == 0x000000, "Member 'PlayerEconomy_OnRep_Wood::OldWood' has a wrong offset!");

// Function JP.ObjectiveDefinition.FindActionByType
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveDefinition_FindActionByType final
{
public:
	TSubclassOf<class UObjectiveAction>           ActionType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObjectiveAction*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveDefinition_FindActionByType) == 0x000008, "Wrong alignment on ObjectiveDefinition_FindActionByType");
static_assert(sizeof(ObjectiveDefinition_FindActionByType) == 0x000010, "Wrong size on ObjectiveDefinition_FindActionByType");
static_assert(offsetof(ObjectiveDefinition_FindActionByType, ActionType) == 0x000000, "Member 'ObjectiveDefinition_FindActionByType::ActionType' has a wrong offset!");
static_assert(offsetof(ObjectiveDefinition_FindActionByType, ReturnValue) == 0x000008, "Member 'ObjectiveDefinition_FindActionByType::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveDefinition.FindActionsByType
// 0x0018 (0x0018 - 0x0000)
struct ObjectiveDefinition_FindActionsByType final
{
public:
	TSubclassOf<class UObjectiveAction>           ActionType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObjectiveAction*>               ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveDefinition_FindActionsByType) == 0x000008, "Wrong alignment on ObjectiveDefinition_FindActionsByType");
static_assert(sizeof(ObjectiveDefinition_FindActionsByType) == 0x000018, "Wrong size on ObjectiveDefinition_FindActionsByType");
static_assert(offsetof(ObjectiveDefinition_FindActionsByType, ActionType) == 0x000000, "Member 'ObjectiveDefinition_FindActionsByType::ActionType' has a wrong offset!");
static_assert(offsetof(ObjectiveDefinition_FindActionsByType, ReturnValue) == 0x000008, "Member 'ObjectiveDefinition_FindActionsByType::ReturnValue' has a wrong offset!");

// Function JP.EnvironmentSelectionWidgetBase.SelectEnvironment
// 0x0020 (0x0020 - 0x0000)
struct EnvironmentSelectionWidgetBase_SelectEnvironment final
{
public:
	struct FEnvironmentDefinition                 Environment;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentSelectionWidgetBase_SelectEnvironment) == 0x000008, "Wrong alignment on EnvironmentSelectionWidgetBase_SelectEnvironment");
static_assert(sizeof(EnvironmentSelectionWidgetBase_SelectEnvironment) == 0x000020, "Wrong size on EnvironmentSelectionWidgetBase_SelectEnvironment");
static_assert(offsetof(EnvironmentSelectionWidgetBase_SelectEnvironment, Environment) == 0x000000, "Member 'EnvironmentSelectionWidgetBase_SelectEnvironment::Environment' has a wrong offset!");

// Function JP.TeamSetterInterface.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct TeamSetterInterface_SetTeam final
{
public:
	uint8                                         NewTeam;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamSetterInterface_SetTeam) == 0x000001, "Wrong alignment on TeamSetterInterface_SetTeam");
static_assert(sizeof(TeamSetterInterface_SetTeam) == 0x000001, "Wrong size on TeamSetterInterface_SetTeam");
static_assert(offsetof(TeamSetterInterface_SetTeam, NewTeam) == 0x000000, "Member 'TeamSetterInterface_SetTeam::NewTeam' has a wrong offset!");

// Function JP.FinancesBundlePurchaseListWidget.OnBundleClicked
// 0x0010 (0x0010 - 0x0000)
struct FinancesBundlePurchaseListWidget_OnBundleClicked final
{
public:
	class FString                                 PlatformID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FinancesBundlePurchaseListWidget_OnBundleClicked) == 0x000008, "Wrong alignment on FinancesBundlePurchaseListWidget_OnBundleClicked");
static_assert(sizeof(FinancesBundlePurchaseListWidget_OnBundleClicked) == 0x000010, "Wrong size on FinancesBundlePurchaseListWidget_OnBundleClicked");
static_assert(offsetof(FinancesBundlePurchaseListWidget_OnBundleClicked, PlatformID) == 0x000000, "Member 'FinancesBundlePurchaseListWidget_OnBundleClicked::PlatformID' has a wrong offset!");

// Function JP.FinancesBundlePurchaseListWidget.SetStoreOffers
// 0x0010 (0x0010 - 0x0000)
struct FinancesBundlePurchaseListWidget_SetStoreOffers final
{
public:
	TArray<struct FPlatformStoreOffer>            PlatformStoreOffers;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FinancesBundlePurchaseListWidget_SetStoreOffers) == 0x000008, "Wrong alignment on FinancesBundlePurchaseListWidget_SetStoreOffers");
static_assert(sizeof(FinancesBundlePurchaseListWidget_SetStoreOffers) == 0x000010, "Wrong size on FinancesBundlePurchaseListWidget_SetStoreOffers");
static_assert(offsetof(FinancesBundlePurchaseListWidget_SetStoreOffers, PlatformStoreOffers) == 0x000000, "Member 'FinancesBundlePurchaseListWidget_SetStoreOffers::PlatformStoreOffers' has a wrong offset!");

// Function JP.FinancesWidget.ChangeThrobberMessage
// 0x0001 (0x0001 - 0x0000)
struct FinancesWidget_ChangeThrobberMessage final
{
public:
	EPlatformStoreState                           StoreState;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FinancesWidget_ChangeThrobberMessage) == 0x000001, "Wrong alignment on FinancesWidget_ChangeThrobberMessage");
static_assert(sizeof(FinancesWidget_ChangeThrobberMessage) == 0x000001, "Wrong size on FinancesWidget_ChangeThrobberMessage");
static_assert(offsetof(FinancesWidget_ChangeThrobberMessage, StoreState) == 0x000000, "Member 'FinancesWidget_ChangeThrobberMessage::StoreState' has a wrong offset!");

// Function JP.FinancesWidget.ShowPurchaseErrorModal
// 0x0018 (0x0018 - 0x0000)
struct FinancesWidget_ShowPurchaseErrorModal final
{
public:
	EPlatformStoreState                           StoreState;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TransactionId;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FinancesWidget_ShowPurchaseErrorModal) == 0x000008, "Wrong alignment on FinancesWidget_ShowPurchaseErrorModal");
static_assert(sizeof(FinancesWidget_ShowPurchaseErrorModal) == 0x000018, "Wrong size on FinancesWidget_ShowPurchaseErrorModal");
static_assert(offsetof(FinancesWidget_ShowPurchaseErrorModal, StoreState) == 0x000000, "Member 'FinancesWidget_ShowPurchaseErrorModal::StoreState' has a wrong offset!");
static_assert(offsetof(FinancesWidget_ShowPurchaseErrorModal, TransactionId) == 0x000008, "Member 'FinancesWidget_ShowPurchaseErrorModal::TransactionId' has a wrong offset!");

// Function JP.FinancesWidget.ShowPurchaseSuccessModal
// 0x0058 (0x0058 - 0x0000)
struct FinancesWidget_ShowPurchaseSuccessModal final
{
public:
	bool                                          bWalletUpdateSucceeded;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlatformStoreOffer                    StoreOffer;                                        // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 TransactionId;                                     // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FinancesWidget_ShowPurchaseSuccessModal) == 0x000008, "Wrong alignment on FinancesWidget_ShowPurchaseSuccessModal");
static_assert(sizeof(FinancesWidget_ShowPurchaseSuccessModal) == 0x000058, "Wrong size on FinancesWidget_ShowPurchaseSuccessModal");
static_assert(offsetof(FinancesWidget_ShowPurchaseSuccessModal, bWalletUpdateSucceeded) == 0x000000, "Member 'FinancesWidget_ShowPurchaseSuccessModal::bWalletUpdateSucceeded' has a wrong offset!");
static_assert(offsetof(FinancesWidget_ShowPurchaseSuccessModal, StoreOffer) == 0x000008, "Member 'FinancesWidget_ShowPurchaseSuccessModal::StoreOffer' has a wrong offset!");
static_assert(offsetof(FinancesWidget_ShowPurchaseSuccessModal, TransactionId) == 0x000048, "Member 'FinancesWidget_ShowPurchaseSuccessModal::TransactionId' has a wrong offset!");

// Function JP.TraceFromPosition.GetTraceFromPosition
// 0x0030 (0x0030 - 0x0000)
struct TraceFromPosition_GetTraceFromPosition final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TraceFromPosition_GetTraceFromPosition) == 0x000008, "Wrong alignment on TraceFromPosition_GetTraceFromPosition");
static_assert(sizeof(TraceFromPosition_GetTraceFromPosition) == 0x000030, "Wrong size on TraceFromPosition_GetTraceFromPosition");
static_assert(offsetof(TraceFromPosition_GetTraceFromPosition, Location) == 0x000000, "Member 'TraceFromPosition_GetTraceFromPosition::Location' has a wrong offset!");
static_assert(offsetof(TraceFromPosition_GetTraceFromPosition, Rotation) == 0x000018, "Member 'TraceFromPosition_GetTraceFromPosition::Rotation' has a wrong offset!");

// Function JP.GameDataGameInstanceSubsystem.ForceUpdateGameData
// 0x0020 (0x0020 - 0x0000)
struct GameDataGameInstanceSubsystem_ForceUpdateGameData final
{
public:
	struct FGameplayTagContainer                  KeysToUpdate;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGameInstanceSubsystem_ForceUpdateGameData) == 0x000008, "Wrong alignment on GameDataGameInstanceSubsystem_ForceUpdateGameData");
static_assert(sizeof(GameDataGameInstanceSubsystem_ForceUpdateGameData) == 0x000020, "Wrong size on GameDataGameInstanceSubsystem_ForceUpdateGameData");
static_assert(offsetof(GameDataGameInstanceSubsystem_ForceUpdateGameData, KeysToUpdate) == 0x000000, "Member 'GameDataGameInstanceSubsystem_ForceUpdateGameData::KeysToUpdate' has a wrong offset!");

// Function JP.GameDataGameInstanceSubsystem.SoftUpdateGameData
// 0x0020 (0x0020 - 0x0000)
struct GameDataGameInstanceSubsystem_SoftUpdateGameData final
{
public:
	struct FGameplayTagContainer                  KeysToUpdate;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataGameInstanceSubsystem_SoftUpdateGameData) == 0x000008, "Wrong alignment on GameDataGameInstanceSubsystem_SoftUpdateGameData");
static_assert(sizeof(GameDataGameInstanceSubsystem_SoftUpdateGameData) == 0x000020, "Wrong size on GameDataGameInstanceSubsystem_SoftUpdateGameData");
static_assert(offsetof(GameDataGameInstanceSubsystem_SoftUpdateGameData, KeysToUpdate) == 0x000000, "Member 'GameDataGameInstanceSubsystem_SoftUpdateGameData::KeysToUpdate' has a wrong offset!");

// Function JP.GameInstanceJP.CacheNetworkError
// 0x0001 (0x0001 - 0x0000)
struct GameInstanceJP_CacheNetworkError final
{
public:
	ENetworkFailure                               FailureType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameInstanceJP_CacheNetworkError) == 0x000001, "Wrong alignment on GameInstanceJP_CacheNetworkError");
static_assert(sizeof(GameInstanceJP_CacheNetworkError) == 0x000001, "Wrong size on GameInstanceJP_CacheNetworkError");
static_assert(offsetof(GameInstanceJP_CacheNetworkError, FailureType) == 0x000000, "Member 'GameInstanceJP_CacheNetworkError::FailureType' has a wrong offset!");

// Function JP.GameInstanceJP.DisplayOkDialog
// 0x0020 (0x0020 - 0x0000)
struct GameInstanceJP_DisplayOkDialog final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameInstanceJP_DisplayOkDialog) == 0x000008, "Wrong alignment on GameInstanceJP_DisplayOkDialog");
static_assert(sizeof(GameInstanceJP_DisplayOkDialog) == 0x000020, "Wrong size on GameInstanceJP_DisplayOkDialog");
static_assert(offsetof(GameInstanceJP_DisplayOkDialog, Header) == 0x000000, "Member 'GameInstanceJP_DisplayOkDialog::Header' has a wrong offset!");
static_assert(offsetof(GameInstanceJP_DisplayOkDialog, Body) == 0x000010, "Member 'GameInstanceJP_DisplayOkDialog::Body' has a wrong offset!");

// Function JP.GameInstanceJP.K2_ReconnectToGameSession
// 0x0008 (0x0008 - 0x0000)
struct GameInstanceJP_K2_ReconnectToGameSession final
{
public:
	class UAuthenticationInitialization_RecoverMatch* RecoverMatch;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameInstanceJP_K2_ReconnectToGameSession) == 0x000008, "Wrong alignment on GameInstanceJP_K2_ReconnectToGameSession");
static_assert(sizeof(GameInstanceJP_K2_ReconnectToGameSession) == 0x000008, "Wrong size on GameInstanceJP_K2_ReconnectToGameSession");
static_assert(offsetof(GameInstanceJP_K2_ReconnectToGameSession, RecoverMatch) == 0x000000, "Member 'GameInstanceJP_K2_ReconnectToGameSession::RecoverMatch' has a wrong offset!");

// Function JP.GameInstanceJP.GetOkDialogDescriptor
// 0x0028 (0x0028 - 0x0000)
struct GameInstanceJP_GetOkDialogDescriptor final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCommonGameDialogDescriptor*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameInstanceJP_GetOkDialogDescriptor) == 0x000008, "Wrong alignment on GameInstanceJP_GetOkDialogDescriptor");
static_assert(sizeof(GameInstanceJP_GetOkDialogDescriptor) == 0x000028, "Wrong size on GameInstanceJP_GetOkDialogDescriptor");
static_assert(offsetof(GameInstanceJP_GetOkDialogDescriptor, Header) == 0x000000, "Member 'GameInstanceJP_GetOkDialogDescriptor::Header' has a wrong offset!");
static_assert(offsetof(GameInstanceJP_GetOkDialogDescriptor, Body) == 0x000010, "Member 'GameInstanceJP_GetOkDialogDescriptor::Body' has a wrong offset!");
static_assert(offsetof(GameInstanceJP_GetOkDialogDescriptor, ReturnValue) == 0x000020, "Member 'GameInstanceJP_GetOkDialogDescriptor::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveTrackingManager.ChangeTrackedObjective
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveTrackingManager_ChangeTrackedObjective final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveTrackingManager_ChangeTrackedObjective) == 0x000008, "Wrong alignment on ObjectiveTrackingManager_ChangeTrackedObjective");
static_assert(sizeof(ObjectiveTrackingManager_ChangeTrackedObjective) == 0x000008, "Wrong size on ObjectiveTrackingManager_ChangeTrackedObjective");
static_assert(offsetof(ObjectiveTrackingManager_ChangeTrackedObjective, PlayerState) == 0x000000, "Member 'ObjectiveTrackingManager_ChangeTrackedObjective::PlayerState' has a wrong offset!");

// Function JP.ObjectiveTrackingManager.IsTrackingObjective
// 0x0018 (0x0018 - 0x0000)
struct ObjectiveTrackingManager_IsTrackingObjective final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObjectiveDefinition*                   ObjectiveDefinition;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectiveTrackingManager_IsTrackingObjective) == 0x000008, "Wrong alignment on ObjectiveTrackingManager_IsTrackingObjective");
static_assert(sizeof(ObjectiveTrackingManager_IsTrackingObjective) == 0x000018, "Wrong size on ObjectiveTrackingManager_IsTrackingObjective");
static_assert(offsetof(ObjectiveTrackingManager_IsTrackingObjective, PlayerState) == 0x000000, "Member 'ObjectiveTrackingManager_IsTrackingObjective::PlayerState' has a wrong offset!");
static_assert(offsetof(ObjectiveTrackingManager_IsTrackingObjective, ObjectiveDefinition) == 0x000008, "Member 'ObjectiveTrackingManager_IsTrackingObjective::ObjectiveDefinition' has a wrong offset!");
static_assert(offsetof(ObjectiveTrackingManager_IsTrackingObjective, ReturnValue) == 0x000010, "Member 'ObjectiveTrackingManager_IsTrackingObjective::ReturnValue' has a wrong offset!");

// DelegateFunction JP.ObjectiveTrackingManager.ObjectiveTrackingDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveTrackingManager_ObjectiveTrackingDelegate__DelegateSignature final
{
public:
	TArray<struct FObjectiveTracker>              ObjectiveTrackers_0;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveTrackingManager_ObjectiveTrackingDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ObjectiveTrackingManager_ObjectiveTrackingDelegate__DelegateSignature");
static_assert(sizeof(ObjectiveTrackingManager_ObjectiveTrackingDelegate__DelegateSignature) == 0x000010, "Wrong size on ObjectiveTrackingManager_ObjectiveTrackingDelegate__DelegateSignature");
static_assert(offsetof(ObjectiveTrackingManager_ObjectiveTrackingDelegate__DelegateSignature, ObjectiveTrackers_0) == 0x000000, "Member 'ObjectiveTrackingManager_ObjectiveTrackingDelegate__DelegateSignature::ObjectiveTrackers_0' has a wrong offset!");

// Function JP.ObjectiveTrackingManager.RemoveTrackersForObjective
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveTrackingManager_RemoveTrackersForObjective final
{
public:
	struct FObjectiveAndOwningPlayer              ObjectiveDefinition;                               // 0x0000(0x0010)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveTrackingManager_RemoveTrackersForObjective) == 0x000008, "Wrong alignment on ObjectiveTrackingManager_RemoveTrackersForObjective");
static_assert(sizeof(ObjectiveTrackingManager_RemoveTrackersForObjective) == 0x000010, "Wrong size on ObjectiveTrackingManager_RemoveTrackersForObjective");
static_assert(offsetof(ObjectiveTrackingManager_RemoveTrackersForObjective, ObjectiveDefinition) == 0x000000, "Member 'ObjectiveTrackingManager_RemoveTrackersForObjective::ObjectiveDefinition' has a wrong offset!");

// Function JP.GameModeJP_MainMenu.OnExperienceLoaded
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_MainMenu_OnExperienceLoaded final
{
public:
	const class UExperienceDefinition*            Definition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_MainMenu_OnExperienceLoaded) == 0x000008, "Wrong alignment on GameModeJP_MainMenu_OnExperienceLoaded");
static_assert(sizeof(GameModeJP_MainMenu_OnExperienceLoaded) == 0x000008, "Wrong size on GameModeJP_MainMenu_OnExperienceLoaded");
static_assert(offsetof(GameModeJP_MainMenu_OnExperienceLoaded, Definition) == 0x000000, "Member 'GameModeJP_MainMenu_OnExperienceLoaded::Definition' has a wrong offset!");

// Function JP.GameModeJP_MainMenu.ShowUserWasBannedDialog
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_MainMenu_ShowUserWasBannedDialog final
{
public:
	class UCommonGameDialogDescriptor*            Descriptor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_MainMenu_ShowUserWasBannedDialog) == 0x000008, "Wrong alignment on GameModeJP_MainMenu_ShowUserWasBannedDialog");
static_assert(sizeof(GameModeJP_MainMenu_ShowUserWasBannedDialog) == 0x000008, "Wrong size on GameModeJP_MainMenu_ShowUserWasBannedDialog");
static_assert(offsetof(GameModeJP_MainMenu_ShowUserWasBannedDialog, Descriptor) == 0x000000, "Member 'GameModeJP_MainMenu_ShowUserWasBannedDialog::Descriptor' has a wrong offset!");

// Function JP.GameModeJP_Tutorial.OnExperienceLoaded
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_Tutorial_OnExperienceLoaded final
{
public:
	const class UExperienceDefinition*            Definition;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeJP_Tutorial_OnExperienceLoaded) == 0x000008, "Wrong alignment on GameModeJP_Tutorial_OnExperienceLoaded");
static_assert(sizeof(GameModeJP_Tutorial_OnExperienceLoaded) == 0x000008, "Wrong size on GameModeJP_Tutorial_OnExperienceLoaded");
static_assert(offsetof(GameModeJP_Tutorial_OnExperienceLoaded, Definition) == 0x000000, "Member 'GameModeJP_Tutorial_OnExperienceLoaded::Definition' has a wrong offset!");

// Function JP.GameplayAbilityJP.OnInputReleased
// 0x0004 (0x0004 - 0x0000)
struct GameplayAbilityJP_OnInputReleased final
{
public:
	float                                         TimeHeld;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityJP_OnInputReleased) == 0x000004, "Wrong alignment on GameplayAbilityJP_OnInputReleased");
static_assert(sizeof(GameplayAbilityJP_OnInputReleased) == 0x000004, "Wrong size on GameplayAbilityJP_OnInputReleased");
static_assert(offsetof(GameplayAbilityJP_OnInputReleased, TimeHeld) == 0x000000, "Member 'GameplayAbilityJP_OnInputReleased::TimeHeld' has a wrong offset!");

// Function JP.GameplayAbility_NeighborSpecialAbilityBase.GetDefinitionFromSourceObject
// 0x0010 (0x0010 - 0x0000)
struct GameplayAbility_NeighborSpecialAbilityBase_GetDefinitionFromSourceObject final
{
public:
	TSubclassOf<class UNeighborSpecialAbilityDefinition> DefinitionType;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNeighborSpecialAbilityDefinition*      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_NeighborSpecialAbilityBase_GetDefinitionFromSourceObject) == 0x000008, "Wrong alignment on GameplayAbility_NeighborSpecialAbilityBase_GetDefinitionFromSourceObject");
static_assert(sizeof(GameplayAbility_NeighborSpecialAbilityBase_GetDefinitionFromSourceObject) == 0x000010, "Wrong size on GameplayAbility_NeighborSpecialAbilityBase_GetDefinitionFromSourceObject");
static_assert(offsetof(GameplayAbility_NeighborSpecialAbilityBase_GetDefinitionFromSourceObject, DefinitionType) == 0x000000, "Member 'GameplayAbility_NeighborSpecialAbilityBase_GetDefinitionFromSourceObject::DefinitionType' has a wrong offset!");
static_assert(offsetof(GameplayAbility_NeighborSpecialAbilityBase_GetDefinitionFromSourceObject, ReturnValue) == 0x000008, "Member 'GameplayAbility_NeighborSpecialAbilityBase_GetDefinitionFromSourceObject::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP.SendTeamMessage
// 0x0018 (0x0018 - 0x0000)
struct GameStateJP_SendTeamMessage final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InMessage;                                         // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_SendTeamMessage) == 0x000008, "Wrong alignment on GameStateJP_SendTeamMessage");
static_assert(sizeof(GameStateJP_SendTeamMessage) == 0x000018, "Wrong size on GameStateJP_SendTeamMessage");
static_assert(offsetof(GameStateJP_SendTeamMessage, TeamId) == 0x000000, "Member 'GameStateJP_SendTeamMessage::TeamId' has a wrong offset!");
static_assert(offsetof(GameStateJP_SendTeamMessage, InMessage) == 0x000004, "Member 'GameStateJP_SendTeamMessage::InMessage' has a wrong offset!");
static_assert(offsetof(GameStateJP_SendTeamMessage, WorldContextObject) == 0x000010, "Member 'GameStateJP_SendTeamMessage::WorldContextObject' has a wrong offset!");

// Function JP.GameStateJP.DisplayMessageToLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct GameStateJP_DisplayMessageToLocalPlayer final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_DisplayMessageToLocalPlayer) == 0x000004, "Wrong alignment on GameStateJP_DisplayMessageToLocalPlayer");
static_assert(sizeof(GameStateJP_DisplayMessageToLocalPlayer) == 0x000008, "Wrong size on GameStateJP_DisplayMessageToLocalPlayer");
static_assert(offsetof(GameStateJP_DisplayMessageToLocalPlayer, Message) == 0x000000, "Member 'GameStateJP_DisplayMessageToLocalPlayer::Message' has a wrong offset!");

// Function JP.GameStateJP.DoSendTeamMessage
// 0x000C (0x000C - 0x0000)
struct GameStateJP_DoSendTeamMessage final
{
public:
	uint8                                         InTeamID;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InMessage;                                         // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_DoSendTeamMessage) == 0x000004, "Wrong alignment on GameStateJP_DoSendTeamMessage");
static_assert(sizeof(GameStateJP_DoSendTeamMessage) == 0x00000C, "Wrong size on GameStateJP_DoSendTeamMessage");
static_assert(offsetof(GameStateJP_DoSendTeamMessage, InTeamID) == 0x000000, "Member 'GameStateJP_DoSendTeamMessage::InTeamID' has a wrong offset!");
static_assert(offsetof(GameStateJP_DoSendTeamMessage, InMessage) == 0x000004, "Member 'GameStateJP_DoSendTeamMessage::InMessage' has a wrong offset!");

// Function JP.GameStateJP.GetAliveTeams
// 0x0010 (0x0010 - 0x0000)
struct GameStateJP_GetAliveTeams final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_GetAliveTeams) == 0x000008, "Wrong alignment on GameStateJP_GetAliveTeams");
static_assert(sizeof(GameStateJP_GetAliveTeams) == 0x000010, "Wrong size on GameStateJP_GetAliveTeams");
static_assert(offsetof(GameStateJP_GetAliveTeams, ReturnValue) == 0x000000, "Member 'GameStateJP_GetAliveTeams::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP.GetEliminatedTeams
// 0x0010 (0x0010 - 0x0000)
struct GameStateJP_GetEliminatedTeams final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_GetEliminatedTeams) == 0x000008, "Wrong alignment on GameStateJP_GetEliminatedTeams");
static_assert(sizeof(GameStateJP_GetEliminatedTeams) == 0x000010, "Wrong size on GameStateJP_GetEliminatedTeams");
static_assert(offsetof(GameStateJP_GetEliminatedTeams, ReturnValue) == 0x000000, "Member 'GameStateJP_GetEliminatedTeams::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP.GetTeam
// 0x0040 (0x0040 - 0x0000)
struct GameStateJP_GetTeam final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  ReturnValue;                                       // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_GetTeam) == 0x000008, "Wrong alignment on GameStateJP_GetTeam");
static_assert(sizeof(GameStateJP_GetTeam) == 0x000040, "Wrong size on GameStateJP_GetTeam");
static_assert(offsetof(GameStateJP_GetTeam, TeamId) == 0x000000, "Member 'GameStateJP_GetTeam::TeamId' has a wrong offset!");
static_assert(offsetof(GameStateJP_GetTeam, ReturnValue) == 0x000008, "Member 'GameStateJP_GetTeam::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP.GetWinningTeam
// 0x0001 (0x0001 - 0x0000)
struct GameStateJP_GetWinningTeam final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_GetWinningTeam) == 0x000001, "Wrong alignment on GameStateJP_GetWinningTeam");
static_assert(sizeof(GameStateJP_GetWinningTeam) == 0x000001, "Wrong size on GameStateJP_GetWinningTeam");
static_assert(offsetof(GameStateJP_GetWinningTeam, ReturnValue) == 0x000000, "Member 'GameStateJP_GetWinningTeam::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP.HandleOwnedHousesChanged
// 0x0018 (0x0018 - 0x0000)
struct GameStateJP_HandleOwnedHousesChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   NewOwnedHouses;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_HandleOwnedHousesChanged) == 0x000008, "Wrong alignment on GameStateJP_HandleOwnedHousesChanged");
static_assert(sizeof(GameStateJP_HandleOwnedHousesChanged) == 0x000018, "Wrong size on GameStateJP_HandleOwnedHousesChanged");
static_assert(offsetof(GameStateJP_HandleOwnedHousesChanged, PlayerState) == 0x000000, "Member 'GameStateJP_HandleOwnedHousesChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(GameStateJP_HandleOwnedHousesChanged, NewOwnedHouses) == 0x000008, "Member 'GameStateJP_HandleOwnedHousesChanged::NewOwnedHouses' has a wrong offset!");

// Function JP.GameStateJP.HandlePlayerStateAdded
// 0x0008 (0x0008 - 0x0000)
struct GameStateJP_HandlePlayerStateAdded final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_HandlePlayerStateAdded) == 0x000008, "Wrong alignment on GameStateJP_HandlePlayerStateAdded");
static_assert(sizeof(GameStateJP_HandlePlayerStateAdded) == 0x000008, "Wrong size on GameStateJP_HandlePlayerStateAdded");
static_assert(offsetof(GameStateJP_HandlePlayerStateAdded, PlayerState) == 0x000000, "Member 'GameStateJP_HandlePlayerStateAdded::PlayerState' has a wrong offset!");

// Function JP.GameStateJP.HandlePlayerStateRemoved
// 0x0008 (0x0008 - 0x0000)
struct GameStateJP_HandlePlayerStateRemoved final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_HandlePlayerStateRemoved) == 0x000008, "Wrong alignment on GameStateJP_HandlePlayerStateRemoved");
static_assert(sizeof(GameStateJP_HandlePlayerStateRemoved) == 0x000008, "Wrong size on GameStateJP_HandlePlayerStateRemoved");
static_assert(offsetof(GameStateJP_HandlePlayerStateRemoved, PlayerState) == 0x000000, "Member 'GameStateJP_HandlePlayerStateRemoved::PlayerState' has a wrong offset!");

// Function JP.GameStateJP.SendMessageToPlayerController
// 0x0020 (0x0020 - 0x0000)
struct GameStateJP_SendMessageToPlayerController final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMessageType                                  Type;                                              // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP*                    PlayerController;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_SendMessageToPlayerController) == 0x000008, "Wrong alignment on GameStateJP_SendMessageToPlayerController");
static_assert(sizeof(GameStateJP_SendMessageToPlayerController) == 0x000020, "Wrong size on GameStateJP_SendMessageToPlayerController");
static_assert(offsetof(GameStateJP_SendMessageToPlayerController, Message) == 0x000000, "Member 'GameStateJP_SendMessageToPlayerController::Message' has a wrong offset!");
static_assert(offsetof(GameStateJP_SendMessageToPlayerController, Type) == 0x000010, "Member 'GameStateJP_SendMessageToPlayerController::Type' has a wrong offset!");
static_assert(offsetof(GameStateJP_SendMessageToPlayerController, PlayerController) == 0x000018, "Member 'GameStateJP_SendMessageToPlayerController::PlayerController' has a wrong offset!");

// Function JP.GameStateJP_Lobby.HandleBackfillError
// 0x0008 (0x0008 - 0x0000)
struct GameStateJP_Lobby_HandleBackfillError final
{
public:
	class UCommonGameDialogDescriptor*            Descriptor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Lobby_HandleBackfillError) == 0x000008, "Wrong alignment on GameStateJP_Lobby_HandleBackfillError");
static_assert(sizeof(GameStateJP_Lobby_HandleBackfillError) == 0x000008, "Wrong size on GameStateJP_Lobby_HandleBackfillError");
static_assert(offsetof(GameStateJP_Lobby_HandleBackfillError, Descriptor) == 0x000000, "Member 'GameStateJP_Lobby_HandleBackfillError::Descriptor' has a wrong offset!");

// Function JP.GameStateJP_Lobby.GetLobbyPlayerStatesArray
// 0x0010 (0x0010 - 0x0000)
struct GameStateJP_Lobby_GetLobbyPlayerStatesArray final
{
public:
	TArray<class APlayerStateJP_Lobby*>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Lobby_GetLobbyPlayerStatesArray) == 0x000008, "Wrong alignment on GameStateJP_Lobby_GetLobbyPlayerStatesArray");
static_assert(sizeof(GameStateJP_Lobby_GetLobbyPlayerStatesArray) == 0x000010, "Wrong size on GameStateJP_Lobby_GetLobbyPlayerStatesArray");
static_assert(offsetof(GameStateJP_Lobby_GetLobbyPlayerStatesArray, ReturnValue) == 0x000000, "Member 'GameStateJP_Lobby_GetLobbyPlayerStatesArray::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP_Lobby.GetLobbyPlayerStatesArrayGroupedByTeamId
// 0x0058 (0x0058 - 0x0000)
struct GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamId final
{
public:
	bool                                          IncludeInvalidTeamID;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint8, struct FLobbyPlayerStateGroup>    ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamId) == 0x000008, "Wrong alignment on GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamId");
static_assert(sizeof(GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamId) == 0x000058, "Wrong size on GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamId");
static_assert(offsetof(GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamId, IncludeInvalidTeamID) == 0x000000, "Member 'GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamId::IncludeInvalidTeamID' has a wrong offset!");
static_assert(offsetof(GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamId, ReturnValue) == 0x000008, "Member 'GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamId::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP_Lobby.GetLobbyPlayerStatesArrayGroupedByTeamIdAsArray
// 0x0018 (0x0018 - 0x0000)
struct GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamIdAsArray final
{
public:
	bool                                          IncludeInvalidTeamID;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLobbyPlayerStateGroup>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamIdAsArray) == 0x000008, "Wrong alignment on GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamIdAsArray");
static_assert(sizeof(GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamIdAsArray) == 0x000018, "Wrong size on GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamIdAsArray");
static_assert(offsetof(GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamIdAsArray, IncludeInvalidTeamID) == 0x000000, "Member 'GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamIdAsArray::IncludeInvalidTeamID' has a wrong offset!");
static_assert(offsetof(GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamIdAsArray, ReturnValue) == 0x000008, "Member 'GameStateJP_Lobby_GetLobbyPlayerStatesArrayGroupedByTeamIdAsArray::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP_Lobby.GetLobbyPlayerStatesByTeamId
// 0x0020 (0x0020 - 0x0000)
struct GameStateJP_Lobby_GetLobbyPlayerStatesByTeamId final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLobbyPlayerStateGroup                 ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Lobby_GetLobbyPlayerStatesByTeamId) == 0x000008, "Wrong alignment on GameStateJP_Lobby_GetLobbyPlayerStatesByTeamId");
static_assert(sizeof(GameStateJP_Lobby_GetLobbyPlayerStatesByTeamId) == 0x000020, "Wrong size on GameStateJP_Lobby_GetLobbyPlayerStatesByTeamId");
static_assert(offsetof(GameStateJP_Lobby_GetLobbyPlayerStatesByTeamId, TeamId) == 0x000000, "Member 'GameStateJP_Lobby_GetLobbyPlayerStatesByTeamId::TeamId' has a wrong offset!");
static_assert(offsetof(GameStateJP_Lobby_GetLobbyPlayerStatesByTeamId, ReturnValue) == 0x000008, "Member 'GameStateJP_Lobby_GetLobbyPlayerStatesByTeamId::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP_Match.FinalEndConditionSet
// 0x0008 (0x0008 - 0x0000)
struct GameStateJP_Match_FinalEndConditionSet final
{
public:
	class AEndCondition*                          EndCondition;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Match_FinalEndConditionSet) == 0x000008, "Wrong alignment on GameStateJP_Match_FinalEndConditionSet");
static_assert(sizeof(GameStateJP_Match_FinalEndConditionSet) == 0x000008, "Wrong size on GameStateJP_Match_FinalEndConditionSet");
static_assert(offsetof(GameStateJP_Match_FinalEndConditionSet, EndCondition) == 0x000000, "Member 'GameStateJP_Match_FinalEndConditionSet::EndCondition' has a wrong offset!");

// Function JP.GameStateJP_Match.AreAllRoomManagersFound
// 0x0001 (0x0001 - 0x0000)
struct GameStateJP_Match_AreAllRoomManagersFound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Match_AreAllRoomManagersFound) == 0x000001, "Wrong alignment on GameStateJP_Match_AreAllRoomManagersFound");
static_assert(sizeof(GameStateJP_Match_AreAllRoomManagersFound) == 0x000001, "Wrong size on GameStateJP_Match_AreAllRoomManagersFound");
static_assert(offsetof(GameStateJP_Match_AreAllRoomManagersFound, ReturnValue) == 0x000000, "Member 'GameStateJP_Match_AreAllRoomManagersFound::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP_Match.GetFinalEndCondition
// 0x0008 (0x0008 - 0x0000)
struct GameStateJP_Match_GetFinalEndCondition final
{
public:
	class AEndCondition*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Match_GetFinalEndCondition) == 0x000008, "Wrong alignment on GameStateJP_Match_GetFinalEndCondition");
static_assert(sizeof(GameStateJP_Match_GetFinalEndCondition) == 0x000008, "Wrong size on GameStateJP_Match_GetFinalEndCondition");
static_assert(offsetof(GameStateJP_Match_GetFinalEndCondition, ReturnValue) == 0x000000, "Member 'GameStateJP_Match_GetFinalEndCondition::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP_Match.GetFoundRoomManagers
// 0x0010 (0x0010 - 0x0000)
struct GameStateJP_Match_GetFoundRoomManagers final
{
public:
	TArray<class ARoomManager*>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Match_GetFoundRoomManagers) == 0x000008, "Wrong alignment on GameStateJP_Match_GetFoundRoomManagers");
static_assert(sizeof(GameStateJP_Match_GetFoundRoomManagers) == 0x000010, "Wrong size on GameStateJP_Match_GetFoundRoomManagers");
static_assert(offsetof(GameStateJP_Match_GetFoundRoomManagers, ReturnValue) == 0x000000, "Member 'GameStateJP_Match_GetFoundRoomManagers::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP_Match.GetMatchPlayerStatesByTeamId
// 0x0020 (0x0020 - 0x0000)
struct GameStateJP_Match_GetMatchPlayerStatesByTeamId final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchPlayerStateGroup                 ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Match_GetMatchPlayerStatesByTeamId) == 0x000008, "Wrong alignment on GameStateJP_Match_GetMatchPlayerStatesByTeamId");
static_assert(sizeof(GameStateJP_Match_GetMatchPlayerStatesByTeamId) == 0x000020, "Wrong size on GameStateJP_Match_GetMatchPlayerStatesByTeamId");
static_assert(offsetof(GameStateJP_Match_GetMatchPlayerStatesByTeamId, TeamId) == 0x000000, "Member 'GameStateJP_Match_GetMatchPlayerStatesByTeamId::TeamId' has a wrong offset!");
static_assert(offsetof(GameStateJP_Match_GetMatchPlayerStatesByTeamId, ReturnValue) == 0x000008, "Member 'GameStateJP_Match_GetMatchPlayerStatesByTeamId::ReturnValue' has a wrong offset!");

// Function JP.GameStateJP_Match.HasFinalEndCondition
// 0x0001 (0x0001 - 0x0000)
struct GameStateJP_Match_HasFinalEndCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateJP_Match_HasFinalEndCondition) == 0x000001, "Wrong alignment on GameStateJP_Match_HasFinalEndCondition");
static_assert(sizeof(GameStateJP_Match_HasFinalEndCondition) == 0x000001, "Wrong size on GameStateJP_Match_HasFinalEndCondition");
static_assert(offsetof(GameStateJP_Match_HasFinalEndCondition, ReturnValue) == 0x000000, "Member 'GameStateJP_Match_HasFinalEndCondition::ReturnValue' has a wrong offset!");

// Function JP.GA_ContinuousTrace.PerformTrace
// 0x0004 (0x0004 - 0x0000)
struct GA_ContinuousTrace_PerformTrace final
{
public:
	int32                                         ActionNumber;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GA_ContinuousTrace_PerformTrace) == 0x000004, "Wrong alignment on GA_ContinuousTrace_PerformTrace");
static_assert(sizeof(GA_ContinuousTrace_PerformTrace) == 0x000004, "Wrong size on GA_ContinuousTrace_PerformTrace");
static_assert(offsetof(GA_ContinuousTrace_PerformTrace, ActionNumber) == 0x000000, "Member 'GA_ContinuousTrace_PerformTrace::ActionNumber' has a wrong offset!");

// Function JP.PerkSelectPopupWidgetBase.SelectEntry
// 0x0008 (0x0008 - 0x0000)
struct PerkSelectPopupWidgetBase_SelectEntry final
{
public:
	class UPerkSelectEntry*                       EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkSelectPopupWidgetBase_SelectEntry) == 0x000008, "Wrong alignment on PerkSelectPopupWidgetBase_SelectEntry");
static_assert(sizeof(PerkSelectPopupWidgetBase_SelectEntry) == 0x000008, "Wrong size on PerkSelectPopupWidgetBase_SelectEntry");
static_assert(offsetof(PerkSelectPopupWidgetBase_SelectEntry, EntryWidget) == 0x000000, "Member 'PerkSelectPopupWidgetBase_SelectEntry::EntryWidget' has a wrong offset!");

// Function JP.GeneralPerkSelectPopupWidget.BlueprintHandleEntryWidgetCreated
// 0x0008 (0x0008 - 0x0000)
struct GeneralPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated final
{
public:
	class UPerkSelectEntry*                       EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneralPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated) == 0x000008, "Wrong alignment on GeneralPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated");
static_assert(sizeof(GeneralPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated) == 0x000008, "Wrong size on GeneralPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated");
static_assert(offsetof(GeneralPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated, EntryWidget) == 0x000000, "Member 'GeneralPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated::EntryWidget' has a wrong offset!");

// Function JP.GetServerDebugInformationAsyncAction.GetServerDebugInformation
// 0x0010 (0x0010 - 0x0000)
struct GetServerDebugInformationAsyncAction_GetServerDebugInformation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGetServerDebugInformationAsyncAction*  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetServerDebugInformationAsyncAction_GetServerDebugInformation) == 0x000008, "Wrong alignment on GetServerDebugInformationAsyncAction_GetServerDebugInformation");
static_assert(sizeof(GetServerDebugInformationAsyncAction_GetServerDebugInformation) == 0x000010, "Wrong size on GetServerDebugInformationAsyncAction_GetServerDebugInformation");
static_assert(offsetof(GetServerDebugInformationAsyncAction_GetServerDebugInformation, WorldContextObject) == 0x000000, "Member 'GetServerDebugInformationAsyncAction_GetServerDebugInformation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GetServerDebugInformationAsyncAction_GetServerDebugInformation, ReturnValue) == 0x000008, "Member 'GetServerDebugInformationAsyncAction_GetServerDebugInformation::ReturnValue' has a wrong offset!");

// Function JP.GetServerDebugInformationAsyncAction.OnServerDebugInformationReady
// 0x0030 (0x0030 - 0x0000)
struct GetServerDebugInformationAsyncAction_OnServerDebugInformationReady final
{
public:
	struct FServerDebugInformation                Information;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GetServerDebugInformationAsyncAction_OnServerDebugInformationReady) == 0x000008, "Wrong alignment on GetServerDebugInformationAsyncAction_OnServerDebugInformationReady");
static_assert(sizeof(GetServerDebugInformationAsyncAction_OnServerDebugInformationReady) == 0x000030, "Wrong size on GetServerDebugInformationAsyncAction_OnServerDebugInformationReady");
static_assert(offsetof(GetServerDebugInformationAsyncAction_OnServerDebugInformationReady, Information) == 0x000000, "Member 'GetServerDebugInformationAsyncAction_OnServerDebugInformationReady::Information' has a wrong offset!");

// Function JP.GroundsKeeper.GetTeam
// 0x0038 (0x0038 - 0x0000)
struct GroundsKeeper_GetTeam final
{
public:
	struct FTeam                                  ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundsKeeper_GetTeam) == 0x000008, "Wrong alignment on GroundsKeeper_GetTeam");
static_assert(sizeof(GroundsKeeper_GetTeam) == 0x000038, "Wrong size on GroundsKeeper_GetTeam");
static_assert(offsetof(GroundsKeeper_GetTeam, ReturnValue) == 0x000000, "Member 'GroundsKeeper_GetTeam::ReturnValue' has a wrong offset!");

// Function JP.GroundsKeeper.GetTeamID
// 0x0001 (0x0001 - 0x0000)
struct GroundsKeeper_GetTeamID final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundsKeeper_GetTeamID) == 0x000001, "Wrong alignment on GroundsKeeper_GetTeamID");
static_assert(sizeof(GroundsKeeper_GetTeamID) == 0x000001, "Wrong size on GroundsKeeper_GetTeamID");
static_assert(offsetof(GroundsKeeper_GetTeamID, ReturnValue) == 0x000000, "Member 'GroundsKeeper_GetTeamID::ReturnValue' has a wrong offset!");

// Function JP.GroundskeeperReference.SetGroundskeeperOverride
// 0x0008 (0x0008 - 0x0000)
struct GroundskeeperReference_SetGroundskeeperOverride final
{
public:
	class AGroundsKeeper*                         NewGroundskeeper;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundskeeperReference_SetGroundskeeperOverride) == 0x000008, "Wrong alignment on GroundskeeperReference_SetGroundskeeperOverride");
static_assert(sizeof(GroundskeeperReference_SetGroundskeeperOverride) == 0x000008, "Wrong size on GroundskeeperReference_SetGroundskeeperOverride");
static_assert(offsetof(GroundskeeperReference_SetGroundskeeperOverride, NewGroundskeeper) == 0x000000, "Member 'GroundskeeperReference_SetGroundskeeperOverride::NewGroundskeeper' has a wrong offset!");

// Function JP.GroundskeeperReference.GetGroundsKeeper
// 0x0008 (0x0008 - 0x0000)
struct GroundskeeperReference_GetGroundsKeeper final
{
public:
	class AGroundsKeeper*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundskeeperReference_GetGroundsKeeper) == 0x000008, "Wrong alignment on GroundskeeperReference_GetGroundsKeeper");
static_assert(sizeof(GroundskeeperReference_GetGroundsKeeper) == 0x000008, "Wrong size on GroundskeeperReference_GetGroundsKeeper");
static_assert(offsetof(GroundskeeperReference_GetGroundsKeeper, ReturnValue) == 0x000000, "Member 'GroundskeeperReference_GetGroundsKeeper::ReturnValue' has a wrong offset!");

// Function JP.GroundskeeperReference.GetTeam
// 0x0038 (0x0038 - 0x0000)
struct GroundskeeperReference_GetTeam final
{
public:
	struct FTeam                                  ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundskeeperReference_GetTeam) == 0x000008, "Wrong alignment on GroundskeeperReference_GetTeam");
static_assert(sizeof(GroundskeeperReference_GetTeam) == 0x000038, "Wrong size on GroundskeeperReference_GetTeam");
static_assert(offsetof(GroundskeeperReference_GetTeam, ReturnValue) == 0x000000, "Member 'GroundskeeperReference_GetTeam::ReturnValue' has a wrong offset!");

// Function JP.GroundskeeperReference.HasReference
// 0x0001 (0x0001 - 0x0000)
struct GroundskeeperReference_HasReference final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroundskeeperReference_HasReference) == 0x000001, "Wrong alignment on GroundskeeperReference_HasReference");
static_assert(sizeof(GroundskeeperReference_HasReference) == 0x000001, "Wrong size on GroundskeeperReference_HasReference");
static_assert(offsetof(GroundskeeperReference_HasReference, ReturnValue) == 0x000000, "Member 'GroundskeeperReference_HasReference::ReturnValue' has a wrong offset!");

// Function JP.GSInteractable.CancelInteraction
// 0x0008 (0x0008 - 0x0000)
struct GSInteractable_CancelInteraction final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSInteractable_CancelInteraction) == 0x000008, "Wrong alignment on GSInteractable_CancelInteraction");
static_assert(sizeof(GSInteractable_CancelInteraction) == 0x000008, "Wrong size on GSInteractable_CancelInteraction");
static_assert(offsetof(GSInteractable_CancelInteraction, InteractionComponent) == 0x000000, "Member 'GSInteractable_CancelInteraction::InteractionComponent' has a wrong offset!");

// Function JP.GSInteractable.InteractableCancelInteraction
// 0x0008 (0x0008 - 0x0000)
struct GSInteractable_InteractableCancelInteraction final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSInteractable_InteractableCancelInteraction) == 0x000008, "Wrong alignment on GSInteractable_InteractableCancelInteraction");
static_assert(sizeof(GSInteractable_InteractableCancelInteraction) == 0x000008, "Wrong size on GSInteractable_InteractableCancelInteraction");
static_assert(offsetof(GSInteractable_InteractableCancelInteraction, InteractionComponent) == 0x000000, "Member 'GSInteractable_InteractableCancelInteraction::InteractionComponent' has a wrong offset!");

// Function JP.GSInteractable.PostInteract
// 0x0010 (0x0010 - 0x0000)
struct GSInteractable_PostInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSInteractable_PostInteract) == 0x000008, "Wrong alignment on GSInteractable_PostInteract");
static_assert(sizeof(GSInteractable_PostInteract) == 0x000010, "Wrong size on GSInteractable_PostInteract");
static_assert(offsetof(GSInteractable_PostInteract, InteractingActor) == 0x000000, "Member 'GSInteractable_PostInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(GSInteractable_PostInteract, InteractionComponent) == 0x000008, "Member 'GSInteractable_PostInteract::InteractionComponent' has a wrong offset!");

// Function JP.GSInteractable.PreInteract
// 0x0010 (0x0010 - 0x0000)
struct GSInteractable_PreInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSInteractable_PreInteract) == 0x000008, "Wrong alignment on GSInteractable_PreInteract");
static_assert(sizeof(GSInteractable_PreInteract) == 0x000010, "Wrong size on GSInteractable_PreInteract");
static_assert(offsetof(GSInteractable_PreInteract, InteractingActor) == 0x000000, "Member 'GSInteractable_PreInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(GSInteractable_PreInteract, InteractionComponent) == 0x000008, "Member 'GSInteractable_PreInteract::InteractionComponent' has a wrong offset!");

// Function JP.GSInteractable.RegisterInteracter
// 0x0010 (0x0010 - 0x0000)
struct GSInteractable_RegisterInteracter final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSInteractable_RegisterInteracter) == 0x000008, "Wrong alignment on GSInteractable_RegisterInteracter");
static_assert(sizeof(GSInteractable_RegisterInteracter) == 0x000010, "Wrong size on GSInteractable_RegisterInteracter");
static_assert(offsetof(GSInteractable_RegisterInteracter, InteractionComponent) == 0x000000, "Member 'GSInteractable_RegisterInteracter::InteractionComponent' has a wrong offset!");
static_assert(offsetof(GSInteractable_RegisterInteracter, InteractingActor) == 0x000008, "Member 'GSInteractable_RegisterInteracter::InteractingActor' has a wrong offset!");

// Function JP.GSInteractable.UnregisterInteracter
// 0x0010 (0x0010 - 0x0000)
struct GSInteractable_UnregisterInteracter final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSInteractable_UnregisterInteracter) == 0x000008, "Wrong alignment on GSInteractable_UnregisterInteracter");
static_assert(sizeof(GSInteractable_UnregisterInteracter) == 0x000010, "Wrong size on GSInteractable_UnregisterInteracter");
static_assert(offsetof(GSInteractable_UnregisterInteracter, InteractionComponent) == 0x000000, "Member 'GSInteractable_UnregisterInteracter::InteractionComponent' has a wrong offset!");
static_assert(offsetof(GSInteractable_UnregisterInteracter, InteractingActor) == 0x000008, "Member 'GSInteractable_UnregisterInteracter::InteractingActor' has a wrong offset!");

// Function JP.GSInteractable.GetInteractionDuration
// 0x0010 (0x0010 - 0x0000)
struct GSInteractable_GetInteractionDuration final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GSInteractable_GetInteractionDuration) == 0x000008, "Wrong alignment on GSInteractable_GetInteractionDuration");
static_assert(sizeof(GSInteractable_GetInteractionDuration) == 0x000010, "Wrong size on GSInteractable_GetInteractionDuration");
static_assert(offsetof(GSInteractable_GetInteractionDuration, InteractionComponent) == 0x000000, "Member 'GSInteractable_GetInteractionDuration::InteractionComponent' has a wrong offset!");
static_assert(offsetof(GSInteractable_GetInteractionDuration, ReturnValue) == 0x000008, "Member 'GSInteractable_GetInteractionDuration::ReturnValue' has a wrong offset!");

// Function JP.GSInteractable.GetPostInteractSyncType
// 0x0010 (0x0010 - 0x0000)
struct GSInteractable_GetPostInteractSyncType final
{
public:
	bool                                          bShouldSync;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityTaskNetSyncType                       Type;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSInteractable_GetPostInteractSyncType) == 0x000008, "Wrong alignment on GSInteractable_GetPostInteractSyncType");
static_assert(sizeof(GSInteractable_GetPostInteractSyncType) == 0x000010, "Wrong size on GSInteractable_GetPostInteractSyncType");
static_assert(offsetof(GSInteractable_GetPostInteractSyncType, bShouldSync) == 0x000000, "Member 'GSInteractable_GetPostInteractSyncType::bShouldSync' has a wrong offset!");
static_assert(offsetof(GSInteractable_GetPostInteractSyncType, Type) == 0x000001, "Member 'GSInteractable_GetPostInteractSyncType::Type' has a wrong offset!");
static_assert(offsetof(GSInteractable_GetPostInteractSyncType, InteractionComponent) == 0x000008, "Member 'GSInteractable_GetPostInteractSyncType::InteractionComponent' has a wrong offset!");

// Function JP.GSInteractable.GetPreInteractSyncType
// 0x0010 (0x0010 - 0x0000)
struct GSInteractable_GetPreInteractSyncType final
{
public:
	bool                                          bShouldSync;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityTaskNetSyncType                       Type;                                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSInteractable_GetPreInteractSyncType) == 0x000008, "Wrong alignment on GSInteractable_GetPreInteractSyncType");
static_assert(sizeof(GSInteractable_GetPreInteractSyncType) == 0x000010, "Wrong size on GSInteractable_GetPreInteractSyncType");
static_assert(offsetof(GSInteractable_GetPreInteractSyncType, bShouldSync) == 0x000000, "Member 'GSInteractable_GetPreInteractSyncType::bShouldSync' has a wrong offset!");
static_assert(offsetof(GSInteractable_GetPreInteractSyncType, Type) == 0x000001, "Member 'GSInteractable_GetPreInteractSyncType::Type' has a wrong offset!");
static_assert(offsetof(GSInteractable_GetPreInteractSyncType, InteractionComponent) == 0x000008, "Member 'GSInteractable_GetPreInteractSyncType::InteractionComponent' has a wrong offset!");

// Function JP.GSInteractable.IsAvailableForEnemyTeam
// 0x0010 (0x0010 - 0x0000)
struct GSInteractable_IsAvailableForEnemyTeam final
{
public:
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GSInteractable_IsAvailableForEnemyTeam) == 0x000008, "Wrong alignment on GSInteractable_IsAvailableForEnemyTeam");
static_assert(sizeof(GSInteractable_IsAvailableForEnemyTeam) == 0x000010, "Wrong size on GSInteractable_IsAvailableForEnemyTeam");
static_assert(offsetof(GSInteractable_IsAvailableForEnemyTeam, InteractionComponent) == 0x000000, "Member 'GSInteractable_IsAvailableForEnemyTeam::InteractionComponent' has a wrong offset!");
static_assert(offsetof(GSInteractable_IsAvailableForEnemyTeam, ReturnValue) == 0x000008, "Member 'GSInteractable_IsAvailableForEnemyTeam::ReturnValue' has a wrong offset!");

// Function JP.GSInteractable.IsAvailableForInteraction
// 0x0018 (0x0018 - 0x0000)
struct GSInteractable_IsAvailableForInteraction final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GSInteractable_IsAvailableForInteraction) == 0x000008, "Wrong alignment on GSInteractable_IsAvailableForInteraction");
static_assert(sizeof(GSInteractable_IsAvailableForInteraction) == 0x000018, "Wrong size on GSInteractable_IsAvailableForInteraction");
static_assert(offsetof(GSInteractable_IsAvailableForInteraction, InteractingActor) == 0x000000, "Member 'GSInteractable_IsAvailableForInteraction::InteractingActor' has a wrong offset!");
static_assert(offsetof(GSInteractable_IsAvailableForInteraction, InteractionComponent) == 0x000008, "Member 'GSInteractable_IsAvailableForInteraction::InteractionComponent' has a wrong offset!");
static_assert(offsetof(GSInteractable_IsAvailableForInteraction, ReturnValue) == 0x000010, "Member 'GSInteractable_IsAvailableForInteraction::ReturnValue' has a wrong offset!");

// Function JP.HealthAttributeSetListener.OnDamaged
// 0x0370 (0x0370 - 0x0000)
struct HealthAttributeSetListener_OnDamaged final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Causer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCombatParticipant                     CombatParticipant;                                 // 0x0010(0x0060)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FKillMethod                            KillMethod;                                        // 0x0070(0x02E8)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    Location;                                          // 0x0358(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthAttributeSetListener_OnDamaged) == 0x000008, "Wrong alignment on HealthAttributeSetListener_OnDamaged");
static_assert(sizeof(HealthAttributeSetListener_OnDamaged) == 0x000370, "Wrong size on HealthAttributeSetListener_OnDamaged");
static_assert(offsetof(HealthAttributeSetListener_OnDamaged, Delta) == 0x000000, "Member 'HealthAttributeSetListener_OnDamaged::Delta' has a wrong offset!");
static_assert(offsetof(HealthAttributeSetListener_OnDamaged, Causer) == 0x000008, "Member 'HealthAttributeSetListener_OnDamaged::Causer' has a wrong offset!");
static_assert(offsetof(HealthAttributeSetListener_OnDamaged, CombatParticipant) == 0x000010, "Member 'HealthAttributeSetListener_OnDamaged::CombatParticipant' has a wrong offset!");
static_assert(offsetof(HealthAttributeSetListener_OnDamaged, KillMethod) == 0x000070, "Member 'HealthAttributeSetListener_OnDamaged::KillMethod' has a wrong offset!");
static_assert(offsetof(HealthAttributeSetListener_OnDamaged, Location) == 0x000358, "Member 'HealthAttributeSetListener_OnDamaged::Location' has a wrong offset!");

// Function JP.HealthAttributeSetListener.OnHealthChanged
// 0x0008 (0x0008 - 0x0000)
struct HealthAttributeSetListener_OnHealthChanged final
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthAttributeSetListener_OnHealthChanged) == 0x000004, "Wrong alignment on HealthAttributeSetListener_OnHealthChanged");
static_assert(sizeof(HealthAttributeSetListener_OnHealthChanged) == 0x000008, "Wrong size on HealthAttributeSetListener_OnHealthChanged");
static_assert(offsetof(HealthAttributeSetListener_OnHealthChanged, Health) == 0x000000, "Member 'HealthAttributeSetListener_OnHealthChanged::Health' has a wrong offset!");
static_assert(offsetof(HealthAttributeSetListener_OnHealthChanged, MaxHealth) == 0x000004, "Member 'HealthAttributeSetListener_OnHealthChanged::MaxHealth' has a wrong offset!");

// Function JP.HealthComponent.HealDamage
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_HealDamage final
{
public:
	float                                         FHealAmount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_HealDamage) == 0x000004, "Wrong alignment on HealthComponent_HealDamage");
static_assert(sizeof(HealthComponent_HealDamage) == 0x000004, "Wrong size on HealthComponent_HealDamage");
static_assert(offsetof(HealthComponent_HealDamage, FHealAmount) == 0x000000, "Member 'HealthComponent_HealDamage::FHealAmount' has a wrong offset!");

// Function JP.HealthComponent.IsDead
// 0x0001 (0x0001 - 0x0000)
struct HealthComponent_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_IsDead) == 0x000001, "Wrong alignment on HealthComponent_IsDead");
static_assert(sizeof(HealthComponent_IsDead) == 0x000001, "Wrong size on HealthComponent_IsDead");
static_assert(offsetof(HealthComponent_IsDead, ReturnValue) == 0x000000, "Member 'HealthComponent_IsDead::ReturnValue' has a wrong offset!");

// Function JP.HealthComponent.TakeDamage
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_TakeDamage final
{
public:
	float                                         FDamageAmount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_TakeDamage) == 0x000004, "Wrong alignment on HealthComponent_TakeDamage");
static_assert(sizeof(HealthComponent_TakeDamage) == 0x000004, "Wrong size on HealthComponent_TakeDamage");
static_assert(offsetof(HealthComponent_TakeDamage, FDamageAmount) == 0x000000, "Member 'HealthComponent_TakeDamage::FDamageAmount' has a wrong offset!");

// Function JP.HitResultFunctionLibrary.GetClosestHitResultByDistance
// 0x0108 (0x0108 - 0x0000)
struct HitResultFunctionLibrary_GetClosestHitResultByDistance final
{
public:
	TArray<struct FHitResult>                     HitResults;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             ReturnValue;                                       // 0x0010(0x00F8)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitResultFunctionLibrary_GetClosestHitResultByDistance) == 0x000008, "Wrong alignment on HitResultFunctionLibrary_GetClosestHitResultByDistance");
static_assert(sizeof(HitResultFunctionLibrary_GetClosestHitResultByDistance) == 0x000108, "Wrong size on HitResultFunctionLibrary_GetClosestHitResultByDistance");
static_assert(offsetof(HitResultFunctionLibrary_GetClosestHitResultByDistance, HitResults) == 0x000000, "Member 'HitResultFunctionLibrary_GetClosestHitResultByDistance::HitResults' has a wrong offset!");
static_assert(offsetof(HitResultFunctionLibrary_GetClosestHitResultByDistance, ReturnValue) == 0x000010, "Member 'HitResultFunctionLibrary_GetClosestHitResultByDistance::ReturnValue' has a wrong offset!");

// Function JP.HitResultFunctionLibrary.GetFurthestHitResultByDistance
// 0x0108 (0x0108 - 0x0000)
struct HitResultFunctionLibrary_GetFurthestHitResultByDistance final
{
public:
	TArray<struct FHitResult>                     HitResults;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             ReturnValue;                                       // 0x0010(0x00F8)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitResultFunctionLibrary_GetFurthestHitResultByDistance) == 0x000008, "Wrong alignment on HitResultFunctionLibrary_GetFurthestHitResultByDistance");
static_assert(sizeof(HitResultFunctionLibrary_GetFurthestHitResultByDistance) == 0x000108, "Wrong size on HitResultFunctionLibrary_GetFurthestHitResultByDistance");
static_assert(offsetof(HitResultFunctionLibrary_GetFurthestHitResultByDistance, HitResults) == 0x000000, "Member 'HitResultFunctionLibrary_GetFurthestHitResultByDistance::HitResults' has a wrong offset!");
static_assert(offsetof(HitResultFunctionLibrary_GetFurthestHitResultByDistance, ReturnValue) == 0x000010, "Member 'HitResultFunctionLibrary_GetFurthestHitResultByDistance::ReturnValue' has a wrong offset!");

// Function JP.LyraPerformanceStatSubsystem.GetCachedStat
// 0x0010 (0x0010 - 0x0000)
struct LyraPerformanceStatSubsystem_GetCachedStat final
{
public:
	ELyraDisplayablePerformanceStat               Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPerformanceStatSubsystem_GetCachedStat) == 0x000008, "Wrong alignment on LyraPerformanceStatSubsystem_GetCachedStat");
static_assert(sizeof(LyraPerformanceStatSubsystem_GetCachedStat) == 0x000010, "Wrong size on LyraPerformanceStatSubsystem_GetCachedStat");
static_assert(offsetof(LyraPerformanceStatSubsystem_GetCachedStat, Stat) == 0x000000, "Member 'LyraPerformanceStatSubsystem_GetCachedStat::Stat' has a wrong offset!");
static_assert(offsetof(LyraPerformanceStatSubsystem_GetCachedStat, ReturnValue) == 0x000008, "Member 'LyraPerformanceStatSubsystem_GetCachedStat::ReturnValue' has a wrong offset!");

// Function JP.HouseDefinition.TryGetHouseDefinition
// 0x0038 (0x0038 - 0x0000)
struct HouseDefinition_TryGetHouseDefinition final
{
public:
	struct FGameplayTag                           HouseID;                                           // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHouseDefinition>        OutSoftHouseDefinition;                            // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HouseDefinition_TryGetHouseDefinition) == 0x000008, "Wrong alignment on HouseDefinition_TryGetHouseDefinition");
static_assert(sizeof(HouseDefinition_TryGetHouseDefinition) == 0x000038, "Wrong size on HouseDefinition_TryGetHouseDefinition");
static_assert(offsetof(HouseDefinition_TryGetHouseDefinition, HouseID) == 0x000000, "Member 'HouseDefinition_TryGetHouseDefinition::HouseID' has a wrong offset!");
static_assert(offsetof(HouseDefinition_TryGetHouseDefinition, OutSoftHouseDefinition) == 0x000008, "Member 'HouseDefinition_TryGetHouseDefinition::OutSoftHouseDefinition' has a wrong offset!");
static_assert(offsetof(HouseDefinition_TryGetHouseDefinition, ReturnValue) == 0x000030, "Member 'HouseDefinition_TryGetHouseDefinition::ReturnValue' has a wrong offset!");

// Function JP.HouseVotePopupEntryWidget.ApplyViewModel
// 0x000C (0x000C - 0x0000)
struct HouseVotePopupEntryWidget_ApplyViewModel final
{
public:
	struct FHouseVotePopupEntryViewModel          ViewModel;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HouseVotePopupEntryWidget_ApplyViewModel) == 0x000004, "Wrong alignment on HouseVotePopupEntryWidget_ApplyViewModel");
static_assert(sizeof(HouseVotePopupEntryWidget_ApplyViewModel) == 0x00000C, "Wrong size on HouseVotePopupEntryWidget_ApplyViewModel");
static_assert(offsetof(HouseVotePopupEntryWidget_ApplyViewModel, ViewModel) == 0x000000, "Member 'HouseVotePopupEntryWidget_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.TeamVolume.GetGroundsKeeper
// 0x0008 (0x0008 - 0x0000)
struct TeamVolume_GetGroundsKeeper final
{
public:
	class AGroundsKeeper*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamVolume_GetGroundsKeeper) == 0x000008, "Wrong alignment on TeamVolume_GetGroundsKeeper");
static_assert(sizeof(TeamVolume_GetGroundsKeeper) == 0x000008, "Wrong size on TeamVolume_GetGroundsKeeper");
static_assert(offsetof(TeamVolume_GetGroundsKeeper, ReturnValue) == 0x000000, "Member 'TeamVolume_GetGroundsKeeper::ReturnValue' has a wrong offset!");

// Function JP.TeamVolume.GetTeam
// 0x0038 (0x0038 - 0x0000)
struct TeamVolume_GetTeam final
{
public:
	struct FTeam                                  ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamVolume_GetTeam) == 0x000008, "Wrong alignment on TeamVolume_GetTeam");
static_assert(sizeof(TeamVolume_GetTeam) == 0x000038, "Wrong size on TeamVolume_GetTeam");
static_assert(offsetof(TeamVolume_GetTeam, ReturnValue) == 0x000000, "Member 'TeamVolume_GetTeam::ReturnValue' has a wrong offset!");

// Function JP.HouseVotePopupWidget.HandleEntryWidgetCreated
// 0x0008 (0x0008 - 0x0000)
struct HouseVotePopupWidget_HandleEntryWidgetCreated final
{
public:
	class UHouseVotePopupEntryWidget*             EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HouseVotePopupWidget_HandleEntryWidgetCreated) == 0x000008, "Wrong alignment on HouseVotePopupWidget_HandleEntryWidgetCreated");
static_assert(sizeof(HouseVotePopupWidget_HandleEntryWidgetCreated) == 0x000008, "Wrong size on HouseVotePopupWidget_HandleEntryWidgetCreated");
static_assert(offsetof(HouseVotePopupWidget_HandleEntryWidgetCreated, EntryWidget) == 0x000000, "Member 'HouseVotePopupWidget_HandleEntryWidgetCreated::EntryWidget' has a wrong offset!");

// Function JP.HouseVotePopupWidget.HandlePlayerStateHouseIdentifierVoteChanged
// 0x0018 (0x0018 - 0x0000)
struct HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged final
{
public:
	class APlayerStateJP_Lobby*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OldHouseIdentifier;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewHouseIdentifier;                                // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged) == 0x000008, "Wrong alignment on HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged");
static_assert(sizeof(HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged) == 0x000018, "Wrong size on HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged, PlayerState) == 0x000000, "Member 'HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged, OldHouseIdentifier) == 0x000008, "Member 'HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged::OldHouseIdentifier' has a wrong offset!");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged, NewHouseIdentifier) == 0x000010, "Member 'HouseVotePopupWidget_HandlePlayerStateHouseIdentifierVoteChanged::NewHouseIdentifier' has a wrong offset!");

// Function JP.HouseVotePopupWidget.HandlePlayerStateOwnedHousesChanged
// 0x0018 (0x0018 - 0x0000)
struct HouseVotePopupWidget_HandlePlayerStateOwnedHousesChanged final
{
public:
	class APlayerStateJP_Lobby*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   NewOwnedHouses;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HouseVotePopupWidget_HandlePlayerStateOwnedHousesChanged) == 0x000008, "Wrong alignment on HouseVotePopupWidget_HandlePlayerStateOwnedHousesChanged");
static_assert(sizeof(HouseVotePopupWidget_HandlePlayerStateOwnedHousesChanged) == 0x000018, "Wrong size on HouseVotePopupWidget_HandlePlayerStateOwnedHousesChanged");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateOwnedHousesChanged, PlayerState) == 0x000000, "Member 'HouseVotePopupWidget_HandlePlayerStateOwnedHousesChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateOwnedHousesChanged, NewOwnedHouses) == 0x000008, "Member 'HouseVotePopupWidget_HandlePlayerStateOwnedHousesChanged::NewOwnedHouses' has a wrong offset!");

// Function JP.HouseVotePopupWidget.HandlePlayerStateTeamHousePoolChanged
// 0x0008 (0x0008 - 0x0000)
struct HouseVotePopupWidget_HandlePlayerStateTeamHousePoolChanged final
{
public:
	class APlayerStateJP_Lobby*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HouseVotePopupWidget_HandlePlayerStateTeamHousePoolChanged) == 0x000008, "Wrong alignment on HouseVotePopupWidget_HandlePlayerStateTeamHousePoolChanged");
static_assert(sizeof(HouseVotePopupWidget_HandlePlayerStateTeamHousePoolChanged) == 0x000008, "Wrong size on HouseVotePopupWidget_HandlePlayerStateTeamHousePoolChanged");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateTeamHousePoolChanged, PlayerState) == 0x000000, "Member 'HouseVotePopupWidget_HandlePlayerStateTeamHousePoolChanged::PlayerState' has a wrong offset!");

// Function JP.HouseVotePopupWidget.HandlePlayerStateTeamIdChanged
// 0x0010 (0x0010 - 0x0000)
struct HouseVotePopupWidget_HandlePlayerStateTeamIdChanged final
{
public:
	class APlayerStateJP_Lobby*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OldTeamID;                                         // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewTeamID;                                         // 0x0009(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HouseVotePopupWidget_HandlePlayerStateTeamIdChanged) == 0x000008, "Wrong alignment on HouseVotePopupWidget_HandlePlayerStateTeamIdChanged");
static_assert(sizeof(HouseVotePopupWidget_HandlePlayerStateTeamIdChanged) == 0x000010, "Wrong size on HouseVotePopupWidget_HandlePlayerStateTeamIdChanged");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateTeamIdChanged, PlayerState) == 0x000000, "Member 'HouseVotePopupWidget_HandlePlayerStateTeamIdChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateTeamIdChanged, OldTeamID) == 0x000008, "Member 'HouseVotePopupWidget_HandlePlayerStateTeamIdChanged::OldTeamID' has a wrong offset!");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateTeamIdChanged, NewTeamID) == 0x000009, "Member 'HouseVotePopupWidget_HandlePlayerStateTeamIdChanged::NewTeamID' has a wrong offset!");

// Function JP.HouseVotePopupWidget.HandlePlayerStateTracked
// 0x0010 (0x0010 - 0x0000)
struct HouseVotePopupWidget_HandlePlayerStateTracked final
{
public:
	class APlayerState*                           TrackedPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Initial;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HouseVotePopupWidget_HandlePlayerStateTracked) == 0x000008, "Wrong alignment on HouseVotePopupWidget_HandlePlayerStateTracked");
static_assert(sizeof(HouseVotePopupWidget_HandlePlayerStateTracked) == 0x000010, "Wrong size on HouseVotePopupWidget_HandlePlayerStateTracked");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateTracked, TrackedPlayerState) == 0x000000, "Member 'HouseVotePopupWidget_HandlePlayerStateTracked::TrackedPlayerState' has a wrong offset!");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateTracked, Initial) == 0x000008, "Member 'HouseVotePopupWidget_HandlePlayerStateTracked::Initial' has a wrong offset!");

// Function JP.HouseVotePopupWidget.HandlePlayerStateUntracked
// 0x0008 (0x0008 - 0x0000)
struct HouseVotePopupWidget_HandlePlayerStateUntracked final
{
public:
	class APlayerState*                           UntrackedPlayerState;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HouseVotePopupWidget_HandlePlayerStateUntracked) == 0x000008, "Wrong alignment on HouseVotePopupWidget_HandlePlayerStateUntracked");
static_assert(sizeof(HouseVotePopupWidget_HandlePlayerStateUntracked) == 0x000008, "Wrong size on HouseVotePopupWidget_HandlePlayerStateUntracked");
static_assert(offsetof(HouseVotePopupWidget_HandlePlayerStateUntracked, UntrackedPlayerState) == 0x000000, "Member 'HouseVotePopupWidget_HandlePlayerStateUntracked::UntrackedPlayerState' has a wrong offset!");

// Function JP.HouseVotePopupWidget.SelectEntry
// 0x0008 (0x0008 - 0x0000)
struct HouseVotePopupWidget_SelectEntry final
{
public:
	class UHouseVotePopupEntryWidget*             EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HouseVotePopupWidget_SelectEntry) == 0x000008, "Wrong alignment on HouseVotePopupWidget_SelectEntry");
static_assert(sizeof(HouseVotePopupWidget_SelectEntry) == 0x000008, "Wrong size on HouseVotePopupWidget_SelectEntry");
static_assert(offsetof(HouseVotePopupWidget_SelectEntry, EntryWidget) == 0x000000, "Member 'HouseVotePopupWidget_SelectEntry::EntryWidget' has a wrong offset!");

// Function JP.IndicatorWidgetInterface.BindIndicator
// 0x0008 (0x0008 - 0x0000)
struct IndicatorWidgetInterface_BindIndicator final
{
public:
	class UIndicatorDescriptor*                   Indicator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorWidgetInterface_BindIndicator) == 0x000008, "Wrong alignment on IndicatorWidgetInterface_BindIndicator");
static_assert(sizeof(IndicatorWidgetInterface_BindIndicator) == 0x000008, "Wrong size on IndicatorWidgetInterface_BindIndicator");
static_assert(offsetof(IndicatorWidgetInterface_BindIndicator, Indicator) == 0x000000, "Member 'IndicatorWidgetInterface_BindIndicator::Indicator' has a wrong offset!");

// Function JP.IndicatorWidgetInterface.UnbindIndicator
// 0x0008 (0x0008 - 0x0000)
struct IndicatorWidgetInterface_UnbindIndicator final
{
public:
	const class UIndicatorDescriptor*             Indicator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorWidgetInterface_UnbindIndicator) == 0x000008, "Wrong alignment on IndicatorWidgetInterface_UnbindIndicator");
static_assert(sizeof(IndicatorWidgetInterface_UnbindIndicator) == 0x000008, "Wrong size on IndicatorWidgetInterface_UnbindIndicator");
static_assert(offsetof(IndicatorWidgetInterface_UnbindIndicator, Indicator) == 0x000000, "Member 'IndicatorWidgetInterface_UnbindIndicator::Indicator' has a wrong offset!");

// Function JP.LyraButtonBase.SetButtonText
// 0x0010 (0x0010 - 0x0000)
struct LyraButtonBase_SetButtonText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraButtonBase_SetButtonText) == 0x000008, "Wrong alignment on LyraButtonBase_SetButtonText");
static_assert(sizeof(LyraButtonBase_SetButtonText) == 0x000010, "Wrong size on LyraButtonBase_SetButtonText");
static_assert(offsetof(LyraButtonBase_SetButtonText, InText) == 0x000000, "Member 'LyraButtonBase_SetButtonText::InText' has a wrong offset!");

// Function JP.LyraButtonBase.UpdateButtonText
// 0x0010 (0x0010 - 0x0000)
struct LyraButtonBase_UpdateButtonText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraButtonBase_UpdateButtonText) == 0x000008, "Wrong alignment on LyraButtonBase_UpdateButtonText");
static_assert(sizeof(LyraButtonBase_UpdateButtonText) == 0x000010, "Wrong size on LyraButtonBase_UpdateButtonText");
static_assert(offsetof(LyraButtonBase_UpdateButtonText, InText) == 0x000000, "Member 'LyraButtonBase_UpdateButtonText::InText' has a wrong offset!");

// Function JP.LyraTabButtonBase.SetTabLabelInfo_Implementation
// 0x0110 (0x0110 - 0x0000)
struct LyraTabButtonBase_SetTabLabelInfo_Implementation final
{
public:
	struct FLyraTabDescriptor                     TabLabelInfo;                                      // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabButtonBase_SetTabLabelInfo_Implementation) == 0x000010, "Wrong alignment on LyraTabButtonBase_SetTabLabelInfo_Implementation");
static_assert(sizeof(LyraTabButtonBase_SetTabLabelInfo_Implementation) == 0x000110, "Wrong size on LyraTabButtonBase_SetTabLabelInfo_Implementation");
static_assert(offsetof(LyraTabButtonBase_SetTabLabelInfo_Implementation, TabLabelInfo) == 0x000000, "Member 'LyraTabButtonBase_SetTabLabelInfo_Implementation::TabLabelInfo' has a wrong offset!");

// Function JP.IncomeNotification.Activate
// 0x0004 (0x0004 - 0x0000)
struct IncomeNotification_Activate final
{
public:
	float                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IncomeNotification_Activate) == 0x000004, "Wrong alignment on IncomeNotification_Activate");
static_assert(sizeof(IncomeNotification_Activate) == 0x000004, "Wrong size on IncomeNotification_Activate");
static_assert(offsetof(IncomeNotification_Activate, Score) == 0x000000, "Member 'IncomeNotification_Activate::Score' has a wrong offset!");

// Function JP.NeighborSelectEntry.ApplyViewModel
// 0x0050 (0x0050 - 0x0000)
struct NeighborSelectEntry_ApplyViewModel final
{
public:
	struct FNeighborSelectEntryViewModel          ViewModel;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborSelectEntry_ApplyViewModel) == 0x000008, "Wrong alignment on NeighborSelectEntry_ApplyViewModel");
static_assert(sizeof(NeighborSelectEntry_ApplyViewModel) == 0x000050, "Wrong size on NeighborSelectEntry_ApplyViewModel");
static_assert(offsetof(NeighborSelectEntry_ApplyViewModel, ViewModel) == 0x000000, "Member 'NeighborSelectEntry_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.NeighborSpecialAbilitiesComponent.GrantAbility
// 0x0010 (0x0010 - 0x0000)
struct NeighborSpecialAbilitiesComponent_GrantAbility final
{
public:
	class UNeighborSpecialAbilityDefinition*      Definition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNeighborSpecialAbilityInstance*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborSpecialAbilitiesComponent_GrantAbility) == 0x000008, "Wrong alignment on NeighborSpecialAbilitiesComponent_GrantAbility");
static_assert(sizeof(NeighborSpecialAbilitiesComponent_GrantAbility) == 0x000010, "Wrong size on NeighborSpecialAbilitiesComponent_GrantAbility");
static_assert(offsetof(NeighborSpecialAbilitiesComponent_GrantAbility, Definition) == 0x000000, "Member 'NeighborSpecialAbilitiesComponent_GrantAbility::Definition' has a wrong offset!");
static_assert(offsetof(NeighborSpecialAbilitiesComponent_GrantAbility, ReturnValue) == 0x000008, "Member 'NeighborSpecialAbilitiesComponent_GrantAbility::ReturnValue' has a wrong offset!");

// Function JP.NeighborSpecialAbilitiesComponent.ReplaceSpecialAbility
// 0x0010 (0x0010 - 0x0000)
struct NeighborSpecialAbilitiesComponent_ReplaceSpecialAbility final
{
public:
	class UNeighborSpecialAbilityDefinition*      NewDefinition;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNeighborSpecialAbilityInstance*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborSpecialAbilitiesComponent_ReplaceSpecialAbility) == 0x000008, "Wrong alignment on NeighborSpecialAbilitiesComponent_ReplaceSpecialAbility");
static_assert(sizeof(NeighborSpecialAbilitiesComponent_ReplaceSpecialAbility) == 0x000010, "Wrong size on NeighborSpecialAbilitiesComponent_ReplaceSpecialAbility");
static_assert(offsetof(NeighborSpecialAbilitiesComponent_ReplaceSpecialAbility, NewDefinition) == 0x000000, "Member 'NeighborSpecialAbilitiesComponent_ReplaceSpecialAbility::NewDefinition' has a wrong offset!");
static_assert(offsetof(NeighborSpecialAbilitiesComponent_ReplaceSpecialAbility, ReturnValue) == 0x000008, "Member 'NeighborSpecialAbilitiesComponent_ReplaceSpecialAbility::ReturnValue' has a wrong offset!");

// Function JP.ItemAction_ItemWheel.ConstructItemWheelInfo
// 0x0028 (0x0028 - 0x0000)
struct ItemAction_ItemWheel_ConstructItemWheelInfo final
{
public:
	class UItemInstance*                          Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemWheelInfo                         ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAction_ItemWheel_ConstructItemWheelInfo) == 0x000008, "Wrong alignment on ItemAction_ItemWheel_ConstructItemWheelInfo");
static_assert(sizeof(ItemAction_ItemWheel_ConstructItemWheelInfo) == 0x000028, "Wrong size on ItemAction_ItemWheel_ConstructItemWheelInfo");
static_assert(offsetof(ItemAction_ItemWheel_ConstructItemWheelInfo, Item) == 0x000000, "Member 'ItemAction_ItemWheel_ConstructItemWheelInfo::Item' has a wrong offset!");
static_assert(offsetof(ItemAction_ItemWheel_ConstructItemWheelInfo, ReturnValue) == 0x000008, "Member 'ItemAction_ItemWheel_ConstructItemWheelInfo::ReturnValue' has a wrong offset!");

// Function JP.ItemSkinDefinition.GetDefaultItemSkinID
// 0x0010 (0x0010 - 0x0000)
struct ItemSkinDefinition_GetDefaultItemSkinID final
{
public:
	const class UItemDefinition*                  ItemDefinition;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSkinDefinition_GetDefaultItemSkinID) == 0x000008, "Wrong alignment on ItemSkinDefinition_GetDefaultItemSkinID");
static_assert(sizeof(ItemSkinDefinition_GetDefaultItemSkinID) == 0x000010, "Wrong size on ItemSkinDefinition_GetDefaultItemSkinID");
static_assert(offsetof(ItemSkinDefinition_GetDefaultItemSkinID, ItemDefinition) == 0x000000, "Member 'ItemSkinDefinition_GetDefaultItemSkinID::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ItemSkinDefinition_GetDefaultItemSkinID, ReturnValue) == 0x000008, "Member 'ItemSkinDefinition_GetDefaultItemSkinID::ReturnValue' has a wrong offset!");

// Function JP.ItemSkinDefinition.TryGetItemSkinDefinition
// 0x0038 (0x0038 - 0x0000)
struct ItemSkinDefinition_TryGetItemSkinDefinition final
{
public:
	struct FGameplayTag                           ItemSkinID;                                        // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemSkinDefinition>     OutSoftItemSkinDefinition;                         // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemSkinDefinition_TryGetItemSkinDefinition) == 0x000008, "Wrong alignment on ItemSkinDefinition_TryGetItemSkinDefinition");
static_assert(sizeof(ItemSkinDefinition_TryGetItemSkinDefinition) == 0x000038, "Wrong size on ItemSkinDefinition_TryGetItemSkinDefinition");
static_assert(offsetof(ItemSkinDefinition_TryGetItemSkinDefinition, ItemSkinID) == 0x000000, "Member 'ItemSkinDefinition_TryGetItemSkinDefinition::ItemSkinID' has a wrong offset!");
static_assert(offsetof(ItemSkinDefinition_TryGetItemSkinDefinition, OutSoftItemSkinDefinition) == 0x000008, "Member 'ItemSkinDefinition_TryGetItemSkinDefinition::OutSoftItemSkinDefinition' has a wrong offset!");
static_assert(offsetof(ItemSkinDefinition_TryGetItemSkinDefinition, ReturnValue) == 0x000030, "Member 'ItemSkinDefinition_TryGetItemSkinDefinition::ReturnValue' has a wrong offset!");

// Function JP.NeighborPerkSelectPopupWidget.BlueprintHandleEntryWidgetCreated
// 0x0008 (0x0008 - 0x0000)
struct NeighborPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated final
{
public:
	class UPerkSelectEntry*                       EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated) == 0x000008, "Wrong alignment on NeighborPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated");
static_assert(sizeof(NeighborPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated) == 0x000008, "Wrong size on NeighborPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated");
static_assert(offsetof(NeighborPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated, EntryWidget) == 0x000000, "Member 'NeighborPerkSelectPopupWidget_BlueprintHandleEntryWidgetCreated::EntryWidget' has a wrong offset!");

// Function JP.JPActionWidget.TryGetActionIcon
// 0x00F0 (0x00F0 - 0x0000)
struct JPActionWidget_TryGetActionIcon final
{
public:
	class UInputAction*                           Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            IconSlateBrush;                                    // 0x0010(0x00D0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JPActionWidget_TryGetActionIcon) == 0x000010, "Wrong alignment on JPActionWidget_TryGetActionIcon");
static_assert(sizeof(JPActionWidget_TryGetActionIcon) == 0x0000F0, "Wrong size on JPActionWidget_TryGetActionIcon");
static_assert(offsetof(JPActionWidget_TryGetActionIcon, Action) == 0x000000, "Member 'JPActionWidget_TryGetActionIcon::Action' has a wrong offset!");
static_assert(offsetof(JPActionWidget_TryGetActionIcon, IconSlateBrush) == 0x000010, "Member 'JPActionWidget_TryGetActionIcon::IconSlateBrush' has a wrong offset!");
static_assert(offsetof(JPActionWidget_TryGetActionIcon, ReturnValue) == 0x0000E0, "Member 'JPActionWidget_TryGetActionIcon::ReturnValue' has a wrong offset!");

// Function JP.JPActionWidget.TryGetActionKeyForFirstBoundKey
// 0x0020 (0x0020 - 0x0000)
struct JPActionWidget_TryGetActionKeyForFirstBoundKey final
{
public:
	class UInputAction*                           Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ActionKeyText;                                     // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JPActionWidget_TryGetActionKeyForFirstBoundKey) == 0x000008, "Wrong alignment on JPActionWidget_TryGetActionKeyForFirstBoundKey");
static_assert(sizeof(JPActionWidget_TryGetActionKeyForFirstBoundKey) == 0x000020, "Wrong size on JPActionWidget_TryGetActionKeyForFirstBoundKey");
static_assert(offsetof(JPActionWidget_TryGetActionKeyForFirstBoundKey, Action) == 0x000000, "Member 'JPActionWidget_TryGetActionKeyForFirstBoundKey::Action' has a wrong offset!");
static_assert(offsetof(JPActionWidget_TryGetActionKeyForFirstBoundKey, ActionKeyText) == 0x000008, "Member 'JPActionWidget_TryGetActionKeyForFirstBoundKey::ActionKeyText' has a wrong offset!");
static_assert(offsetof(JPActionWidget_TryGetActionKeyForFirstBoundKey, ReturnValue) == 0x000018, "Member 'JPActionWidget_TryGetActionKeyForFirstBoundKey::ReturnValue' has a wrong offset!");

// Function JP.JPActionWidget.TryGetActionTextForFirstBoundKey
// 0x0020 (0x0020 - 0x0000)
struct JPActionWidget_TryGetActionTextForFirstBoundKey final
{
public:
	class UInputAction*                           Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ActionKeyText;                                     // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JPActionWidget_TryGetActionTextForFirstBoundKey) == 0x000008, "Wrong alignment on JPActionWidget_TryGetActionTextForFirstBoundKey");
static_assert(sizeof(JPActionWidget_TryGetActionTextForFirstBoundKey) == 0x000020, "Wrong size on JPActionWidget_TryGetActionTextForFirstBoundKey");
static_assert(offsetof(JPActionWidget_TryGetActionTextForFirstBoundKey, Action) == 0x000000, "Member 'JPActionWidget_TryGetActionTextForFirstBoundKey::Action' has a wrong offset!");
static_assert(offsetof(JPActionWidget_TryGetActionTextForFirstBoundKey, ActionKeyText) == 0x000008, "Member 'JPActionWidget_TryGetActionTextForFirstBoundKey::ActionKeyText' has a wrong offset!");
static_assert(offsetof(JPActionWidget_TryGetActionTextForFirstBoundKey, ReturnValue) == 0x000018, "Member 'JPActionWidget_TryGetActionTextForFirstBoundKey::ReturnValue' has a wrong offset!");

// Function JP.JPActionWidget.GetCurrentInputType
// 0x0001 (0x0001 - 0x0000)
struct JPActionWidget_GetCurrentInputType final
{
public:
	ECommonInputType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPActionWidget_GetCurrentInputType) == 0x000001, "Wrong alignment on JPActionWidget_GetCurrentInputType");
static_assert(sizeof(JPActionWidget_GetCurrentInputType) == 0x000001, "Wrong size on JPActionWidget_GetCurrentInputType");
static_assert(offsetof(JPActionWidget_GetCurrentInputType, ReturnValue) == 0x000000, "Member 'JPActionWidget_GetCurrentInputType::ReturnValue' has a wrong offset!");

// Function JP.JPActionWidget.GetKeysMappedToAction
// 0x0018 (0x0018 - 0x0000)
struct JPActionWidget_GetKeysMappedToAction final
{
public:
	class UInputAction*                           Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPActionWidget_GetKeysMappedToAction) == 0x000008, "Wrong alignment on JPActionWidget_GetKeysMappedToAction");
static_assert(sizeof(JPActionWidget_GetKeysMappedToAction) == 0x000018, "Wrong size on JPActionWidget_GetKeysMappedToAction");
static_assert(offsetof(JPActionWidget_GetKeysMappedToAction, Action) == 0x000000, "Member 'JPActionWidget_GetKeysMappedToAction::Action' has a wrong offset!");
static_assert(offsetof(JPActionWidget_GetKeysMappedToAction, ReturnValue) == 0x000008, "Member 'JPActionWidget_GetKeysMappedToAction::ReturnValue' has a wrong offset!");

// Function JP.PreLobbyServerBrowserList.ApplyViewModel
// 0x0010 (0x0010 - 0x0000)
struct PreLobbyServerBrowserList_ApplyViewModel final
{
public:
	struct FPreLobbyServerBrowserListViewModel    ViewModel;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreLobbyServerBrowserList_ApplyViewModel) == 0x000004, "Wrong alignment on PreLobbyServerBrowserList_ApplyViewModel");
static_assert(sizeof(PreLobbyServerBrowserList_ApplyViewModel) == 0x000010, "Wrong size on PreLobbyServerBrowserList_ApplyViewModel");
static_assert(offsetof(PreLobbyServerBrowserList_ApplyViewModel, ViewModel) == 0x000000, "Member 'PreLobbyServerBrowserList_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.PreLobbyServerBrowserList.HandleEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct PreLobbyServerBrowserList_HandleEntrySelected final
{
public:
	class UPreLobbyServerBrowserEntry*            InEntry;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InJoin;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PreLobbyServerBrowserList_HandleEntrySelected) == 0x000008, "Wrong alignment on PreLobbyServerBrowserList_HandleEntrySelected");
static_assert(sizeof(PreLobbyServerBrowserList_HandleEntrySelected) == 0x000010, "Wrong size on PreLobbyServerBrowserList_HandleEntrySelected");
static_assert(offsetof(PreLobbyServerBrowserList_HandleEntrySelected, InEntry) == 0x000000, "Member 'PreLobbyServerBrowserList_HandleEntrySelected::InEntry' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserList_HandleEntrySelected, InJoin) == 0x000008, "Member 'PreLobbyServerBrowserList_HandleEntrySelected::InJoin' has a wrong offset!");

// Function JP.PreLobbyServerBrowserList.OnPlayerInputPassword
// 0x0010 (0x0010 - 0x0000)
struct PreLobbyServerBrowserList_OnPlayerInputPassword final
{
public:
	class FString                                 Password;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreLobbyServerBrowserList_OnPlayerInputPassword) == 0x000008, "Wrong alignment on PreLobbyServerBrowserList_OnPlayerInputPassword");
static_assert(sizeof(PreLobbyServerBrowserList_OnPlayerInputPassword) == 0x000010, "Wrong size on PreLobbyServerBrowserList_OnPlayerInputPassword");
static_assert(offsetof(PreLobbyServerBrowserList_OnPlayerInputPassword, Password) == 0x000000, "Member 'PreLobbyServerBrowserList_OnPlayerInputPassword::Password' has a wrong offset!");

// Function JP.PreLobbyServerBrowserList.SetPageIndex
// 0x0004 (0x0004 - 0x0000)
struct PreLobbyServerBrowserList_SetPageIndex final
{
public:
	int32                                         InPageIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreLobbyServerBrowserList_SetPageIndex) == 0x000004, "Wrong alignment on PreLobbyServerBrowserList_SetPageIndex");
static_assert(sizeof(PreLobbyServerBrowserList_SetPageIndex) == 0x000004, "Wrong size on PreLobbyServerBrowserList_SetPageIndex");
static_assert(offsetof(PreLobbyServerBrowserList_SetPageIndex, InPageIndex) == 0x000000, "Member 'PreLobbyServerBrowserList_SetPageIndex::InPageIndex' has a wrong offset!");

// Function JP.PreLobbyServerBrowserList.SetShowFullServers
// 0x0001 (0x0001 - 0x0000)
struct PreLobbyServerBrowserList_SetShowFullServers final
{
public:
	bool                                          bInShowFullServers;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreLobbyServerBrowserList_SetShowFullServers) == 0x000001, "Wrong alignment on PreLobbyServerBrowserList_SetShowFullServers");
static_assert(sizeof(PreLobbyServerBrowserList_SetShowFullServers) == 0x000001, "Wrong size on PreLobbyServerBrowserList_SetShowFullServers");
static_assert(offsetof(PreLobbyServerBrowserList_SetShowFullServers, bInShowFullServers) == 0x000000, "Member 'PreLobbyServerBrowserList_SetShowFullServers::bInShowFullServers' has a wrong offset!");

// Function JP.PreLobbyServerBrowserList.SetSortMode
// 0x0001 (0x0001 - 0x0000)
struct PreLobbyServerBrowserList_SetSortMode final
{
public:
	EPreLobbyServerBrowserListSortMode            InSortMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreLobbyServerBrowserList_SetSortMode) == 0x000001, "Wrong alignment on PreLobbyServerBrowserList_SetSortMode");
static_assert(sizeof(PreLobbyServerBrowserList_SetSortMode) == 0x000001, "Wrong size on PreLobbyServerBrowserList_SetSortMode");
static_assert(offsetof(PreLobbyServerBrowserList_SetSortMode, InSortMode) == 0x000000, "Member 'PreLobbyServerBrowserList_SetSortMode::InSortMode' has a wrong offset!");

// Function JP.PreLobbyServerBrowserList.GetSelectedEntry
// 0x0008 (0x0008 - 0x0000)
struct PreLobbyServerBrowserList_GetSelectedEntry final
{
public:
	class UPreLobbyServerBrowserEntry*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreLobbyServerBrowserList_GetSelectedEntry) == 0x000008, "Wrong alignment on PreLobbyServerBrowserList_GetSelectedEntry");
static_assert(sizeof(PreLobbyServerBrowserList_GetSelectedEntry) == 0x000008, "Wrong size on PreLobbyServerBrowserList_GetSelectedEntry");
static_assert(offsetof(PreLobbyServerBrowserList_GetSelectedEntry, ReturnValue) == 0x000000, "Member 'PreLobbyServerBrowserList_GetSelectedEntry::ReturnValue' has a wrong offset!");

// Function JP.NeighborDefinition.GetStartingItemID
// 0x0008 (0x0008 - 0x0000)
struct NeighborDefinition_GetStartingItemID final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborDefinition_GetStartingItemID) == 0x000004, "Wrong alignment on NeighborDefinition_GetStartingItemID");
static_assert(sizeof(NeighborDefinition_GetStartingItemID) == 0x000008, "Wrong size on NeighborDefinition_GetStartingItemID");
static_assert(offsetof(NeighborDefinition_GetStartingItemID, ReturnValue) == 0x000000, "Member 'NeighborDefinition_GetStartingItemID::ReturnValue' has a wrong offset!");

// Function JP.NeighborDefinition.TryGetStartingItemSkinID
// 0x0008 (0x0008 - 0x0000)
struct NeighborDefinition_TryGetStartingItemSkinID final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborDefinition_TryGetStartingItemSkinID) == 0x000004, "Wrong alignment on NeighborDefinition_TryGetStartingItemSkinID");
static_assert(sizeof(NeighborDefinition_TryGetStartingItemSkinID) == 0x000008, "Wrong size on NeighborDefinition_TryGetStartingItemSkinID");
static_assert(offsetof(NeighborDefinition_TryGetStartingItemSkinID, ReturnValue) == 0x000000, "Member 'NeighborDefinition_TryGetStartingItemSkinID::ReturnValue' has a wrong offset!");

// Function JP.RepairnessAttributeSetListener.OnRepairnessChanged
// 0x0008 (0x0008 - 0x0000)
struct RepairnessAttributeSetListener_OnRepairnessChanged final
{
public:
	float                                         Repairness;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRepairness;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RepairnessAttributeSetListener_OnRepairnessChanged) == 0x000004, "Wrong alignment on RepairnessAttributeSetListener_OnRepairnessChanged");
static_assert(sizeof(RepairnessAttributeSetListener_OnRepairnessChanged) == 0x000008, "Wrong size on RepairnessAttributeSetListener_OnRepairnessChanged");
static_assert(offsetof(RepairnessAttributeSetListener_OnRepairnessChanged, Repairness) == 0x000000, "Member 'RepairnessAttributeSetListener_OnRepairnessChanged::Repairness' has a wrong offset!");
static_assert(offsetof(RepairnessAttributeSetListener_OnRepairnessChanged, MaxRepairness) == 0x000004, "Member 'RepairnessAttributeSetListener_OnRepairnessChanged::MaxRepairness' has a wrong offset!");

// Function JP.NeighborSelectPopupWidget.HandleEntryWidgetCreated
// 0x0008 (0x0008 - 0x0000)
struct NeighborSelectPopupWidget_HandleEntryWidgetCreated final
{
public:
	class UNeighborSelectEntry*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborSelectPopupWidget_HandleEntryWidgetCreated) == 0x000008, "Wrong alignment on NeighborSelectPopupWidget_HandleEntryWidgetCreated");
static_assert(sizeof(NeighborSelectPopupWidget_HandleEntryWidgetCreated) == 0x000008, "Wrong size on NeighborSelectPopupWidget_HandleEntryWidgetCreated");
static_assert(offsetof(NeighborSelectPopupWidget_HandleEntryWidgetCreated, EntryWidget) == 0x000000, "Member 'NeighborSelectPopupWidget_HandleEntryWidgetCreated::EntryWidget' has a wrong offset!");

// Function JP.NeighborSelectPopupWidget.SelectEntry
// 0x0010 (0x0010 - 0x0000)
struct NeighborSelectPopupWidget_SelectEntry final
{
public:
	class UNeighborSelectEntry*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborSelectPopupWidget_SelectEntry) == 0x000008, "Wrong alignment on NeighborSelectPopupWidget_SelectEntry");
static_assert(sizeof(NeighborSelectPopupWidget_SelectEntry) == 0x000010, "Wrong size on NeighborSelectPopupWidget_SelectEntry");
static_assert(offsetof(NeighborSelectPopupWidget_SelectEntry, EntryWidget) == 0x000000, "Member 'NeighborSelectPopupWidget_SelectEntry::EntryWidget' has a wrong offset!");
static_assert(offsetof(NeighborSelectPopupWidget_SelectEntry, ReturnValue) == 0x000008, "Member 'NeighborSelectPopupWidget_SelectEntry::ReturnValue' has a wrong offset!");

// Function JP.JPGameSettingWithOddEvenInterface.GetIsEven
// 0x0001 (0x0001 - 0x0000)
struct JPGameSettingWithOddEvenInterface_GetIsEven final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPGameSettingWithOddEvenInterface_GetIsEven) == 0x000001, "Wrong alignment on JPGameSettingWithOddEvenInterface_GetIsEven");
static_assert(sizeof(JPGameSettingWithOddEvenInterface_GetIsEven) == 0x000001, "Wrong size on JPGameSettingWithOddEvenInterface_GetIsEven");
static_assert(offsetof(JPGameSettingWithOddEvenInterface_GetIsEven, ReturnValue) == 0x000000, "Member 'JPGameSettingWithOddEvenInterface_GetIsEven::ReturnValue' has a wrong offset!");

// Function JP.JPGameSettingWithOddEvenInterface.SetIsEven
// 0x0001 (0x0001 - 0x0000)
struct JPGameSettingWithOddEvenInterface_SetIsEven final
{
public:
	bool                                          IsEven;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPGameSettingWithOddEvenInterface_SetIsEven) == 0x000001, "Wrong alignment on JPGameSettingWithOddEvenInterface_SetIsEven");
static_assert(sizeof(JPGameSettingWithOddEvenInterface_SetIsEven) == 0x000001, "Wrong size on JPGameSettingWithOddEvenInterface_SetIsEven");
static_assert(offsetof(JPGameSettingWithOddEvenInterface_SetIsEven, IsEven) == 0x000000, "Member 'JPGameSettingWithOddEvenInterface_SetIsEven::IsEven' has a wrong offset!");

// Function JP.ObjectiveManagerComponent.CreateObjectiveInstance
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveManagerComponent_CreateObjectiveInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObjectiveDefinition*                   ObjectiveDefinition;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveManagerComponent_CreateObjectiveInstance) == 0x000008, "Wrong alignment on ObjectiveManagerComponent_CreateObjectiveInstance");
static_assert(sizeof(ObjectiveManagerComponent_CreateObjectiveInstance) == 0x000010, "Wrong size on ObjectiveManagerComponent_CreateObjectiveInstance");
static_assert(offsetof(ObjectiveManagerComponent_CreateObjectiveInstance, WorldContextObject) == 0x000000, "Member 'ObjectiveManagerComponent_CreateObjectiveInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ObjectiveManagerComponent_CreateObjectiveInstance, ObjectiveDefinition) == 0x000008, "Member 'ObjectiveManagerComponent_CreateObjectiveInstance::ObjectiveDefinition' has a wrong offset!");

// Function JP.ObjectiveManagerComponent.CreateObjectiveInstanceForThisObjectiveComponent
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveManagerComponent_CreateObjectiveInstanceForThisObjectiveComponent final
{
public:
	class UObjectiveDefinition*                   ObjectiveDefinition;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseTooltipShowSetting;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectiveManagerComponent_CreateObjectiveInstanceForThisObjectiveComponent) == 0x000008, "Wrong alignment on ObjectiveManagerComponent_CreateObjectiveInstanceForThisObjectiveComponent");
static_assert(sizeof(ObjectiveManagerComponent_CreateObjectiveInstanceForThisObjectiveComponent) == 0x000010, "Wrong size on ObjectiveManagerComponent_CreateObjectiveInstanceForThisObjectiveComponent");
static_assert(offsetof(ObjectiveManagerComponent_CreateObjectiveInstanceForThisObjectiveComponent, ObjectiveDefinition) == 0x000000, "Member 'ObjectiveManagerComponent_CreateObjectiveInstanceForThisObjectiveComponent::ObjectiveDefinition' has a wrong offset!");
static_assert(offsetof(ObjectiveManagerComponent_CreateObjectiveInstanceForThisObjectiveComponent, UseTooltipShowSetting) == 0x000008, "Member 'ObjectiveManagerComponent_CreateObjectiveInstanceForThisObjectiveComponent::UseTooltipShowSetting' has a wrong offset!");

// Function JP.JPSessionManagerSubsystem.GetBuildConfigurationFromSession
// 0x0020 (0x0020 - 0x0000)
struct JPSessionManagerSubsystem_GetBuildConfigurationFromSession final
{
public:
	const class UCommonSession_SearchResult*      SessionSearchResult;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSessionManagerSubsystem_GetBuildConfigurationFromSession) == 0x000008, "Wrong alignment on JPSessionManagerSubsystem_GetBuildConfigurationFromSession");
static_assert(sizeof(JPSessionManagerSubsystem_GetBuildConfigurationFromSession) == 0x000020, "Wrong size on JPSessionManagerSubsystem_GetBuildConfigurationFromSession");
static_assert(offsetof(JPSessionManagerSubsystem_GetBuildConfigurationFromSession, SessionSearchResult) == 0x000000, "Member 'JPSessionManagerSubsystem_GetBuildConfigurationFromSession::SessionSearchResult' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetBuildConfigurationFromSession, Success) == 0x000008, "Member 'JPSessionManagerSubsystem_GetBuildConfigurationFromSession::Success' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetBuildConfigurationFromSession, ReturnValue) == 0x000010, "Member 'JPSessionManagerSubsystem_GetBuildConfigurationFromSession::ReturnValue' has a wrong offset!");

// Function JP.JPSessionManagerSubsystem.GetCreatedTimestampFromSession
// 0x0018 (0x0018 - 0x0000)
struct JPSessionManagerSubsystem_GetCreatedTimestampFromSession final
{
public:
	const class UCommonSession_SearchResult*      SessionSearchResult;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSessionManagerSubsystem_GetCreatedTimestampFromSession) == 0x000008, "Wrong alignment on JPSessionManagerSubsystem_GetCreatedTimestampFromSession");
static_assert(sizeof(JPSessionManagerSubsystem_GetCreatedTimestampFromSession) == 0x000018, "Wrong size on JPSessionManagerSubsystem_GetCreatedTimestampFromSession");
static_assert(offsetof(JPSessionManagerSubsystem_GetCreatedTimestampFromSession, SessionSearchResult) == 0x000000, "Member 'JPSessionManagerSubsystem_GetCreatedTimestampFromSession::SessionSearchResult' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetCreatedTimestampFromSession, Success) == 0x000008, "Member 'JPSessionManagerSubsystem_GetCreatedTimestampFromSession::Success' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetCreatedTimestampFromSession, ReturnValue) == 0x000010, "Member 'JPSessionManagerSubsystem_GetCreatedTimestampFromSession::ReturnValue' has a wrong offset!");

// Function JP.JPSessionManagerSubsystem.GetCurrentLobbyName
// 0x0018 (0x0018 - 0x0000)
struct JPSessionManagerSubsystem_GetCurrentLobbyName final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSessionManagerSubsystem_GetCurrentLobbyName) == 0x000008, "Wrong alignment on JPSessionManagerSubsystem_GetCurrentLobbyName");
static_assert(sizeof(JPSessionManagerSubsystem_GetCurrentLobbyName) == 0x000018, "Wrong size on JPSessionManagerSubsystem_GetCurrentLobbyName");
static_assert(offsetof(JPSessionManagerSubsystem_GetCurrentLobbyName, Success) == 0x000000, "Member 'JPSessionManagerSubsystem_GetCurrentLobbyName::Success' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetCurrentLobbyName, ReturnValue) == 0x000008, "Member 'JPSessionManagerSubsystem_GetCurrentLobbyName::ReturnValue' has a wrong offset!");

// Function JP.JPSessionManagerSubsystem.GetIsInLobbyFromSession
// 0x0010 (0x0010 - 0x0000)
struct JPSessionManagerSubsystem_GetIsInLobbyFromSession final
{
public:
	const class UCommonSession_SearchResult*      SessionSearchResult;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JPSessionManagerSubsystem_GetIsInLobbyFromSession) == 0x000008, "Wrong alignment on JPSessionManagerSubsystem_GetIsInLobbyFromSession");
static_assert(sizeof(JPSessionManagerSubsystem_GetIsInLobbyFromSession) == 0x000010, "Wrong size on JPSessionManagerSubsystem_GetIsInLobbyFromSession");
static_assert(offsetof(JPSessionManagerSubsystem_GetIsInLobbyFromSession, SessionSearchResult) == 0x000000, "Member 'JPSessionManagerSubsystem_GetIsInLobbyFromSession::SessionSearchResult' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetIsInLobbyFromSession, Success) == 0x000008, "Member 'JPSessionManagerSubsystem_GetIsInLobbyFromSession::Success' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetIsInLobbyFromSession, ReturnValue) == 0x000009, "Member 'JPSessionManagerSubsystem_GetIsInLobbyFromSession::ReturnValue' has a wrong offset!");

// Function JP.JPSessionManagerSubsystem.GetIsInNeighbourhoodFromSession
// 0x0010 (0x0010 - 0x0000)
struct JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession final
{
public:
	const class UCommonSession_SearchResult*      SessionSearchResult;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession) == 0x000008, "Wrong alignment on JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession");
static_assert(sizeof(JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession) == 0x000010, "Wrong size on JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession");
static_assert(offsetof(JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession, SessionSearchResult) == 0x000000, "Member 'JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession::SessionSearchResult' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession, Success) == 0x000008, "Member 'JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession::Success' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession, ReturnValue) == 0x000009, "Member 'JPSessionManagerSubsystem_GetIsInNeighbourhoodFromSession::ReturnValue' has a wrong offset!");

// Function JP.JPSessionManagerSubsystem.GetLobbyNameFromSession
// 0x0020 (0x0020 - 0x0000)
struct JPSessionManagerSubsystem_GetLobbyNameFromSession final
{
public:
	const class UCommonSession_SearchResult*      SessionSearchResult;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSessionManagerSubsystem_GetLobbyNameFromSession) == 0x000008, "Wrong alignment on JPSessionManagerSubsystem_GetLobbyNameFromSession");
static_assert(sizeof(JPSessionManagerSubsystem_GetLobbyNameFromSession) == 0x000020, "Wrong size on JPSessionManagerSubsystem_GetLobbyNameFromSession");
static_assert(offsetof(JPSessionManagerSubsystem_GetLobbyNameFromSession, SessionSearchResult) == 0x000000, "Member 'JPSessionManagerSubsystem_GetLobbyNameFromSession::SessionSearchResult' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetLobbyNameFromSession, Success) == 0x000008, "Member 'JPSessionManagerSubsystem_GetLobbyNameFromSession::Success' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetLobbyNameFromSession, ReturnValue) == 0x000010, "Member 'JPSessionManagerSubsystem_GetLobbyNameFromSession::ReturnValue' has a wrong offset!");

// Function JP.JPSessionManagerSubsystem.GetProjectVersionFromSession
// 0x0020 (0x0020 - 0x0000)
struct JPSessionManagerSubsystem_GetProjectVersionFromSession final
{
public:
	const class UCommonSession_SearchResult*      SessionSearchResult;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSessionManagerSubsystem_GetProjectVersionFromSession) == 0x000008, "Wrong alignment on JPSessionManagerSubsystem_GetProjectVersionFromSession");
static_assert(sizeof(JPSessionManagerSubsystem_GetProjectVersionFromSession) == 0x000020, "Wrong size on JPSessionManagerSubsystem_GetProjectVersionFromSession");
static_assert(offsetof(JPSessionManagerSubsystem_GetProjectVersionFromSession, SessionSearchResult) == 0x000000, "Member 'JPSessionManagerSubsystem_GetProjectVersionFromSession::SessionSearchResult' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetProjectVersionFromSession, Success) == 0x000008, "Member 'JPSessionManagerSubsystem_GetProjectVersionFromSession::Success' has a wrong offset!");
static_assert(offsetof(JPSessionManagerSubsystem_GetProjectVersionFromSession, ReturnValue) == 0x000010, "Member 'JPSessionManagerSubsystem_GetProjectVersionFromSession::ReturnValue' has a wrong offset!");

// Function JP.OnlineServicesPartyMember.IsLeader
// 0x0001 (0x0001 - 0x0000)
struct OnlineServicesPartyMember_IsLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineServicesPartyMember_IsLeader) == 0x000001, "Wrong alignment on OnlineServicesPartyMember_IsLeader");
static_assert(sizeof(OnlineServicesPartyMember_IsLeader) == 0x000001, "Wrong size on OnlineServicesPartyMember_IsLeader");
static_assert(offsetof(OnlineServicesPartyMember_IsLeader, ReturnValue) == 0x000000, "Member 'OnlineServicesPartyMember_IsLeader::ReturnValue' has a wrong offset!");

// Function JP.JPSettingPanel.AddSetting
// 0x0008 (0x0008 - 0x0000)
struct JPSettingPanel_AddSetting final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSettingPanel_AddSetting) == 0x000008, "Wrong alignment on JPSettingPanel_AddSetting");
static_assert(sizeof(JPSettingPanel_AddSetting) == 0x000008, "Wrong size on JPSettingPanel_AddSetting");
static_assert(offsetof(JPSettingPanel_AddSetting, InWidget) == 0x000000, "Member 'JPSettingPanel_AddSetting::InWidget' has a wrong offset!");

// Function JP.JPSettingPanel.HighlightSetting
// 0x0010 (0x0010 - 0x0000)
struct JPSettingPanel_HighlightSetting final
{
public:
	class FString                                 InSettingIdentifier;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSettingPanel_HighlightSetting) == 0x000008, "Wrong alignment on JPSettingPanel_HighlightSetting");
static_assert(sizeof(JPSettingPanel_HighlightSetting) == 0x000010, "Wrong size on JPSettingPanel_HighlightSetting");
static_assert(offsetof(JPSettingPanel_HighlightSetting, InSettingIdentifier) == 0x000000, "Member 'JPSettingPanel_HighlightSetting::InSettingIdentifier' has a wrong offset!");

// Function JP.JPSettingPanel.GetAllSettings
// 0x0010 (0x0010 - 0x0000)
struct JPSettingPanel_GetAllSettings final
{
public:
	TArray<class UJPSettingWidget*>               ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSettingPanel_GetAllSettings) == 0x000008, "Wrong alignment on JPSettingPanel_GetAllSettings");
static_assert(sizeof(JPSettingPanel_GetAllSettings) == 0x000010, "Wrong size on JPSettingPanel_GetAllSettings");
static_assert(offsetof(JPSettingPanel_GetAllSettings, ReturnValue) == 0x000000, "Member 'JPSettingPanel_GetAllSettings::ReturnValue' has a wrong offset!");

// Function JP.JPSettingPanel.GetSetting
// 0x0018 (0x0018 - 0x0000)
struct JPSettingPanel_GetSetting final
{
public:
	class FString                                 InSettingIdentifier;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJPSettingWidget*                       ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSettingPanel_GetSetting) == 0x000008, "Wrong alignment on JPSettingPanel_GetSetting");
static_assert(sizeof(JPSettingPanel_GetSetting) == 0x000018, "Wrong size on JPSettingPanel_GetSetting");
static_assert(offsetof(JPSettingPanel_GetSetting, InSettingIdentifier) == 0x000000, "Member 'JPSettingPanel_GetSetting::InSettingIdentifier' has a wrong offset!");
static_assert(offsetof(JPSettingPanel_GetSetting, ReturnValue) == 0x000010, "Member 'JPSettingPanel_GetSetting::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveWorldSubsystem.DestroySubObjective
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveWorldSubsystem_DestroySubObjective final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWorldSubsystem_DestroySubObjective) == 0x000008, "Wrong alignment on ObjectiveWorldSubsystem_DestroySubObjective");
static_assert(sizeof(ObjectiveWorldSubsystem_DestroySubObjective) == 0x000008, "Wrong size on ObjectiveWorldSubsystem_DestroySubObjective");
static_assert(offsetof(ObjectiveWorldSubsystem_DestroySubObjective, DestroyedActor) == 0x000000, "Member 'ObjectiveWorldSubsystem_DestroySubObjective::DestroyedActor' has a wrong offset!");

// Function JP.ObjectiveWorldSubsystem.GetObjectives
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWorldSubsystem_GetObjectives final
{
public:
	TArray<struct FObjectiveAndOwningPlayer>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWorldSubsystem_GetObjectives) == 0x000008, "Wrong alignment on ObjectiveWorldSubsystem_GetObjectives");
static_assert(sizeof(ObjectiveWorldSubsystem_GetObjectives) == 0x000010, "Wrong size on ObjectiveWorldSubsystem_GetObjectives");
static_assert(offsetof(ObjectiveWorldSubsystem_GetObjectives, ReturnValue) == 0x000000, "Member 'ObjectiveWorldSubsystem_GetObjectives::ReturnValue' has a wrong offset!");

// DelegateFunction JP.ObjectiveWorldSubsystem.ObjectiveDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWorldSubsystem_ObjectiveDelegate__DelegateSignature final
{
public:
	struct FObjectiveAndOwningPlayer              ObjectiveDefinition;                               // 0x0000(0x0010)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWorldSubsystem_ObjectiveDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ObjectiveWorldSubsystem_ObjectiveDelegate__DelegateSignature");
static_assert(sizeof(ObjectiveWorldSubsystem_ObjectiveDelegate__DelegateSignature) == 0x000010, "Wrong size on ObjectiveWorldSubsystem_ObjectiveDelegate__DelegateSignature");
static_assert(offsetof(ObjectiveWorldSubsystem_ObjectiveDelegate__DelegateSignature, ObjectiveDefinition) == 0x000000, "Member 'ObjectiveWorldSubsystem_ObjectiveDelegate__DelegateSignature::ObjectiveDefinition' has a wrong offset!");

// DelegateFunction JP.ObjectiveWorldSubsystem.SubObjectiveDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveWorldSubsystem_SubObjectiveDelegate__DelegateSignature final
{
public:
	class ASubObjective*                          SubObjective;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWorldSubsystem_SubObjectiveDelegate__DelegateSignature) == 0x000008, "Wrong alignment on ObjectiveWorldSubsystem_SubObjectiveDelegate__DelegateSignature");
static_assert(sizeof(ObjectiveWorldSubsystem_SubObjectiveDelegate__DelegateSignature) == 0x000008, "Wrong size on ObjectiveWorldSubsystem_SubObjectiveDelegate__DelegateSignature");
static_assert(offsetof(ObjectiveWorldSubsystem_SubObjectiveDelegate__DelegateSignature, SubObjective) == 0x000000, "Member 'ObjectiveWorldSubsystem_SubObjectiveDelegate__DelegateSignature::SubObjective' has a wrong offset!");

// Function JP.JPSettingWidget.SetHighlighted
// 0x0001 (0x0001 - 0x0000)
struct JPSettingWidget_SetHighlighted final
{
public:
	bool                                          InHovered;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSettingWidget_SetHighlighted) == 0x000001, "Wrong alignment on JPSettingWidget_SetHighlighted");
static_assert(sizeof(JPSettingWidget_SetHighlighted) == 0x000001, "Wrong size on JPSettingWidget_SetHighlighted");
static_assert(offsetof(JPSettingWidget_SetHighlighted, InHovered) == 0x000000, "Member 'JPSettingWidget_SetHighlighted::InHovered' has a wrong offset!");

// Function JP.JPSettingWidget.GetSettingPanel
// 0x0008 (0x0008 - 0x0000)
struct JPSettingWidget_GetSettingPanel final
{
public:
	class UJPSettingPanel*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPSettingWidget_GetSettingPanel) == 0x000008, "Wrong alignment on JPSettingWidget_GetSettingPanel");
static_assert(sizeof(JPSettingWidget_GetSettingPanel) == 0x000008, "Wrong size on JPSettingWidget_GetSettingPanel");
static_assert(offsetof(JPSettingWidget_GetSettingPanel, ReturnValue) == 0x000000, "Member 'JPSettingWidget_GetSettingPanel::ReturnValue' has a wrong offset!");

// Function JP.JPTabDescriptorProviderInterface.GetTabDescriptors
// 0x0020 (0x0020 - 0x0000)
struct JPTabDescriptorProviderInterface_GetTabDescriptors final
{
public:
	TArray<struct FLyraTabDescriptor>             ExistingTabDescriptors;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FLyraTabDescriptor>             ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPTabDescriptorProviderInterface_GetTabDescriptors) == 0x000008, "Wrong alignment on JPTabDescriptorProviderInterface_GetTabDescriptors");
static_assert(sizeof(JPTabDescriptorProviderInterface_GetTabDescriptors) == 0x000020, "Wrong size on JPTabDescriptorProviderInterface_GetTabDescriptors");
static_assert(offsetof(JPTabDescriptorProviderInterface_GetTabDescriptors, ExistingTabDescriptors) == 0x000000, "Member 'JPTabDescriptorProviderInterface_GetTabDescriptors::ExistingTabDescriptors' has a wrong offset!");
static_assert(offsetof(JPTabDescriptorProviderInterface_GetTabDescriptors, ReturnValue) == 0x000010, "Member 'JPTabDescriptorProviderInterface_GetTabDescriptors::ReturnValue' has a wrong offset!");

// Function JP.JPTabDescriptorProviderInterface.IsTabDisabled
// 0x000C (0x000C - 0x0000)
struct JPTabDescriptorProviderInterface_IsTabDisabled final
{
public:
	class FName                                   TabName;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JPTabDescriptorProviderInterface_IsTabDisabled) == 0x000004, "Wrong alignment on JPTabDescriptorProviderInterface_IsTabDisabled");
static_assert(sizeof(JPTabDescriptorProviderInterface_IsTabDisabled) == 0x00000C, "Wrong size on JPTabDescriptorProviderInterface_IsTabDisabled");
static_assert(offsetof(JPTabDescriptorProviderInterface_IsTabDisabled, TabName) == 0x000000, "Member 'JPTabDescriptorProviderInterface_IsTabDisabled::TabName' has a wrong offset!");
static_assert(offsetof(JPTabDescriptorProviderInterface_IsTabDisabled, ReturnValue) == 0x000008, "Member 'JPTabDescriptorProviderInterface_IsTabDisabled::ReturnValue' has a wrong offset!");

// Function JP.LyraTabListWidgetBase.GetPreregisteredTabInfo
// 0x0130 (0x0130 - 0x0000)
struct LyraTabListWidgetBase_GetPreregisteredTabInfo final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLyraTabDescriptor                     OutTabInfo;                                        // 0x0010(0x0110)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0xF];                                      // 0x0121(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTabListWidgetBase_GetPreregisteredTabInfo) == 0x000010, "Wrong alignment on LyraTabListWidgetBase_GetPreregisteredTabInfo");
static_assert(sizeof(LyraTabListWidgetBase_GetPreregisteredTabInfo) == 0x000130, "Wrong size on LyraTabListWidgetBase_GetPreregisteredTabInfo");
static_assert(offsetof(LyraTabListWidgetBase_GetPreregisteredTabInfo, TabNameID) == 0x000000, "Member 'LyraTabListWidgetBase_GetPreregisteredTabInfo::TabNameID' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_GetPreregisteredTabInfo, OutTabInfo) == 0x000010, "Member 'LyraTabListWidgetBase_GetPreregisteredTabInfo::OutTabInfo' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_GetPreregisteredTabInfo, ReturnValue) == 0x000120, "Member 'LyraTabListWidgetBase_GetPreregisteredTabInfo::ReturnValue' has a wrong offset!");

// Function JP.LyraTabListWidgetBase.GetVisibleTabCount
// 0x0004 (0x0004 - 0x0000)
struct LyraTabListWidgetBase_GetVisibleTabCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabListWidgetBase_GetVisibleTabCount) == 0x000004, "Wrong alignment on LyraTabListWidgetBase_GetVisibleTabCount");
static_assert(sizeof(LyraTabListWidgetBase_GetVisibleTabCount) == 0x000004, "Wrong size on LyraTabListWidgetBase_GetVisibleTabCount");
static_assert(offsetof(LyraTabListWidgetBase_GetVisibleTabCount, ReturnValue) == 0x000000, "Member 'LyraTabListWidgetBase_GetVisibleTabCount::ReturnValue' has a wrong offset!");

// Function JP.LyraTabListWidgetBase.IsTabVisible
// 0x000C (0x000C - 0x0000)
struct LyraTabListWidgetBase_IsTabVisible final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTabListWidgetBase_IsTabVisible) == 0x000004, "Wrong alignment on LyraTabListWidgetBase_IsTabVisible");
static_assert(sizeof(LyraTabListWidgetBase_IsTabVisible) == 0x00000C, "Wrong size on LyraTabListWidgetBase_IsTabVisible");
static_assert(offsetof(LyraTabListWidgetBase_IsTabVisible, TabId) == 0x000000, "Member 'LyraTabListWidgetBase_IsTabVisible::TabId' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_IsTabVisible, ReturnValue) == 0x000008, "Member 'LyraTabListWidgetBase_IsTabVisible::ReturnValue' has a wrong offset!");

// DelegateFunction JP.LyraTabListWidgetBase.OnTabContentCreated__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonUserWidget*                      TabWidget;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature) == 0x000008, "Wrong alignment on LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature");
static_assert(sizeof(LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature) == 0x000010, "Wrong size on LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature");
static_assert(offsetof(LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature, TabId) == 0x000000, "Member 'LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature::TabId' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature, TabWidget) == 0x000008, "Member 'LyraTabListWidgetBase_OnTabContentCreated__DelegateSignature::TabWidget' has a wrong offset!");

// Function JP.LyraTabListWidgetBase.RegisterDynamicTab
// 0x0120 (0x0120 - 0x0000)
struct LyraTabListWidgetBase_RegisterDynamicTab final
{
public:
	struct FLyraTabDescriptor                     TabDescriptor;                                     // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0xF];                                      // 0x0111(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTabListWidgetBase_RegisterDynamicTab) == 0x000010, "Wrong alignment on LyraTabListWidgetBase_RegisterDynamicTab");
static_assert(sizeof(LyraTabListWidgetBase_RegisterDynamicTab) == 0x000120, "Wrong size on LyraTabListWidgetBase_RegisterDynamicTab");
static_assert(offsetof(LyraTabListWidgetBase_RegisterDynamicTab, TabDescriptor) == 0x000000, "Member 'LyraTabListWidgetBase_RegisterDynamicTab::TabDescriptor' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_RegisterDynamicTab, ReturnValue) == 0x000110, "Member 'LyraTabListWidgetBase_RegisterDynamicTab::ReturnValue' has a wrong offset!");

// Function JP.LyraTabListWidgetBase.SetTabHiddenState
// 0x000C (0x000C - 0x0000)
struct LyraTabListWidgetBase_SetTabHiddenState final
{
public:
	class FName                                   TabNameID;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LyraTabListWidgetBase_SetTabHiddenState) == 0x000004, "Wrong alignment on LyraTabListWidgetBase_SetTabHiddenState");
static_assert(sizeof(LyraTabListWidgetBase_SetTabHiddenState) == 0x00000C, "Wrong size on LyraTabListWidgetBase_SetTabHiddenState");
static_assert(offsetof(LyraTabListWidgetBase_SetTabHiddenState, TabNameID) == 0x000000, "Member 'LyraTabListWidgetBase_SetTabHiddenState::TabNameID' has a wrong offset!");
static_assert(offsetof(LyraTabListWidgetBase_SetTabHiddenState, bHidden) == 0x000008, "Member 'LyraTabListWidgetBase_SetTabHiddenState::bHidden' has a wrong offset!");

// Function JP.LyraTabListWidgetBase.IsFirstTabActive
// 0x0001 (0x0001 - 0x0000)
struct LyraTabListWidgetBase_IsFirstTabActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabListWidgetBase_IsFirstTabActive) == 0x000001, "Wrong alignment on LyraTabListWidgetBase_IsFirstTabActive");
static_assert(sizeof(LyraTabListWidgetBase_IsFirstTabActive) == 0x000001, "Wrong size on LyraTabListWidgetBase_IsFirstTabActive");
static_assert(offsetof(LyraTabListWidgetBase_IsFirstTabActive, ReturnValue) == 0x000000, "Member 'LyraTabListWidgetBase_IsFirstTabActive::ReturnValue' has a wrong offset!");

// Function JP.LyraTabListWidgetBase.IsLastTabActive
// 0x0001 (0x0001 - 0x0000)
struct LyraTabListWidgetBase_IsLastTabActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabListWidgetBase_IsLastTabActive) == 0x000001, "Wrong alignment on LyraTabListWidgetBase_IsLastTabActive");
static_assert(sizeof(LyraTabListWidgetBase_IsLastTabActive) == 0x000001, "Wrong size on LyraTabListWidgetBase_IsLastTabActive");
static_assert(offsetof(LyraTabListWidgetBase_IsLastTabActive, ReturnValue) == 0x000000, "Member 'LyraTabListWidgetBase_IsLastTabActive::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreBlueprintFunctionLibrary.GetTitlePlayerAccountIdFromPlayerController
// 0x0018 (0x0018 - 0x0000)
struct OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerController final
{
public:
	const class APlayerControllerJP*              PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerController) == 0x000008, "Wrong alignment on OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerController");
static_assert(sizeof(OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerController) == 0x000018, "Wrong size on OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerController");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerController, PlayerController) == 0x000000, "Member 'OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerController::PlayerController' has a wrong offset!");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerController, ReturnValue) == 0x000008, "Member 'OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerController::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreBlueprintFunctionLibrary.GetTitlePlayerAccountIdFromPlayerState
// 0x0018 (0x0018 - 0x0000)
struct OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerState final
{
public:
	const class APlayerStateJP*                   PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerState) == 0x000008, "Wrong alignment on OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerState");
static_assert(sizeof(OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerState) == 0x000018, "Wrong size on OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerState");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerState, PlayerState) == 0x000000, "Member 'OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerState, ReturnValue) == 0x000008, "Member 'OnlineStoreBlueprintFunctionLibrary_GetTitlePlayerAccountIdFromPlayerState::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreBlueprintFunctionLibrary.TryGetCurrencyBundleDataAsset
// 0x0070 (0x0070 - 0x0000)
struct OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset final
{
public:
	struct FPlatformStoreOffer                    PlatformStoreOffer;                                // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UOnlineCurrencyBundleDataAsset> CurrencyBundleDataAsset;                           // 0x0040(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset) == 0x000008, "Wrong alignment on OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset");
static_assert(sizeof(OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset) == 0x000070, "Wrong size on OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset, PlatformStoreOffer) == 0x000000, "Member 'OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset::PlatformStoreOffer' has a wrong offset!");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset, CurrencyBundleDataAsset) == 0x000040, "Member 'OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset::CurrencyBundleDataAsset' has a wrong offset!");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset, ReturnValue) == 0x000068, "Member 'OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyBundleDataAsset::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreBlueprintFunctionLibrary.TryGetCurrencyFromTagIdentifier
// 0x0038 (0x0038 - 0x0000)
struct OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier final
{
public:
	struct FGameplayTag                           CurrencyIdentifier;                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UOnlineCurrency>         OutCurrency;                                       // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier) == 0x000008, "Wrong alignment on OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier");
static_assert(sizeof(OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier) == 0x000038, "Wrong size on OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier, CurrencyIdentifier) == 0x000000, "Member 'OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier::CurrencyIdentifier' has a wrong offset!");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier, OutCurrency) == 0x000008, "Member 'OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier::OutCurrency' has a wrong offset!");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier, ReturnValue) == 0x000030, "Member 'OnlineStoreBlueprintFunctionLibrary_TryGetCurrencyFromTagIdentifier::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreBlueprintFunctionLibrary.TryGetLoadoutStartingItemSkinID
// 0x0040 (0x0040 - 0x0000)
struct OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID final
{
public:
	struct FNeighborLoadout                       NeighborLoadout;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OutTag;                                            // 0x0030(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID) == 0x000008, "Wrong alignment on OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID");
static_assert(sizeof(OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID) == 0x000040, "Wrong size on OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID, NeighborLoadout) == 0x000000, "Member 'OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID::NeighborLoadout' has a wrong offset!");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID, OutTag) == 0x000030, "Member 'OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID::OutTag' has a wrong offset!");
static_assert(offsetof(OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID, ReturnValue) == 0x000038, "Member 'OnlineStoreBlueprintFunctionLibrary_TryGetLoadoutStartingItemSkinID::ReturnValue' has a wrong offset!");

// Function JP.EconomyDefinition.GetMoneyDisplayNameText
// 0x0010 (0x0010 - 0x0000)
struct EconomyDefinition_GetMoneyDisplayNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomyDefinition_GetMoneyDisplayNameText) == 0x000008, "Wrong alignment on EconomyDefinition_GetMoneyDisplayNameText");
static_assert(sizeof(EconomyDefinition_GetMoneyDisplayNameText) == 0x000010, "Wrong size on EconomyDefinition_GetMoneyDisplayNameText");
static_assert(offsetof(EconomyDefinition_GetMoneyDisplayNameText, ReturnValue) == 0x000000, "Member 'EconomyDefinition_GetMoneyDisplayNameText::ReturnValue' has a wrong offset!");

// Function JP.EconomyDefinition.GetPerfectnessDisplayNameText
// 0x0010 (0x0010 - 0x0000)
struct EconomyDefinition_GetPerfectnessDisplayNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomyDefinition_GetPerfectnessDisplayNameText) == 0x000008, "Wrong alignment on EconomyDefinition_GetPerfectnessDisplayNameText");
static_assert(sizeof(EconomyDefinition_GetPerfectnessDisplayNameText) == 0x000010, "Wrong size on EconomyDefinition_GetPerfectnessDisplayNameText");
static_assert(offsetof(EconomyDefinition_GetPerfectnessDisplayNameText, ReturnValue) == 0x000000, "Member 'EconomyDefinition_GetPerfectnessDisplayNameText::ReturnValue' has a wrong offset!");

// Function JP.EconomyDefinition.GetWoodDisplayNameText
// 0x0010 (0x0010 - 0x0000)
struct EconomyDefinition_GetWoodDisplayNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomyDefinition_GetWoodDisplayNameText) == 0x000008, "Wrong alignment on EconomyDefinition_GetWoodDisplayNameText");
static_assert(sizeof(EconomyDefinition_GetWoodDisplayNameText) == 0x000010, "Wrong size on EconomyDefinition_GetWoodDisplayNameText");
static_assert(offsetof(EconomyDefinition_GetWoodDisplayNameText, ReturnValue) == 0x000000, "Member 'EconomyDefinition_GetWoodDisplayNameText::ReturnValue' has a wrong offset!");

// Function JP.EconomyDefinition.IsValid
// 0x0001 (0x0001 - 0x0000)
struct EconomyDefinition_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomyDefinition_IsValid) == 0x000001, "Wrong alignment on EconomyDefinition_IsValid");
static_assert(sizeof(EconomyDefinition_IsValid) == 0x000001, "Wrong size on EconomyDefinition_IsValid");
static_assert(offsetof(EconomyDefinition_IsValid, ReturnValue) == 0x000000, "Member 'EconomyDefinition_IsValid::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.GetObjectivesComponent
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveBase_GetObjectivesComponent final
{
public:
	class UObjectivesComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_GetObjectivesComponent) == 0x000008, "Wrong alignment on ObjectiveBase_GetObjectivesComponent");
static_assert(sizeof(ObjectiveBase_GetObjectivesComponent) == 0x000008, "Wrong size on ObjectiveBase_GetObjectivesComponent");
static_assert(offsetof(ObjectiveBase_GetObjectivesComponent, ReturnValue) == 0x000000, "Member 'ObjectiveBase_GetObjectivesComponent::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.HasAuthority
// 0x0001 (0x0001 - 0x0000)
struct ObjectiveBase_HasAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_HasAuthority) == 0x000001, "Wrong alignment on ObjectiveBase_HasAuthority");
static_assert(sizeof(ObjectiveBase_HasAuthority) == 0x000001, "Wrong size on ObjectiveBase_HasAuthority");
static_assert(offsetof(ObjectiveBase_HasAuthority, ReturnValue) == 0x000000, "Member 'ObjectiveBase_HasAuthority::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.SpawnTasks
// 0x0020 (0x0020 - 0x0000)
struct ObjectiveBase_SpawnTasks final
{
public:
	TSubclassOf<class AActor>                     TaskType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AmountToSpawn;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_SpawnTasks) == 0x000008, "Wrong alignment on ObjectiveBase_SpawnTasks");
static_assert(sizeof(ObjectiveBase_SpawnTasks) == 0x000020, "Wrong size on ObjectiveBase_SpawnTasks");
static_assert(offsetof(ObjectiveBase_SpawnTasks, TaskType) == 0x000000, "Member 'ObjectiveBase_SpawnTasks::TaskType' has a wrong offset!");
static_assert(offsetof(ObjectiveBase_SpawnTasks, AmountToSpawn) == 0x000008, "Member 'ObjectiveBase_SpawnTasks::AmountToSpawn' has a wrong offset!");
static_assert(offsetof(ObjectiveBase_SpawnTasks, ReturnValue) == 0x000010, "Member 'ObjectiveBase_SpawnTasks::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.GetGroundsKeeper
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveBase_GetGroundsKeeper final
{
public:
	class AGroundsKeeper*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_GetGroundsKeeper) == 0x000008, "Wrong alignment on ObjectiveBase_GetGroundsKeeper");
static_assert(sizeof(ObjectiveBase_GetGroundsKeeper) == 0x000008, "Wrong size on ObjectiveBase_GetGroundsKeeper");
static_assert(offsetof(ObjectiveBase_GetGroundsKeeper, ReturnValue) == 0x000000, "Member 'ObjectiveBase_GetGroundsKeeper::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.GetIsWinningCondition
// 0x0001 (0x0001 - 0x0000)
struct ObjectiveBase_GetIsWinningCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_GetIsWinningCondition) == 0x000001, "Wrong alignment on ObjectiveBase_GetIsWinningCondition");
static_assert(sizeof(ObjectiveBase_GetIsWinningCondition) == 0x000001, "Wrong size on ObjectiveBase_GetIsWinningCondition");
static_assert(offsetof(ObjectiveBase_GetIsWinningCondition, ReturnValue) == 0x000000, "Member 'ObjectiveBase_GetIsWinningCondition::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.GetMatchConfiguration
// 0x0058 (0x0058 - 0x0000)
struct ObjectiveBase_GetMatchConfiguration final
{
public:
	struct FMatchConfiguration                    ReturnValue;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_GetMatchConfiguration) == 0x000008, "Wrong alignment on ObjectiveBase_GetMatchConfiguration");
static_assert(sizeof(ObjectiveBase_GetMatchConfiguration) == 0x000058, "Wrong size on ObjectiveBase_GetMatchConfiguration");
static_assert(offsetof(ObjectiveBase_GetMatchConfiguration, ReturnValue) == 0x000000, "Member 'ObjectiveBase_GetMatchConfiguration::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.GetProgressionText
// 0x0020 (0x0020 - 0x0000)
struct ObjectiveBase_GetProgressionText final
{
public:
	class FText                                   RowData;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_GetProgressionText) == 0x000008, "Wrong alignment on ObjectiveBase_GetProgressionText");
static_assert(sizeof(ObjectiveBase_GetProgressionText) == 0x000020, "Wrong size on ObjectiveBase_GetProgressionText");
static_assert(offsetof(ObjectiveBase_GetProgressionText, RowData) == 0x000000, "Member 'ObjectiveBase_GetProgressionText::RowData' has a wrong offset!");
static_assert(offsetof(ObjectiveBase_GetProgressionText, ReturnValue) == 0x000010, "Member 'ObjectiveBase_GetProgressionText::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.GetState
// 0x0001 (0x0001 - 0x0000)
struct ObjectiveBase_GetState final
{
public:
	EObjectiveState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_GetState) == 0x000001, "Wrong alignment on ObjectiveBase_GetState");
static_assert(sizeof(ObjectiveBase_GetState) == 0x000001, "Wrong size on ObjectiveBase_GetState");
static_assert(offsetof(ObjectiveBase_GetState, ReturnValue) == 0x000000, "Member 'ObjectiveBase_GetState::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.GetTeam
// 0x0038 (0x0038 - 0x0000)
struct ObjectiveBase_GetTeam final
{
public:
	struct FTeam                                  ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_GetTeam) == 0x000008, "Wrong alignment on ObjectiveBase_GetTeam");
static_assert(sizeof(ObjectiveBase_GetTeam) == 0x000038, "Wrong size on ObjectiveBase_GetTeam");
static_assert(offsetof(ObjectiveBase_GetTeam, ReturnValue) == 0x000000, "Member 'ObjectiveBase_GetTeam::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.GetTeamID
// 0x0001 (0x0001 - 0x0000)
struct ObjectiveBase_GetTeamID final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_GetTeamID) == 0x000001, "Wrong alignment on ObjectiveBase_GetTeamID");
static_assert(sizeof(ObjectiveBase_GetTeamID) == 0x000001, "Wrong size on ObjectiveBase_GetTeamID");
static_assert(offsetof(ObjectiveBase_GetTeamID, ReturnValue) == 0x000000, "Member 'ObjectiveBase_GetTeamID::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.GetTitle
// 0x0020 (0x0020 - 0x0000)
struct ObjectiveBase_GetTitle final
{
public:
	class FText                                   RowData;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_GetTitle) == 0x000008, "Wrong alignment on ObjectiveBase_GetTitle");
static_assert(sizeof(ObjectiveBase_GetTitle) == 0x000020, "Wrong size on ObjectiveBase_GetTitle");
static_assert(offsetof(ObjectiveBase_GetTitle, RowData) == 0x000000, "Member 'ObjectiveBase_GetTitle::RowData' has a wrong offset!");
static_assert(offsetof(ObjectiveBase_GetTitle, ReturnValue) == 0x000010, "Member 'ObjectiveBase_GetTitle::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveBase.IsLocalPlayerRelated
// 0x0001 (0x0001 - 0x0000)
struct ObjectiveBase_IsLocalPlayerRelated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveBase_IsLocalPlayerRelated) == 0x000001, "Wrong alignment on ObjectiveBase_IsLocalPlayerRelated");
static_assert(sizeof(ObjectiveBase_IsLocalPlayerRelated) == 0x000001, "Wrong size on ObjectiveBase_IsLocalPlayerRelated");
static_assert(offsetof(ObjectiveBase_IsLocalPlayerRelated, ReturnValue) == 0x000000, "Member 'ObjectiveBase_IsLocalPlayerRelated::ReturnValue' has a wrong offset!");

// Function JP.JPTabPanelContent.SetTabVisibility
// 0x0008 (0x0008 - 0x0000)
struct JPTabPanelContent_SetTabVisibility final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InDirection;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPTabPanelContent_SetTabVisibility) == 0x000004, "Wrong alignment on JPTabPanelContent_SetTabVisibility");
static_assert(sizeof(JPTabPanelContent_SetTabVisibility) == 0x000008, "Wrong size on JPTabPanelContent_SetTabVisibility");
static_assert(offsetof(JPTabPanelContent_SetTabVisibility, InVisible) == 0x000000, "Member 'JPTabPanelContent_SetTabVisibility::InVisible' has a wrong offset!");
static_assert(offsetof(JPTabPanelContent_SetTabVisibility, InDirection) == 0x000004, "Member 'JPTabPanelContent_SetTabVisibility::InDirection' has a wrong offset!");

// Function JP.JPTabPanelContent.GetIdentifier
// 0x0010 (0x0010 - 0x0000)
struct JPTabPanelContent_GetIdentifier final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPTabPanelContent_GetIdentifier) == 0x000008, "Wrong alignment on JPTabPanelContent_GetIdentifier");
static_assert(sizeof(JPTabPanelContent_GetIdentifier) == 0x000010, "Wrong size on JPTabPanelContent_GetIdentifier");
static_assert(offsetof(JPTabPanelContent_GetIdentifier, ReturnValue) == 0x000000, "Member 'JPTabPanelContent_GetIdentifier::ReturnValue' has a wrong offset!");

// Function JP.JPTabPanelContent.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct JPTabPanelContent_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPTabPanelContent_GetTitle) == 0x000008, "Wrong alignment on JPTabPanelContent_GetTitle");
static_assert(sizeof(JPTabPanelContent_GetTitle) == 0x000010, "Wrong size on JPTabPanelContent_GetTitle");
static_assert(offsetof(JPTabPanelContent_GetTitle, ReturnValue) == 0x000000, "Member 'JPTabPanelContent_GetTitle::ReturnValue' has a wrong offset!");

// Function JP.JPTabPanel.ApplyViewModel
// 0x0018 (0x0018 - 0x0000)
struct JPTabPanel_ApplyViewModel final
{
public:
	struct FJPTabPanelViewModel                   InViewModel;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPTabPanel_ApplyViewModel) == 0x000008, "Wrong alignment on JPTabPanel_ApplyViewModel");
static_assert(sizeof(JPTabPanel_ApplyViewModel) == 0x000018, "Wrong size on JPTabPanel_ApplyViewModel");
static_assert(offsetof(JPTabPanel_ApplyViewModel, InViewModel) == 0x000000, "Member 'JPTabPanel_ApplyViewModel::InViewModel' has a wrong offset!");

// Function JP.JPTabPanel.SelectDefaultTab
// 0x0001 (0x0001 - 0x0000)
struct JPTabPanel_SelectDefaultTab final
{
public:
	bool                                          InPlayAnimation;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPTabPanel_SelectDefaultTab) == 0x000001, "Wrong alignment on JPTabPanel_SelectDefaultTab");
static_assert(sizeof(JPTabPanel_SelectDefaultTab) == 0x000001, "Wrong size on JPTabPanel_SelectDefaultTab");
static_assert(offsetof(JPTabPanel_SelectDefaultTab, InPlayAnimation) == 0x000000, "Member 'JPTabPanel_SelectDefaultTab::InPlayAnimation' has a wrong offset!");

// Function JP.JPTabPanel.SelectTab
// 0x0018 (0x0018 - 0x0000)
struct JPTabPanel_SelectTab final
{
public:
	class FString                                 InIdentifier;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPlayAnimation;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JPTabPanel_SelectTab) == 0x000008, "Wrong alignment on JPTabPanel_SelectTab");
static_assert(sizeof(JPTabPanel_SelectTab) == 0x000018, "Wrong size on JPTabPanel_SelectTab");
static_assert(offsetof(JPTabPanel_SelectTab, InIdentifier) == 0x000000, "Member 'JPTabPanel_SelectTab::InIdentifier' has a wrong offset!");
static_assert(offsetof(JPTabPanel_SelectTab, InPlayAnimation) == 0x000010, "Member 'JPTabPanel_SelectTab::InPlayAnimation' has a wrong offset!");

// Function JP.JPTimeFunctionLibrary.TimeSecondsToMinuteSeconds
// 0x0018 (0x0018 - 0x0000)
struct JPTimeFunctionLibrary_TimeSecondsToMinuteSeconds final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPTimeFunctionLibrary_TimeSecondsToMinuteSeconds) == 0x000008, "Wrong alignment on JPTimeFunctionLibrary_TimeSecondsToMinuteSeconds");
static_assert(sizeof(JPTimeFunctionLibrary_TimeSecondsToMinuteSeconds) == 0x000018, "Wrong size on JPTimeFunctionLibrary_TimeSecondsToMinuteSeconds");
static_assert(offsetof(JPTimeFunctionLibrary_TimeSecondsToMinuteSeconds, Seconds) == 0x000000, "Member 'JPTimeFunctionLibrary_TimeSecondsToMinuteSeconds::Seconds' has a wrong offset!");
static_assert(offsetof(JPTimeFunctionLibrary_TimeSecondsToMinuteSeconds, ReturnValue) == 0x000008, "Member 'JPTimeFunctionLibrary_TimeSecondsToMinuteSeconds::ReturnValue' has a wrong offset!");

// Function JP.JPUIBlueprintFunctionLibrary.InsertPanelChildWidgetAt
// 0x0018 (0x0018 - 0x0000)
struct JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt final
{
public:
	class UPanelWidget*                           PanelWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NewChildWidget;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt) == 0x000008, "Wrong alignment on JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt");
static_assert(sizeof(JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt) == 0x000018, "Wrong size on JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt, PanelWidget) == 0x000000, "Member 'JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt::PanelWidget' has a wrong offset!");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt, Index_0) == 0x000008, "Member 'JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt::Index_0' has a wrong offset!");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt, NewChildWidget) == 0x000010, "Member 'JPUIBlueprintFunctionLibrary_InsertPanelChildWidgetAt::NewChildWidget' has a wrong offset!");

// Function JP.JPUIBlueprintFunctionLibrary.ReplaceAllChildWidgetsWithArrayOfWidgets
// 0x0018 (0x0018 - 0x0000)
struct JPUIBlueprintFunctionLibrary_ReplaceAllChildWidgetsWithArrayOfWidgets final
{
public:
	class UPanelWidget*                           PanelWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        NewChildWidgets;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPUIBlueprintFunctionLibrary_ReplaceAllChildWidgetsWithArrayOfWidgets) == 0x000008, "Wrong alignment on JPUIBlueprintFunctionLibrary_ReplaceAllChildWidgetsWithArrayOfWidgets");
static_assert(sizeof(JPUIBlueprintFunctionLibrary_ReplaceAllChildWidgetsWithArrayOfWidgets) == 0x000018, "Wrong size on JPUIBlueprintFunctionLibrary_ReplaceAllChildWidgetsWithArrayOfWidgets");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_ReplaceAllChildWidgetsWithArrayOfWidgets, PanelWidget) == 0x000000, "Member 'JPUIBlueprintFunctionLibrary_ReplaceAllChildWidgetsWithArrayOfWidgets::PanelWidget' has a wrong offset!");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_ReplaceAllChildWidgetsWithArrayOfWidgets, NewChildWidgets) == 0x000008, "Member 'JPUIBlueprintFunctionLibrary_ReplaceAllChildWidgetsWithArrayOfWidgets::NewChildWidgets' has a wrong offset!");

// Function JP.JPUIBlueprintFunctionLibrary.ShiftPanelChildWidget
// 0x0018 (0x0018 - 0x0000)
struct JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget final
{
public:
	class UPanelWidget*                           PanelWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NewChildWidget;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget) == 0x000008, "Wrong alignment on JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget");
static_assert(sizeof(JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget) == 0x000018, "Wrong size on JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget, PanelWidget) == 0x000000, "Member 'JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget::PanelWidget' has a wrong offset!");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget, Index_0) == 0x000008, "Member 'JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget::Index_0' has a wrong offset!");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget, NewChildWidget) == 0x000010, "Member 'JPUIBlueprintFunctionLibrary_ShiftPanelChildWidget::NewChildWidget' has a wrong offset!");

// Function JP.JPUIBlueprintFunctionLibrary.ShiftPanelChildWidgetRelative
// 0x0018 (0x0018 - 0x0000)
struct JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative final
{
public:
	class UPanelWidget*                           PanelWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelativeIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                NewChildWidget;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative) == 0x000008, "Wrong alignment on JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative");
static_assert(sizeof(JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative) == 0x000018, "Wrong size on JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative, PanelWidget) == 0x000000, "Member 'JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative::PanelWidget' has a wrong offset!");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative, RelativeIndex) == 0x000008, "Member 'JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative::RelativeIndex' has a wrong offset!");
static_assert(offsetof(JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative, NewChildWidget) == 0x000010, "Member 'JPUIBlueprintFunctionLibrary_ShiftPanelChildWidgetRelative::NewChildWidget' has a wrong offset!");

// Function JP.OnlineServicesLobbySubsystem.CreateLobby
// 0x0038 (0x0038 - 0x0000)
struct OnlineServicesLobbySubsystem_CreateLobby final
{
public:
	struct FLobbyConfiguration                    InConfig;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineServicesLobbySubsystem_CreateLobby) == 0x000008, "Wrong alignment on OnlineServicesLobbySubsystem_CreateLobby");
static_assert(sizeof(OnlineServicesLobbySubsystem_CreateLobby) == 0x000038, "Wrong size on OnlineServicesLobbySubsystem_CreateLobby");
static_assert(offsetof(OnlineServicesLobbySubsystem_CreateLobby, InConfig) == 0x000000, "Member 'OnlineServicesLobbySubsystem_CreateLobby::InConfig' has a wrong offset!");

// Function JP.OnlineServicesLobbySubsystem.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct OnlineServicesLobbySubsystem_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineServicesLobbySubsystem_IsEnabled) == 0x000001, "Wrong alignment on OnlineServicesLobbySubsystem_IsEnabled");
static_assert(sizeof(OnlineServicesLobbySubsystem_IsEnabled) == 0x000001, "Wrong size on OnlineServicesLobbySubsystem_IsEnabled");
static_assert(offsetof(OnlineServicesLobbySubsystem_IsEnabled, ReturnValue) == 0x000000, "Member 'OnlineServicesLobbySubsystem_IsEnabled::ReturnValue' has a wrong offset!");

// Function JP.OnlineServicesLobbySubsystem.IsQuickPlayMatchmakingInProgress
// 0x0001 (0x0001 - 0x0000)
struct OnlineServicesLobbySubsystem_IsQuickPlayMatchmakingInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineServicesLobbySubsystem_IsQuickPlayMatchmakingInProgress) == 0x000001, "Wrong alignment on OnlineServicesLobbySubsystem_IsQuickPlayMatchmakingInProgress");
static_assert(sizeof(OnlineServicesLobbySubsystem_IsQuickPlayMatchmakingInProgress) == 0x000001, "Wrong size on OnlineServicesLobbySubsystem_IsQuickPlayMatchmakingInProgress");
static_assert(offsetof(OnlineServicesLobbySubsystem_IsQuickPlayMatchmakingInProgress, ReturnValue) == 0x000000, "Member 'OnlineServicesLobbySubsystem_IsQuickPlayMatchmakingInProgress::ReturnValue' has a wrong offset!");

// Function JP.JPUIControllerBase.OnEulaError
// 0x0010 (0x0010 - 0x0000)
struct JPUIControllerBase_OnEulaError final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPUIControllerBase_OnEulaError) == 0x000008, "Wrong alignment on JPUIControllerBase_OnEulaError");
static_assert(sizeof(JPUIControllerBase_OnEulaError) == 0x000010, "Wrong size on JPUIControllerBase_OnEulaError");
static_assert(offsetof(JPUIControllerBase_OnEulaError, Message) == 0x000000, "Member 'JPUIControllerBase_OnEulaError::Message' has a wrong offset!");

// Function JP.JPUIControllerBase.OnEULAWidgetShown
// 0x0008 (0x0008 - 0x0000)
struct JPUIControllerBase_OnEULAWidgetShown final
{
public:
	class UEULAWidget*                            EULAWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPUIControllerBase_OnEULAWidgetShown) == 0x000008, "Wrong alignment on JPUIControllerBase_OnEULAWidgetShown");
static_assert(sizeof(JPUIControllerBase_OnEULAWidgetShown) == 0x000008, "Wrong size on JPUIControllerBase_OnEULAWidgetShown");
static_assert(offsetof(JPUIControllerBase_OnEULAWidgetShown, EULAWidget) == 0x000000, "Member 'JPUIControllerBase_OnEULAWidgetShown::EULAWidget' has a wrong offset!");

// Function JP.JPUIControllerBase.SetShouldApplyMenuFrameRateLimit
// 0x0001 (0x0001 - 0x0000)
struct JPUIControllerBase_SetShouldApplyMenuFrameRateLimit final
{
public:
	bool                                          InApplyLimit;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPUIControllerBase_SetShouldApplyMenuFrameRateLimit) == 0x000001, "Wrong alignment on JPUIControllerBase_SetShouldApplyMenuFrameRateLimit");
static_assert(sizeof(JPUIControllerBase_SetShouldApplyMenuFrameRateLimit) == 0x000001, "Wrong size on JPUIControllerBase_SetShouldApplyMenuFrameRateLimit");
static_assert(offsetof(JPUIControllerBase_SetShouldApplyMenuFrameRateLimit, InApplyLimit) == 0x000000, "Member 'JPUIControllerBase_SetShouldApplyMenuFrameRateLimit::InApplyLimit' has a wrong offset!");

// Function JP.JPUIControllerBase.SetShouldShowLoadingScreen
// 0x0018 (0x0018 - 0x0000)
struct JPUIControllerBase_SetShouldShowLoadingScreen final
{
public:
	bool                                          InShouldShowLoadingScreen;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InReason;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPUIControllerBase_SetShouldShowLoadingScreen) == 0x000008, "Wrong alignment on JPUIControllerBase_SetShouldShowLoadingScreen");
static_assert(sizeof(JPUIControllerBase_SetShouldShowLoadingScreen) == 0x000018, "Wrong size on JPUIControllerBase_SetShouldShowLoadingScreen");
static_assert(offsetof(JPUIControllerBase_SetShouldShowLoadingScreen, InShouldShowLoadingScreen) == 0x000000, "Member 'JPUIControllerBase_SetShouldShowLoadingScreen::InShouldShowLoadingScreen' has a wrong offset!");
static_assert(offsetof(JPUIControllerBase_SetShouldShowLoadingScreen, InReason) == 0x000008, "Member 'JPUIControllerBase_SetShouldShowLoadingScreen::InReason' has a wrong offset!");

// Function JP.JPUIControllerBase.TryJoinRequestedSession
// 0x0001 (0x0001 - 0x0000)
struct JPUIControllerBase_TryJoinRequestedSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JPUIControllerBase_TryJoinRequestedSession) == 0x000001, "Wrong alignment on JPUIControllerBase_TryJoinRequestedSession");
static_assert(sizeof(JPUIControllerBase_TryJoinRequestedSession) == 0x000001, "Wrong size on JPUIControllerBase_TryJoinRequestedSession");
static_assert(offsetof(JPUIControllerBase_TryJoinRequestedSession, ReturnValue) == 0x000000, "Member 'JPUIControllerBase_TryJoinRequestedSession::ReturnValue' has a wrong offset!");

// Function JP.LevelVoteComponent.GetVotingLevelFromIndex
// 0x0070 (0x0070 - 0x0000)
struct LevelVoteComponent_GetVotingLevelFromIndex final
{
public:
	uint8                                         LevelIndex;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelVoteData                         ReturnValue;                                       // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoteComponent_GetVotingLevelFromIndex) == 0x000008, "Wrong alignment on LevelVoteComponent_GetVotingLevelFromIndex");
static_assert(sizeof(LevelVoteComponent_GetVotingLevelFromIndex) == 0x000070, "Wrong size on LevelVoteComponent_GetVotingLevelFromIndex");
static_assert(offsetof(LevelVoteComponent_GetVotingLevelFromIndex, LevelIndex) == 0x000000, "Member 'LevelVoteComponent_GetVotingLevelFromIndex::LevelIndex' has a wrong offset!");
static_assert(offsetof(LevelVoteComponent_GetVotingLevelFromIndex, ReturnValue) == 0x000008, "Member 'LevelVoteComponent_GetVotingLevelFromIndex::ReturnValue' has a wrong offset!");

// Function JP.LevelVoteComponent.VoteOnLevel
// 0x0001 (0x0001 - 0x0000)
struct LevelVoteComponent_VoteOnLevel final
{
public:
	uint8                                         LevelIndex;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoteComponent_VoteOnLevel) == 0x000001, "Wrong alignment on LevelVoteComponent_VoteOnLevel");
static_assert(sizeof(LevelVoteComponent_VoteOnLevel) == 0x000001, "Wrong size on LevelVoteComponent_VoteOnLevel");
static_assert(offsetof(LevelVoteComponent_VoteOnLevel, LevelIndex) == 0x000000, "Member 'LevelVoteComponent_VoteOnLevel::LevelIndex' has a wrong offset!");

// Function JP.LevelVoteComponent.GetVoteState
// 0x0001 (0x0001 - 0x0000)
struct LevelVoteComponent_GetVoteState final
{
public:
	EVoteState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelVoteComponent_GetVoteState) == 0x000001, "Wrong alignment on LevelVoteComponent_GetVoteState");
static_assert(sizeof(LevelVoteComponent_GetVoteState) == 0x000001, "Wrong size on LevelVoteComponent_GetVoteState");
static_assert(offsetof(LevelVoteComponent_GetVoteState, ReturnValue) == 0x000000, "Member 'LevelVoteComponent_GetVoteState::ReturnValue' has a wrong offset!");

// Function JP.ListenServerBackfillWorldSubsystem.OnAllPlayersReadyAndWaitingUpdated
// 0x0001 (0x0001 - 0x0000)
struct ListenServerBackfillWorldSubsystem_OnAllPlayersReadyAndWaitingUpdated final
{
public:
	bool                                          AllPlayersReadyAndWaiting;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ListenServerBackfillWorldSubsystem_OnAllPlayersReadyAndWaitingUpdated) == 0x000001, "Wrong alignment on ListenServerBackfillWorldSubsystem_OnAllPlayersReadyAndWaitingUpdated");
static_assert(sizeof(ListenServerBackfillWorldSubsystem_OnAllPlayersReadyAndWaitingUpdated) == 0x000001, "Wrong size on ListenServerBackfillWorldSubsystem_OnAllPlayersReadyAndWaitingUpdated");
static_assert(offsetof(ListenServerBackfillWorldSubsystem_OnAllPlayersReadyAndWaitingUpdated, AllPlayersReadyAndWaiting) == 0x000000, "Member 'ListenServerBackfillWorldSubsystem_OnAllPlayersReadyAndWaitingUpdated::AllPlayersReadyAndWaiting' has a wrong offset!");

// Function JP.LoadGuardButton.SetButtonText
// 0x0010 (0x0010 - 0x0000)
struct LoadGuardButton_SetButtonText final
{
public:
	class FText                                   InButtonText;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadGuardButton_SetButtonText) == 0x000008, "Wrong alignment on LoadGuardButton_SetButtonText");
static_assert(sizeof(LoadGuardButton_SetButtonText) == 0x000010, "Wrong size on LoadGuardButton_SetButtonText");
static_assert(offsetof(LoadGuardButton_SetButtonText, InButtonText) == 0x000000, "Member 'LoadGuardButton_SetButtonText::InButtonText' has a wrong offset!");

// Function JP.LoadoutVerificationServerComponent.OnInventoryIdsChanged
// 0x0018 (0x0018 - 0x0000)
struct LoadoutVerificationServerComponent_OnInventoryIdsChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   InventoryIds;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutVerificationServerComponent_OnInventoryIdsChanged) == 0x000008, "Wrong alignment on LoadoutVerificationServerComponent_OnInventoryIdsChanged");
static_assert(sizeof(LoadoutVerificationServerComponent_OnInventoryIdsChanged) == 0x000018, "Wrong size on LoadoutVerificationServerComponent_OnInventoryIdsChanged");
static_assert(offsetof(LoadoutVerificationServerComponent_OnInventoryIdsChanged, PlayerState) == 0x000000, "Member 'LoadoutVerificationServerComponent_OnInventoryIdsChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LoadoutVerificationServerComponent_OnInventoryIdsChanged, InventoryIds) == 0x000008, "Member 'LoadoutVerificationServerComponent_OnInventoryIdsChanged::InventoryIds' has a wrong offset!");

// Function JP.LoadoutVerificationServerComponent.OnMasterIdAcquired
// 0x0018 (0x0018 - 0x0000)
struct LoadoutVerificationServerComponent_OnMasterIdAcquired final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MasterPlayerAccountId;                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutVerificationServerComponent_OnMasterIdAcquired) == 0x000008, "Wrong alignment on LoadoutVerificationServerComponent_OnMasterIdAcquired");
static_assert(sizeof(LoadoutVerificationServerComponent_OnMasterIdAcquired) == 0x000018, "Wrong size on LoadoutVerificationServerComponent_OnMasterIdAcquired");
static_assert(offsetof(LoadoutVerificationServerComponent_OnMasterIdAcquired, PlayerState) == 0x000000, "Member 'LoadoutVerificationServerComponent_OnMasterIdAcquired::PlayerState' has a wrong offset!");
static_assert(offsetof(LoadoutVerificationServerComponent_OnMasterIdAcquired, MasterPlayerAccountId) == 0x000008, "Member 'LoadoutVerificationServerComponent_OnMasterIdAcquired::MasterPlayerAccountId' has a wrong offset!");

// Function JP.LoadoutVerificationServerComponent.OnPlayerXPChanged
// 0x0028 (0x0028 - 0x0000)
struct LoadoutVerificationServerComponent_OnPlayerXPChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerXP                              PlayerXP;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutVerificationServerComponent_OnPlayerXPChanged) == 0x000008, "Wrong alignment on LoadoutVerificationServerComponent_OnPlayerXPChanged");
static_assert(sizeof(LoadoutVerificationServerComponent_OnPlayerXPChanged) == 0x000028, "Wrong size on LoadoutVerificationServerComponent_OnPlayerXPChanged");
static_assert(offsetof(LoadoutVerificationServerComponent_OnPlayerXPChanged, PlayerState) == 0x000000, "Member 'LoadoutVerificationServerComponent_OnPlayerXPChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LoadoutVerificationServerComponent_OnPlayerXPChanged, PlayerXP) == 0x000008, "Member 'LoadoutVerificationServerComponent_OnPlayerXPChanged::PlayerXP' has a wrong offset!");

// Function JP.LoadoutVerificationServerComponent.OnTitleIdAcquired
// 0x0018 (0x0018 - 0x0000)
struct LoadoutVerificationServerComponent_OnTitleIdAcquired final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitlePlayerAccountId;                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutVerificationServerComponent_OnTitleIdAcquired) == 0x000008, "Wrong alignment on LoadoutVerificationServerComponent_OnTitleIdAcquired");
static_assert(sizeof(LoadoutVerificationServerComponent_OnTitleIdAcquired) == 0x000018, "Wrong size on LoadoutVerificationServerComponent_OnTitleIdAcquired");
static_assert(offsetof(LoadoutVerificationServerComponent_OnTitleIdAcquired, PlayerState) == 0x000000, "Member 'LoadoutVerificationServerComponent_OnTitleIdAcquired::PlayerState' has a wrong offset!");
static_assert(offsetof(LoadoutVerificationServerComponent_OnTitleIdAcquired, TitlePlayerAccountId) == 0x000008, "Member 'LoadoutVerificationServerComponent_OnTitleIdAcquired::TitlePlayerAccountId' has a wrong offset!");

// Function JP.OnlineStoreItemDataFunctionLibrary.MakeOnlineStoreItemBattlePassRequirementStruct
// 0x0020 (0x0020 - 0x0000)
struct OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct final
{
public:
	struct FGameplayTag                           BattlePassTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelRequirement;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPremium;                                        // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOnlineStoreItemBattlePassRequirement  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct) == 0x000004, "Wrong alignment on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct");
static_assert(sizeof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct) == 0x000020, "Wrong size on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct, BattlePassTag) == 0x000000, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct::BattlePassTag' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct, LevelRequirement) == 0x000008, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct::LevelRequirement' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct, bIsPremium) == 0x00000C, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct::bIsPremium' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct, ReturnValue) == 0x000010, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemBattlePassRequirementStruct::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreItemDataFunctionLibrary.MakeOnlineStoreItemCostStruct
// 0x0018 (0x0018 - 0x0000)
struct OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct final
{
public:
	struct FGameplayTag                           CurrencyTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOnlineStoreItemCost                   ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct) == 0x000004, "Wrong alignment on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct");
static_assert(sizeof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct) == 0x000018, "Wrong size on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct, CurrencyTag) == 0x000000, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct::CurrencyTag' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct, Amount) == 0x000008, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct::Amount' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct, ReturnValue) == 0x00000C, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemCostStruct::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreItemDataFunctionLibrary.MakeOnlineStoreItemData
// 0x0090 (0x0090 - 0x0000)
struct OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData final
{
public:
	class FString                                 OnlineServicesID;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssetID;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnlineItemUnlockRequirement                  UnlockRequirement;                                 // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwned;                                          // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOnlineStoreItemCost                   Cost;                                              // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FOnlineStoreItemBattlePassRequirement  BattlePassRequirement;                             // 0x0028(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOnlineStoreItemData                   ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData) == 0x000008, "Wrong alignment on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData");
static_assert(sizeof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData) == 0x000090, "Wrong size on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData, OnlineServicesID) == 0x000000, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData::OnlineServicesID' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData, AssetID) == 0x000010, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData::AssetID' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData, UnlockRequirement) == 0x000018, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData::UnlockRequirement' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData, bIsOwned) == 0x000019, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData::bIsOwned' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData, Cost) == 0x00001C, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData::Cost' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData, BattlePassRequirement) == 0x000028, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData::BattlePassRequirement' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData, Tags) == 0x000038, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData::Tags' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData, ReturnValue) == 0x000048, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemData::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreItemDataFunctionLibrary.MakeOnlineStoreItemDataBattlePassUnlock
// 0x0088 (0x0088 - 0x0000)
struct OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock final
{
public:
	class FString                                 OnlineServicesID;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssetID;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwned;                                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOnlineStoreItemBattlePassRequirement  BattlePassRequirement;                             // 0x001C(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOnlineStoreItemData                   ReturnValue;                                       // 0x0040(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock) == 0x000008, "Wrong alignment on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock");
static_assert(sizeof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock) == 0x000088, "Wrong size on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock, OnlineServicesID) == 0x000000, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock::OnlineServicesID' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock, AssetID) == 0x000010, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock::AssetID' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock, bIsOwned) == 0x000018, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock::bIsOwned' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock, BattlePassRequirement) == 0x00001C, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock::BattlePassRequirement' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock, Tags) == 0x000030, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock::Tags' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock, ReturnValue) == 0x000040, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataBattlePassUnlock::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreItemDataFunctionLibrary.MakeOnlineStoreItemDataNoUnlock
// 0x0078 (0x0078 - 0x0000)
struct OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock final
{
public:
	class FString                                 OnlineServicesID;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssetID;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwned;                                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOnlineStoreItemData                   ReturnValue;                                       // 0x0030(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock) == 0x000008, "Wrong alignment on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock");
static_assert(sizeof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock) == 0x000078, "Wrong size on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock, OnlineServicesID) == 0x000000, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock::OnlineServicesID' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock, AssetID) == 0x000010, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock::AssetID' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock, bIsOwned) == 0x000018, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock::bIsOwned' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock, Tags) == 0x000020, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock::Tags' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock, ReturnValue) == 0x000030, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataNoUnlock::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreItemDataFunctionLibrary.MakeOnlineStoreItemDataVirtualCurrencyUnlock
// 0x0080 (0x0080 - 0x0000)
struct OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock final
{
public:
	class FString                                 OnlineServicesID;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssetID;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwned;                                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOnlineStoreItemCost                   Cost;                                              // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FOnlineStoreItemData                   ReturnValue;                                       // 0x0038(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock) == 0x000008, "Wrong alignment on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock");
static_assert(sizeof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock) == 0x000080, "Wrong size on OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock, OnlineServicesID) == 0x000000, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock::OnlineServicesID' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock, AssetID) == 0x000010, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock::AssetID' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock, bIsOwned) == 0x000018, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock::bIsOwned' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock, Cost) == 0x00001C, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock::Cost' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock, Tags) == 0x000028, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock::Tags' has a wrong offset!");
static_assert(offsetof(OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock, ReturnValue) == 0x000038, "Member 'OnlineStoreItemDataFunctionLibrary_MakeOnlineStoreItemDataVirtualCurrencyUnlock::ReturnValue' has a wrong offset!");

// Function JP.LobbyConfigurationWidget.ApplyViewModel
// 0x0030 (0x0030 - 0x0000)
struct LobbyConfigurationWidget_ApplyViewModel final
{
public:
	struct FLobbyConfigurationViewModel           InModel;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyConfigurationWidget_ApplyViewModel) == 0x000008, "Wrong alignment on LobbyConfigurationWidget_ApplyViewModel");
static_assert(sizeof(LobbyConfigurationWidget_ApplyViewModel) == 0x000030, "Wrong size on LobbyConfigurationWidget_ApplyViewModel");
static_assert(offsetof(LobbyConfigurationWidget_ApplyViewModel, InModel) == 0x000000, "Member 'LobbyConfigurationWidget_ApplyViewModel::InModel' has a wrong offset!");

// Function JP.LobbyConfigurationWidget.SetBoolValue
// 0x0010 (0x0010 - 0x0000)
struct LobbyConfigurationWidget_SetBoolValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyConfigurationWidget_SetBoolValue) == 0x000008, "Wrong alignment on LobbyConfigurationWidget_SetBoolValue");
static_assert(sizeof(LobbyConfigurationWidget_SetBoolValue) == 0x000010, "Wrong size on LobbyConfigurationWidget_SetBoolValue");
static_assert(offsetof(LobbyConfigurationWidget_SetBoolValue, InWidget) == 0x000000, "Member 'LobbyConfigurationWidget_SetBoolValue::InWidget' has a wrong offset!");
static_assert(offsetof(LobbyConfigurationWidget_SetBoolValue, InValue) == 0x000008, "Member 'LobbyConfigurationWidget_SetBoolValue::InValue' has a wrong offset!");

// Function JP.LobbyConfigurationWidget.SetIntegerValue
// 0x0010 (0x0010 - 0x0000)
struct LobbyConfigurationWidget_SetIntegerValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyConfigurationWidget_SetIntegerValue) == 0x000008, "Wrong alignment on LobbyConfigurationWidget_SetIntegerValue");
static_assert(sizeof(LobbyConfigurationWidget_SetIntegerValue) == 0x000010, "Wrong size on LobbyConfigurationWidget_SetIntegerValue");
static_assert(offsetof(LobbyConfigurationWidget_SetIntegerValue, InWidget) == 0x000000, "Member 'LobbyConfigurationWidget_SetIntegerValue::InWidget' has a wrong offset!");
static_assert(offsetof(LobbyConfigurationWidget_SetIntegerValue, InValue) == 0x000008, "Member 'LobbyConfigurationWidget_SetIntegerValue::InValue' has a wrong offset!");

// Function JP.LobbyConfigurationWidget.SetStringValue
// 0x0018 (0x0018 - 0x0000)
struct LobbyConfigurationWidget_SetStringValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InValue;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyConfigurationWidget_SetStringValue) == 0x000008, "Wrong alignment on LobbyConfigurationWidget_SetStringValue");
static_assert(sizeof(LobbyConfigurationWidget_SetStringValue) == 0x000018, "Wrong size on LobbyConfigurationWidget_SetStringValue");
static_assert(offsetof(LobbyConfigurationWidget_SetStringValue, InWidget) == 0x000000, "Member 'LobbyConfigurationWidget_SetStringValue::InWidget' has a wrong offset!");
static_assert(offsetof(LobbyConfigurationWidget_SetStringValue, InValue) == 0x000008, "Member 'LobbyConfigurationWidget_SetStringValue::InValue' has a wrong offset!");

// Function JP.LobbyEventsReceiverInterface.PlayerJoinedLobby
// 0x0008 (0x0008 - 0x0000)
struct LobbyEventsReceiverInterface_PlayerJoinedLobby final
{
public:
	class APlayerStateJP_Lobby*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyEventsReceiverInterface_PlayerJoinedLobby) == 0x000008, "Wrong alignment on LobbyEventsReceiverInterface_PlayerJoinedLobby");
static_assert(sizeof(LobbyEventsReceiverInterface_PlayerJoinedLobby) == 0x000008, "Wrong size on LobbyEventsReceiverInterface_PlayerJoinedLobby");
static_assert(offsetof(LobbyEventsReceiverInterface_PlayerJoinedLobby, PlayerState) == 0x000000, "Member 'LobbyEventsReceiverInterface_PlayerJoinedLobby::PlayerState' has a wrong offset!");

// Function JP.LobbyEventsReceiverInterface.PlayerLeftLobby
// 0x0008 (0x0008 - 0x0000)
struct LobbyEventsReceiverInterface_PlayerLeftLobby final
{
public:
	class APlayerStateJP_Lobby*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyEventsReceiverInterface_PlayerLeftLobby) == 0x000008, "Wrong alignment on LobbyEventsReceiverInterface_PlayerLeftLobby");
static_assert(sizeof(LobbyEventsReceiverInterface_PlayerLeftLobby) == 0x000008, "Wrong size on LobbyEventsReceiverInterface_PlayerLeftLobby");
static_assert(offsetof(LobbyEventsReceiverInterface_PlayerLeftLobby, PlayerState) == 0x000000, "Member 'LobbyEventsReceiverInterface_PlayerLeftLobby::PlayerState' has a wrong offset!");

// Function JP.LobbyEventsWorldSubsystem.AddEventReceiver
// 0x0018 (0x0018 - 0x0000)
struct LobbyEventsWorldSubsystem_AddEventReceiver final
{
public:
	TScriptInterface<class ILobbyEventsReceiverInterface> EventReceiver;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowCatchUp;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyEventsWorldSubsystem_AddEventReceiver) == 0x000008, "Wrong alignment on LobbyEventsWorldSubsystem_AddEventReceiver");
static_assert(sizeof(LobbyEventsWorldSubsystem_AddEventReceiver) == 0x000018, "Wrong size on LobbyEventsWorldSubsystem_AddEventReceiver");
static_assert(offsetof(LobbyEventsWorldSubsystem_AddEventReceiver, EventReceiver) == 0x000000, "Member 'LobbyEventsWorldSubsystem_AddEventReceiver::EventReceiver' has a wrong offset!");
static_assert(offsetof(LobbyEventsWorldSubsystem_AddEventReceiver, AllowCatchUp) == 0x000010, "Member 'LobbyEventsWorldSubsystem_AddEventReceiver::AllowCatchUp' has a wrong offset!");
static_assert(offsetof(LobbyEventsWorldSubsystem_AddEventReceiver, ReturnValue) == 0x000011, "Member 'LobbyEventsWorldSubsystem_AddEventReceiver::ReturnValue' has a wrong offset!");

// Function JP.LobbyEventsWorldSubsystem.HandlePlayerStateAdded
// 0x0008 (0x0008 - 0x0000)
struct LobbyEventsWorldSubsystem_HandlePlayerStateAdded final
{
public:
	class APlayerState*                           AddedPlayerState;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyEventsWorldSubsystem_HandlePlayerStateAdded) == 0x000008, "Wrong alignment on LobbyEventsWorldSubsystem_HandlePlayerStateAdded");
static_assert(sizeof(LobbyEventsWorldSubsystem_HandlePlayerStateAdded) == 0x000008, "Wrong size on LobbyEventsWorldSubsystem_HandlePlayerStateAdded");
static_assert(offsetof(LobbyEventsWorldSubsystem_HandlePlayerStateAdded, AddedPlayerState) == 0x000000, "Member 'LobbyEventsWorldSubsystem_HandlePlayerStateAdded::AddedPlayerState' has a wrong offset!");

// Function JP.LobbyEventsWorldSubsystem.HandlePlayerStateRemoved
// 0x0008 (0x0008 - 0x0000)
struct LobbyEventsWorldSubsystem_HandlePlayerStateRemoved final
{
public:
	class APlayerState*                           RemovedPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyEventsWorldSubsystem_HandlePlayerStateRemoved) == 0x000008, "Wrong alignment on LobbyEventsWorldSubsystem_HandlePlayerStateRemoved");
static_assert(sizeof(LobbyEventsWorldSubsystem_HandlePlayerStateRemoved) == 0x000008, "Wrong size on LobbyEventsWorldSubsystem_HandlePlayerStateRemoved");
static_assert(offsetof(LobbyEventsWorldSubsystem_HandlePlayerStateRemoved, RemovedPlayerState) == 0x000000, "Member 'LobbyEventsWorldSubsystem_HandlePlayerStateRemoved::RemovedPlayerState' has a wrong offset!");

// Function JP.LobbyEventsWorldSubsystem.RemoveEventReceiver
// 0x0018 (0x0018 - 0x0000)
struct LobbyEventsWorldSubsystem_RemoveEventReceiver final
{
public:
	TScriptInterface<class ILobbyEventsReceiverInterface> EventReceiver;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyEventsWorldSubsystem_RemoveEventReceiver) == 0x000008, "Wrong alignment on LobbyEventsWorldSubsystem_RemoveEventReceiver");
static_assert(sizeof(LobbyEventsWorldSubsystem_RemoveEventReceiver) == 0x000018, "Wrong size on LobbyEventsWorldSubsystem_RemoveEventReceiver");
static_assert(offsetof(LobbyEventsWorldSubsystem_RemoveEventReceiver, EventReceiver) == 0x000000, "Member 'LobbyEventsWorldSubsystem_RemoveEventReceiver::EventReceiver' has a wrong offset!");
static_assert(offsetof(LobbyEventsWorldSubsystem_RemoveEventReceiver, ReturnValue) == 0x000010, "Member 'LobbyEventsWorldSubsystem_RemoveEventReceiver::ReturnValue' has a wrong offset!");

// Function JP.LobbyFlowControllerStateComponent.OnExperienceLoaded
// 0x0008 (0x0008 - 0x0000)
struct LobbyFlowControllerStateComponent_OnExperienceLoaded final
{
public:
	const class UExperienceDefinition*            Experience;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyFlowControllerStateComponent_OnExperienceLoaded) == 0x000008, "Wrong alignment on LobbyFlowControllerStateComponent_OnExperienceLoaded");
static_assert(sizeof(LobbyFlowControllerStateComponent_OnExperienceLoaded) == 0x000008, "Wrong size on LobbyFlowControllerStateComponent_OnExperienceLoaded");
static_assert(offsetof(LobbyFlowControllerStateComponent_OnExperienceLoaded, Experience) == 0x000000, "Member 'LobbyFlowControllerStateComponent_OnExperienceLoaded::Experience' has a wrong offset!");

// Function JP.LobbyHouseSelectorWidget.ApplyViewModel
// 0x000C (0x000C - 0x0000)
struct LobbyHouseSelectorWidget_ApplyViewModel final
{
public:
	struct FLobbyHouseSelectorViewModel           ViewModel;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHouseSelectorWidget_ApplyViewModel) == 0x000004, "Wrong alignment on LobbyHouseSelectorWidget_ApplyViewModel");
static_assert(sizeof(LobbyHouseSelectorWidget_ApplyViewModel) == 0x00000C, "Wrong size on LobbyHouseSelectorWidget_ApplyViewModel");
static_assert(offsetof(LobbyHouseSelectorWidget_ApplyViewModel, ViewModel) == 0x000000, "Member 'LobbyHouseSelectorWidget_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.LobbyHouseSelectorWidget.HandlePlayerStateHouseIdentifierVoteChanged
// 0x0018 (0x0018 - 0x0000)
struct LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged final
{
public:
	class APlayerStateJP_Lobby*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OldHouseIdentifier;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewHouseIdentifier;                                // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged) == 0x000008, "Wrong alignment on LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged");
static_assert(sizeof(LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged) == 0x000018, "Wrong size on LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged");
static_assert(offsetof(LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged, PlayerState) == 0x000000, "Member 'LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged, OldHouseIdentifier) == 0x000008, "Member 'LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged::OldHouseIdentifier' has a wrong offset!");
static_assert(offsetof(LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged, NewHouseIdentifier) == 0x000010, "Member 'LobbyHouseSelectorWidget_HandlePlayerStateHouseIdentifierVoteChanged::NewHouseIdentifier' has a wrong offset!");

// Function JP.LobbyHouseSelectorWidget.HandlePlayerStateTeamHousePoolChanged
// 0x0008 (0x0008 - 0x0000)
struct LobbyHouseSelectorWidget_HandlePlayerStateTeamHousePoolChanged final
{
public:
	class APlayerStateJP_Lobby*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHouseSelectorWidget_HandlePlayerStateTeamHousePoolChanged) == 0x000008, "Wrong alignment on LobbyHouseSelectorWidget_HandlePlayerStateTeamHousePoolChanged");
static_assert(sizeof(LobbyHouseSelectorWidget_HandlePlayerStateTeamHousePoolChanged) == 0x000008, "Wrong size on LobbyHouseSelectorWidget_HandlePlayerStateTeamHousePoolChanged");
static_assert(offsetof(LobbyHouseSelectorWidget_HandlePlayerStateTeamHousePoolChanged, PlayerState) == 0x000000, "Member 'LobbyHouseSelectorWidget_HandlePlayerStateTeamHousePoolChanged::PlayerState' has a wrong offset!");

// Function JP.LobbyHouseSelectorWidget.HandlePlayerStateTeamIdChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged final
{
public:
	class APlayerStateJP_Lobby*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OldTeamID;                                         // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewTeamID;                                         // 0x0009(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged) == 0x000008, "Wrong alignment on LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged");
static_assert(sizeof(LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged) == 0x000010, "Wrong size on LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged");
static_assert(offsetof(LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged, PlayerState) == 0x000000, "Member 'LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged, OldTeamID) == 0x000008, "Member 'LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged::OldTeamID' has a wrong offset!");
static_assert(offsetof(LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged, NewTeamID) == 0x000009, "Member 'LobbyHouseSelectorWidget_HandlePlayerStateTeamIdChanged::NewTeamID' has a wrong offset!");

// Function JP.LobbyHouseSelectorWidget.HandlePlayerStateTracked
// 0x0010 (0x0010 - 0x0000)
struct LobbyHouseSelectorWidget_HandlePlayerStateTracked final
{
public:
	class APlayerState*                           TrackedPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Initial;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyHouseSelectorWidget_HandlePlayerStateTracked) == 0x000008, "Wrong alignment on LobbyHouseSelectorWidget_HandlePlayerStateTracked");
static_assert(sizeof(LobbyHouseSelectorWidget_HandlePlayerStateTracked) == 0x000010, "Wrong size on LobbyHouseSelectorWidget_HandlePlayerStateTracked");
static_assert(offsetof(LobbyHouseSelectorWidget_HandlePlayerStateTracked, TrackedPlayerState) == 0x000000, "Member 'LobbyHouseSelectorWidget_HandlePlayerStateTracked::TrackedPlayerState' has a wrong offset!");
static_assert(offsetof(LobbyHouseSelectorWidget_HandlePlayerStateTracked, Initial) == 0x000008, "Member 'LobbyHouseSelectorWidget_HandlePlayerStateTracked::Initial' has a wrong offset!");

// Function JP.LobbyHouseSelectorWidget.HandlePlayerStateUntracked
// 0x0008 (0x0008 - 0x0000)
struct LobbyHouseSelectorWidget_HandlePlayerStateUntracked final
{
public:
	class APlayerState*                           UntrackedPlayerState;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHouseSelectorWidget_HandlePlayerStateUntracked) == 0x000008, "Wrong alignment on LobbyHouseSelectorWidget_HandlePlayerStateUntracked");
static_assert(sizeof(LobbyHouseSelectorWidget_HandlePlayerStateUntracked) == 0x000008, "Wrong size on LobbyHouseSelectorWidget_HandlePlayerStateUntracked");
static_assert(offsetof(LobbyHouseSelectorWidget_HandlePlayerStateUntracked, UntrackedPlayerState) == 0x000000, "Member 'LobbyHouseSelectorWidget_HandlePlayerStateUntracked::UntrackedPlayerState' has a wrong offset!");

// Function JP.LobbyHouseVotePlayerStateWatcher.HandlePlayerStateHouseIdentifierVoteChanged
// 0x0018 (0x0018 - 0x0000)
struct LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OldHouseIdentifier;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewHouseIdentifier;                                // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged) == 0x000008, "Wrong alignment on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged");
static_assert(sizeof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged) == 0x000018, "Wrong size on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged, PlayerState) == 0x000000, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged, OldHouseIdentifier) == 0x000008, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged::OldHouseIdentifier' has a wrong offset!");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged, NewHouseIdentifier) == 0x000010, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateHouseIdentifierVoteChanged::NewHouseIdentifier' has a wrong offset!");

// Function JP.LobbyHouseVotePlayerStateWatcher.HandlePlayerStateOwnedHouseChanged
// 0x0018 (0x0018 - 0x0000)
struct LobbyHouseVotePlayerStateWatcher_HandlePlayerStateOwnedHouseChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   NewOwnedHouses;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateOwnedHouseChanged) == 0x000008, "Wrong alignment on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateOwnedHouseChanged");
static_assert(sizeof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateOwnedHouseChanged) == 0x000018, "Wrong size on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateOwnedHouseChanged");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateOwnedHouseChanged, PlayerState) == 0x000000, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateOwnedHouseChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateOwnedHouseChanged, NewOwnedHouses) == 0x000008, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateOwnedHouseChanged::NewOwnedHouses' has a wrong offset!");

// Function JP.LobbyHouseVotePlayerStateWatcher.HandlePlayerStateTeamHousePoolChanged
// 0x0008 (0x0008 - 0x0000)
struct LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamHousePoolChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamHousePoolChanged) == 0x000008, "Wrong alignment on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamHousePoolChanged");
static_assert(sizeof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamHousePoolChanged) == 0x000008, "Wrong size on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamHousePoolChanged");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamHousePoolChanged, PlayerState) == 0x000000, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamHousePoolChanged::PlayerState' has a wrong offset!");

// Function JP.LobbyHouseVotePlayerStateWatcher.HandlePlayerStateTeamIdChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamIdChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamIdChanged) == 0x000008, "Wrong alignment on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamIdChanged");
static_assert(sizeof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamIdChanged) == 0x000010, "Wrong size on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamIdChanged");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamIdChanged, PlayerState) == 0x000000, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamIdChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamIdChanged, TeamId) == 0x000008, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTeamIdChanged::TeamId' has a wrong offset!");

// Function JP.LobbyHouseVotePlayerStateWatcher.HandlePlayerStateTracked
// 0x0010 (0x0010 - 0x0000)
struct LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTracked final
{
public:
	class APlayerState*                           TrackedPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Initial;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTracked) == 0x000008, "Wrong alignment on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTracked");
static_assert(sizeof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTracked) == 0x000010, "Wrong size on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTracked");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTracked, TrackedPlayerState) == 0x000000, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTracked::TrackedPlayerState' has a wrong offset!");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTracked, Initial) == 0x000008, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateTracked::Initial' has a wrong offset!");

// Function JP.LobbyHouseVotePlayerStateWatcher.HandlePlayerStateUntracked
// 0x0008 (0x0008 - 0x0000)
struct LobbyHouseVotePlayerStateWatcher_HandlePlayerStateUntracked final
{
public:
	class APlayerState*                           UntrackedPlayerState;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateUntracked) == 0x000008, "Wrong alignment on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateUntracked");
static_assert(sizeof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateUntracked) == 0x000008, "Wrong size on LobbyHouseVotePlayerStateWatcher_HandlePlayerStateUntracked");
static_assert(offsetof(LobbyHouseVotePlayerStateWatcher_HandlePlayerStateUntracked, UntrackedPlayerState) == 0x000000, "Member 'LobbyHouseVotePlayerStateWatcher_HandlePlayerStateUntracked::UntrackedPlayerState' has a wrong offset!");

// Function JP.PerkSelectEntry.ApplyViewModel
// 0x000C (0x000C - 0x0000)
struct PerkSelectEntry_ApplyViewModel final
{
public:
	struct FPerkSelectEntryViewModel              ViewModel;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkSelectEntry_ApplyViewModel) == 0x000004, "Wrong alignment on PerkSelectEntry_ApplyViewModel");
static_assert(sizeof(PerkSelectEntry_ApplyViewModel) == 0x00000C, "Wrong size on PerkSelectEntry_ApplyViewModel");
static_assert(offsetof(PerkSelectEntry_ApplyViewModel, ViewModel) == 0x000000, "Member 'PerkSelectEntry_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.LobbyKickPlayerEntryWidget.AddPlayerState
// 0x0008 (0x0008 - 0x0000)
struct LobbyKickPlayerEntryWidget_AddPlayerState final
{
public:
	const class APlayerStateJP_Lobby*             InPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyKickPlayerEntryWidget_AddPlayerState) == 0x000008, "Wrong alignment on LobbyKickPlayerEntryWidget_AddPlayerState");
static_assert(sizeof(LobbyKickPlayerEntryWidget_AddPlayerState) == 0x000008, "Wrong size on LobbyKickPlayerEntryWidget_AddPlayerState");
static_assert(offsetof(LobbyKickPlayerEntryWidget_AddPlayerState, InPlayerState) == 0x000000, "Member 'LobbyKickPlayerEntryWidget_AddPlayerState::InPlayerState' has a wrong offset!");

// Function JP.LobbyKickPlayerEntryWidget.GetPlayerKickedBanReasonText
// 0x0010 (0x0010 - 0x0000)
struct LobbyKickPlayerEntryWidget_GetPlayerKickedBanReasonText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyKickPlayerEntryWidget_GetPlayerKickedBanReasonText) == 0x000008, "Wrong alignment on LobbyKickPlayerEntryWidget_GetPlayerKickedBanReasonText");
static_assert(sizeof(LobbyKickPlayerEntryWidget_GetPlayerKickedBanReasonText) == 0x000010, "Wrong size on LobbyKickPlayerEntryWidget_GetPlayerKickedBanReasonText");
static_assert(offsetof(LobbyKickPlayerEntryWidget_GetPlayerKickedBanReasonText, ReturnValue) == 0x000000, "Member 'LobbyKickPlayerEntryWidget_GetPlayerKickedBanReasonText::ReturnValue' has a wrong offset!");

// Function JP.LobbyLevelVoteEntryWidget.ApplyViewModel
// 0x0040 (0x0040 - 0x0000)
struct LobbyLevelVoteEntryWidget_ApplyViewModel final
{
public:
	struct FLobbyLevelVoteEntryViewModel          ViewModel;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLevelVoteEntryWidget_ApplyViewModel) == 0x000008, "Wrong alignment on LobbyLevelVoteEntryWidget_ApplyViewModel");
static_assert(sizeof(LobbyLevelVoteEntryWidget_ApplyViewModel) == 0x000040, "Wrong size on LobbyLevelVoteEntryWidget_ApplyViewModel");
static_assert(offsetof(LobbyLevelVoteEntryWidget_ApplyViewModel, ViewModel) == 0x000000, "Member 'LobbyLevelVoteEntryWidget_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.LobbyLevelVoteEntryWidget.UpdateVoteCount
// 0x0001 (0x0001 - 0x0000)
struct LobbyLevelVoteEntryWidget_UpdateVoteCount final
{
public:
	uint8                                         NewVoteCount;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLevelVoteEntryWidget_UpdateVoteCount) == 0x000001, "Wrong alignment on LobbyLevelVoteEntryWidget_UpdateVoteCount");
static_assert(sizeof(LobbyLevelVoteEntryWidget_UpdateVoteCount) == 0x000001, "Wrong size on LobbyLevelVoteEntryWidget_UpdateVoteCount");
static_assert(offsetof(LobbyLevelVoteEntryWidget_UpdateVoteCount, NewVoteCount) == 0x000000, "Member 'LobbyLevelVoteEntryWidget_UpdateVoteCount::NewVoteCount' has a wrong offset!");

// Function JP.LobbyLevelVoteSelectedLevelWidget.ApplyViewModel
// 0x0038 (0x0038 - 0x0000)
struct LobbyLevelVoteSelectedLevelWidget_ApplyViewModel final
{
public:
	struct FLobbyLevelVoteSelectedLevelViewModel  ViewModel;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLevelVoteSelectedLevelWidget_ApplyViewModel) == 0x000008, "Wrong alignment on LobbyLevelVoteSelectedLevelWidget_ApplyViewModel");
static_assert(sizeof(LobbyLevelVoteSelectedLevelWidget_ApplyViewModel) == 0x000038, "Wrong size on LobbyLevelVoteSelectedLevelWidget_ApplyViewModel");
static_assert(offsetof(LobbyLevelVoteSelectedLevelWidget_ApplyViewModel, ViewModel) == 0x000000, "Member 'LobbyLevelVoteSelectedLevelWidget_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.LobbyLevelVoteWidget.OnLevelVotesUpdated
// 0x0002 (0x0002 - 0x0000)
struct LobbyLevelVoteWidget_OnLevelVotesUpdated final
{
public:
	uint8                                         UpdatedLevel;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewVoteCount;                                      // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLevelVoteWidget_OnLevelVotesUpdated) == 0x000001, "Wrong alignment on LobbyLevelVoteWidget_OnLevelVotesUpdated");
static_assert(sizeof(LobbyLevelVoteWidget_OnLevelVotesUpdated) == 0x000002, "Wrong size on LobbyLevelVoteWidget_OnLevelVotesUpdated");
static_assert(offsetof(LobbyLevelVoteWidget_OnLevelVotesUpdated, UpdatedLevel) == 0x000000, "Member 'LobbyLevelVoteWidget_OnLevelVotesUpdated::UpdatedLevel' has a wrong offset!");
static_assert(offsetof(LobbyLevelVoteWidget_OnLevelVotesUpdated, NewVoteCount) == 0x000001, "Member 'LobbyLevelVoteWidget_OnLevelVotesUpdated::NewVoteCount' has a wrong offset!");

// Function JP.LobbyLevelVoteWidget.OnVotingFinished
// 0x0068 (0x0068 - 0x0000)
struct LobbyLevelVoteWidget_OnVotingFinished final
{
public:
	struct FLevelVoteData                         ChosenLevel;                                       // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLevelVoteWidget_OnVotingFinished) == 0x000008, "Wrong alignment on LobbyLevelVoteWidget_OnVotingFinished");
static_assert(sizeof(LobbyLevelVoteWidget_OnVotingFinished) == 0x000068, "Wrong size on LobbyLevelVoteWidget_OnVotingFinished");
static_assert(offsetof(LobbyLevelVoteWidget_OnVotingFinished, ChosenLevel) == 0x000000, "Member 'LobbyLevelVoteWidget_OnVotingFinished::ChosenLevel' has a wrong offset!");

// Function JP.LobbyLevelVoteWidget.GetTotalVotes
// 0x0010 (0x0010 - 0x0000)
struct LobbyLevelVoteWidget_GetTotalVotes final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLevelVoteWidget_GetTotalVotes) == 0x000008, "Wrong alignment on LobbyLevelVoteWidget_GetTotalVotes");
static_assert(sizeof(LobbyLevelVoteWidget_GetTotalVotes) == 0x000010, "Wrong size on LobbyLevelVoteWidget_GetTotalVotes");
static_assert(offsetof(LobbyLevelVoteWidget_GetTotalVotes, ReturnValue) == 0x000000, "Member 'LobbyLevelVoteWidget_GetTotalVotes::ReturnValue' has a wrong offset!");

// Function JP.SeasonPassRewardContent_CurrencyInterface.ApplyCurrencyViewModel
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassRewardContent_CurrencyInterface_ApplyCurrencyViewModel final
{
public:
	struct FSeasonPassRewardContent_CurrencyViewModel ViewModel;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRewardContent_CurrencyInterface_ApplyCurrencyViewModel) == 0x000008, "Wrong alignment on SeasonPassRewardContent_CurrencyInterface_ApplyCurrencyViewModel");
static_assert(sizeof(SeasonPassRewardContent_CurrencyInterface_ApplyCurrencyViewModel) == 0x000010, "Wrong size on SeasonPassRewardContent_CurrencyInterface_ApplyCurrencyViewModel");
static_assert(offsetof(SeasonPassRewardContent_CurrencyInterface_ApplyCurrencyViewModel, ViewModel) == 0x000000, "Member 'SeasonPassRewardContent_CurrencyInterface_ApplyCurrencyViewModel::ViewModel' has a wrong offset!");

// Function JP.LobbyLocalPlayerSwitchTeamWidget.ApplyViewModel
// 0x0002 (0x0002 - 0x0000)
struct LobbyLocalPlayerSwitchTeamWidget_ApplyViewModel final
{
public:
	struct FLobbyLocalPlayerSwitchTeamViewModel   ViewModel;                                         // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLocalPlayerSwitchTeamWidget_ApplyViewModel) == 0x000001, "Wrong alignment on LobbyLocalPlayerSwitchTeamWidget_ApplyViewModel");
static_assert(sizeof(LobbyLocalPlayerSwitchTeamWidget_ApplyViewModel) == 0x000002, "Wrong size on LobbyLocalPlayerSwitchTeamWidget_ApplyViewModel");
static_assert(offsetof(LobbyLocalPlayerSwitchTeamWidget_ApplyViewModel, ViewModel) == 0x000000, "Member 'LobbyLocalPlayerSwitchTeamWidget_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.LobbyLocalPlayerSwitchTeamWidget.HandleLocalPlayerStateSet
// 0x0010 (0x0010 - 0x0000)
struct LobbyLocalPlayerSwitchTeamWidget_HandleLocalPlayerStateSet final
{
public:
	class UCommonLocalPlayer*                     CommonLocalPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLocalPlayerSwitchTeamWidget_HandleLocalPlayerStateSet) == 0x000008, "Wrong alignment on LobbyLocalPlayerSwitchTeamWidget_HandleLocalPlayerStateSet");
static_assert(sizeof(LobbyLocalPlayerSwitchTeamWidget_HandleLocalPlayerStateSet) == 0x000010, "Wrong size on LobbyLocalPlayerSwitchTeamWidget_HandleLocalPlayerStateSet");
static_assert(offsetof(LobbyLocalPlayerSwitchTeamWidget_HandleLocalPlayerStateSet, CommonLocalPlayer) == 0x000000, "Member 'LobbyLocalPlayerSwitchTeamWidget_HandleLocalPlayerStateSet::CommonLocalPlayer' has a wrong offset!");
static_assert(offsetof(LobbyLocalPlayerSwitchTeamWidget_HandleLocalPlayerStateSet, PlayerState) == 0x000008, "Member 'LobbyLocalPlayerSwitchTeamWidget_HandleLocalPlayerStateSet::PlayerState' has a wrong offset!");

// Function JP.LobbyLocalPlayerSwitchTeamWidget.HandleTeamIdChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyLocalPlayerSwitchTeamWidget_HandleTeamIdChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyLocalPlayerSwitchTeamWidget_HandleTeamIdChanged) == 0x000008, "Wrong alignment on LobbyLocalPlayerSwitchTeamWidget_HandleTeamIdChanged");
static_assert(sizeof(LobbyLocalPlayerSwitchTeamWidget_HandleTeamIdChanged) == 0x000010, "Wrong size on LobbyLocalPlayerSwitchTeamWidget_HandleTeamIdChanged");
static_assert(offsetof(LobbyLocalPlayerSwitchTeamWidget_HandleTeamIdChanged, PlayerState) == 0x000000, "Member 'LobbyLocalPlayerSwitchTeamWidget_HandleTeamIdChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyLocalPlayerSwitchTeamWidget_HandleTeamIdChanged, TeamId) == 0x000008, "Member 'LobbyLocalPlayerSwitchTeamWidget_HandleTeamIdChanged::TeamId' has a wrong offset!");

// Function JP.LobbyNeighborSelectorWidget.ApplyViewModel
// 0x0048 (0x0048 - 0x0000)
struct LobbyNeighborSelectorWidget_ApplyViewModel final
{
public:
	struct FLobbyNeighborSelectorViewModel        ViewModel;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyNeighborSelectorWidget_ApplyViewModel) == 0x000008, "Wrong alignment on LobbyNeighborSelectorWidget_ApplyViewModel");
static_assert(sizeof(LobbyNeighborSelectorWidget_ApplyViewModel) == 0x000048, "Wrong size on LobbyNeighborSelectorWidget_ApplyViewModel");
static_assert(offsetof(LobbyNeighborSelectorWidget_ApplyViewModel, ViewModel) == 0x000000, "Member 'LobbyNeighborSelectorWidget_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.LobbyNeighborSelectorWidget.HandleNeighborIdChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyNeighborSelectorWidget_HandleNeighborIdChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NeighborIdentifier;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyNeighborSelectorWidget_HandleNeighborIdChanged) == 0x000008, "Wrong alignment on LobbyNeighborSelectorWidget_HandleNeighborIdChanged");
static_assert(sizeof(LobbyNeighborSelectorWidget_HandleNeighborIdChanged) == 0x000010, "Wrong size on LobbyNeighborSelectorWidget_HandleNeighborIdChanged");
static_assert(offsetof(LobbyNeighborSelectorWidget_HandleNeighborIdChanged, PlayerState) == 0x000000, "Member 'LobbyNeighborSelectorWidget_HandleNeighborIdChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyNeighborSelectorWidget_HandleNeighborIdChanged, NeighborIdentifier) == 0x000008, "Member 'LobbyNeighborSelectorWidget_HandleNeighborIdChanged::NeighborIdentifier' has a wrong offset!");

// Function JP.LobbyPlayerWidget.ApplyViewModel
// 0x0040 (0x0040 - 0x0000)
struct LobbyPlayerWidget_ApplyViewModel final
{
public:
	struct FLobbyPlayerAvatarViewModel            ViewModel;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerWidget_ApplyViewModel) == 0x000008, "Wrong alignment on LobbyPlayerWidget_ApplyViewModel");
static_assert(sizeof(LobbyPlayerWidget_ApplyViewModel) == 0x000040, "Wrong size on LobbyPlayerWidget_ApplyViewModel");
static_assert(offsetof(LobbyPlayerWidget_ApplyViewModel, ViewModel) == 0x000000, "Member 'LobbyPlayerWidget_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.LobbyPlayerWidget.GetPlayerKickedBanReasonText
// 0x0010 (0x0010 - 0x0000)
struct LobbyPlayerWidget_GetPlayerKickedBanReasonText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyPlayerWidget_GetPlayerKickedBanReasonText) == 0x000008, "Wrong alignment on LobbyPlayerWidget_GetPlayerKickedBanReasonText");
static_assert(sizeof(LobbyPlayerWidget_GetPlayerKickedBanReasonText) == 0x000010, "Wrong size on LobbyPlayerWidget_GetPlayerKickedBanReasonText");
static_assert(offsetof(LobbyPlayerWidget_GetPlayerKickedBanReasonText, ReturnValue) == 0x000000, "Member 'LobbyPlayerWidget_GetPlayerKickedBanReasonText::ReturnValue' has a wrong offset!");

// Function JP.PlayerControllerJP_MatchComponent.K2_OnPossessedPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_MatchComponent_K2_OnPossessedPawnChanged final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_MatchComponent_K2_OnPossessedPawnChanged) == 0x000008, "Wrong alignment on PlayerControllerJP_MatchComponent_K2_OnPossessedPawnChanged");
static_assert(sizeof(PlayerControllerJP_MatchComponent_K2_OnPossessedPawnChanged) == 0x000010, "Wrong size on PlayerControllerJP_MatchComponent_K2_OnPossessedPawnChanged");
static_assert(offsetof(PlayerControllerJP_MatchComponent_K2_OnPossessedPawnChanged, OldPawn) == 0x000000, "Member 'PlayerControllerJP_MatchComponent_K2_OnPossessedPawnChanged::OldPawn' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_MatchComponent_K2_OnPossessedPawnChanged, NewPawn) == 0x000008, "Member 'PlayerControllerJP_MatchComponent_K2_OnPossessedPawnChanged::NewPawn' has a wrong offset!");

// Function JP.PlayerControllerJP_MatchComponent.OnPossessedPawnChanged
// 0x0010 (0x0010 - 0x0000)
struct PlayerControllerJP_MatchComponent_OnPossessedPawnChanged final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_MatchComponent_OnPossessedPawnChanged) == 0x000008, "Wrong alignment on PlayerControllerJP_MatchComponent_OnPossessedPawnChanged");
static_assert(sizeof(PlayerControllerJP_MatchComponent_OnPossessedPawnChanged) == 0x000010, "Wrong size on PlayerControllerJP_MatchComponent_OnPossessedPawnChanged");
static_assert(offsetof(PlayerControllerJP_MatchComponent_OnPossessedPawnChanged, OldPawn) == 0x000000, "Member 'PlayerControllerJP_MatchComponent_OnPossessedPawnChanged::OldPawn' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_MatchComponent_OnPossessedPawnChanged, NewPawn) == 0x000008, "Member 'PlayerControllerJP_MatchComponent_OnPossessedPawnChanged::NewPawn' has a wrong offset!");

// Function JP.PlayerControllerJP_MatchComponent.GetControlledPawn
// 0x0008 (0x0008 - 0x0000)
struct PlayerControllerJP_MatchComponent_GetControlledPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_MatchComponent_GetControlledPawn) == 0x000008, "Wrong alignment on PlayerControllerJP_MatchComponent_GetControlledPawn");
static_assert(sizeof(PlayerControllerJP_MatchComponent_GetControlledPawn) == 0x000008, "Wrong size on PlayerControllerJP_MatchComponent_GetControlledPawn");
static_assert(offsetof(PlayerControllerJP_MatchComponent_GetControlledPawn, ReturnValue) == 0x000000, "Member 'PlayerControllerJP_MatchComponent_GetControlledPawn::ReturnValue' has a wrong offset!");

// Function JP.LobbyReadyStateWidget.ApplyViewModel
// 0x0003 (0x0003 - 0x0000)
struct LobbyReadyStateWidget_ApplyViewModel final
{
public:
	struct FLobbyReadyStateViewModel              InViewModel;                                       // 0x0000(0x0003)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyReadyStateWidget_ApplyViewModel) == 0x000001, "Wrong alignment on LobbyReadyStateWidget_ApplyViewModel");
static_assert(sizeof(LobbyReadyStateWidget_ApplyViewModel) == 0x000003, "Wrong size on LobbyReadyStateWidget_ApplyViewModel");
static_assert(offsetof(LobbyReadyStateWidget_ApplyViewModel, InViewModel) == 0x000000, "Member 'LobbyReadyStateWidget_ApplyViewModel::InViewModel' has a wrong offset!");

// Function JP.LobbyReadyStateWidget.HandleStartCountdown
// 0x0004 (0x0004 - 0x0000)
struct LobbyReadyStateWidget_HandleStartCountdown final
{
public:
	float                                         InDesiredTravelTimestamp;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyReadyStateWidget_HandleStartCountdown) == 0x000004, "Wrong alignment on LobbyReadyStateWidget_HandleStartCountdown");
static_assert(sizeof(LobbyReadyStateWidget_HandleStartCountdown) == 0x000004, "Wrong size on LobbyReadyStateWidget_HandleStartCountdown");
static_assert(offsetof(LobbyReadyStateWidget_HandleStartCountdown, InDesiredTravelTimestamp) == 0x000000, "Member 'LobbyReadyStateWidget_HandleStartCountdown::InDesiredTravelTimestamp' has a wrong offset!");

// Function JP.LobbyReadyStateWidget.OnReadyChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyReadyStateWidget_OnReadyChanged final
{
public:
	class APlayerStateJP_Lobby*                   InPS;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReady;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyReadyStateWidget_OnReadyChanged) == 0x000008, "Wrong alignment on LobbyReadyStateWidget_OnReadyChanged");
static_assert(sizeof(LobbyReadyStateWidget_OnReadyChanged) == 0x000010, "Wrong size on LobbyReadyStateWidget_OnReadyChanged");
static_assert(offsetof(LobbyReadyStateWidget_OnReadyChanged, InPS) == 0x000000, "Member 'LobbyReadyStateWidget_OnReadyChanged::InPS' has a wrong offset!");
static_assert(offsetof(LobbyReadyStateWidget_OnReadyChanged, InReady) == 0x000008, "Member 'LobbyReadyStateWidget_OnReadyChanged::InReady' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandleIsInPartyChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyTeamManagerWidget_HandleIsInPartyChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInParty;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyTeamManagerWidget_HandleIsInPartyChanged) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandleIsInPartyChanged");
static_assert(sizeof(LobbyTeamManagerWidget_HandleIsInPartyChanged) == 0x000010, "Wrong size on LobbyTeamManagerWidget_HandleIsInPartyChanged");
static_assert(offsetof(LobbyTeamManagerWidget_HandleIsInPartyChanged, PlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandleIsInPartyChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyTeamManagerWidget_HandleIsInPartyChanged, bIsInParty) == 0x000008, "Member 'LobbyTeamManagerWidget_HandleIsInPartyChanged::bIsInParty' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandleJoinStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyTeamManagerWidget_HandleJoinStatusChanged final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerStateJoinStatus                        JoinStatus;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyTeamManagerWidget_HandleJoinStatusChanged) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandleJoinStatusChanged");
static_assert(sizeof(LobbyTeamManagerWidget_HandleJoinStatusChanged) == 0x000010, "Wrong size on LobbyTeamManagerWidget_HandleJoinStatusChanged");
static_assert(offsetof(LobbyTeamManagerWidget_HandleJoinStatusChanged, PlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandleJoinStatusChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyTeamManagerWidget_HandleJoinStatusChanged, JoinStatus) == 0x000008, "Member 'LobbyTeamManagerWidget_HandleJoinStatusChanged::JoinStatus' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandleNeighborIdChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyTeamManagerWidget_HandleNeighborIdChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NeighborIdentifier;                                // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamManagerWidget_HandleNeighborIdChanged) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandleNeighborIdChanged");
static_assert(sizeof(LobbyTeamManagerWidget_HandleNeighborIdChanged) == 0x000010, "Wrong size on LobbyTeamManagerWidget_HandleNeighborIdChanged");
static_assert(offsetof(LobbyTeamManagerWidget_HandleNeighborIdChanged, PlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandleNeighborIdChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyTeamManagerWidget_HandleNeighborIdChanged, NeighborIdentifier) == 0x000008, "Member 'LobbyTeamManagerWidget_HandleNeighborIdChanged::NeighborIdentifier' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandlePlayerLoadoutChanged
// 0x0030 (0x0030 - 0x0000)
struct LobbyTeamManagerWidget_HandlePlayerLoadoutChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerLoadout                         NewLoadout;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamManagerWidget_HandlePlayerLoadoutChanged) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandlePlayerLoadoutChanged");
static_assert(sizeof(LobbyTeamManagerWidget_HandlePlayerLoadoutChanged) == 0x000030, "Wrong size on LobbyTeamManagerWidget_HandlePlayerLoadoutChanged");
static_assert(offsetof(LobbyTeamManagerWidget_HandlePlayerLoadoutChanged, PlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandlePlayerLoadoutChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyTeamManagerWidget_HandlePlayerLoadoutChanged, NewLoadout) == 0x000008, "Member 'LobbyTeamManagerWidget_HandlePlayerLoadoutChanged::NewLoadout' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandlePlayerNameChanged
// 0x0018 (0x0018 - 0x0000)
struct LobbyTeamManagerWidget_HandlePlayerNameChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamManagerWidget_HandlePlayerNameChanged) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandlePlayerNameChanged");
static_assert(sizeof(LobbyTeamManagerWidget_HandlePlayerNameChanged) == 0x000018, "Wrong size on LobbyTeamManagerWidget_HandlePlayerNameChanged");
static_assert(offsetof(LobbyTeamManagerWidget_HandlePlayerNameChanged, PlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandlePlayerNameChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyTeamManagerWidget_HandlePlayerNameChanged, Name_0) == 0x000008, "Member 'LobbyTeamManagerWidget_HandlePlayerNameChanged::Name_0' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandlePlayerStateAdded
// 0x0008 (0x0008 - 0x0000)
struct LobbyTeamManagerWidget_HandlePlayerStateAdded final
{
public:
	class APlayerState*                           AddedPlayerState;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamManagerWidget_HandlePlayerStateAdded) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandlePlayerStateAdded");
static_assert(sizeof(LobbyTeamManagerWidget_HandlePlayerStateAdded) == 0x000008, "Wrong size on LobbyTeamManagerWidget_HandlePlayerStateAdded");
static_assert(offsetof(LobbyTeamManagerWidget_HandlePlayerStateAdded, AddedPlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandlePlayerStateAdded::AddedPlayerState' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandlePlayerStateRemoved
// 0x0008 (0x0008 - 0x0000)
struct LobbyTeamManagerWidget_HandlePlayerStateRemoved final
{
public:
	class APlayerState*                           RemovedPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamManagerWidget_HandlePlayerStateRemoved) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandlePlayerStateRemoved");
static_assert(sizeof(LobbyTeamManagerWidget_HandlePlayerStateRemoved) == 0x000008, "Wrong size on LobbyTeamManagerWidget_HandlePlayerStateRemoved");
static_assert(offsetof(LobbyTeamManagerWidget_HandlePlayerStateRemoved, RemovedPlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandlePlayerStateRemoved::RemovedPlayerState' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandleReadyAndWaitingChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyTeamManagerWidget_HandleReadyAndWaitingChanged final
{
public:
	class APlayerStateJP_Lobby*                   PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadyAndWaiting;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyTeamManagerWidget_HandleReadyAndWaitingChanged) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandleReadyAndWaitingChanged");
static_assert(sizeof(LobbyTeamManagerWidget_HandleReadyAndWaitingChanged) == 0x000010, "Wrong size on LobbyTeamManagerWidget_HandleReadyAndWaitingChanged");
static_assert(offsetof(LobbyTeamManagerWidget_HandleReadyAndWaitingChanged, PlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandleReadyAndWaitingChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyTeamManagerWidget_HandleReadyAndWaitingChanged, bReadyAndWaiting) == 0x000008, "Member 'LobbyTeamManagerWidget_HandleReadyAndWaitingChanged::bReadyAndWaiting' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandleSlotRelocation
// 0x0008 (0x0008 - 0x0000)
struct LobbyTeamManagerWidget_HandleSlotRelocation final
{
public:
	class APlayerStateJP_Lobby*                   InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamManagerWidget_HandleSlotRelocation) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandleSlotRelocation");
static_assert(sizeof(LobbyTeamManagerWidget_HandleSlotRelocation) == 0x000008, "Wrong size on LobbyTeamManagerWidget_HandleSlotRelocation");
static_assert(offsetof(LobbyTeamManagerWidget_HandleSlotRelocation, InPlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandleSlotRelocation::InPlayerState' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandleTeamIdChanged
// 0x0010 (0x0010 - 0x0000)
struct LobbyTeamManagerWidget_HandleTeamIdChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyTeamManagerWidget_HandleTeamIdChanged) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandleTeamIdChanged");
static_assert(sizeof(LobbyTeamManagerWidget_HandleTeamIdChanged) == 0x000010, "Wrong size on LobbyTeamManagerWidget_HandleTeamIdChanged");
static_assert(offsetof(LobbyTeamManagerWidget_HandleTeamIdChanged, PlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandleTeamIdChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyTeamManagerWidget_HandleTeamIdChanged, TeamId) == 0x000008, "Member 'LobbyTeamManagerWidget_HandleTeamIdChanged::TeamId' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.HandleUserAvatarChanged
// 0x0030 (0x0030 - 0x0000)
struct LobbyTeamManagerWidget_HandleUserAvatarChanged final
{
public:
	class APlayerStateJP*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              NewAvatar;                                         // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamManagerWidget_HandleUserAvatarChanged) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_HandleUserAvatarChanged");
static_assert(sizeof(LobbyTeamManagerWidget_HandleUserAvatarChanged) == 0x000030, "Wrong size on LobbyTeamManagerWidget_HandleUserAvatarChanged");
static_assert(offsetof(LobbyTeamManagerWidget_HandleUserAvatarChanged, PlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_HandleUserAvatarChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(LobbyTeamManagerWidget_HandleUserAvatarChanged, NewAvatar) == 0x000008, "Member 'LobbyTeamManagerWidget_HandleUserAvatarChanged::NewAvatar' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.PushConfirmPlayWithBlockedPlayerPrompt
// 0x0008 (0x0008 - 0x0000)
struct LobbyTeamManagerWidget_PushConfirmPlayWithBlockedPlayerPrompt final
{
public:
	const class APlayerStateJP_Lobby*             PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamManagerWidget_PushConfirmPlayWithBlockedPlayerPrompt) == 0x000008, "Wrong alignment on LobbyTeamManagerWidget_PushConfirmPlayWithBlockedPlayerPrompt");
static_assert(sizeof(LobbyTeamManagerWidget_PushConfirmPlayWithBlockedPlayerPrompt) == 0x000008, "Wrong size on LobbyTeamManagerWidget_PushConfirmPlayWithBlockedPlayerPrompt");
static_assert(offsetof(LobbyTeamManagerWidget_PushConfirmPlayWithBlockedPlayerPrompt, PlayerState) == 0x000000, "Member 'LobbyTeamManagerWidget_PushConfirmPlayWithBlockedPlayerPrompt::PlayerState' has a wrong offset!");

// Function JP.LobbyTeamManagerWidget.SetAllSlotsVisibility
// 0x0001 (0x0001 - 0x0000)
struct LobbyTeamManagerWidget_SetAllSlotsVisibility final
{
public:
	bool                                          InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamManagerWidget_SetAllSlotsVisibility) == 0x000001, "Wrong alignment on LobbyTeamManagerWidget_SetAllSlotsVisibility");
static_assert(sizeof(LobbyTeamManagerWidget_SetAllSlotsVisibility) == 0x000001, "Wrong size on LobbyTeamManagerWidget_SetAllSlotsVisibility");
static_assert(offsetof(LobbyTeamManagerWidget_SetAllSlotsVisibility, InVisibility) == 0x000000, "Member 'LobbyTeamManagerWidget_SetAllSlotsVisibility::InVisibility' has a wrong offset!");

// Function JP.PlayerStateJP_ReplicationMonitorComponent.HandlePawnSet
// 0x0018 (0x0018 - 0x0000)
struct PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  OldPawn;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet) == 0x000008, "Wrong alignment on PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet");
static_assert(sizeof(PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet) == 0x000018, "Wrong size on PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet");
static_assert(offsetof(PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet, Player) == 0x000000, "Member 'PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet::Player' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet, NewPawn) == 0x000008, "Member 'PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet::NewPawn' has a wrong offset!");
static_assert(offsetof(PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet, OldPawn) == 0x000010, "Member 'PlayerStateJP_ReplicationMonitorComponent_HandlePawnSet::OldPawn' has a wrong offset!");

// Function JP.PlayerStateJP_ReplicationMonitorComponent.IsFullyReplicatedForHUD
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateJP_ReplicationMonitorComponent_IsFullyReplicatedForHUD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_ReplicationMonitorComponent_IsFullyReplicatedForHUD) == 0x000001, "Wrong alignment on PlayerStateJP_ReplicationMonitorComponent_IsFullyReplicatedForHUD");
static_assert(sizeof(PlayerStateJP_ReplicationMonitorComponent_IsFullyReplicatedForHUD) == 0x000001, "Wrong size on PlayerStateJP_ReplicationMonitorComponent_IsFullyReplicatedForHUD");
static_assert(offsetof(PlayerStateJP_ReplicationMonitorComponent_IsFullyReplicatedForHUD, ReturnValue) == 0x000000, "Member 'PlayerStateJP_ReplicationMonitorComponent_IsFullyReplicatedForHUD::ReturnValue' has a wrong offset!");

// Function JP.LobbyTeamPlayerWorldSlotActor.HandlePreviewClassLoaded
// 0x0028 (0x0028 - 0x0000)
struct LobbyTeamPlayerWorldSlotActor_HandlePreviewClassLoaded final
{
public:
	TSoftClassPtr<class UClass>                   InPreviewClass;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamPlayerWorldSlotActor_HandlePreviewClassLoaded) == 0x000008, "Wrong alignment on LobbyTeamPlayerWorldSlotActor_HandlePreviewClassLoaded");
static_assert(sizeof(LobbyTeamPlayerWorldSlotActor_HandlePreviewClassLoaded) == 0x000028, "Wrong size on LobbyTeamPlayerWorldSlotActor_HandlePreviewClassLoaded");
static_assert(offsetof(LobbyTeamPlayerWorldSlotActor_HandlePreviewClassLoaded, InPreviewClass) == 0x000000, "Member 'LobbyTeamPlayerWorldSlotActor_HandlePreviewClassLoaded::InPreviewClass' has a wrong offset!");

// Function JP.LobbyTeamPlayerWorldSlotActor.HandleSkinLoaded
// 0x0028 (0x0028 - 0x0000)
struct LobbyTeamPlayerWorldSlotActor_HandleSkinLoaded final
{
public:
	TSoftObjectPtr<class UNeighborSkinDefinition> InNeighborSkinDefinition;                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTeamPlayerWorldSlotActor_HandleSkinLoaded) == 0x000008, "Wrong alignment on LobbyTeamPlayerWorldSlotActor_HandleSkinLoaded");
static_assert(sizeof(LobbyTeamPlayerWorldSlotActor_HandleSkinLoaded) == 0x000028, "Wrong size on LobbyTeamPlayerWorldSlotActor_HandleSkinLoaded");
static_assert(offsetof(LobbyTeamPlayerWorldSlotActor_HandleSkinLoaded, InNeighborSkinDefinition) == 0x000000, "Member 'LobbyTeamPlayerWorldSlotActor_HandleSkinLoaded::InNeighborSkinDefinition' has a wrong offset!");

// Function JP.PerkAction.GetDefinition
// 0x0008 (0x0008 - 0x0000)
struct PerkAction_GetDefinition final
{
public:
	class UPerkDefinition*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAction_GetDefinition) == 0x000008, "Wrong alignment on PerkAction_GetDefinition");
static_assert(sizeof(PerkAction_GetDefinition) == 0x000008, "Wrong size on PerkAction_GetDefinition");
static_assert(offsetof(PerkAction_GetDefinition, ReturnValue) == 0x000000, "Member 'PerkAction_GetDefinition::ReturnValue' has a wrong offset!");

// Function JP.PerkAction_AbilityActivatedBase.OnAbilityActivated
// 0x0010 (0x0010 - 0x0000)
struct PerkAction_AbilityActivatedBase_OnAbilityActivated final
{
public:
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       Ability;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAction_AbilityActivatedBase_OnAbilityActivated) == 0x000008, "Wrong alignment on PerkAction_AbilityActivatedBase_OnAbilityActivated");
static_assert(sizeof(PerkAction_AbilityActivatedBase_OnAbilityActivated) == 0x000010, "Wrong size on PerkAction_AbilityActivatedBase_OnAbilityActivated");
static_assert(offsetof(PerkAction_AbilityActivatedBase_OnAbilityActivated, Handle) == 0x000000, "Member 'PerkAction_AbilityActivatedBase_OnAbilityActivated::Handle' has a wrong offset!");
static_assert(offsetof(PerkAction_AbilityActivatedBase_OnAbilityActivated, Ability) == 0x000008, "Member 'PerkAction_AbilityActivatedBase_OnAbilityActivated::Ability' has a wrong offset!");

// Function JP.LobbyTravelComponent.HandleAllPlayersReadyAndWaiting
// 0x0001 (0x0001 - 0x0000)
struct LobbyTravelComponent_HandleAllPlayersReadyAndWaiting final
{
public:
	bool                                          bInReadyAndWaitingState;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTravelComponent_HandleAllPlayersReadyAndWaiting) == 0x000001, "Wrong alignment on LobbyTravelComponent_HandleAllPlayersReadyAndWaiting");
static_assert(sizeof(LobbyTravelComponent_HandleAllPlayersReadyAndWaiting) == 0x000001, "Wrong size on LobbyTravelComponent_HandleAllPlayersReadyAndWaiting");
static_assert(offsetof(LobbyTravelComponent_HandleAllPlayersReadyAndWaiting, bInReadyAndWaitingState) == 0x000000, "Member 'LobbyTravelComponent_HandleAllPlayersReadyAndWaiting::bInReadyAndWaitingState' has a wrong offset!");

// Function JP.LobbyTravelComponent.Server_QueueTravel
// 0x0002 (0x0002 - 0x0000)
struct LobbyTravelComponent_Server_QueueTravel final
{
public:
	bool                                          bInDoCountdown;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAllowAbort;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTravelComponent_Server_QueueTravel) == 0x000001, "Wrong alignment on LobbyTravelComponent_Server_QueueTravel");
static_assert(sizeof(LobbyTravelComponent_Server_QueueTravel) == 0x000002, "Wrong size on LobbyTravelComponent_Server_QueueTravel");
static_assert(offsetof(LobbyTravelComponent_Server_QueueTravel, bInDoCountdown) == 0x000000, "Member 'LobbyTravelComponent_Server_QueueTravel::bInDoCountdown' has a wrong offset!");
static_assert(offsetof(LobbyTravelComponent_Server_QueueTravel, bInAllowAbort) == 0x000001, "Member 'LobbyTravelComponent_Server_QueueTravel::bInAllowAbort' has a wrong offset!");

// Function JP.LobbyTravelCountdownWidget.ApplyViewModel
// 0x0004 (0x0004 - 0x0000)
struct LobbyTravelCountdownWidget_ApplyViewModel final
{
public:
	struct FLobbyCountdownViewModel               InModel;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyTravelCountdownWidget_ApplyViewModel) == 0x000004, "Wrong alignment on LobbyTravelCountdownWidget_ApplyViewModel");
static_assert(sizeof(LobbyTravelCountdownWidget_ApplyViewModel) == 0x000004, "Wrong size on LobbyTravelCountdownWidget_ApplyViewModel");
static_assert(offsetof(LobbyTravelCountdownWidget_ApplyViewModel, InModel) == 0x000000, "Member 'LobbyTravelCountdownWidget_ApplyViewModel::InModel' has a wrong offset!");

// Function JP.LocalRotationRateMeasurer.SetSceneComponentToMeasure
// 0x0008 (0x0008 - 0x0000)
struct LocalRotationRateMeasurer_SetSceneComponentToMeasure final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalRotationRateMeasurer_SetSceneComponentToMeasure) == 0x000008, "Wrong alignment on LocalRotationRateMeasurer_SetSceneComponentToMeasure");
static_assert(sizeof(LocalRotationRateMeasurer_SetSceneComponentToMeasure) == 0x000008, "Wrong size on LocalRotationRateMeasurer_SetSceneComponentToMeasure");
static_assert(offsetof(LocalRotationRateMeasurer_SetSceneComponentToMeasure, SceneComponent) == 0x000000, "Member 'LocalRotationRateMeasurer_SetSceneComponentToMeasure::SceneComponent' has a wrong offset!");

// Function JP.PlayerProgressionFunctionLibrary.GetProfileLevel
// 0x0008 (0x0008 - 0x0000)
struct PlayerProgressionFunctionLibrary_GetProfileLevel final
{
public:
	int32                                         ProfileXP;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProgressionFunctionLibrary_GetProfileLevel) == 0x000004, "Wrong alignment on PlayerProgressionFunctionLibrary_GetProfileLevel");
static_assert(sizeof(PlayerProgressionFunctionLibrary_GetProfileLevel) == 0x000008, "Wrong size on PlayerProgressionFunctionLibrary_GetProfileLevel");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetProfileLevel, ProfileXP) == 0x000000, "Member 'PlayerProgressionFunctionLibrary_GetProfileLevel::ProfileXP' has a wrong offset!");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetProfileLevel, ReturnValue) == 0x000004, "Member 'PlayerProgressionFunctionLibrary_GetProfileLevel::ReturnValue' has a wrong offset!");

// Function JP.PlayerProgressionFunctionLibrary.GetProgressBetweenProfileLevels
// 0x0010 (0x0010 - 0x0000)
struct PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels final
{
public:
	int32                                         ProfileXP;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FromProfileLevelInclusive;                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToProfileLevelInclusive;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels) == 0x000004, "Wrong alignment on PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels");
static_assert(sizeof(PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels) == 0x000010, "Wrong size on PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels, ProfileXP) == 0x000000, "Member 'PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels::ProfileXP' has a wrong offset!");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels, FromProfileLevelInclusive) == 0x000004, "Member 'PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels::FromProfileLevelInclusive' has a wrong offset!");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels, ToProfileLevelInclusive) == 0x000008, "Member 'PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels::ToProfileLevelInclusive' has a wrong offset!");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels, ReturnValue) == 0x00000C, "Member 'PlayerProgressionFunctionLibrary_GetProgressBetweenProfileLevels::ReturnValue' has a wrong offset!");

// Function JP.PlayerProgressionFunctionLibrary.GetProgressTowardNextProfileLevel
// 0x0008 (0x0008 - 0x0000)
struct PlayerProgressionFunctionLibrary_GetProgressTowardNextProfileLevel final
{
public:
	int32                                         ProfileXP;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProgressionFunctionLibrary_GetProgressTowardNextProfileLevel) == 0x000004, "Wrong alignment on PlayerProgressionFunctionLibrary_GetProgressTowardNextProfileLevel");
static_assert(sizeof(PlayerProgressionFunctionLibrary_GetProgressTowardNextProfileLevel) == 0x000008, "Wrong size on PlayerProgressionFunctionLibrary_GetProgressTowardNextProfileLevel");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetProgressTowardNextProfileLevel, ProfileXP) == 0x000000, "Member 'PlayerProgressionFunctionLibrary_GetProgressTowardNextProfileLevel::ProfileXP' has a wrong offset!");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetProgressTowardNextProfileLevel, ReturnValue) == 0x000004, "Member 'PlayerProgressionFunctionLibrary_GetProgressTowardNextProfileLevel::ReturnValue' has a wrong offset!");

// Function JP.PlayerProgressionFunctionLibrary.GetTotalXPRequirementForProfileLevel
// 0x0008 (0x0008 - 0x0000)
struct PlayerProgressionFunctionLibrary_GetTotalXPRequirementForProfileLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProgressionFunctionLibrary_GetTotalXPRequirementForProfileLevel) == 0x000004, "Wrong alignment on PlayerProgressionFunctionLibrary_GetTotalXPRequirementForProfileLevel");
static_assert(sizeof(PlayerProgressionFunctionLibrary_GetTotalXPRequirementForProfileLevel) == 0x000008, "Wrong size on PlayerProgressionFunctionLibrary_GetTotalXPRequirementForProfileLevel");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetTotalXPRequirementForProfileLevel, Level) == 0x000000, "Member 'PlayerProgressionFunctionLibrary_GetTotalXPRequirementForProfileLevel::Level' has a wrong offset!");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetTotalXPRequirementForProfileLevel, ReturnValue) == 0x000004, "Member 'PlayerProgressionFunctionLibrary_GetTotalXPRequirementForProfileLevel::ReturnValue' has a wrong offset!");

// Function JP.PlayerProgressionFunctionLibrary.GetXPRequirementForNextProfileLevel
// 0x0008 (0x0008 - 0x0000)
struct PlayerProgressionFunctionLibrary_GetXPRequirementForNextProfileLevel final
{
public:
	int32                                         CurrentLevel;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProgressionFunctionLibrary_GetXPRequirementForNextProfileLevel) == 0x000004, "Wrong alignment on PlayerProgressionFunctionLibrary_GetXPRequirementForNextProfileLevel");
static_assert(sizeof(PlayerProgressionFunctionLibrary_GetXPRequirementForNextProfileLevel) == 0x000008, "Wrong size on PlayerProgressionFunctionLibrary_GetXPRequirementForNextProfileLevel");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetXPRequirementForNextProfileLevel, CurrentLevel) == 0x000000, "Member 'PlayerProgressionFunctionLibrary_GetXPRequirementForNextProfileLevel::CurrentLevel' has a wrong offset!");
static_assert(offsetof(PlayerProgressionFunctionLibrary_GetXPRequirementForNextProfileLevel, ReturnValue) == 0x000004, "Member 'PlayerProgressionFunctionLibrary_GetXPRequirementForNextProfileLevel::ReturnValue' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_GetDisplayName) == 0x000008, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_GetDisplayName");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_GetDisplayName) == 0x000010, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_GetDisplayName");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetDisplayName, ReturnValue) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetDisplayName::ReturnValue' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.SetDefaultNeighborID
// 0x0008 (0x0008 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_SetDefaultNeighborID final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_SetDefaultNeighborID) == 0x000004, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_SetDefaultNeighborID");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_SetDefaultNeighborID) == 0x000008, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_SetDefaultNeighborID");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_SetDefaultNeighborID, NeighborID) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_SetDefaultNeighborID::NeighborID' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.SetHouseID
// 0x0008 (0x0008 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_SetHouseID final
{
public:
	struct FGameplayTag                           HouseID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_SetHouseID) == 0x000004, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_SetHouseID");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_SetHouseID) == 0x000008, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_SetHouseID");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_SetHouseID, HouseID) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_SetHouseID::HouseID' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.SetItemSkin
// 0x0018 (0x0018 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ItemId;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SkinID;                                            // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin) == 0x000004, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin) == 0x000018, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin, NeighborID) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin::NeighborID' has a wrong offset!");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin, ItemId) == 0x000008, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin::ItemId' has a wrong offset!");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin, SkinID) == 0x000010, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_SetItemSkin::SkinID' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.SetNeighborLoadout
// 0x0038 (0x0038 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborLoadout final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNeighborLoadout                       NeighborLoadout;                                   // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborLoadout) == 0x000008, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborLoadout");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborLoadout) == 0x000038, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborLoadout");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborLoadout, NeighborID) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborLoadout::NeighborID' has a wrong offset!");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborLoadout, NeighborLoadout) == 0x000008, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborLoadout::NeighborLoadout' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.SetNeighborSkin
// 0x0010 (0x0010 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborSkin final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SkinID;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborSkin) == 0x000004, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborSkin");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborSkin) == 0x000010, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborSkin");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborSkin, NeighborID) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborSkin::NeighborID' has a wrong offset!");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborSkin, SkinID) == 0x000008, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_SetNeighborSkin::SkinID' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.GetCharacterXP
// 0x000C (0x000C - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_GetCharacterXP final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_GetCharacterXP) == 0x000004, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_GetCharacterXP");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_GetCharacterXP) == 0x00000C, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_GetCharacterXP");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetCharacterXP, NeighborID) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetCharacterXP::NeighborID' has a wrong offset!");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetCharacterXP, ReturnValue) == 0x000008, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetCharacterXP::ReturnValue' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.GetDefaultNeighborID
// 0x0008 (0x0008 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_GetDefaultNeighborID final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_GetDefaultNeighborID) == 0x000004, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_GetDefaultNeighborID");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_GetDefaultNeighborID) == 0x000008, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_GetDefaultNeighborID");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetDefaultNeighborID, ReturnValue) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetDefaultNeighborID::ReturnValue' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.GetHouseID
// 0x0008 (0x0008 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_GetHouseID final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_GetHouseID) == 0x000004, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_GetHouseID");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_GetHouseID) == 0x000008, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_GetHouseID");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetHouseID, ReturnValue) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetHouseID::ReturnValue' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.GetNeighborLoadout
// 0x0038 (0x0038 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_GetNeighborLoadout final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNeighborLoadout                       ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_GetNeighborLoadout) == 0x000008, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_GetNeighborLoadout");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_GetNeighborLoadout) == 0x000038, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_GetNeighborLoadout");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetNeighborLoadout, NeighborID) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetNeighborLoadout::NeighborID' has a wrong offset!");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetNeighborLoadout, ReturnValue) == 0x000008, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetNeighborLoadout::ReturnValue' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.GetPlayerLoadout
// 0x0028 (0x0028 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_GetPlayerLoadout final
{
public:
	struct FPlayerLoadout                         ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_GetPlayerLoadout) == 0x000008, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_GetPlayerLoadout");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_GetPlayerLoadout) == 0x000028, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_GetPlayerLoadout");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetPlayerLoadout, ReturnValue) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetPlayerLoadout::ReturnValue' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.GetPlaytestTimeLeftString
// 0x0010 (0x0010 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString final
{
public:
	int32                                         DaysLeft;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HoursLeft;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinutesLeft;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsLeft;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString) == 0x000004, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString) == 0x000010, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString, DaysLeft) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString::DaysLeft' has a wrong offset!");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString, HoursLeft) == 0x000004, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString::HoursLeft' has a wrong offset!");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString, MinutesLeft) == 0x000008, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString::MinutesLeft' has a wrong offset!");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString, SecondsLeft) == 0x00000C, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetPlaytestTimeLeftString::SecondsLeft' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.GetProfileXP
// 0x0004 (0x0004 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_GetProfileXP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_GetProfileXP) == 0x000004, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_GetProfileXP");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_GetProfileXP) == 0x000004, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_GetProfileXP");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetProfileXP, ReturnValue) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetProfileXP::ReturnValue' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.GetUserAvatar
// 0x0008 (0x0008 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_GetUserAvatar final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_GetUserAvatar) == 0x000008, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_GetUserAvatar");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_GetUserAvatar) == 0x000008, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_GetUserAvatar");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_GetUserAvatar, ReturnValue) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_GetUserAvatar::ReturnValue' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.HasPlaytestEnded
// 0x0001 (0x0001 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_HasPlaytestEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_HasPlaytestEnded) == 0x000001, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_HasPlaytestEnded");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_HasPlaytestEnded) == 0x000001, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_HasPlaytestEnded");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_HasPlaytestEnded, ReturnValue) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_HasPlaytestEnded::ReturnValue' has a wrong offset!");

// Function JP.LocalUserOnlineServicesGameInstanceSubsystem.IsPlaytestInProgress
// 0x0001 (0x0001 - 0x0000)
struct LocalUserOnlineServicesGameInstanceSubsystem_IsPlaytestInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalUserOnlineServicesGameInstanceSubsystem_IsPlaytestInProgress) == 0x000001, "Wrong alignment on LocalUserOnlineServicesGameInstanceSubsystem_IsPlaytestInProgress");
static_assert(sizeof(LocalUserOnlineServicesGameInstanceSubsystem_IsPlaytestInProgress) == 0x000001, "Wrong size on LocalUserOnlineServicesGameInstanceSubsystem_IsPlaytestInProgress");
static_assert(offsetof(LocalUserOnlineServicesGameInstanceSubsystem_IsPlaytestInProgress, ReturnValue) == 0x000000, "Member 'LocalUserOnlineServicesGameInstanceSubsystem_IsPlaytestInProgress::ReturnValue' has a wrong offset!");

// Function JP.SocialPartyMemberEntryWidget.GetLocalizedStatusInfo
// 0x0020 (0x0020 - 0x0000)
struct SocialPartyMemberEntryWidget_GetLocalizedStatusInfo final
{
public:
	class FText                                   StatusText;                                        // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialPartyMemberEntryWidget_GetLocalizedStatusInfo) == 0x000008, "Wrong alignment on SocialPartyMemberEntryWidget_GetLocalizedStatusInfo");
static_assert(sizeof(SocialPartyMemberEntryWidget_GetLocalizedStatusInfo) == 0x000020, "Wrong size on SocialPartyMemberEntryWidget_GetLocalizedStatusInfo");
static_assert(offsetof(SocialPartyMemberEntryWidget_GetLocalizedStatusInfo, StatusText) == 0x000000, "Member 'SocialPartyMemberEntryWidget_GetLocalizedStatusInfo::StatusText' has a wrong offset!");
static_assert(offsetof(SocialPartyMemberEntryWidget_GetLocalizedStatusInfo, Color) == 0x000010, "Member 'SocialPartyMemberEntryWidget_GetLocalizedStatusInfo::Color' has a wrong offset!");

// Function JP.SocialRecentPlayerEntryWidget.GetFormattedLastSeenTimeSpan
// 0x0018 (0x0018 - 0x0000)
struct SocialRecentPlayerEntryWidget_GetFormattedLastSeenTimeSpan final
{
public:
	struct FTimespan                              LastSeenTimespan;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialRecentPlayerEntryWidget_GetFormattedLastSeenTimeSpan) == 0x000008, "Wrong alignment on SocialRecentPlayerEntryWidget_GetFormattedLastSeenTimeSpan");
static_assert(sizeof(SocialRecentPlayerEntryWidget_GetFormattedLastSeenTimeSpan) == 0x000018, "Wrong size on SocialRecentPlayerEntryWidget_GetFormattedLastSeenTimeSpan");
static_assert(offsetof(SocialRecentPlayerEntryWidget_GetFormattedLastSeenTimeSpan, LastSeenTimespan) == 0x000000, "Member 'SocialRecentPlayerEntryWidget_GetFormattedLastSeenTimeSpan::LastSeenTimespan' has a wrong offset!");
static_assert(offsetof(SocialRecentPlayerEntryWidget_GetFormattedLastSeenTimeSpan, ReturnValue) == 0x000008, "Member 'SocialRecentPlayerEntryWidget_GetFormattedLastSeenTimeSpan::ReturnValue' has a wrong offset!");

// Function JP.SocialRecentPlayerEntryWidget.SetLastSeen
// 0x0008 (0x0008 - 0x0000)
struct SocialRecentPlayerEntryWidget_SetLastSeen final
{
public:
	struct FDateTime                              LastSeen;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialRecentPlayerEntryWidget_SetLastSeen) == 0x000008, "Wrong alignment on SocialRecentPlayerEntryWidget_SetLastSeen");
static_assert(sizeof(SocialRecentPlayerEntryWidget_SetLastSeen) == 0x000008, "Wrong size on SocialRecentPlayerEntryWidget_SetLastSeen");
static_assert(offsetof(SocialRecentPlayerEntryWidget_SetLastSeen, LastSeen) == 0x000000, "Member 'SocialRecentPlayerEntryWidget_SetLastSeen::LastSeen' has a wrong offset!");

// Function JP.SocialWidget.ToggleSocialListState
// 0x0008 (0x0008 - 0x0000)
struct SocialWidget_ToggleSocialListState final
{
public:
	class UUserWidget*                            ToggledWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialWidget_ToggleSocialListState) == 0x000008, "Wrong alignment on SocialWidget_ToggleSocialListState");
static_assert(sizeof(SocialWidget_ToggleSocialListState) == 0x000008, "Wrong size on SocialWidget_ToggleSocialListState");
static_assert(offsetof(SocialWidget_ToggleSocialListState, ToggledWidget) == 0x000000, "Member 'SocialWidget_ToggleSocialListState::ToggledWidget' has a wrong offset!");

// Function JP.PlayerJoinHandshakePlayerControllerComponent.Server_ChangeSelectedNeighborIdentifier
// 0x0008 (0x0008 - 0x0000)
struct PlayerJoinHandshakePlayerControllerComponent_Server_ChangeSelectedNeighborIdentifier final
{
public:
	struct FGameplayTag                           NewNeighborIdentifier;                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerJoinHandshakePlayerControllerComponent_Server_ChangeSelectedNeighborIdentifier) == 0x000004, "Wrong alignment on PlayerJoinHandshakePlayerControllerComponent_Server_ChangeSelectedNeighborIdentifier");
static_assert(sizeof(PlayerJoinHandshakePlayerControllerComponent_Server_ChangeSelectedNeighborIdentifier) == 0x000008, "Wrong size on PlayerJoinHandshakePlayerControllerComponent_Server_ChangeSelectedNeighborIdentifier");
static_assert(offsetof(PlayerJoinHandshakePlayerControllerComponent_Server_ChangeSelectedNeighborIdentifier, NewNeighborIdentifier) == 0x000000, "Member 'PlayerJoinHandshakePlayerControllerComponent_Server_ChangeSelectedNeighborIdentifier::NewNeighborIdentifier' has a wrong offset!");

// Function JP.PlayerJoinHandshakePlayerControllerComponent.Server_SetBlockedList
// 0x0010 (0x0010 - 0x0000)
struct PlayerJoinHandshakePlayerControllerComponent_Server_SetBlockedList final
{
public:
	TArray<class FString>                         SerializedBlockedIDs;                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerJoinHandshakePlayerControllerComponent_Server_SetBlockedList) == 0x000008, "Wrong alignment on PlayerJoinHandshakePlayerControllerComponent_Server_SetBlockedList");
static_assert(sizeof(PlayerJoinHandshakePlayerControllerComponent_Server_SetBlockedList) == 0x000010, "Wrong size on PlayerJoinHandshakePlayerControllerComponent_Server_SetBlockedList");
static_assert(offsetof(PlayerJoinHandshakePlayerControllerComponent_Server_SetBlockedList, SerializedBlockedIDs) == 0x000000, "Member 'PlayerJoinHandshakePlayerControllerComponent_Server_SetBlockedList::SerializedBlockedIDs' has a wrong offset!");

// Function JP.PlayerJoinHandshakePlayerControllerComponent.Server_SetPlayerLoadout
// 0x0028 (0x0028 - 0x0000)
struct PlayerJoinHandshakePlayerControllerComponent_Server_SetPlayerLoadout final
{
public:
	struct FPlayerLoadout                         NewLoadout;                                        // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerJoinHandshakePlayerControllerComponent_Server_SetPlayerLoadout) == 0x000008, "Wrong alignment on PlayerJoinHandshakePlayerControllerComponent_Server_SetPlayerLoadout");
static_assert(sizeof(PlayerJoinHandshakePlayerControllerComponent_Server_SetPlayerLoadout) == 0x000028, "Wrong size on PlayerJoinHandshakePlayerControllerComponent_Server_SetPlayerLoadout");
static_assert(offsetof(PlayerJoinHandshakePlayerControllerComponent_Server_SetPlayerLoadout, NewLoadout) == 0x000000, "Member 'PlayerJoinHandshakePlayerControllerComponent_Server_SetPlayerLoadout::NewLoadout' has a wrong offset!");

// Function JP.RoomControllerComponent.ServerUpgradeRoom
// 0x0008 (0x0008 - 0x0000)
struct RoomControllerComponent_ServerUpgradeRoom final
{
public:
	const class ARoomManager*                     RoomManager;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomControllerComponent_ServerUpgradeRoom) == 0x000008, "Wrong alignment on RoomControllerComponent_ServerUpgradeRoom");
static_assert(sizeof(RoomControllerComponent_ServerUpgradeRoom) == 0x000008, "Wrong size on RoomControllerComponent_ServerUpgradeRoom");
static_assert(offsetof(RoomControllerComponent_ServerUpgradeRoom, RoomManager) == 0x000000, "Member 'RoomControllerComponent_ServerUpgradeRoom::RoomManager' has a wrong offset!");

// Function JP.LyraPlatformEmulationSettings.GetKnownDeviceProfiles
// 0x0010 (0x0010 - 0x0000)
struct LyraPlatformEmulationSettings_GetKnownDeviceProfiles final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlatformEmulationSettings_GetKnownDeviceProfiles) == 0x000008, "Wrong alignment on LyraPlatformEmulationSettings_GetKnownDeviceProfiles");
static_assert(sizeof(LyraPlatformEmulationSettings_GetKnownDeviceProfiles) == 0x000010, "Wrong size on LyraPlatformEmulationSettings_GetKnownDeviceProfiles");
static_assert(offsetof(LyraPlatformEmulationSettings_GetKnownDeviceProfiles, ReturnValue) == 0x000000, "Member 'LyraPlatformEmulationSettings_GetKnownDeviceProfiles::ReturnValue' has a wrong offset!");

// Function JP.LyraPlatformEmulationSettings.GetKnownPlatformIds
// 0x0010 (0x0010 - 0x0000)
struct LyraPlatformEmulationSettings_GetKnownPlatformIds final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPlatformEmulationSettings_GetKnownPlatformIds) == 0x000008, "Wrong alignment on LyraPlatformEmulationSettings_GetKnownPlatformIds");
static_assert(sizeof(LyraPlatformEmulationSettings_GetKnownPlatformIds) == 0x000010, "Wrong size on LyraPlatformEmulationSettings_GetKnownPlatformIds");
static_assert(offsetof(LyraPlatformEmulationSettings_GetKnownPlatformIds, ReturnValue) == 0x000000, "Member 'LyraPlatformEmulationSettings_GetKnownPlatformIds::ReturnValue' has a wrong offset!");

// Function JP.ProjectSettingsJP.GetProjectSettings
// 0x0008 (0x0008 - 0x0000)
struct ProjectSettingsJP_GetProjectSettings final
{
public:
	class UProjectSettingsJP*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectSettingsJP_GetProjectSettings) == 0x000008, "Wrong alignment on ProjectSettingsJP_GetProjectSettings");
static_assert(sizeof(ProjectSettingsJP_GetProjectSettings) == 0x000008, "Wrong size on ProjectSettingsJP_GetProjectSettings");
static_assert(offsetof(ProjectSettingsJP_GetProjectSettings, ReturnValue) == 0x000000, "Member 'ProjectSettingsJP_GetProjectSettings::ReturnValue' has a wrong offset!");

// Function JP.SeasonPassContainerWidgetBase.ApplyViewModel
// 0x0004 (0x0004 - 0x0000)
struct SeasonPassContainerWidgetBase_ApplyViewModel final
{
public:
	struct FSeasonPassContainerViewModel          ViewModel;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassContainerWidgetBase_ApplyViewModel) == 0x000004, "Wrong alignment on SeasonPassContainerWidgetBase_ApplyViewModel");
static_assert(sizeof(SeasonPassContainerWidgetBase_ApplyViewModel) == 0x000004, "Wrong size on SeasonPassContainerWidgetBase_ApplyViewModel");
static_assert(offsetof(SeasonPassContainerWidgetBase_ApplyViewModel, ViewModel) == 0x000000, "Member 'SeasonPassContainerWidgetBase_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.SeasonPassContainerWidgetBase.SeasonPassIsAvailable
// 0x0001 (0x0001 - 0x0000)
struct SeasonPassContainerWidgetBase_SeasonPassIsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassContainerWidgetBase_SeasonPassIsAvailable) == 0x000001, "Wrong alignment on SeasonPassContainerWidgetBase_SeasonPassIsAvailable");
static_assert(sizeof(SeasonPassContainerWidgetBase_SeasonPassIsAvailable) == 0x000001, "Wrong size on SeasonPassContainerWidgetBase_SeasonPassIsAvailable");
static_assert(offsetof(SeasonPassContainerWidgetBase_SeasonPassIsAvailable, ReturnValue) == 0x000000, "Member 'SeasonPassContainerWidgetBase_SeasonPassIsAvailable::ReturnValue' has a wrong offset!");

// Function JP.NeighborSpecialAbilityWidgetProvider.GetWidgetTypes
// 0x0010 (0x0010 - 0x0000)
struct NeighborSpecialAbilityWidgetProvider_GetWidgetTypes final
{
public:
	TArray<TSubclassOf<class UUserWidget>>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborSpecialAbilityWidgetProvider_GetWidgetTypes) == 0x000008, "Wrong alignment on NeighborSpecialAbilityWidgetProvider_GetWidgetTypes");
static_assert(sizeof(NeighborSpecialAbilityWidgetProvider_GetWidgetTypes) == 0x000010, "Wrong size on NeighborSpecialAbilityWidgetProvider_GetWidgetTypes");
static_assert(offsetof(NeighborSpecialAbilityWidgetProvider_GetWidgetTypes, ReturnValue) == 0x000000, "Member 'NeighborSpecialAbilityWidgetProvider_GetWidgetTypes::ReturnValue' has a wrong offset!");

// DelegateFunction JP.LyraSettingsLocal.BoolSettingChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_BoolSettingChanged__DelegateSignature final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_BoolSettingChanged__DelegateSignature) == 0x000001, "Wrong alignment on LyraSettingsLocal_BoolSettingChanged__DelegateSignature");
static_assert(sizeof(LyraSettingsLocal_BoolSettingChanged__DelegateSignature) == 0x000001, "Wrong size on LyraSettingsLocal_BoolSettingChanged__DelegateSignature");
static_assert(offsetof(LyraSettingsLocal_BoolSettingChanged__DelegateSignature, IsEnabled) == 0x000000, "Member 'LyraSettingsLocal_BoolSettingChanged__DelegateSignature::IsEnabled' has a wrong offset!");

// Function JP.LyraSettingsLocal.IsHighContrastEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsHighContrastEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsHighContrastEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsHighContrastEnabled");
static_assert(sizeof(LyraSettingsLocal_IsHighContrastEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsHighContrastEnabled");
static_assert(offsetof(LyraSettingsLocal_IsHighContrastEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsHighContrastEnabled::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.IsMotionBlurEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsMotionBlurEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsMotionBlurEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsMotionBlurEnabled");
static_assert(sizeof(LyraSettingsLocal_IsMotionBlurEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsMotionBlurEnabled");
static_assert(offsetof(LyraSettingsLocal_IsMotionBlurEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsMotionBlurEnabled::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.RunAutoBenchmark
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_RunAutoBenchmark final
{
public:
	bool                                          bSaveImmediately;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_RunAutoBenchmark) == 0x000001, "Wrong alignment on LyraSettingsLocal_RunAutoBenchmark");
static_assert(sizeof(LyraSettingsLocal_RunAutoBenchmark) == 0x000001, "Wrong size on LyraSettingsLocal_RunAutoBenchmark");
static_assert(offsetof(LyraSettingsLocal_RunAutoBenchmark, bSaveImmediately) == 0x000000, "Member 'LyraSettingsLocal_RunAutoBenchmark::bSaveImmediately' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetActivateVoiceChatUponDeathEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetActivateVoiceChatUponDeathEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetActivateVoiceChatUponDeathEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetActivateVoiceChatUponDeathEnabled");
static_assert(sizeof(LyraSettingsLocal_SetActivateVoiceChatUponDeathEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_SetActivateVoiceChatUponDeathEnabled");
static_assert(offsetof(LyraSettingsLocal_SetActivateVoiceChatUponDeathEnabled, bEnabled) == 0x000000, "Member 'LyraSettingsLocal_SetActivateVoiceChatUponDeathEnabled::bEnabled' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetAimAssist
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetAimAssist final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetAimAssist) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetAimAssist");
static_assert(sizeof(LyraSettingsLocal_SetAimAssist) == 0x000001, "Wrong size on LyraSettingsLocal_SetAimAssist");
static_assert(offsetof(LyraSettingsLocal_SetAimAssist, IsEnabled) == 0x000000, "Member 'LyraSettingsLocal_SetAimAssist::IsEnabled' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetAudioInputDeviceId
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_SetAudioInputDeviceId final
{
public:
	class FString                                 InAudioInputDeviceId;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetAudioInputDeviceId) == 0x000008, "Wrong alignment on LyraSettingsLocal_SetAudioInputDeviceId");
static_assert(sizeof(LyraSettingsLocal_SetAudioInputDeviceId) == 0x000010, "Wrong size on LyraSettingsLocal_SetAudioInputDeviceId");
static_assert(offsetof(LyraSettingsLocal_SetAudioInputDeviceId, InAudioInputDeviceId) == 0x000000, "Member 'LyraSettingsLocal_SetAudioInputDeviceId::InAudioInputDeviceId' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetAudioOutputDeviceId
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_SetAudioOutputDeviceId final
{
public:
	class FString                                 InAudioOutputDeviceId;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetAudioOutputDeviceId) == 0x000008, "Wrong alignment on LyraSettingsLocal_SetAudioOutputDeviceId");
static_assert(sizeof(LyraSettingsLocal_SetAudioOutputDeviceId) == 0x000010, "Wrong size on LyraSettingsLocal_SetAudioOutputDeviceId");
static_assert(offsetof(LyraSettingsLocal_SetAudioOutputDeviceId, InAudioOutputDeviceId) == 0x000000, "Member 'LyraSettingsLocal_SetAudioOutputDeviceId::InAudioOutputDeviceId' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetCommunicationEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetCommunicationEnabled final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetCommunicationEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetCommunicationEnabled");
static_assert(sizeof(LyraSettingsLocal_SetCommunicationEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_SetCommunicationEnabled");
static_assert(offsetof(LyraSettingsLocal_SetCommunicationEnabled, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetCommunicationEnabled::NewValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetControllerPlatform
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsLocal_SetControllerPlatform final
{
public:
	class FName                                   InControllerPlatform;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetControllerPlatform) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetControllerPlatform");
static_assert(sizeof(LyraSettingsLocal_SetControllerPlatform) == 0x000008, "Wrong size on LyraSettingsLocal_SetControllerPlatform");
static_assert(offsetof(LyraSettingsLocal_SetControllerPlatform, InControllerPlatform) == 0x000000, "Member 'LyraSettingsLocal_SetControllerPlatform::InControllerPlatform' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetCrouchToggle
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetCrouchToggle final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetCrouchToggle) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetCrouchToggle");
static_assert(sizeof(LyraSettingsLocal_SetCrouchToggle) == 0x000001, "Wrong size on LyraSettingsLocal_SetCrouchToggle");
static_assert(offsetof(LyraSettingsLocal_SetCrouchToggle, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetCrouchToggle::NewValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetDesiredDeviceProfileQualitySuffix
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix final
{
public:
	class FString                                 InDesiredSuffix;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix) == 0x000008, "Wrong alignment on LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix");
static_assert(sizeof(LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix) == 0x000010, "Wrong size on LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix");
static_assert(offsetof(LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix, InDesiredSuffix) == 0x000000, "Member 'LyraSettingsLocal_SetDesiredDeviceProfileQualitySuffix::InDesiredSuffix' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetDialogueVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetDialogueVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetDialogueVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetDialogueVolume");
static_assert(sizeof(LyraSettingsLocal_SetDialogueVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetDialogueVolume");
static_assert(offsetof(LyraSettingsLocal_SetDialogueVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetDialogueVolume::InVolume' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetDisplayGamma
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetDisplayGamma final
{
public:
	float                                         InGamma;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetDisplayGamma) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetDisplayGamma");
static_assert(sizeof(LyraSettingsLocal_SetDisplayGamma) == 0x000004, "Wrong size on LyraSettingsLocal_SetDisplayGamma");
static_assert(offsetof(LyraSettingsLocal_SetDisplayGamma, InGamma) == 0x000000, "Member 'LyraSettingsLocal_SetDisplayGamma::InGamma' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetFrameRateLimit_Always
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFrameRateLimit_Always final
{
public:
	float                                         NewLimitFPS;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFrameRateLimit_Always) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFrameRateLimit_Always");
static_assert(sizeof(LyraSettingsLocal_SetFrameRateLimit_Always) == 0x000004, "Wrong size on LyraSettingsLocal_SetFrameRateLimit_Always");
static_assert(offsetof(LyraSettingsLocal_SetFrameRateLimit_Always, NewLimitFPS) == 0x000000, "Member 'LyraSettingsLocal_SetFrameRateLimit_Always::NewLimitFPS' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetFrameRateLimit_InMenu
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFrameRateLimit_InMenu final
{
public:
	float                                         NewLimitFPS;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFrameRateLimit_InMenu) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFrameRateLimit_InMenu");
static_assert(sizeof(LyraSettingsLocal_SetFrameRateLimit_InMenu) == 0x000004, "Wrong size on LyraSettingsLocal_SetFrameRateLimit_InMenu");
static_assert(offsetof(LyraSettingsLocal_SetFrameRateLimit_InMenu, NewLimitFPS) == 0x000000, "Member 'LyraSettingsLocal_SetFrameRateLimit_InMenu::NewLimitFPS' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetFrameRateLimit_OnBattery
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFrameRateLimit_OnBattery final
{
public:
	float                                         NewLimitFPS;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFrameRateLimit_OnBattery) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFrameRateLimit_OnBattery");
static_assert(sizeof(LyraSettingsLocal_SetFrameRateLimit_OnBattery) == 0x000004, "Wrong size on LyraSettingsLocal_SetFrameRateLimit_OnBattery");
static_assert(offsetof(LyraSettingsLocal_SetFrameRateLimit_OnBattery, NewLimitFPS) == 0x000000, "Member 'LyraSettingsLocal_SetFrameRateLimit_OnBattery::NewLimitFPS' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetFrameRateLimit_WhenBackgrounded
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded final
{
public:
	float                                         NewLimitFPS;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded");
static_assert(sizeof(LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded) == 0x000004, "Wrong size on LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded");
static_assert(offsetof(LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded, NewLimitFPS) == 0x000000, "Member 'LyraSettingsLocal_SetFrameRateLimit_WhenBackgrounded::NewLimitFPS' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetFXAAQuality
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetFXAAQuality final
{
public:
	int32                                         Quality;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetFXAAQuality) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetFXAAQuality");
static_assert(sizeof(LyraSettingsLocal_SetFXAAQuality) == 0x000004, "Wrong size on LyraSettingsLocal_SetFXAAQuality");
static_assert(offsetof(LyraSettingsLocal_SetFXAAQuality, Quality) == 0x000000, "Member 'LyraSettingsLocal_SetFXAAQuality::Quality' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetHDRAudioModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetHDRAudioModeEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetHDRAudioModeEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetHDRAudioModeEnabled");
static_assert(sizeof(LyraSettingsLocal_SetHDRAudioModeEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_SetHDRAudioModeEnabled");
static_assert(offsetof(LyraSettingsLocal_SetHDRAudioModeEnabled, bEnabled) == 0x000000, "Member 'LyraSettingsLocal_SetHDRAudioModeEnabled::bEnabled' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetHeadphoneModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetHeadphoneModeEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetHeadphoneModeEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetHeadphoneModeEnabled");
static_assert(sizeof(LyraSettingsLocal_SetHeadphoneModeEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_SetHeadphoneModeEnabled");
static_assert(offsetof(LyraSettingsLocal_SetHeadphoneModeEnabled, bEnabled) == 0x000000, "Member 'LyraSettingsLocal_SetHeadphoneModeEnabled::bEnabled' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetHidePlayerNames
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetHidePlayerNames final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetHidePlayerNames) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetHidePlayerNames");
static_assert(sizeof(LyraSettingsLocal_SetHidePlayerNames) == 0x000001, "Wrong size on LyraSettingsLocal_SetHidePlayerNames");
static_assert(offsetof(LyraSettingsLocal_SetHidePlayerNames, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetHidePlayerNames::NewValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetHighContrast
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetHighContrast final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetHighContrast) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetHighContrast");
static_assert(sizeof(LyraSettingsLocal_SetHighContrast) == 0x000001, "Wrong size on LyraSettingsLocal_SetHighContrast");
static_assert(offsetof(LyraSettingsLocal_SetHighContrast, IsEnabled) == 0x000000, "Member 'LyraSettingsLocal_SetHighContrast::IsEnabled' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetIsTestingMicrophone
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetIsTestingMicrophone final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetIsTestingMicrophone) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetIsTestingMicrophone");
static_assert(sizeof(LyraSettingsLocal_SetIsTestingMicrophone) == 0x000001, "Wrong size on LyraSettingsLocal_SetIsTestingMicrophone");
static_assert(offsetof(LyraSettingsLocal_SetIsTestingMicrophone, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetIsTestingMicrophone::NewValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetMicrophoneVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetMicrophoneVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetMicrophoneVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetMicrophoneVolume");
static_assert(sizeof(LyraSettingsLocal_SetMicrophoneVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetMicrophoneVolume");
static_assert(offsetof(LyraSettingsLocal_SetMicrophoneVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetMicrophoneVolume::InVolume' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetMotionBlur final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetMotionBlur) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetMotionBlur");
static_assert(sizeof(LyraSettingsLocal_SetMotionBlur) == 0x000001, "Wrong size on LyraSettingsLocal_SetMotionBlur");
static_assert(offsetof(LyraSettingsLocal_SetMotionBlur, IsEnabled) == 0x000000, "Member 'LyraSettingsLocal_SetMotionBlur::IsEnabled' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetMSAASampleCount
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetMSAASampleCount final
{
public:
	int32                                         Samples;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetMSAASampleCount) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetMSAASampleCount");
static_assert(sizeof(LyraSettingsLocal_SetMSAASampleCount) == 0x000004, "Wrong size on LyraSettingsLocal_SetMSAASampleCount");
static_assert(offsetof(LyraSettingsLocal_SetMSAASampleCount, Samples) == 0x000000, "Member 'LyraSettingsLocal_SetMSAASampleCount::Samples' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetMusicVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetMusicVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetMusicVolume");
static_assert(sizeof(LyraSettingsLocal_SetMusicVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetMusicVolume");
static_assert(offsetof(LyraSettingsLocal_SetMusicVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetMusicVolume::InVolume' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetOverallVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetOverallVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetOverallVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetOverallVolume");
static_assert(sizeof(LyraSettingsLocal_SetOverallVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetOverallVolume");
static_assert(offsetof(LyraSettingsLocal_SetOverallVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetOverallVolume::InVolume' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetRegionOverride
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetRegionOverride final
{
public:
	ERegionOverride                               NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetRegionOverride) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetRegionOverride");
static_assert(sizeof(LyraSettingsLocal_SetRegionOverride) == 0x000004, "Wrong size on LyraSettingsLocal_SetRegionOverride");
static_assert(offsetof(LyraSettingsLocal_SetRegionOverride, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetRegionOverride::NewValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetSafeZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetSafeZone final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSafeZone) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetSafeZone");
static_assert(sizeof(LyraSettingsLocal_SetSafeZone) == 0x000004, "Wrong size on LyraSettingsLocal_SetSafeZone");
static_assert(offsetof(LyraSettingsLocal_SetSafeZone, Value) == 0x000000, "Member 'LyraSettingsLocal_SetSafeZone::Value' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetScreenPercentage
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetScreenPercentage final
{
public:
	int32                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetScreenPercentage) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetScreenPercentage");
static_assert(sizeof(LyraSettingsLocal_SetScreenPercentage) == 0x000004, "Wrong size on LyraSettingsLocal_SetScreenPercentage");
static_assert(offsetof(LyraSettingsLocal_SetScreenPercentage, Percentage) == 0x000000, "Member 'LyraSettingsLocal_SetScreenPercentage::Percentage' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetShowTooltips
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetShowTooltips final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetShowTooltips) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetShowTooltips");
static_assert(sizeof(LyraSettingsLocal_SetShowTooltips) == 0x000001, "Wrong size on LyraSettingsLocal_SetShowTooltips");
static_assert(offsetof(LyraSettingsLocal_SetShowTooltips, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetShowTooltips::NewValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetSoundFXVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetSoundFXVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSoundFXVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetSoundFXVolume");
static_assert(sizeof(LyraSettingsLocal_SetSoundFXVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetSoundFXVolume");
static_assert(offsetof(LyraSettingsLocal_SetSoundFXVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetSoundFXVolume::InVolume' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetSprintToggle
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetSprintToggle final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSprintToggle) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetSprintToggle");
static_assert(sizeof(LyraSettingsLocal_SetSprintToggle) == 0x000001, "Wrong size on LyraSettingsLocal_SetSprintToggle");
static_assert(offsetof(LyraSettingsLocal_SetSprintToggle, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetSprintToggle::NewValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetSprintToggleController
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetSprintToggleController final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSprintToggleController) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetSprintToggleController");
static_assert(sizeof(LyraSettingsLocal_SetSprintToggleController) == 0x000001, "Wrong size on LyraSettingsLocal_SetSprintToggleController");
static_assert(offsetof(LyraSettingsLocal_SetSprintToggleController, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetSprintToggleController::NewValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetSuperResolutionMode
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetSuperResolutionMode final
{
public:
	int32                                         SuperSamplingMode;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSuperResolutionMode) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetSuperResolutionMode");
static_assert(sizeof(LyraSettingsLocal_SetSuperResolutionMode) == 0x000004, "Wrong size on LyraSettingsLocal_SetSuperResolutionMode");
static_assert(offsetof(LyraSettingsLocal_SetSuperResolutionMode, SuperSamplingMode) == 0x000000, "Member 'LyraSettingsLocal_SetSuperResolutionMode::SuperSamplingMode' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetSuperResolutionQualityMode
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetSuperResolutionQualityMode final
{
public:
	int32                                         QualityMode;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetSuperResolutionQualityMode) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetSuperResolutionQualityMode");
static_assert(sizeof(LyraSettingsLocal_SetSuperResolutionQualityMode) == 0x000004, "Wrong size on LyraSettingsLocal_SetSuperResolutionQualityMode");
static_assert(offsetof(LyraSettingsLocal_SetSuperResolutionQualityMode, QualityMode) == 0x000000, "Member 'LyraSettingsLocal_SetSuperResolutionQualityMode::QualityMode' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetVoiceChatToggle
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_SetVoiceChatToggle final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetVoiceChatToggle) == 0x000001, "Wrong alignment on LyraSettingsLocal_SetVoiceChatToggle");
static_assert(sizeof(LyraSettingsLocal_SetVoiceChatToggle) == 0x000001, "Wrong size on LyraSettingsLocal_SetVoiceChatToggle");
static_assert(offsetof(LyraSettingsLocal_SetVoiceChatToggle, NewValue) == 0x000000, "Member 'LyraSettingsLocal_SetVoiceChatToggle::NewValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.SetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_SetVoiceChatVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_SetVoiceChatVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_SetVoiceChatVolume");
static_assert(sizeof(LyraSettingsLocal_SetVoiceChatVolume) == 0x000004, "Wrong size on LyraSettingsLocal_SetVoiceChatVolume");
static_assert(offsetof(LyraSettingsLocal_SetVoiceChatVolume, InVolume) == 0x000000, "Member 'LyraSettingsLocal_SetVoiceChatVolume::InVolume' has a wrong offset!");

// Function JP.LyraSettingsLocal.CanModifyHeadphoneModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_CanModifyHeadphoneModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_CanModifyHeadphoneModeEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_CanModifyHeadphoneModeEnabled");
static_assert(sizeof(LyraSettingsLocal_CanModifyHeadphoneModeEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_CanModifyHeadphoneModeEnabled");
static_assert(offsetof(LyraSettingsLocal_CanModifyHeadphoneModeEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_CanModifyHeadphoneModeEnabled::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.CanRunAutoBenchmark
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_CanRunAutoBenchmark final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_CanRunAutoBenchmark) == 0x000001, "Wrong alignment on LyraSettingsLocal_CanRunAutoBenchmark");
static_assert(sizeof(LyraSettingsLocal_CanRunAutoBenchmark) == 0x000001, "Wrong size on LyraSettingsLocal_CanRunAutoBenchmark");
static_assert(offsetof(LyraSettingsLocal_CanRunAutoBenchmark, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_CanRunAutoBenchmark::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetAudioInputDeviceId
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetAudioInputDeviceId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetAudioInputDeviceId) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetAudioInputDeviceId");
static_assert(sizeof(LyraSettingsLocal_GetAudioInputDeviceId) == 0x000010, "Wrong size on LyraSettingsLocal_GetAudioInputDeviceId");
static_assert(offsetof(LyraSettingsLocal_GetAudioInputDeviceId, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetAudioInputDeviceId::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetAudioOutputDeviceId
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetAudioOutputDeviceId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetAudioOutputDeviceId) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetAudioOutputDeviceId");
static_assert(sizeof(LyraSettingsLocal_GetAudioOutputDeviceId) == 0x000010, "Wrong size on LyraSettingsLocal_GetAudioOutputDeviceId");
static_assert(offsetof(LyraSettingsLocal_GetAudioOutputDeviceId, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetAudioOutputDeviceId::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetCommunicationEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetCommunicationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetCommunicationEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetCommunicationEnabled");
static_assert(sizeof(LyraSettingsLocal_GetCommunicationEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_GetCommunicationEnabled");
static_assert(offsetof(LyraSettingsLocal_GetCommunicationEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetCommunicationEnabled::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetControllerPlatform
// 0x0008 (0x0008 - 0x0000)
struct LyraSettingsLocal_GetControllerPlatform final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetControllerPlatform) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetControllerPlatform");
static_assert(sizeof(LyraSettingsLocal_GetControllerPlatform) == 0x000008, "Wrong size on LyraSettingsLocal_GetControllerPlatform");
static_assert(offsetof(LyraSettingsLocal_GetControllerPlatform, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetControllerPlatform::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetCrouchToggle
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetCrouchToggle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetCrouchToggle) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetCrouchToggle");
static_assert(sizeof(LyraSettingsLocal_GetCrouchToggle) == 0x000001, "Wrong size on LyraSettingsLocal_GetCrouchToggle");
static_assert(offsetof(LyraSettingsLocal_GetCrouchToggle, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetCrouchToggle::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetDesiredDeviceProfileQualitySuffix
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix) == 0x000008, "Wrong alignment on LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix");
static_assert(sizeof(LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix) == 0x000010, "Wrong size on LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix");
static_assert(offsetof(LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetDesiredDeviceProfileQualitySuffix::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetDialogueVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetDialogueVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetDialogueVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetDialogueVolume");
static_assert(sizeof(LyraSettingsLocal_GetDialogueVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetDialogueVolume");
static_assert(offsetof(LyraSettingsLocal_GetDialogueVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetDialogueVolume::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetDisplayGamma
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetDisplayGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetDisplayGamma) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetDisplayGamma");
static_assert(sizeof(LyraSettingsLocal_GetDisplayGamma) == 0x000004, "Wrong size on LyraSettingsLocal_GetDisplayGamma");
static_assert(offsetof(LyraSettingsLocal_GetDisplayGamma, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetDisplayGamma::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetFrameRateLimit_Always
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFrameRateLimit_Always final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFrameRateLimit_Always) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFrameRateLimit_Always");
static_assert(sizeof(LyraSettingsLocal_GetFrameRateLimit_Always) == 0x000004, "Wrong size on LyraSettingsLocal_GetFrameRateLimit_Always");
static_assert(offsetof(LyraSettingsLocal_GetFrameRateLimit_Always, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFrameRateLimit_Always::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetFrameRateLimit_InMenu
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFrameRateLimit_InMenu final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFrameRateLimit_InMenu) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFrameRateLimit_InMenu");
static_assert(sizeof(LyraSettingsLocal_GetFrameRateLimit_InMenu) == 0x000004, "Wrong size on LyraSettingsLocal_GetFrameRateLimit_InMenu");
static_assert(offsetof(LyraSettingsLocal_GetFrameRateLimit_InMenu, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFrameRateLimit_InMenu::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetFrameRateLimit_OnBattery
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFrameRateLimit_OnBattery final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFrameRateLimit_OnBattery) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFrameRateLimit_OnBattery");
static_assert(sizeof(LyraSettingsLocal_GetFrameRateLimit_OnBattery) == 0x000004, "Wrong size on LyraSettingsLocal_GetFrameRateLimit_OnBattery");
static_assert(offsetof(LyraSettingsLocal_GetFrameRateLimit_OnBattery, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFrameRateLimit_OnBattery::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetFrameRateLimit_WhenBackgrounded
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded");
static_assert(sizeof(LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded) == 0x000004, "Wrong size on LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded");
static_assert(offsetof(LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFrameRateLimit_WhenBackgrounded::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetFXAAQuality
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetFXAAQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetFXAAQuality) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetFXAAQuality");
static_assert(sizeof(LyraSettingsLocal_GetFXAAQuality) == 0x000004, "Wrong size on LyraSettingsLocal_GetFXAAQuality");
static_assert(offsetof(LyraSettingsLocal_GetFXAAQuality, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetFXAAQuality::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetHidePlayerNames
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetHidePlayerNames final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetHidePlayerNames) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetHidePlayerNames");
static_assert(sizeof(LyraSettingsLocal_GetHidePlayerNames) == 0x000001, "Wrong size on LyraSettingsLocal_GetHidePlayerNames");
static_assert(offsetof(LyraSettingsLocal_GetHidePlayerNames, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetHidePlayerNames::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetIsTestingMicrophone
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetIsTestingMicrophone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetIsTestingMicrophone) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetIsTestingMicrophone");
static_assert(sizeof(LyraSettingsLocal_GetIsTestingMicrophone) == 0x000001, "Wrong size on LyraSettingsLocal_GetIsTestingMicrophone");
static_assert(offsetof(LyraSettingsLocal_GetIsTestingMicrophone, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetIsTestingMicrophone::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetMicrophoneVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetMicrophoneVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetMicrophoneVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetMicrophoneVolume");
static_assert(sizeof(LyraSettingsLocal_GetMicrophoneVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetMicrophoneVolume");
static_assert(offsetof(LyraSettingsLocal_GetMicrophoneVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetMicrophoneVolume::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetMSAASampleCount
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetMSAASampleCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetMSAASampleCount) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetMSAASampleCount");
static_assert(sizeof(LyraSettingsLocal_GetMSAASampleCount) == 0x000004, "Wrong size on LyraSettingsLocal_GetMSAASampleCount");
static_assert(offsetof(LyraSettingsLocal_GetMSAASampleCount, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetMSAASampleCount::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetMusicVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetMusicVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetMusicVolume");
static_assert(sizeof(LyraSettingsLocal_GetMusicVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetMusicVolume");
static_assert(offsetof(LyraSettingsLocal_GetMusicVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetMusicVolume::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetOverallVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetOverallVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetOverallVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetOverallVolume");
static_assert(sizeof(LyraSettingsLocal_GetOverallVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetOverallVolume");
static_assert(offsetof(LyraSettingsLocal_GetOverallVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetOverallVolume::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetRegionOverride
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetRegionOverride final
{
public:
	ERegionOverride                               ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetRegionOverride) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetRegionOverride");
static_assert(sizeof(LyraSettingsLocal_GetRegionOverride) == 0x000004, "Wrong size on LyraSettingsLocal_GetRegionOverride");
static_assert(offsetof(LyraSettingsLocal_GetRegionOverride, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetRegionOverride::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetSafeZone
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetSafeZone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSafeZone) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetSafeZone");
static_assert(sizeof(LyraSettingsLocal_GetSafeZone) == 0x000004, "Wrong size on LyraSettingsLocal_GetSafeZone");
static_assert(offsetof(LyraSettingsLocal_GetSafeZone, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSafeZone::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetScreenPercentage
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetScreenPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetScreenPercentage) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetScreenPercentage");
static_assert(sizeof(LyraSettingsLocal_GetScreenPercentage) == 0x000004, "Wrong size on LyraSettingsLocal_GetScreenPercentage");
static_assert(offsetof(LyraSettingsLocal_GetScreenPercentage, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetScreenPercentage::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetShowTooltips
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetShowTooltips final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetShowTooltips) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetShowTooltips");
static_assert(sizeof(LyraSettingsLocal_GetShowTooltips) == 0x000001, "Wrong size on LyraSettingsLocal_GetShowTooltips");
static_assert(offsetof(LyraSettingsLocal_GetShowTooltips, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetShowTooltips::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetSoundFXVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetSoundFXVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSoundFXVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetSoundFXVolume");
static_assert(sizeof(LyraSettingsLocal_GetSoundFXVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetSoundFXVolume");
static_assert(offsetof(LyraSettingsLocal_GetSoundFXVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSoundFXVolume::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetSprintToggle
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetSprintToggle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSprintToggle) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetSprintToggle");
static_assert(sizeof(LyraSettingsLocal_GetSprintToggle) == 0x000001, "Wrong size on LyraSettingsLocal_GetSprintToggle");
static_assert(offsetof(LyraSettingsLocal_GetSprintToggle, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSprintToggle::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetSprintToggleController
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetSprintToggleController final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSprintToggleController) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetSprintToggleController");
static_assert(sizeof(LyraSettingsLocal_GetSprintToggleController) == 0x000001, "Wrong size on LyraSettingsLocal_GetSprintToggleController");
static_assert(offsetof(LyraSettingsLocal_GetSprintToggleController, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSprintToggleController::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetSuperResolutionMode
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetSuperResolutionMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSuperResolutionMode) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetSuperResolutionMode");
static_assert(sizeof(LyraSettingsLocal_GetSuperResolutionMode) == 0x000004, "Wrong size on LyraSettingsLocal_GetSuperResolutionMode");
static_assert(offsetof(LyraSettingsLocal_GetSuperResolutionMode, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSuperResolutionMode::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetSuperResolutionQualityMode
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetSuperResolutionQualityMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetSuperResolutionQualityMode) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetSuperResolutionQualityMode");
static_assert(sizeof(LyraSettingsLocal_GetSuperResolutionQualityMode) == 0x000004, "Wrong size on LyraSettingsLocal_GetSuperResolutionQualityMode");
static_assert(offsetof(LyraSettingsLocal_GetSuperResolutionQualityMode, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetSuperResolutionQualityMode::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetVoiceChatToggle
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_GetVoiceChatToggle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetVoiceChatToggle) == 0x000001, "Wrong alignment on LyraSettingsLocal_GetVoiceChatToggle");
static_assert(sizeof(LyraSettingsLocal_GetVoiceChatToggle) == 0x000001, "Wrong size on LyraSettingsLocal_GetVoiceChatToggle");
static_assert(offsetof(LyraSettingsLocal_GetVoiceChatToggle, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetVoiceChatToggle::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.GetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct LyraSettingsLocal_GetVoiceChatVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_GetVoiceChatVolume) == 0x000004, "Wrong alignment on LyraSettingsLocal_GetVoiceChatVolume");
static_assert(sizeof(LyraSettingsLocal_GetVoiceChatVolume) == 0x000004, "Wrong size on LyraSettingsLocal_GetVoiceChatVolume");
static_assert(offsetof(LyraSettingsLocal_GetVoiceChatVolume, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_GetVoiceChatVolume::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.IsActivateVoiceChatUponDeathEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsActivateVoiceChatUponDeathEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsActivateVoiceChatUponDeathEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsActivateVoiceChatUponDeathEnabled");
static_assert(sizeof(LyraSettingsLocal_IsActivateVoiceChatUponDeathEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsActivateVoiceChatUponDeathEnabled");
static_assert(offsetof(LyraSettingsLocal_IsActivateVoiceChatUponDeathEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsActivateVoiceChatUponDeathEnabled::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.IsAimAssistEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsAimAssistEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsAimAssistEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsAimAssistEnabled");
static_assert(sizeof(LyraSettingsLocal_IsAimAssistEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsAimAssistEnabled");
static_assert(offsetof(LyraSettingsLocal_IsAimAssistEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsAimAssistEnabled::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.IsHDRAudioModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsHDRAudioModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsHDRAudioModeEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsHDRAudioModeEnabled");
static_assert(sizeof(LyraSettingsLocal_IsHDRAudioModeEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsHDRAudioModeEnabled");
static_assert(offsetof(LyraSettingsLocal_IsHDRAudioModeEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsHDRAudioModeEnabled::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.IsHeadphoneModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsHeadphoneModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsHeadphoneModeEnabled) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsHeadphoneModeEnabled");
static_assert(sizeof(LyraSettingsLocal_IsHeadphoneModeEnabled) == 0x000001, "Wrong size on LyraSettingsLocal_IsHeadphoneModeEnabled");
static_assert(offsetof(LyraSettingsLocal_IsHeadphoneModeEnabled, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsHeadphoneModeEnabled::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.IsSafeZoneSet
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_IsSafeZoneSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_IsSafeZoneSet) == 0x000001, "Wrong alignment on LyraSettingsLocal_IsSafeZoneSet");
static_assert(sizeof(LyraSettingsLocal_IsSafeZoneSet) == 0x000001, "Wrong size on LyraSettingsLocal_IsSafeZoneSet");
static_assert(offsetof(LyraSettingsLocal_IsSafeZoneSet, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_IsSafeZoneSet::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingsLocal.ShouldRunAutoBenchmarkAtStartup
// 0x0001 (0x0001 - 0x0000)
struct LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup) == 0x000001, "Wrong alignment on LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup");
static_assert(sizeof(LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup) == 0x000001, "Wrong size on LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup");
static_assert(offsetof(LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup, ReturnValue) == 0x000000, "Member 'LyraSettingsLocal_ShouldRunAutoBenchmarkAtStartup::ReturnValue' has a wrong offset!");

// Function JP.LyraSettingValueDiscreteDynamic_AudioInputDevice.DeviceAddedOrRemoved
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingValueDiscreteDynamic_AudioInputDevice_DeviceAddedOrRemoved final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscreteDynamic_AudioInputDevice_DeviceAddedOrRemoved) == 0x000008, "Wrong alignment on LyraSettingValueDiscreteDynamic_AudioInputDevice_DeviceAddedOrRemoved");
static_assert(sizeof(LyraSettingValueDiscreteDynamic_AudioInputDevice_DeviceAddedOrRemoved) == 0x000010, "Wrong size on LyraSettingValueDiscreteDynamic_AudioInputDevice_DeviceAddedOrRemoved");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioInputDevice_DeviceAddedOrRemoved, DeviceID) == 0x000000, "Member 'LyraSettingValueDiscreteDynamic_AudioInputDevice_DeviceAddedOrRemoved::DeviceID' has a wrong offset!");

// Function JP.LyraSettingValueDiscreteDynamic_AudioInputDevice.OnAudioInputDevicesObtained
// 0x0010 (0x0010 - 0x0000)
struct LyraSettingValueDiscreteDynamic_AudioInputDevice_OnAudioInputDevicesObtained final
{
public:
	TArray<struct FAudioInputDeviceInfo>          AvailableDevices;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSettingValueDiscreteDynamic_AudioInputDevice_OnAudioInputDevicesObtained) == 0x000008, "Wrong alignment on LyraSettingValueDiscreteDynamic_AudioInputDevice_OnAudioInputDevicesObtained");
static_assert(sizeof(LyraSettingValueDiscreteDynamic_AudioInputDevice_OnAudioInputDevicesObtained) == 0x000010, "Wrong size on LyraSettingValueDiscreteDynamic_AudioInputDevice_OnAudioInputDevicesObtained");
static_assert(offsetof(LyraSettingValueDiscreteDynamic_AudioInputDevice_OnAudioInputDevicesObtained, AvailableDevices) == 0x000000, "Member 'LyraSettingValueDiscreteDynamic_AudioInputDevice_OnAudioInputDevicesObtained::AvailableDevices' has a wrong offset!");

// Function JP.SeasonPassGameInstanceSubsystem.GetProgressTowardNextNeighborLevel
// 0x000C (0x000C - 0x0000)
struct SeasonPassGameInstanceSubsystem_GetProgressTowardNextNeighborLevel final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassGameInstanceSubsystem_GetProgressTowardNextNeighborLevel) == 0x000004, "Wrong alignment on SeasonPassGameInstanceSubsystem_GetProgressTowardNextNeighborLevel");
static_assert(sizeof(SeasonPassGameInstanceSubsystem_GetProgressTowardNextNeighborLevel) == 0x00000C, "Wrong size on SeasonPassGameInstanceSubsystem_GetProgressTowardNextNeighborLevel");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetProgressTowardNextNeighborLevel, NeighborID) == 0x000000, "Member 'SeasonPassGameInstanceSubsystem_GetProgressTowardNextNeighborLevel::NeighborID' has a wrong offset!");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetProgressTowardNextNeighborLevel, ReturnValue) == 0x000008, "Member 'SeasonPassGameInstanceSubsystem_GetProgressTowardNextNeighborLevel::ReturnValue' has a wrong offset!");

// Function JP.SeasonPassGameInstanceSubsystem.GetNeighborLevel
// 0x000C (0x000C - 0x0000)
struct SeasonPassGameInstanceSubsystem_GetNeighborLevel final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassGameInstanceSubsystem_GetNeighborLevel) == 0x000004, "Wrong alignment on SeasonPassGameInstanceSubsystem_GetNeighborLevel");
static_assert(sizeof(SeasonPassGameInstanceSubsystem_GetNeighborLevel) == 0x00000C, "Wrong size on SeasonPassGameInstanceSubsystem_GetNeighborLevel");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetNeighborLevel, NeighborID) == 0x000000, "Member 'SeasonPassGameInstanceSubsystem_GetNeighborLevel::NeighborID' has a wrong offset!");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetNeighborLevel, ReturnValue) == 0x000008, "Member 'SeasonPassGameInstanceSubsystem_GetNeighborLevel::ReturnValue' has a wrong offset!");

// Function JP.SeasonPassGameInstanceSubsystem.GetNeighborLevelForXP
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeighborXP;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP) == 0x000004, "Wrong alignment on SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP");
static_assert(sizeof(SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP) == 0x000010, "Wrong size on SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP, NeighborID) == 0x000000, "Member 'SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP::NeighborID' has a wrong offset!");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP, NeighborXP) == 0x000008, "Member 'SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP::NeighborXP' has a wrong offset!");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP, ReturnValue) == 0x00000C, "Member 'SeasonPassGameInstanceSubsystem_GetNeighborLevelForXP::ReturnValue' has a wrong offset!");

// Function JP.SeasonPassGameInstanceSubsystem.GetNeighborPerkRewardsByLevel
// 0x0058 (0x0058 - 0x0000)
struct SeasonPassGameInstanceSubsystem_GetNeighborPerkRewardsByLevel final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FGameplayTag>              ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassGameInstanceSubsystem_GetNeighborPerkRewardsByLevel) == 0x000008, "Wrong alignment on SeasonPassGameInstanceSubsystem_GetNeighborPerkRewardsByLevel");
static_assert(sizeof(SeasonPassGameInstanceSubsystem_GetNeighborPerkRewardsByLevel) == 0x000058, "Wrong size on SeasonPassGameInstanceSubsystem_GetNeighborPerkRewardsByLevel");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetNeighborPerkRewardsByLevel, NeighborID) == 0x000000, "Member 'SeasonPassGameInstanceSubsystem_GetNeighborPerkRewardsByLevel::NeighborID' has a wrong offset!");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetNeighborPerkRewardsByLevel, ReturnValue) == 0x000008, "Member 'SeasonPassGameInstanceSubsystem_GetNeighborPerkRewardsByLevel::ReturnValue' has a wrong offset!");

// Function JP.SeasonPassGameInstanceSubsystem.GetTotalXPRequirementForNeighborLevel
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel) == 0x000004, "Wrong alignment on SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel");
static_assert(sizeof(SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel) == 0x000010, "Wrong size on SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel, NeighborID) == 0x000000, "Member 'SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel::NeighborID' has a wrong offset!");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel, Level) == 0x000008, "Member 'SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel::Level' has a wrong offset!");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel, ReturnValue) == 0x00000C, "Member 'SeasonPassGameInstanceSubsystem_GetTotalXPRequirementForNeighborLevel::ReturnValue' has a wrong offset!");

// Function JP.SeasonPassGameInstanceSubsystem.GetXPRequirementForNextNeighborLevel
// 0x0010 (0x0010 - 0x0000)
struct SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel) == 0x000004, "Wrong alignment on SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel");
static_assert(sizeof(SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel) == 0x000010, "Wrong size on SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel, NeighborID) == 0x000000, "Member 'SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel::NeighborID' has a wrong offset!");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel, CurrentLevel) == 0x000008, "Member 'SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel::CurrentLevel' has a wrong offset!");
static_assert(offsetof(SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel, ReturnValue) == 0x00000C, "Member 'SeasonPassGameInstanceSubsystem_GetXPRequirementForNextNeighborLevel::ReturnValue' has a wrong offset!");

// Function JP.SeasonPassRewardContent_NeighborSkinInterface.ApplyNeighborSkinViewModel
// 0x0028 (0x0028 - 0x0000)
struct SeasonPassRewardContent_NeighborSkinInterface_ApplyNeighborSkinViewModel final
{
public:
	struct FSeasonPassRewardContent_NeighborSkinViewModel ViewModel;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRewardContent_NeighborSkinInterface_ApplyNeighborSkinViewModel) == 0x000008, "Wrong alignment on SeasonPassRewardContent_NeighborSkinInterface_ApplyNeighborSkinViewModel");
static_assert(sizeof(SeasonPassRewardContent_NeighborSkinInterface_ApplyNeighborSkinViewModel) == 0x000028, "Wrong size on SeasonPassRewardContent_NeighborSkinInterface_ApplyNeighborSkinViewModel");
static_assert(offsetof(SeasonPassRewardContent_NeighborSkinInterface_ApplyNeighborSkinViewModel, ViewModel) == 0x000000, "Member 'SeasonPassRewardContent_NeighborSkinInterface_ApplyNeighborSkinViewModel::ViewModel' has a wrong offset!");

// Function JP.LyraUIBlueprintFunctionLibrary.FindAndRemoveWidgetFromAllLayers
// 0x0018 (0x0018 - 0x0000)
struct LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonActivatableWidget*               ActivatableWidget;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimaryGameLayout*                     PrimaryGameLayout;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers) == 0x000008, "Wrong alignment on LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers");
static_assert(sizeof(LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers) == 0x000018, "Wrong size on LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers, WorldContextObject) == 0x000000, "Member 'LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers, ActivatableWidget) == 0x000008, "Member 'LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers::ActivatableWidget' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers, PrimaryGameLayout) == 0x000010, "Member 'LyraUIBlueprintFunctionLibrary_FindAndRemoveWidgetFromAllLayers::PrimaryGameLayout' has a wrong offset!");

// Function JP.LyraUIBlueprintFunctionLibrary.GetLayerWidget
// 0x0020 (0x0020 - 0x0000)
struct LyraUIBlueprintFunctionLibrary_GetLayerWidget final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LayerName;                                         // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimaryGameLayout*                     PrimaryGameLayout;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonActivatableWidgetContainerBase*  ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraUIBlueprintFunctionLibrary_GetLayerWidget) == 0x000008, "Wrong alignment on LyraUIBlueprintFunctionLibrary_GetLayerWidget");
static_assert(sizeof(LyraUIBlueprintFunctionLibrary_GetLayerWidget) == 0x000020, "Wrong size on LyraUIBlueprintFunctionLibrary_GetLayerWidget");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_GetLayerWidget, WorldContextObject) == 0x000000, "Member 'LyraUIBlueprintFunctionLibrary_GetLayerWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_GetLayerWidget, LayerName) == 0x000008, "Member 'LyraUIBlueprintFunctionLibrary_GetLayerWidget::LayerName' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_GetLayerWidget, PrimaryGameLayout) == 0x000010, "Member 'LyraUIBlueprintFunctionLibrary_GetLayerWidget::PrimaryGameLayout' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_GetLayerWidget, ReturnValue) == 0x000018, "Member 'LyraUIBlueprintFunctionLibrary_GetLayerWidget::ReturnValue' has a wrong offset!");

// Function JP.LyraUIBlueprintFunctionLibrary.GetPrimaryGameLayoutForPrimaryPlayer
// 0x0010 (0x0010 - 0x0000)
struct LyraUIBlueprintFunctionLibrary_GetPrimaryGameLayoutForPrimaryPlayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimaryGameLayout*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraUIBlueprintFunctionLibrary_GetPrimaryGameLayoutForPrimaryPlayer) == 0x000008, "Wrong alignment on LyraUIBlueprintFunctionLibrary_GetPrimaryGameLayoutForPrimaryPlayer");
static_assert(sizeof(LyraUIBlueprintFunctionLibrary_GetPrimaryGameLayoutForPrimaryPlayer) == 0x000010, "Wrong size on LyraUIBlueprintFunctionLibrary_GetPrimaryGameLayoutForPrimaryPlayer");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_GetPrimaryGameLayoutForPrimaryPlayer, WorldContextObject) == 0x000000, "Member 'LyraUIBlueprintFunctionLibrary_GetPrimaryGameLayoutForPrimaryPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_GetPrimaryGameLayoutForPrimaryPlayer, ReturnValue) == 0x000008, "Member 'LyraUIBlueprintFunctionLibrary_GetPrimaryGameLayoutForPrimaryPlayer::ReturnValue' has a wrong offset!");

// Function JP.LyraUIBlueprintFunctionLibrary.PushNonPooledWidgetToLayerStack
// 0x0028 (0x0028 - 0x0000)
struct LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LayerName;                                         // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonActivatableWidget>   ActivatableWidgetClass;                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimaryGameLayout*                     PrimaryGameLayout;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonActivatableWidget*               ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack) == 0x000008, "Wrong alignment on LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack");
static_assert(sizeof(LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack) == 0x000028, "Wrong size on LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack, WorldContextObject) == 0x000000, "Member 'LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack, LayerName) == 0x000008, "Member 'LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack::LayerName' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack, ActivatableWidgetClass) == 0x000010, "Member 'LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack::ActivatableWidgetClass' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack, PrimaryGameLayout) == 0x000018, "Member 'LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack::PrimaryGameLayout' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack, ReturnValue) == 0x000020, "Member 'LyraUIBlueprintFunctionLibrary_PushNonPooledWidgetToLayerStack::ReturnValue' has a wrong offset!");

// Function JP.LyraUIBlueprintFunctionLibrary.PushWidgetToLayerStack
// 0x0028 (0x0028 - 0x0000)
struct LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LayerName;                                         // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCommonActivatableWidget>   ActivatableWidgetClass;                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimaryGameLayout*                     PrimaryGameLayout;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonActivatableWidget*               ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack) == 0x000008, "Wrong alignment on LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack");
static_assert(sizeof(LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack) == 0x000028, "Wrong size on LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack, WorldContextObject) == 0x000000, "Member 'LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack, LayerName) == 0x000008, "Member 'LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack::LayerName' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack, ActivatableWidgetClass) == 0x000010, "Member 'LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack::ActivatableWidgetClass' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack, PrimaryGameLayout) == 0x000018, "Member 'LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack::PrimaryGameLayout' has a wrong offset!");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack, ReturnValue) == 0x000020, "Member 'LyraUIBlueprintFunctionLibrary_PushWidgetToLayerStack::ReturnValue' has a wrong offset!");

// Function JP.LyraUIBlueprintFunctionLibrary.RemoveAllWidgetsOutsideRootLayout
// 0x0008 (0x0008 - 0x0000)
struct LyraUIBlueprintFunctionLibrary_RemoveAllWidgetsOutsideRootLayout final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraUIBlueprintFunctionLibrary_RemoveAllWidgetsOutsideRootLayout) == 0x000008, "Wrong alignment on LyraUIBlueprintFunctionLibrary_RemoveAllWidgetsOutsideRootLayout");
static_assert(sizeof(LyraUIBlueprintFunctionLibrary_RemoveAllWidgetsOutsideRootLayout) == 0x000008, "Wrong size on LyraUIBlueprintFunctionLibrary_RemoveAllWidgetsOutsideRootLayout");
static_assert(offsetof(LyraUIBlueprintFunctionLibrary_RemoveAllWidgetsOutsideRootLayout, WorldContextObject) == 0x000000, "Member 'LyraUIBlueprintFunctionLibrary_RemoveAllWidgetsOutsideRootLayout::WorldContextObject' has a wrong offset!");

// Function JP.SeasonPassPreviewContainerWidget.CreateTierWidget
// 0x0028 (0x0028 - 0x0000)
struct SeasonPassPreviewContainerWidget_CreateTierWidget final
{
public:
	struct FSeasonPassTierViewModel               ViewModel;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassPreviewContainerWidget_CreateTierWidget) == 0x000008, "Wrong alignment on SeasonPassPreviewContainerWidget_CreateTierWidget");
static_assert(sizeof(SeasonPassPreviewContainerWidget_CreateTierWidget) == 0x000028, "Wrong size on SeasonPassPreviewContainerWidget_CreateTierWidget");
static_assert(offsetof(SeasonPassPreviewContainerWidget_CreateTierWidget, ViewModel) == 0x000000, "Member 'SeasonPassPreviewContainerWidget_CreateTierWidget::ViewModel' has a wrong offset!");

// Function JP.PerkDefinition.TryGetPerkDefinition
// 0x0038 (0x0038 - 0x0000)
struct PerkDefinition_TryGetPerkDefinition final
{
public:
	struct FGameplayTag                           PerkID;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPerkDefinition>         OutSoftPerkDefinition;                             // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkDefinition_TryGetPerkDefinition) == 0x000008, "Wrong alignment on PerkDefinition_TryGetPerkDefinition");
static_assert(sizeof(PerkDefinition_TryGetPerkDefinition) == 0x000038, "Wrong size on PerkDefinition_TryGetPerkDefinition");
static_assert(offsetof(PerkDefinition_TryGetPerkDefinition, PerkID) == 0x000000, "Member 'PerkDefinition_TryGetPerkDefinition::PerkID' has a wrong offset!");
static_assert(offsetof(PerkDefinition_TryGetPerkDefinition, OutSoftPerkDefinition) == 0x000008, "Member 'PerkDefinition_TryGetPerkDefinition::OutSoftPerkDefinition' has a wrong offset!");
static_assert(offsetof(PerkDefinition_TryGetPerkDefinition, ReturnValue) == 0x000030, "Member 'PerkDefinition_TryGetPerkDefinition::ReturnValue' has a wrong offset!");

// Function JP.PerkDefinition.GetBuffDescription
// 0x0010 (0x0010 - 0x0000)
struct PerkDefinition_GetBuffDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkDefinition_GetBuffDescription) == 0x000008, "Wrong alignment on PerkDefinition_GetBuffDescription");
static_assert(sizeof(PerkDefinition_GetBuffDescription) == 0x000010, "Wrong size on PerkDefinition_GetBuffDescription");
static_assert(offsetof(PerkDefinition_GetBuffDescription, ReturnValue) == 0x000000, "Member 'PerkDefinition_GetBuffDescription::ReturnValue' has a wrong offset!");

// Function JP.PerkDefinition.GetCategory
// 0x0001 (0x0001 - 0x0000)
struct PerkDefinition_GetCategory final
{
public:
	EPerkCategories                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkDefinition_GetCategory) == 0x000001, "Wrong alignment on PerkDefinition_GetCategory");
static_assert(sizeof(PerkDefinition_GetCategory) == 0x000001, "Wrong size on PerkDefinition_GetCategory");
static_assert(offsetof(PerkDefinition_GetCategory, ReturnValue) == 0x000000, "Member 'PerkDefinition_GetCategory::ReturnValue' has a wrong offset!");

// Function JP.PerkDefinition.GetColor
// 0x0004 (0x0004 - 0x0000)
struct PerkDefinition_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkDefinition_GetColor) == 0x000004, "Wrong alignment on PerkDefinition_GetColor");
static_assert(sizeof(PerkDefinition_GetColor) == 0x000004, "Wrong size on PerkDefinition_GetColor");
static_assert(offsetof(PerkDefinition_GetColor, ReturnValue) == 0x000000, "Member 'PerkDefinition_GetColor::ReturnValue' has a wrong offset!");

// Function JP.PerkDefinition.GetDebuffDescription
// 0x0010 (0x0010 - 0x0000)
struct PerkDefinition_GetDebuffDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkDefinition_GetDebuffDescription) == 0x000008, "Wrong alignment on PerkDefinition_GetDebuffDescription");
static_assert(sizeof(PerkDefinition_GetDebuffDescription) == 0x000010, "Wrong size on PerkDefinition_GetDebuffDescription");
static_assert(offsetof(PerkDefinition_GetDebuffDescription, ReturnValue) == 0x000000, "Member 'PerkDefinition_GetDebuffDescription::ReturnValue' has a wrong offset!");

// Function JP.PerkDefinition.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct PerkDefinition_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkDefinition_GetDescription) == 0x000008, "Wrong alignment on PerkDefinition_GetDescription");
static_assert(sizeof(PerkDefinition_GetDescription) == 0x000010, "Wrong size on PerkDefinition_GetDescription");
static_assert(offsetof(PerkDefinition_GetDescription, ReturnValue) == 0x000000, "Member 'PerkDefinition_GetDescription::ReturnValue' has a wrong offset!");

// Function JP.PerkDefinition.GetIcon
// 0x0028 (0x0028 - 0x0000)
struct PerkDefinition_GetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkDefinition_GetIcon) == 0x000008, "Wrong alignment on PerkDefinition_GetIcon");
static_assert(sizeof(PerkDefinition_GetIcon) == 0x000028, "Wrong size on PerkDefinition_GetIcon");
static_assert(offsetof(PerkDefinition_GetIcon, ReturnValue) == 0x000000, "Member 'PerkDefinition_GetIcon::ReturnValue' has a wrong offset!");

// Function JP.PerkDefinition.GetPerkName
// 0x0010 (0x0010 - 0x0000)
struct PerkDefinition_GetPerkName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkDefinition_GetPerkName) == 0x000008, "Wrong alignment on PerkDefinition_GetPerkName");
static_assert(sizeof(PerkDefinition_GetPerkName) == 0x000010, "Wrong size on PerkDefinition_GetPerkName");
static_assert(offsetof(PerkDefinition_GetPerkName, ReturnValue) == 0x000000, "Member 'PerkDefinition_GetPerkName::ReturnValue' has a wrong offset!");

// Function JP.PingControllerComponent.GetGloballyPingableObjects
// 0x0010 (0x0010 - 0x0000)
struct PingControllerComponent_GetGloballyPingableObjects final
{
public:
	TArray<class UPingableComponent*>             ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingControllerComponent_GetGloballyPingableObjects) == 0x000008, "Wrong alignment on PingControllerComponent_GetGloballyPingableObjects");
static_assert(sizeof(PingControllerComponent_GetGloballyPingableObjects) == 0x000010, "Wrong size on PingControllerComponent_GetGloballyPingableObjects");
static_assert(offsetof(PingControllerComponent_GetGloballyPingableObjects, ReturnValue) == 0x000000, "Member 'PingControllerComponent_GetGloballyPingableObjects::ReturnValue' has a wrong offset!");

// Function JP.PingControllerComponent.Server_RequestPing
// 0x0038 (0x0038 - 0x0000)
struct PingControllerComponent_Server_RequestPing final
{
public:
	struct FVector                                InViewLocation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InViewRotation;                                    // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class APlayerControllerJP_Match*              InPC;                                              // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingControllerComponent_Server_RequestPing) == 0x000008, "Wrong alignment on PingControllerComponent_Server_RequestPing");
static_assert(sizeof(PingControllerComponent_Server_RequestPing) == 0x000038, "Wrong size on PingControllerComponent_Server_RequestPing");
static_assert(offsetof(PingControllerComponent_Server_RequestPing, InViewLocation) == 0x000000, "Member 'PingControllerComponent_Server_RequestPing::InViewLocation' has a wrong offset!");
static_assert(offsetof(PingControllerComponent_Server_RequestPing, InViewRotation) == 0x000018, "Member 'PingControllerComponent_Server_RequestPing::InViewRotation' has a wrong offset!");
static_assert(offsetof(PingControllerComponent_Server_RequestPing, InPC) == 0x000030, "Member 'PingControllerComponent_Server_RequestPing::InPC' has a wrong offset!");

// Function JP.PingControllerComponent.Server_RequestPingComponent
// 0x0028 (0x0028 - 0x0000)
struct PingControllerComponent_Server_RequestPingComponent final
{
public:
	class UPingableComponent*                     InPingableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocationOverride;                                // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerControllerJP_Match*              InPC;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingControllerComponent_Server_RequestPingComponent) == 0x000008, "Wrong alignment on PingControllerComponent_Server_RequestPingComponent");
static_assert(sizeof(PingControllerComponent_Server_RequestPingComponent) == 0x000028, "Wrong size on PingControllerComponent_Server_RequestPingComponent");
static_assert(offsetof(PingControllerComponent_Server_RequestPingComponent, InPingableComponent) == 0x000000, "Member 'PingControllerComponent_Server_RequestPingComponent::InPingableComponent' has a wrong offset!");
static_assert(offsetof(PingControllerComponent_Server_RequestPingComponent, InLocationOverride) == 0x000008, "Member 'PingControllerComponent_Server_RequestPingComponent::InLocationOverride' has a wrong offset!");
static_assert(offsetof(PingControllerComponent_Server_RequestPingComponent, InPC) == 0x000020, "Member 'PingControllerComponent_Server_RequestPingComponent::InPC' has a wrong offset!");

// Function JP.PingControllerComponent.TryPingComponent
// 0x0020 (0x0020 - 0x0000)
struct PingControllerComponent_TryPingComponent final
{
public:
	class UPingableComponent*                     InPingableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocationOverride;                                // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingControllerComponent_TryPingComponent) == 0x000008, "Wrong alignment on PingControllerComponent_TryPingComponent");
static_assert(sizeof(PingControllerComponent_TryPingComponent) == 0x000020, "Wrong size on PingControllerComponent_TryPingComponent");
static_assert(offsetof(PingControllerComponent_TryPingComponent, InPingableComponent) == 0x000000, "Member 'PingControllerComponent_TryPingComponent::InPingableComponent' has a wrong offset!");
static_assert(offsetof(PingControllerComponent_TryPingComponent, InLocationOverride) == 0x000008, "Member 'PingControllerComponent_TryPingComponent::InLocationOverride' has a wrong offset!");

// Function JP.MatchConfigurationSubsystem.GetMatchConfiguration
// 0x0060 (0x0060 - 0x0000)
struct MatchConfigurationSubsystem_GetMatchConfiguration final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchConfiguration                    ReturnValue;                                       // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchConfigurationSubsystem_GetMatchConfiguration) == 0x000008, "Wrong alignment on MatchConfigurationSubsystem_GetMatchConfiguration");
static_assert(sizeof(MatchConfigurationSubsystem_GetMatchConfiguration) == 0x000060, "Wrong size on MatchConfigurationSubsystem_GetMatchConfiguration");
static_assert(offsetof(MatchConfigurationSubsystem_GetMatchConfiguration, WorldContextObject) == 0x000000, "Member 'MatchConfigurationSubsystem_GetMatchConfiguration::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MatchConfigurationSubsystem_GetMatchConfiguration, ReturnValue) == 0x000008, "Member 'MatchConfigurationSubsystem_GetMatchConfiguration::ReturnValue' has a wrong offset!");

// Function JP.PlayerControllerJP_Lobby.OnGetDefaultCharacterSettingsError
// 0x0018 (0x0018 - 0x0000)
struct PlayerControllerJP_Lobby_OnGetDefaultCharacterSettingsError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Lobby_OnGetDefaultCharacterSettingsError) == 0x000008, "Wrong alignment on PlayerControllerJP_Lobby_OnGetDefaultCharacterSettingsError");
static_assert(sizeof(PlayerControllerJP_Lobby_OnGetDefaultCharacterSettingsError) == 0x000018, "Wrong size on PlayerControllerJP_Lobby_OnGetDefaultCharacterSettingsError");
static_assert(offsetof(PlayerControllerJP_Lobby_OnGetDefaultCharacterSettingsError, Code) == 0x000000, "Member 'PlayerControllerJP_Lobby_OnGetDefaultCharacterSettingsError::Code' has a wrong offset!");
static_assert(offsetof(PlayerControllerJP_Lobby_OnGetDefaultCharacterSettingsError, Message) == 0x000008, "Member 'PlayerControllerJP_Lobby_OnGetDefaultCharacterSettingsError::Message' has a wrong offset!");

// Function JP.PlayerControllerJP_Lobby.Server_SetReadyAndWaiting
// 0x0001 (0x0001 - 0x0000)
struct PlayerControllerJP_Lobby_Server_SetReadyAndWaiting final
{
public:
	bool                                          ReadyAndWaiting;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Lobby_Server_SetReadyAndWaiting) == 0x000001, "Wrong alignment on PlayerControllerJP_Lobby_Server_SetReadyAndWaiting");
static_assert(sizeof(PlayerControllerJP_Lobby_Server_SetReadyAndWaiting) == 0x000001, "Wrong size on PlayerControllerJP_Lobby_Server_SetReadyAndWaiting");
static_assert(offsetof(PlayerControllerJP_Lobby_Server_SetReadyAndWaiting, ReadyAndWaiting) == 0x000000, "Member 'PlayerControllerJP_Lobby_Server_SetReadyAndWaiting::ReadyAndWaiting' has a wrong offset!");

// Function JP.PlayerControllerJP_Lobby.Server_VoteOnLevel
// 0x0004 (0x0004 - 0x0000)
struct PlayerControllerJP_Lobby_Server_VoteOnLevel final
{
public:
	int32                                         LevelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerControllerJP_Lobby_Server_VoteOnLevel) == 0x000004, "Wrong alignment on PlayerControllerJP_Lobby_Server_VoteOnLevel");
static_assert(sizeof(PlayerControllerJP_Lobby_Server_VoteOnLevel) == 0x000004, "Wrong size on PlayerControllerJP_Lobby_Server_VoteOnLevel");
static_assert(offsetof(PlayerControllerJP_Lobby_Server_VoteOnLevel, LevelIndex) == 0x000000, "Member 'PlayerControllerJP_Lobby_Server_VoteOnLevel::LevelIndex' has a wrong offset!");

// Function JP.MatchConfigurationWidget.ApplyViewModel
// 0x0088 (0x0088 - 0x0000)
struct MatchConfigurationWidget_ApplyViewModel final
{
public:
	struct FMatchConfigurationViewModel           InViewModel;                                       // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchConfigurationWidget_ApplyViewModel) == 0x000008, "Wrong alignment on MatchConfigurationWidget_ApplyViewModel");
static_assert(sizeof(MatchConfigurationWidget_ApplyViewModel) == 0x000088, "Wrong size on MatchConfigurationWidget_ApplyViewModel");
static_assert(offsetof(MatchConfigurationWidget_ApplyViewModel, InViewModel) == 0x000000, "Member 'MatchConfigurationWidget_ApplyViewModel::InViewModel' has a wrong offset!");

// Function JP.MatchConfigurationWidget.SetBoolValue
// 0x0010 (0x0010 - 0x0000)
struct MatchConfigurationWidget_SetBoolValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchConfigurationWidget_SetBoolValue) == 0x000008, "Wrong alignment on MatchConfigurationWidget_SetBoolValue");
static_assert(sizeof(MatchConfigurationWidget_SetBoolValue) == 0x000010, "Wrong size on MatchConfigurationWidget_SetBoolValue");
static_assert(offsetof(MatchConfigurationWidget_SetBoolValue, InWidget) == 0x000000, "Member 'MatchConfigurationWidget_SetBoolValue::InWidget' has a wrong offset!");
static_assert(offsetof(MatchConfigurationWidget_SetBoolValue, InValue) == 0x000008, "Member 'MatchConfigurationWidget_SetBoolValue::InValue' has a wrong offset!");

// Function JP.MatchConfigurationWidget.SetFloatValue
// 0x0010 (0x0010 - 0x0000)
struct MatchConfigurationWidget_SetFloatValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchConfigurationWidget_SetFloatValue) == 0x000008, "Wrong alignment on MatchConfigurationWidget_SetFloatValue");
static_assert(sizeof(MatchConfigurationWidget_SetFloatValue) == 0x000010, "Wrong size on MatchConfigurationWidget_SetFloatValue");
static_assert(offsetof(MatchConfigurationWidget_SetFloatValue, InWidget) == 0x000000, "Member 'MatchConfigurationWidget_SetFloatValue::InWidget' has a wrong offset!");
static_assert(offsetof(MatchConfigurationWidget_SetFloatValue, InValue) == 0x000008, "Member 'MatchConfigurationWidget_SetFloatValue::InValue' has a wrong offset!");

// Function JP.MatchConfigurationWidget.SetIntegerValue
// 0x0010 (0x0010 - 0x0000)
struct MatchConfigurationWidget_SetIntegerValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchConfigurationWidget_SetIntegerValue) == 0x000008, "Wrong alignment on MatchConfigurationWidget_SetIntegerValue");
static_assert(sizeof(MatchConfigurationWidget_SetIntegerValue) == 0x000010, "Wrong size on MatchConfigurationWidget_SetIntegerValue");
static_assert(offsetof(MatchConfigurationWidget_SetIntegerValue, InWidget) == 0x000000, "Member 'MatchConfigurationWidget_SetIntegerValue::InWidget' has a wrong offset!");
static_assert(offsetof(MatchConfigurationWidget_SetIntegerValue, InValue) == 0x000008, "Member 'MatchConfigurationWidget_SetIntegerValue::InValue' has a wrong offset!");

// Function JP.MatchConfigurationWidget.SetItemEnabled
// 0x000C (0x000C - 0x0000)
struct MatchConfigurationWidget_SetItemEnabled final
{
public:
	struct FGameplayTag                           InItemTag;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEnabled;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchConfigurationWidget_SetItemEnabled) == 0x000004, "Wrong alignment on MatchConfigurationWidget_SetItemEnabled");
static_assert(sizeof(MatchConfigurationWidget_SetItemEnabled) == 0x00000C, "Wrong size on MatchConfigurationWidget_SetItemEnabled");
static_assert(offsetof(MatchConfigurationWidget_SetItemEnabled, InItemTag) == 0x000000, "Member 'MatchConfigurationWidget_SetItemEnabled::InItemTag' has a wrong offset!");
static_assert(offsetof(MatchConfigurationWidget_SetItemEnabled, InEnabled) == 0x000008, "Member 'MatchConfigurationWidget_SetItemEnabled::InEnabled' has a wrong offset!");

// Function JP.MatchConfigurationWidget.SetStringValue
// 0x0018 (0x0018 - 0x0000)
struct MatchConfigurationWidget_SetStringValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InValue;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchConfigurationWidget_SetStringValue) == 0x000008, "Wrong alignment on MatchConfigurationWidget_SetStringValue");
static_assert(sizeof(MatchConfigurationWidget_SetStringValue) == 0x000018, "Wrong size on MatchConfigurationWidget_SetStringValue");
static_assert(offsetof(MatchConfigurationWidget_SetStringValue, InWidget) == 0x000000, "Member 'MatchConfigurationWidget_SetStringValue::InWidget' has a wrong offset!");
static_assert(offsetof(MatchConfigurationWidget_SetStringValue, InValue) == 0x000008, "Member 'MatchConfigurationWidget_SetStringValue::InValue' has a wrong offset!");

// Function JP.TeamableActor.GetCachedGroundsKeeper
// 0x0008 (0x0008 - 0x0000)
struct TeamableActor_GetCachedGroundsKeeper final
{
public:
	class AGroundsKeeper*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamableActor_GetCachedGroundsKeeper) == 0x000008, "Wrong alignment on TeamableActor_GetCachedGroundsKeeper");
static_assert(sizeof(TeamableActor_GetCachedGroundsKeeper) == 0x000008, "Wrong size on TeamableActor_GetCachedGroundsKeeper");
static_assert(offsetof(TeamableActor_GetCachedGroundsKeeper, ReturnValue) == 0x000000, "Member 'TeamableActor_GetCachedGroundsKeeper::ReturnValue' has a wrong offset!");

// Function JP.RoomManager.HandleRoomUpgradeApproved
// 0x0008 (0x0008 - 0x0000)
struct RoomManager_HandleRoomUpgradeApproved final
{
public:
	class APlayerState*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomManager_HandleRoomUpgradeApproved) == 0x000008, "Wrong alignment on RoomManager_HandleRoomUpgradeApproved");
static_assert(sizeof(RoomManager_HandleRoomUpgradeApproved) == 0x000008, "Wrong size on RoomManager_HandleRoomUpgradeApproved");
static_assert(offsetof(RoomManager_HandleRoomUpgradeApproved, Player) == 0x000000, "Member 'RoomManager_HandleRoomUpgradeApproved::Player' has a wrong offset!");

// Function JP.RoomManager.K2_RoomUpgradeApproved
// 0x0008 (0x0008 - 0x0000)
struct RoomManager_K2_RoomUpgradeApproved final
{
public:
	class APlayerState*                           InstigatingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomManager_K2_RoomUpgradeApproved) == 0x000008, "Wrong alignment on RoomManager_K2_RoomUpgradeApproved");
static_assert(sizeof(RoomManager_K2_RoomUpgradeApproved) == 0x000008, "Wrong size on RoomManager_K2_RoomUpgradeApproved");
static_assert(offsetof(RoomManager_K2_RoomUpgradeApproved, InstigatingPlayer) == 0x000000, "Member 'RoomManager_K2_RoomUpgradeApproved::InstigatingPlayer' has a wrong offset!");

// Function JP.RoomManager.CanUpgradeRoom
// 0x0010 (0x0010 - 0x0000)
struct RoomManager_CanUpgradeRoom final
{
public:
	class APlayerState*                           InstigatingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RoomManager_CanUpgradeRoom) == 0x000008, "Wrong alignment on RoomManager_CanUpgradeRoom");
static_assert(sizeof(RoomManager_CanUpgradeRoom) == 0x000010, "Wrong size on RoomManager_CanUpgradeRoom");
static_assert(offsetof(RoomManager_CanUpgradeRoom, InstigatingPlayer) == 0x000000, "Member 'RoomManager_CanUpgradeRoom::InstigatingPlayer' has a wrong offset!");
static_assert(offsetof(RoomManager_CanUpgradeRoom, ReturnValue) == 0x000008, "Member 'RoomManager_CanUpgradeRoom::ReturnValue' has a wrong offset!");

// Function JP.MovementSpeedAttributeSetListener.OnAimSpeedCoefficientChanged
// 0x0004 (0x0004 - 0x0000)
struct MovementSpeedAttributeSetListener_OnAimSpeedCoefficientChanged final
{
public:
	float                                         SprintSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementSpeedAttributeSetListener_OnAimSpeedCoefficientChanged) == 0x000004, "Wrong alignment on MovementSpeedAttributeSetListener_OnAimSpeedCoefficientChanged");
static_assert(sizeof(MovementSpeedAttributeSetListener_OnAimSpeedCoefficientChanged) == 0x000004, "Wrong size on MovementSpeedAttributeSetListener_OnAimSpeedCoefficientChanged");
static_assert(offsetof(MovementSpeedAttributeSetListener_OnAimSpeedCoefficientChanged, SprintSpeed) == 0x000000, "Member 'MovementSpeedAttributeSetListener_OnAimSpeedCoefficientChanged::SprintSpeed' has a wrong offset!");

// Function JP.MovementSpeedAttributeSetListener.OnAirControlChanged
// 0x0004 (0x0004 - 0x0000)
struct MovementSpeedAttributeSetListener_OnAirControlChanged final
{
public:
	float                                         AirControl;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementSpeedAttributeSetListener_OnAirControlChanged) == 0x000004, "Wrong alignment on MovementSpeedAttributeSetListener_OnAirControlChanged");
static_assert(sizeof(MovementSpeedAttributeSetListener_OnAirControlChanged) == 0x000004, "Wrong size on MovementSpeedAttributeSetListener_OnAirControlChanged");
static_assert(offsetof(MovementSpeedAttributeSetListener_OnAirControlChanged, AirControl) == 0x000000, "Member 'MovementSpeedAttributeSetListener_OnAirControlChanged::AirControl' has a wrong offset!");

// Function JP.MovementSpeedAttributeSetListener.OnCrouchJumpVelocityCoefficientChanged
// 0x0004 (0x0004 - 0x0000)
struct MovementSpeedAttributeSetListener_OnCrouchJumpVelocityCoefficientChanged final
{
public:
	float                                         CrouchJumpVelocityCoefficient;                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementSpeedAttributeSetListener_OnCrouchJumpVelocityCoefficientChanged) == 0x000004, "Wrong alignment on MovementSpeedAttributeSetListener_OnCrouchJumpVelocityCoefficientChanged");
static_assert(sizeof(MovementSpeedAttributeSetListener_OnCrouchJumpVelocityCoefficientChanged) == 0x000004, "Wrong size on MovementSpeedAttributeSetListener_OnCrouchJumpVelocityCoefficientChanged");
static_assert(offsetof(MovementSpeedAttributeSetListener_OnCrouchJumpVelocityCoefficientChanged, CrouchJumpVelocityCoefficient) == 0x000000, "Member 'MovementSpeedAttributeSetListener_OnCrouchJumpVelocityCoefficientChanged::CrouchJumpVelocityCoefficient' has a wrong offset!");

// Function JP.MovementSpeedAttributeSetListener.OnCrouchSpeedCoefficientChanged
// 0x0004 (0x0004 - 0x0000)
struct MovementSpeedAttributeSetListener_OnCrouchSpeedCoefficientChanged final
{
public:
	float                                         CrouchSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementSpeedAttributeSetListener_OnCrouchSpeedCoefficientChanged) == 0x000004, "Wrong alignment on MovementSpeedAttributeSetListener_OnCrouchSpeedCoefficientChanged");
static_assert(sizeof(MovementSpeedAttributeSetListener_OnCrouchSpeedCoefficientChanged) == 0x000004, "Wrong size on MovementSpeedAttributeSetListener_OnCrouchSpeedCoefficientChanged");
static_assert(offsetof(MovementSpeedAttributeSetListener_OnCrouchSpeedCoefficientChanged, CrouchSpeed) == 0x000000, "Member 'MovementSpeedAttributeSetListener_OnCrouchSpeedCoefficientChanged::CrouchSpeed' has a wrong offset!");

// Function JP.MovementSpeedAttributeSetListener.OnJumpVelocityChanged
// 0x0004 (0x0004 - 0x0000)
struct MovementSpeedAttributeSetListener_OnJumpVelocityChanged final
{
public:
	float                                         JumpVelocity;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementSpeedAttributeSetListener_OnJumpVelocityChanged) == 0x000004, "Wrong alignment on MovementSpeedAttributeSetListener_OnJumpVelocityChanged");
static_assert(sizeof(MovementSpeedAttributeSetListener_OnJumpVelocityChanged) == 0x000004, "Wrong size on MovementSpeedAttributeSetListener_OnJumpVelocityChanged");
static_assert(offsetof(MovementSpeedAttributeSetListener_OnJumpVelocityChanged, JumpVelocity) == 0x000000, "Member 'MovementSpeedAttributeSetListener_OnJumpVelocityChanged::JumpVelocity' has a wrong offset!");

// Function JP.MovementSpeedAttributeSetListener.OnMovementSpeedChanged
// 0x0004 (0x0004 - 0x0000)
struct MovementSpeedAttributeSetListener_OnMovementSpeedChanged final
{
public:
	float                                         MovementSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementSpeedAttributeSetListener_OnMovementSpeedChanged) == 0x000004, "Wrong alignment on MovementSpeedAttributeSetListener_OnMovementSpeedChanged");
static_assert(sizeof(MovementSpeedAttributeSetListener_OnMovementSpeedChanged) == 0x000004, "Wrong size on MovementSpeedAttributeSetListener_OnMovementSpeedChanged");
static_assert(offsetof(MovementSpeedAttributeSetListener_OnMovementSpeedChanged, MovementSpeed) == 0x000000, "Member 'MovementSpeedAttributeSetListener_OnMovementSpeedChanged::MovementSpeed' has a wrong offset!");

// Function JP.MovementSpeedAttributeSetListener.OnSprintSpeedCoefficientChanged
// 0x0004 (0x0004 - 0x0000)
struct MovementSpeedAttributeSetListener_OnSprintSpeedCoefficientChanged final
{
public:
	float                                         SprintSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovementSpeedAttributeSetListener_OnSprintSpeedCoefficientChanged) == 0x000004, "Wrong alignment on MovementSpeedAttributeSetListener_OnSprintSpeedCoefficientChanged");
static_assert(sizeof(MovementSpeedAttributeSetListener_OnSprintSpeedCoefficientChanged) == 0x000004, "Wrong size on MovementSpeedAttributeSetListener_OnSprintSpeedCoefficientChanged");
static_assert(offsetof(MovementSpeedAttributeSetListener_OnSprintSpeedCoefficientChanged, SprintSpeed) == 0x000000, "Member 'MovementSpeedAttributeSetListener_OnSprintSpeedCoefficientChanged::SprintSpeed' has a wrong offset!");

// Function JP.MusicManagerComponent.OnMusicStateChanged
// 0x0001 (0x0001 - 0x0000)
struct MusicManagerComponent_OnMusicStateChanged final
{
public:
	EMusicStates                                  NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicManagerComponent_OnMusicStateChanged) == 0x000001, "Wrong alignment on MusicManagerComponent_OnMusicStateChanged");
static_assert(sizeof(MusicManagerComponent_OnMusicStateChanged) == 0x000001, "Wrong size on MusicManagerComponent_OnMusicStateChanged");
static_assert(offsetof(MusicManagerComponent_OnMusicStateChanged, NewState) == 0x000000, "Member 'MusicManagerComponent_OnMusicStateChanged::NewState' has a wrong offset!");

// Function JP.MusicManagerComponent.SetMusicState
// 0x0001 (0x0001 - 0x0000)
struct MusicManagerComponent_SetMusicState final
{
public:
	EMusicStates                                  NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MusicManagerComponent_SetMusicState) == 0x000001, "Wrong alignment on MusicManagerComponent_SetMusicState");
static_assert(sizeof(MusicManagerComponent_SetMusicState) == 0x000001, "Wrong size on MusicManagerComponent_SetMusicState");
static_assert(offsetof(MusicManagerComponent_SetMusicState, NewState) == 0x000000, "Member 'MusicManagerComponent_SetMusicState::NewState' has a wrong offset!");

// Function JP.NeighborDataGameInstanceSubsystem.TryGetNeighborDefinition
// 0x0038 (0x0038 - 0x0000)
struct NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Succeeded;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNeighborDefinition>     ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition) == 0x000008, "Wrong alignment on NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition");
static_assert(sizeof(NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition) == 0x000038, "Wrong size on NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition");
static_assert(offsetof(NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition, NeighborID) == 0x000000, "Member 'NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition::NeighborID' has a wrong offset!");
static_assert(offsetof(NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition, Succeeded) == 0x000008, "Member 'NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition::Succeeded' has a wrong offset!");
static_assert(offsetof(NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition, ReturnValue) == 0x000010, "Member 'NeighborDataGameInstanceSubsystem_TryGetNeighborDefinition::ReturnValue' has a wrong offset!");

// Function JP.NeighborDataGameInstanceSubsystem.TryGetNeighborMetaData
// 0x0038 (0x0038 - 0x0000)
struct NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Succeeded;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNeighborMetaData>       ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData) == 0x000008, "Wrong alignment on NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData");
static_assert(sizeof(NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData) == 0x000038, "Wrong size on NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData");
static_assert(offsetof(NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData, NeighborID) == 0x000000, "Member 'NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData::NeighborID' has a wrong offset!");
static_assert(offsetof(NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData, Succeeded) == 0x000008, "Member 'NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData::Succeeded' has a wrong offset!");
static_assert(offsetof(NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData, ReturnValue) == 0x000010, "Member 'NeighborDataGameInstanceSubsystem_TryGetNeighborMetaData::ReturnValue' has a wrong offset!");

// Function JP.NeighborFavoriteOrUnlockWidget.ApplyViewModel
// 0x0048 (0x0048 - 0x0000)
struct NeighborFavoriteOrUnlockWidget_ApplyViewModel final
{
public:
	struct FOnlineStoreItemData                   OnlineStoreItem;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborFavoriteOrUnlockWidget_ApplyViewModel) == 0x000008, "Wrong alignment on NeighborFavoriteOrUnlockWidget_ApplyViewModel");
static_assert(sizeof(NeighborFavoriteOrUnlockWidget_ApplyViewModel) == 0x000048, "Wrong size on NeighborFavoriteOrUnlockWidget_ApplyViewModel");
static_assert(offsetof(NeighborFavoriteOrUnlockWidget_ApplyViewModel, OnlineStoreItem) == 0x000000, "Member 'NeighborFavoriteOrUnlockWidget_ApplyViewModel::OnlineStoreItem' has a wrong offset!");

// Function JP.NeighborFavoriteOrUnlockWidget.ApplyViewModelEditorPreview
// 0x0050 (0x0050 - 0x0000)
struct NeighborFavoriteOrUnlockWidget_ApplyViewModelEditorPreview final
{
public:
	struct FOnlineStoreItemData                   OnlineStoreItem;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DefaultNeighborID;                                 // 0x0048(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborFavoriteOrUnlockWidget_ApplyViewModelEditorPreview) == 0x000008, "Wrong alignment on NeighborFavoriteOrUnlockWidget_ApplyViewModelEditorPreview");
static_assert(sizeof(NeighborFavoriteOrUnlockWidget_ApplyViewModelEditorPreview) == 0x000050, "Wrong size on NeighborFavoriteOrUnlockWidget_ApplyViewModelEditorPreview");
static_assert(offsetof(NeighborFavoriteOrUnlockWidget_ApplyViewModelEditorPreview, OnlineStoreItem) == 0x000000, "Member 'NeighborFavoriteOrUnlockWidget_ApplyViewModelEditorPreview::OnlineStoreItem' has a wrong offset!");
static_assert(offsetof(NeighborFavoriteOrUnlockWidget_ApplyViewModelEditorPreview, DefaultNeighborID) == 0x000048, "Member 'NeighborFavoriteOrUnlockWidget_ApplyViewModelEditorPreview::DefaultNeighborID' has a wrong offset!");

// Function JP.NeighborFavoriteOrUnlockWidget.HandleUnlockError
// 0x0010 (0x0010 - 0x0000)
struct NeighborFavoriteOrUnlockWidget_HandleUnlockError final
{
public:
	class FString                                 ErrorMessage;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborFavoriteOrUnlockWidget_HandleUnlockError) == 0x000008, "Wrong alignment on NeighborFavoriteOrUnlockWidget_HandleUnlockError");
static_assert(sizeof(NeighborFavoriteOrUnlockWidget_HandleUnlockError) == 0x000010, "Wrong size on NeighborFavoriteOrUnlockWidget_HandleUnlockError");
static_assert(offsetof(NeighborFavoriteOrUnlockWidget_HandleUnlockError, ErrorMessage) == 0x000000, "Member 'NeighborFavoriteOrUnlockWidget_HandleUnlockError::ErrorMessage' has a wrong offset!");

// Function JP.NeighborFavoriteOrUnlockWidget.SetBattlePassInfo
// 0x0010 (0x0010 - 0x0000)
struct NeighborFavoriteOrUnlockWidget_SetBattlePassInfo final
{
public:
	struct FOnlineStoreItemBattlePassRequirement  BattlePassInfo;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborFavoriteOrUnlockWidget_SetBattlePassInfo) == 0x000004, "Wrong alignment on NeighborFavoriteOrUnlockWidget_SetBattlePassInfo");
static_assert(sizeof(NeighborFavoriteOrUnlockWidget_SetBattlePassInfo) == 0x000010, "Wrong size on NeighborFavoriteOrUnlockWidget_SetBattlePassInfo");
static_assert(offsetof(NeighborFavoriteOrUnlockWidget_SetBattlePassInfo, BattlePassInfo) == 0x000000, "Member 'NeighborFavoriteOrUnlockWidget_SetBattlePassInfo::BattlePassInfo' has a wrong offset!");

// Function JP.NeighborFavoriteOrUnlockWidget.SetVirtualCurrencyInfo
// 0x000C (0x000C - 0x0000)
struct NeighborFavoriteOrUnlockWidget_SetVirtualCurrencyInfo final
{
public:
	struct FOnlineStoreItemCost                   ItemCost;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborFavoriteOrUnlockWidget_SetVirtualCurrencyInfo) == 0x000004, "Wrong alignment on NeighborFavoriteOrUnlockWidget_SetVirtualCurrencyInfo");
static_assert(sizeof(NeighborFavoriteOrUnlockWidget_SetVirtualCurrencyInfo) == 0x00000C, "Wrong size on NeighborFavoriteOrUnlockWidget_SetVirtualCurrencyInfo");
static_assert(offsetof(NeighborFavoriteOrUnlockWidget_SetVirtualCurrencyInfo, ItemCost) == 0x000000, "Member 'NeighborFavoriteOrUnlockWidget_SetVirtualCurrencyInfo::ItemCost' has a wrong offset!");

// Function JP.NeighborFavoriteOrUnlockWidget.GetCurrentNeighborAsStoreItem
// 0x0048 (0x0048 - 0x0000)
struct NeighborFavoriteOrUnlockWidget_GetCurrentNeighborAsStoreItem final
{
public:
	struct FOnlineStoreItemData                   ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborFavoriteOrUnlockWidget_GetCurrentNeighborAsStoreItem) == 0x000008, "Wrong alignment on NeighborFavoriteOrUnlockWidget_GetCurrentNeighborAsStoreItem");
static_assert(sizeof(NeighborFavoriteOrUnlockWidget_GetCurrentNeighborAsStoreItem) == 0x000048, "Wrong size on NeighborFavoriteOrUnlockWidget_GetCurrentNeighborAsStoreItem");
static_assert(offsetof(NeighborFavoriteOrUnlockWidget_GetCurrentNeighborAsStoreItem, ReturnValue) == 0x000000, "Member 'NeighborFavoriteOrUnlockWidget_GetCurrentNeighborAsStoreItem::ReturnValue' has a wrong offset!");

// Function JP.NeighborPreviewActor.InitializeItem
// 0x0028 (0x0028 - 0x0000)
struct NeighborPreviewActor_InitializeItem final
{
public:
	TSoftObjectPtr<class UItemSkinDefinition>     InDefinition;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborPreviewActor_InitializeItem) == 0x000008, "Wrong alignment on NeighborPreviewActor_InitializeItem");
static_assert(sizeof(NeighborPreviewActor_InitializeItem) == 0x000028, "Wrong size on NeighborPreviewActor_InitializeItem");
static_assert(offsetof(NeighborPreviewActor_InitializeItem, InDefinition) == 0x000000, "Member 'NeighborPreviewActor_InitializeItem::InDefinition' has a wrong offset!");

// Function JP.NeighborPreviewActor.PlayAnimationFromContext
// 0x0018 (0x0018 - 0x0000)
struct NeighborPreviewActor_PlayAnimationFromContext final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SkinID;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AnimationContext;                                  // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborPreviewActor_PlayAnimationFromContext) == 0x000004, "Wrong alignment on NeighborPreviewActor_PlayAnimationFromContext");
static_assert(sizeof(NeighborPreviewActor_PlayAnimationFromContext) == 0x000018, "Wrong size on NeighborPreviewActor_PlayAnimationFromContext");
static_assert(offsetof(NeighborPreviewActor_PlayAnimationFromContext, NeighborID) == 0x000000, "Member 'NeighborPreviewActor_PlayAnimationFromContext::NeighborID' has a wrong offset!");
static_assert(offsetof(NeighborPreviewActor_PlayAnimationFromContext, SkinID) == 0x000008, "Member 'NeighborPreviewActor_PlayAnimationFromContext::SkinID' has a wrong offset!");
static_assert(offsetof(NeighborPreviewActor_PlayAnimationFromContext, AnimationContext) == 0x000010, "Member 'NeighborPreviewActor_PlayAnimationFromContext::AnimationContext' has a wrong offset!");

// Function JP.NeighborSkinDefinition.TryGetNeighborSkinDefinition
// 0x0038 (0x0038 - 0x0000)
struct NeighborSkinDefinition_TryGetNeighborSkinDefinition final
{
public:
	struct FGameplayTag                           NeighborSkinID;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNeighborSkinDefinition> OutSoftNeighborSkinDefinition;                     // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NeighborSkinDefinition_TryGetNeighborSkinDefinition) == 0x000008, "Wrong alignment on NeighborSkinDefinition_TryGetNeighborSkinDefinition");
static_assert(sizeof(NeighborSkinDefinition_TryGetNeighborSkinDefinition) == 0x000038, "Wrong size on NeighborSkinDefinition_TryGetNeighborSkinDefinition");
static_assert(offsetof(NeighborSkinDefinition_TryGetNeighborSkinDefinition, NeighborSkinID) == 0x000000, "Member 'NeighborSkinDefinition_TryGetNeighborSkinDefinition::NeighborSkinID' has a wrong offset!");
static_assert(offsetof(NeighborSkinDefinition_TryGetNeighborSkinDefinition, OutSoftNeighborSkinDefinition) == 0x000008, "Member 'NeighborSkinDefinition_TryGetNeighborSkinDefinition::OutSoftNeighborSkinDefinition' has a wrong offset!");
static_assert(offsetof(NeighborSkinDefinition_TryGetNeighborSkinDefinition, ReturnValue) == 0x000030, "Member 'NeighborSkinDefinition_TryGetNeighborSkinDefinition::ReturnValue' has a wrong offset!");

// Function JP.NeighborSpecialAbilityWidget.SetSourceAbility
// 0x0008 (0x0008 - 0x0000)
struct NeighborSpecialAbilityWidget_SetSourceAbility final
{
public:
	class UGameplayAbilityIW*                     Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NeighborSpecialAbilityWidget_SetSourceAbility) == 0x000008, "Wrong alignment on NeighborSpecialAbilityWidget_SetSourceAbility");
static_assert(sizeof(NeighborSpecialAbilityWidget_SetSourceAbility) == 0x000008, "Wrong size on NeighborSpecialAbilityWidget_SetSourceAbility");
static_assert(offsetof(NeighborSpecialAbilityWidget_SetSourceAbility, Source) == 0x000000, "Member 'NeighborSpecialAbilityWidget_SetSourceAbility::Source' has a wrong offset!");

// Function JP.ObjectiveCollection.GetObjectives
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveCollection_GetObjectives final
{
public:
	TArray<class UObjectiveDefinition*>           ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveCollection_GetObjectives) == 0x000008, "Wrong alignment on ObjectiveCollection_GetObjectives");
static_assert(sizeof(ObjectiveCollection_GetObjectives) == 0x000010, "Wrong size on ObjectiveCollection_GetObjectives");
static_assert(offsetof(ObjectiveCollection_GetObjectives, ReturnValue) == 0x000000, "Member 'ObjectiveCollection_GetObjectives::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveCollection.GetObjectivesPerSpawn
// 0x0001 (0x0001 - 0x0000)
struct ObjectiveCollection_GetObjectivesPerSpawn final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveCollection_GetObjectivesPerSpawn) == 0x000001, "Wrong alignment on ObjectiveCollection_GetObjectivesPerSpawn");
static_assert(sizeof(ObjectiveCollection_GetObjectivesPerSpawn) == 0x000001, "Wrong size on ObjectiveCollection_GetObjectivesPerSpawn");
static_assert(offsetof(ObjectiveCollection_GetObjectivesPerSpawn, ReturnValue) == 0x000000, "Member 'ObjectiveCollection_GetObjectivesPerSpawn::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveInstance.ReceiveObjectiveEndMessageGameplayEvent
// 0x000C (0x000C - 0x0000)
struct ObjectiveInstance_ReceiveObjectiveEndMessageGameplayEvent final
{
public:
	struct FGameplayTag                           InChannel;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FObjectiveGameplayMessage              InMessage;                                         // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectiveInstance_ReceiveObjectiveEndMessageGameplayEvent) == 0x000004, "Wrong alignment on ObjectiveInstance_ReceiveObjectiveEndMessageGameplayEvent");
static_assert(sizeof(ObjectiveInstance_ReceiveObjectiveEndMessageGameplayEvent) == 0x00000C, "Wrong size on ObjectiveInstance_ReceiveObjectiveEndMessageGameplayEvent");
static_assert(offsetof(ObjectiveInstance_ReceiveObjectiveEndMessageGameplayEvent, InChannel) == 0x000000, "Member 'ObjectiveInstance_ReceiveObjectiveEndMessageGameplayEvent::InChannel' has a wrong offset!");
static_assert(offsetof(ObjectiveInstance_ReceiveObjectiveEndMessageGameplayEvent, InMessage) == 0x000008, "Member 'ObjectiveInstance_ReceiveObjectiveEndMessageGameplayEvent::InMessage' has a wrong offset!");

// Function JP.ObjectiveInstance.ReceiveObjectiveEndMessageTimer
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveInstance_ReceiveObjectiveEndMessageTimer final
{
public:
	struct FGameplayTag                           InChannel;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FObjectiveEndMessage                   InMessage;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveInstance_ReceiveObjectiveEndMessageTimer) == 0x000008, "Wrong alignment on ObjectiveInstance_ReceiveObjectiveEndMessageTimer");
static_assert(sizeof(ObjectiveInstance_ReceiveObjectiveEndMessageTimer) == 0x000010, "Wrong size on ObjectiveInstance_ReceiveObjectiveEndMessageTimer");
static_assert(offsetof(ObjectiveInstance_ReceiveObjectiveEndMessageTimer, InChannel) == 0x000000, "Member 'ObjectiveInstance_ReceiveObjectiveEndMessageTimer::InChannel' has a wrong offset!");
static_assert(offsetof(ObjectiveInstance_ReceiveObjectiveEndMessageTimer, InMessage) == 0x000008, "Member 'ObjectiveInstance_ReceiveObjectiveEndMessageTimer::InMessage' has a wrong offset!");

// Function JP.ObjectiveInstance.ReceiveSubObjectiveCompleted
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveInstance_ReceiveSubObjectiveCompleted final
{
public:
	class ASubObjective*                          SubObjective;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveInstance_ReceiveSubObjectiveCompleted) == 0x000008, "Wrong alignment on ObjectiveInstance_ReceiveSubObjectiveCompleted");
static_assert(sizeof(ObjectiveInstance_ReceiveSubObjectiveCompleted) == 0x000008, "Wrong size on ObjectiveInstance_ReceiveSubObjectiveCompleted");
static_assert(offsetof(ObjectiveInstance_ReceiveSubObjectiveCompleted, SubObjective) == 0x000000, "Member 'ObjectiveInstance_ReceiveSubObjectiveCompleted::SubObjective' has a wrong offset!");

// Function JP.ObjectiveInstance.SubObjectiveCompleted
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveInstance_SubObjectiveCompleted final
{
public:
	class APlayerStateJP*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveInstance_SubObjectiveCompleted) == 0x000008, "Wrong alignment on ObjectiveInstance_SubObjectiveCompleted");
static_assert(sizeof(ObjectiveInstance_SubObjectiveCompleted) == 0x000008, "Wrong size on ObjectiveInstance_SubObjectiveCompleted");
static_assert(offsetof(ObjectiveInstance_SubObjectiveCompleted, Player) == 0x000000, "Member 'ObjectiveInstance_SubObjectiveCompleted::Player' has a wrong offset!");

// Function JP.ObjectiveManagerTutorialComponent.CreateTutorialObjectiveInstanceForThisObjectiveComponent
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveManagerTutorialComponent_CreateTutorialObjectiveInstanceForThisObjectiveComponent final
{
public:
	class UObjectiveDefinition*                   ObjectiveDefinition;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveManagerTutorialComponent_CreateTutorialObjectiveInstanceForThisObjectiveComponent) == 0x000008, "Wrong alignment on ObjectiveManagerTutorialComponent_CreateTutorialObjectiveInstanceForThisObjectiveComponent");
static_assert(sizeof(ObjectiveManagerTutorialComponent_CreateTutorialObjectiveInstanceForThisObjectiveComponent) == 0x000008, "Wrong size on ObjectiveManagerTutorialComponent_CreateTutorialObjectiveInstanceForThisObjectiveComponent");
static_assert(offsetof(ObjectiveManagerTutorialComponent_CreateTutorialObjectiveInstanceForThisObjectiveComponent, ObjectiveDefinition) == 0x000000, "Member 'ObjectiveManagerTutorialComponent_CreateTutorialObjectiveInstanceForThisObjectiveComponent::ObjectiveDefinition' has a wrong offset!");

// Function JP.ObjectivesComponent.CreateObjective
// 0x0020 (0x0020 - 0x0000)
struct ObjectivesComponent_CreateObjective final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObjectiveBase*                   ObjectiveTemplate;                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObjectiveBase*>                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectivesComponent_CreateObjective) == 0x000008, "Wrong alignment on ObjectivesComponent_CreateObjective");
static_assert(sizeof(ObjectivesComponent_CreateObjective) == 0x000020, "Wrong size on ObjectivesComponent_CreateObjective");
static_assert(offsetof(ObjectivesComponent_CreateObjective, WorldContextObject) == 0x000000, "Member 'ObjectivesComponent_CreateObjective::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ObjectivesComponent_CreateObjective, ObjectiveTemplate) == 0x000008, "Member 'ObjectivesComponent_CreateObjective::ObjectiveTemplate' has a wrong offset!");
static_assert(offsetof(ObjectivesComponent_CreateObjective, ReturnValue) == 0x000010, "Member 'ObjectivesComponent_CreateObjective::ReturnValue' has a wrong offset!");

// Function JP.ObjectiveWidget.CreateObjectiveWidget
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWidget_CreateObjectiveWidget final
{
public:
	struct FObjectiveAndOwningPlayer              Objective;                                         // 0x0000(0x0010)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWidget_CreateObjectiveWidget) == 0x000008, "Wrong alignment on ObjectiveWidget_CreateObjectiveWidget");
static_assert(sizeof(ObjectiveWidget_CreateObjectiveWidget) == 0x000010, "Wrong size on ObjectiveWidget_CreateObjectiveWidget");
static_assert(offsetof(ObjectiveWidget_CreateObjectiveWidget, Objective) == 0x000000, "Member 'ObjectiveWidget_CreateObjectiveWidget::Objective' has a wrong offset!");

// Function JP.ObjectiveWidget.CreateSubObjectiveWidget
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveWidget_CreateSubObjectiveWidget final
{
public:
	class ASubObjective*                          SubObjective;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWidget_CreateSubObjectiveWidget) == 0x000008, "Wrong alignment on ObjectiveWidget_CreateSubObjectiveWidget");
static_assert(sizeof(ObjectiveWidget_CreateSubObjectiveWidget) == 0x000008, "Wrong size on ObjectiveWidget_CreateSubObjectiveWidget");
static_assert(offsetof(ObjectiveWidget_CreateSubObjectiveWidget, SubObjective) == 0x000000, "Member 'ObjectiveWidget_CreateSubObjectiveWidget::SubObjective' has a wrong offset!");

// Function JP.ObjectiveWidget.ObjectiveFinished
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWidget_ObjectiveFinished final
{
public:
	struct FObjectiveAndOwningPlayer              Objective;                                         // 0x0000(0x0010)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWidget_ObjectiveFinished) == 0x000008, "Wrong alignment on ObjectiveWidget_ObjectiveFinished");
static_assert(sizeof(ObjectiveWidget_ObjectiveFinished) == 0x000010, "Wrong size on ObjectiveWidget_ObjectiveFinished");
static_assert(offsetof(ObjectiveWidget_ObjectiveFinished, Objective) == 0x000000, "Member 'ObjectiveWidget_ObjectiveFinished::Objective' has a wrong offset!");

// Function JP.ObjectiveWidget.RegenerateObjectiveTrackerWidgets
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWidget_RegenerateObjectiveTrackerWidgets final
{
public:
	TArray<struct FObjectiveTracker>              ObjectiveTrackers;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWidget_RegenerateObjectiveTrackerWidgets) == 0x000008, "Wrong alignment on ObjectiveWidget_RegenerateObjectiveTrackerWidgets");
static_assert(sizeof(ObjectiveWidget_RegenerateObjectiveTrackerWidgets) == 0x000010, "Wrong size on ObjectiveWidget_RegenerateObjectiveTrackerWidgets");
static_assert(offsetof(ObjectiveWidget_RegenerateObjectiveTrackerWidgets, ObjectiveTrackers) == 0x000000, "Member 'ObjectiveWidget_RegenerateObjectiveTrackerWidgets::ObjectiveTrackers' has a wrong offset!");

// Function JP.ObjectiveWidget.RemoveObjectiveWidget
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWidget_RemoveObjectiveWidget final
{
public:
	struct FObjectiveAndOwningPlayer              Objective;                                         // 0x0000(0x0010)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWidget_RemoveObjectiveWidget) == 0x000008, "Wrong alignment on ObjectiveWidget_RemoveObjectiveWidget");
static_assert(sizeof(ObjectiveWidget_RemoveObjectiveWidget) == 0x000010, "Wrong size on ObjectiveWidget_RemoveObjectiveWidget");
static_assert(offsetof(ObjectiveWidget_RemoveObjectiveWidget, Objective) == 0x000000, "Member 'ObjectiveWidget_RemoveObjectiveWidget::Objective' has a wrong offset!");

// Function JP.ObjectiveWidget.RemoveSubObjectiveWidget
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveWidget_RemoveSubObjectiveWidget final
{
public:
	class ASubObjective*                          SubObjective;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWidget_RemoveSubObjectiveWidget) == 0x000008, "Wrong alignment on ObjectiveWidget_RemoveSubObjectiveWidget");
static_assert(sizeof(ObjectiveWidget_RemoveSubObjectiveWidget) == 0x000008, "Wrong size on ObjectiveWidget_RemoveSubObjectiveWidget");
static_assert(offsetof(ObjectiveWidget_RemoveSubObjectiveWidget, SubObjective) == 0x000000, "Member 'ObjectiveWidget_RemoveSubObjectiveWidget::SubObjective' has a wrong offset!");

// Function JP.ObjectiveWidget.UpdateSubObjectiveWidget
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveWidget_UpdateSubObjectiveWidget final
{
public:
	class ASubObjective*                          SubObjective;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWidget_UpdateSubObjectiveWidget) == 0x000008, "Wrong alignment on ObjectiveWidget_UpdateSubObjectiveWidget");
static_assert(sizeof(ObjectiveWidget_UpdateSubObjectiveWidget) == 0x000008, "Wrong size on ObjectiveWidget_UpdateSubObjectiveWidget");
static_assert(offsetof(ObjectiveWidget_UpdateSubObjectiveWidget, SubObjective) == 0x000000, "Member 'ObjectiveWidget_UpdateSubObjectiveWidget::SubObjective' has a wrong offset!");

// Function JP.ObjectPoolingSubsystem.GetInactiveObjectOfClass
// 0x0018 (0x0018 - 0x0000)
struct ObjectPoolingSubsystem_GetInactiveObjectOfClass final
{
public:
	TSubclassOf<class APooledActor>               Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APooledActor*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPoolingSubsystem_GetInactiveObjectOfClass) == 0x000008, "Wrong alignment on ObjectPoolingSubsystem_GetInactiveObjectOfClass");
static_assert(sizeof(ObjectPoolingSubsystem_GetInactiveObjectOfClass) == 0x000018, "Wrong size on ObjectPoolingSubsystem_GetInactiveObjectOfClass");
static_assert(offsetof(ObjectPoolingSubsystem_GetInactiveObjectOfClass, Class_0) == 0x000000, "Member 'ObjectPoolingSubsystem_GetInactiveObjectOfClass::Class_0' has a wrong offset!");
static_assert(offsetof(ObjectPoolingSubsystem_GetInactiveObjectOfClass, Instigator) == 0x000008, "Member 'ObjectPoolingSubsystem_GetInactiveObjectOfClass::Instigator' has a wrong offset!");
static_assert(offsetof(ObjectPoolingSubsystem_GetInactiveObjectOfClass, ReturnValue) == 0x000010, "Member 'ObjectPoolingSubsystem_GetInactiveObjectOfClass::ReturnValue' has a wrong offset!");

// Function JP.ObjectPoolingSubsystem.PooledObjectDestroyed
// 0x0008 (0x0008 - 0x0000)
struct ObjectPoolingSubsystem_PooledObjectDestroyed final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPoolingSubsystem_PooledObjectDestroyed) == 0x000008, "Wrong alignment on ObjectPoolingSubsystem_PooledObjectDestroyed");
static_assert(sizeof(ObjectPoolingSubsystem_PooledObjectDestroyed) == 0x000008, "Wrong size on ObjectPoolingSubsystem_PooledObjectDestroyed");
static_assert(offsetof(ObjectPoolingSubsystem_PooledObjectDestroyed, Actor) == 0x000000, "Member 'ObjectPoolingSubsystem_PooledObjectDestroyed::Actor' has a wrong offset!");

// Function JP.OnlineCurrencyBundleDataAsset.TryGetCurrencyBundleDataAsset
// 0x0038 (0x0038 - 0x0000)
struct OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset final
{
public:
	struct FGameplayTag                           CurrencyBundleDataAssetID;                         // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UOnlineCurrencyBundleDataAsset> OutSoftCurrencyBundleDataAsset;                    // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset) == 0x000008, "Wrong alignment on OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset");
static_assert(sizeof(OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset) == 0x000038, "Wrong size on OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset, CurrencyBundleDataAssetID) == 0x000000, "Member 'OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset::CurrencyBundleDataAssetID' has a wrong offset!");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset, OutSoftCurrencyBundleDataAsset) == 0x000008, "Member 'OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset::OutSoftCurrencyBundleDataAsset' has a wrong offset!");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset, ReturnValue) == 0x000030, "Member 'OnlineCurrencyBundleDataAsset_TryGetCurrencyBundleDataAsset::ReturnValue' has a wrong offset!");

// Function JP.OnlineCurrencyBundleDataAsset.GetDiscountDescription
// 0x0030 (0x0030 - 0x0000)
struct OnlineCurrencyBundleDataAsset_GetDiscountDescription final
{
public:
	class FText                                   Format;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         OwnPrice;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnAmount;                                         // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceToCompare;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountToCompare;                                   // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineCurrencyBundleDataAsset_GetDiscountDescription) == 0x000008, "Wrong alignment on OnlineCurrencyBundleDataAsset_GetDiscountDescription");
static_assert(sizeof(OnlineCurrencyBundleDataAsset_GetDiscountDescription) == 0x000030, "Wrong size on OnlineCurrencyBundleDataAsset_GetDiscountDescription");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetDiscountDescription, Format) == 0x000000, "Member 'OnlineCurrencyBundleDataAsset_GetDiscountDescription::Format' has a wrong offset!");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetDiscountDescription, OwnPrice) == 0x000010, "Member 'OnlineCurrencyBundleDataAsset_GetDiscountDescription::OwnPrice' has a wrong offset!");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetDiscountDescription, OwnAmount) == 0x000014, "Member 'OnlineCurrencyBundleDataAsset_GetDiscountDescription::OwnAmount' has a wrong offset!");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetDiscountDescription, PriceToCompare) == 0x000018, "Member 'OnlineCurrencyBundleDataAsset_GetDiscountDescription::PriceToCompare' has a wrong offset!");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetDiscountDescription, AmountToCompare) == 0x00001C, "Member 'OnlineCurrencyBundleDataAsset_GetDiscountDescription::AmountToCompare' has a wrong offset!");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetDiscountDescription, ReturnValue) == 0x000020, "Member 'OnlineCurrencyBundleDataAsset_GetDiscountDescription::ReturnValue' has a wrong offset!");

// Function JP.OnlineCurrencyBundleDataAsset.GetPriceTag
// 0x0028 (0x0028 - 0x0000)
struct OnlineCurrencyBundleDataAsset_GetPriceTag final
{
public:
	int32                                         Price;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineCurrencyBundleDataAsset_GetPriceTag) == 0x000008, "Wrong alignment on OnlineCurrencyBundleDataAsset_GetPriceTag");
static_assert(sizeof(OnlineCurrencyBundleDataAsset_GetPriceTag) == 0x000028, "Wrong size on OnlineCurrencyBundleDataAsset_GetPriceTag");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetPriceTag, Price) == 0x000000, "Member 'OnlineCurrencyBundleDataAsset_GetPriceTag::Price' has a wrong offset!");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetPriceTag, CurrencyCode) == 0x000008, "Member 'OnlineCurrencyBundleDataAsset_GetPriceTag::CurrencyCode' has a wrong offset!");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetPriceTag, ReturnValue) == 0x000018, "Member 'OnlineCurrencyBundleDataAsset_GetPriceTag::ReturnValue' has a wrong offset!");

// Function JP.OnlineCurrencyBundleDataAsset.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct OnlineCurrencyBundleDataAsset_GetTitle final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineCurrencyBundleDataAsset_GetTitle) == 0x000008, "Wrong alignment on OnlineCurrencyBundleDataAsset_GetTitle");
static_assert(sizeof(OnlineCurrencyBundleDataAsset_GetTitle) == 0x000018, "Wrong size on OnlineCurrencyBundleDataAsset_GetTitle");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetTitle, Amount) == 0x000000, "Member 'OnlineCurrencyBundleDataAsset_GetTitle::Amount' has a wrong offset!");
static_assert(offsetof(OnlineCurrencyBundleDataAsset_GetTitle, ReturnValue) == 0x000008, "Member 'OnlineCurrencyBundleDataAsset_GetTitle::ReturnValue' has a wrong offset!");

// Function JP.OnlineServicesFriend.GetFriends
// 0x0020 (0x0020 - 0x0000)
struct OnlineServicesFriend_GetFriends final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntriesPerPage;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UOnlineServicesFriend*>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineServicesFriend_GetFriends) == 0x000008, "Wrong alignment on OnlineServicesFriend_GetFriends");
static_assert(sizeof(OnlineServicesFriend_GetFriends) == 0x000020, "Wrong size on OnlineServicesFriend_GetFriends");
static_assert(offsetof(OnlineServicesFriend_GetFriends, WorldContextObject) == 0x000000, "Member 'OnlineServicesFriend_GetFriends::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineServicesFriend_GetFriends, Page) == 0x000008, "Member 'OnlineServicesFriend_GetFriends::Page' has a wrong offset!");
static_assert(offsetof(OnlineServicesFriend_GetFriends, EntriesPerPage) == 0x00000C, "Member 'OnlineServicesFriend_GetFriends::EntriesPerPage' has a wrong offset!");
static_assert(offsetof(OnlineServicesFriend_GetFriends, ReturnValue) == 0x000010, "Member 'OnlineServicesFriend_GetFriends::ReturnValue' has a wrong offset!");

// Function JP.OnlineServicesFriend.GetNumFriendsPlayingJP
// 0x0010 (0x0010 - 0x0000)
struct OnlineServicesFriend_GetNumFriendsPlayingJP final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineServicesFriend_GetNumFriendsPlayingJP) == 0x000008, "Wrong alignment on OnlineServicesFriend_GetNumFriendsPlayingJP");
static_assert(sizeof(OnlineServicesFriend_GetNumFriendsPlayingJP) == 0x000010, "Wrong size on OnlineServicesFriend_GetNumFriendsPlayingJP");
static_assert(offsetof(OnlineServicesFriend_GetNumFriendsPlayingJP, WorldContextObject) == 0x000000, "Member 'OnlineServicesFriend_GetNumFriendsPlayingJP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineServicesFriend_GetNumFriendsPlayingJP, ReturnValue) == 0x000008, "Member 'OnlineServicesFriend_GetNumFriendsPlayingJP::ReturnValue' has a wrong offset!");

// Function JP.OnlineServicesFriend.GetNumOnlineFriends
// 0x0010 (0x0010 - 0x0000)
struct OnlineServicesFriend_GetNumOnlineFriends final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineServicesFriend_GetNumOnlineFriends) == 0x000008, "Wrong alignment on OnlineServicesFriend_GetNumOnlineFriends");
static_assert(sizeof(OnlineServicesFriend_GetNumOnlineFriends) == 0x000010, "Wrong size on OnlineServicesFriend_GetNumOnlineFriends");
static_assert(offsetof(OnlineServicesFriend_GetNumOnlineFriends, WorldContextObject) == 0x000000, "Member 'OnlineServicesFriend_GetNumOnlineFriends::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineServicesFriend_GetNumOnlineFriends, ReturnValue) == 0x000008, "Member 'OnlineServicesFriend_GetNumOnlineFriends::ReturnValue' has a wrong offset!");

// Function JP.OnlineServicesFriend.GetTotalFriends
// 0x0010 (0x0010 - 0x0000)
struct OnlineServicesFriend_GetTotalFriends final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineServicesFriend_GetTotalFriends) == 0x000008, "Wrong alignment on OnlineServicesFriend_GetTotalFriends");
static_assert(sizeof(OnlineServicesFriend_GetTotalFriends) == 0x000010, "Wrong size on OnlineServicesFriend_GetTotalFriends");
static_assert(offsetof(OnlineServicesFriend_GetTotalFriends, WorldContextObject) == 0x000000, "Member 'OnlineServicesFriend_GetTotalFriends::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OnlineServicesFriend_GetTotalFriends, ReturnValue) == 0x000008, "Member 'OnlineServicesFriend_GetTotalFriends::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.AddCurrencyAmount
// 0x000C (0x000C - 0x0000)
struct OnlineStoreGameInstanceSubsystem_AddCurrencyAmount final
{
public:
	struct FGameplayTag                           CurrencyTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountToAdd;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_AddCurrencyAmount) == 0x000004, "Wrong alignment on OnlineStoreGameInstanceSubsystem_AddCurrencyAmount");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_AddCurrencyAmount) == 0x00000C, "Wrong size on OnlineStoreGameInstanceSubsystem_AddCurrencyAmount");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_AddCurrencyAmount, CurrencyTag) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_AddCurrencyAmount::CurrencyTag' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_AddCurrencyAmount, AmountToAdd) == 0x000008, "Member 'OnlineStoreGameInstanceSubsystem_AddCurrencyAmount::AmountToAdd' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.GetCurrencyAmount
// 0x000C (0x000C - 0x0000)
struct OnlineStoreGameInstanceSubsystem_GetCurrencyAmount final
{
public:
	struct FGameplayTag                           CurrencyTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_GetCurrencyAmount) == 0x000004, "Wrong alignment on OnlineStoreGameInstanceSubsystem_GetCurrencyAmount");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_GetCurrencyAmount) == 0x00000C, "Wrong size on OnlineStoreGameInstanceSubsystem_GetCurrencyAmount");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_GetCurrencyAmount, CurrencyTag) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_GetCurrencyAmount::CurrencyTag' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_GetCurrencyAmount, ReturnValue) == 0x000008, "Member 'OnlineStoreGameInstanceSubsystem_GetCurrencyAmount::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.GetHouses
// 0x0010 (0x0010 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_GetHouses final
{
public:
	TDelegate<void(TArray<struct FOnlineStoreItemData>& OwnedItems, TArray<struct FOnlineStoreItemData>& UnownedItems)> OnGetPlayerItems;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_GetHouses) == 0x000004, "Wrong alignment on OnlineStoreGameInstanceSubsystem_GetHouses");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_GetHouses) == 0x000010, "Wrong size on OnlineStoreGameInstanceSubsystem_GetHouses");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_GetHouses, OnGetPlayerItems) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_GetHouses::OnGetPlayerItems' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.GetNeighborItems
// 0x0018 (0x0018 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_GetNeighborItems final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FGameplayTag& NeighborID, struct FCosmeticsOnlineServicesDataContainer& RewardsContainer)> OnGetNeighborItems;                                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_GetNeighborItems) == 0x000004, "Wrong alignment on OnlineStoreGameInstanceSubsystem_GetNeighborItems");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_GetNeighborItems) == 0x000018, "Wrong size on OnlineStoreGameInstanceSubsystem_GetNeighborItems");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_GetNeighborItems, NeighborID) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_GetNeighborItems::NeighborID' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_GetNeighborItems, OnGetNeighborItems) == 0x000008, "Member 'OnlineStoreGameInstanceSubsystem_GetNeighborItems::OnGetNeighborItems' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.GetNeighbors
// 0x0010 (0x0010 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_GetNeighbors final
{
public:
	TDelegate<void(TArray<struct FOnlineStoreItemData>& OwnedItems, TArray<struct FOnlineStoreItemData>& UnownedItems)> OnGetPlayerItems;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_GetNeighbors) == 0x000004, "Wrong alignment on OnlineStoreGameInstanceSubsystem_GetNeighbors");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_GetNeighbors) == 0x000010, "Wrong size on OnlineStoreGameInstanceSubsystem_GetNeighbors");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_GetNeighbors, OnGetPlayerItems) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_GetNeighbors::OnGetPlayerItems' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.IsCurrencySupported
// 0x000C (0x000C - 0x0000)
struct OnlineStoreGameInstanceSubsystem_IsCurrencySupported final
{
public:
	struct FGameplayTag                           CurrencyTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_IsCurrencySupported) == 0x000004, "Wrong alignment on OnlineStoreGameInstanceSubsystem_IsCurrencySupported");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_IsCurrencySupported) == 0x00000C, "Wrong size on OnlineStoreGameInstanceSubsystem_IsCurrencySupported");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_IsCurrencySupported, CurrencyTag) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_IsCurrencySupported::CurrencyTag' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_IsCurrencySupported, ReturnValue) == 0x000008, "Member 'OnlineStoreGameInstanceSubsystem_IsCurrencySupported::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.OnNeighborsInitialized
// 0x0020 (0x0020 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_OnNeighborsInitialized final
{
public:
	TArray<struct FOnlineStoreItemData>           OwnedItems;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FOnlineStoreItemData>           UnownedItems;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_OnNeighborsInitialized) == 0x000008, "Wrong alignment on OnlineStoreGameInstanceSubsystem_OnNeighborsInitialized");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_OnNeighborsInitialized) == 0x000020, "Wrong size on OnlineStoreGameInstanceSubsystem_OnNeighborsInitialized");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_OnNeighborsInitialized, OwnedItems) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_OnNeighborsInitialized::OwnedItems' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_OnNeighborsInitialized, UnownedItems) == 0x000010, "Member 'OnlineStoreGameInstanceSubsystem_OnNeighborsInitialized::UnownedItems' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.RequestNeighborItems
// 0x0008 (0x0008 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_RequestNeighborItems final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_RequestNeighborItems) == 0x000004, "Wrong alignment on OnlineStoreGameInstanceSubsystem_RequestNeighborItems");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_RequestNeighborItems) == 0x000008, "Wrong size on OnlineStoreGameInstanceSubsystem_RequestNeighborItems");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_RequestNeighborItems, NeighborID) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_RequestNeighborItems::NeighborID' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.SetCurrencyAmount
// 0x000C (0x000C - 0x0000)
struct OnlineStoreGameInstanceSubsystem_SetCurrencyAmount final
{
public:
	struct FGameplayTag                           CurrencyTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_SetCurrencyAmount) == 0x000004, "Wrong alignment on OnlineStoreGameInstanceSubsystem_SetCurrencyAmount");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_SetCurrencyAmount) == 0x00000C, "Wrong size on OnlineStoreGameInstanceSubsystem_SetCurrencyAmount");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_SetCurrencyAmount, CurrencyTag) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_SetCurrencyAmount::CurrencyTag' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_SetCurrencyAmount, Amount) == 0x000008, "Member 'OnlineStoreGameInstanceSubsystem_SetCurrencyAmount::Amount' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.SubtractCurrencyAmount
// 0x000C (0x000C - 0x0000)
struct OnlineStoreGameInstanceSubsystem_SubtractCurrencyAmount final
{
public:
	struct FGameplayTag                           CurrencyTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountToSubtract;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_SubtractCurrencyAmount) == 0x000004, "Wrong alignment on OnlineStoreGameInstanceSubsystem_SubtractCurrencyAmount");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_SubtractCurrencyAmount) == 0x00000C, "Wrong size on OnlineStoreGameInstanceSubsystem_SubtractCurrencyAmount");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_SubtractCurrencyAmount, CurrencyTag) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_SubtractCurrencyAmount::CurrencyTag' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_SubtractCurrencyAmount, AmountToSubtract) == 0x000008, "Member 'OnlineStoreGameInstanceSubsystem_SubtractCurrencyAmount::AmountToSubtract' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.TryGetStoreItemDataForNeighborID
// 0x0058 (0x0058 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOnlineStoreItemData                   OutStoreItemData;                                  // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID) == 0x000008, "Wrong alignment on OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID) == 0x000058, "Wrong size on OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID, NeighborID) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID::NeighborID' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID, OutStoreItemData) == 0x000008, "Member 'OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID::OutStoreItemData' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID, ReturnValue) == 0x000050, "Member 'OnlineStoreGameInstanceSubsystem_TryGetStoreItemDataForNeighborID::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.TryUnlockLocalBattlePassItem
// 0x0014 (0x0014 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem final
{
public:
	struct FGameplayTag                           AssetID;                                           // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssociatedNeighborID;                              // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem) == 0x000004, "Wrong alignment on OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem) == 0x000014, "Wrong size on OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem, AssetID) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem::AssetID' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem, AssociatedNeighborID) == 0x000008, "Member 'OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem::AssociatedNeighborID' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem, ReturnValue) == 0x000010, "Member 'OnlineStoreGameInstanceSubsystem_TryUnlockLocalBattlePassItem::ReturnValue' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.UnlockHouse
// 0x0068 (0x0068 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_UnlockHouse final
{
public:
	struct FOnlineStoreItemData                   ItemData;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& ErrorMessage)> OnError;                                           // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_UnlockHouse) == 0x000008, "Wrong alignment on OnlineStoreGameInstanceSubsystem_UnlockHouse");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_UnlockHouse) == 0x000068, "Wrong size on OnlineStoreGameInstanceSubsystem_UnlockHouse");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_UnlockHouse, ItemData) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_UnlockHouse::ItemData' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_UnlockHouse, OnSuccess) == 0x000048, "Member 'OnlineStoreGameInstanceSubsystem_UnlockHouse::OnSuccess' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_UnlockHouse, OnError) == 0x000058, "Member 'OnlineStoreGameInstanceSubsystem_UnlockHouse::OnError' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.UnlockNeighbor
// 0x0068 (0x0068 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_UnlockNeighbor final
{
public:
	struct FOnlineStoreItemData                   ItemData;                                          // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& ErrorMessage)> OnError;                                           // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_UnlockNeighbor) == 0x000008, "Wrong alignment on OnlineStoreGameInstanceSubsystem_UnlockNeighbor");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_UnlockNeighbor) == 0x000068, "Wrong size on OnlineStoreGameInstanceSubsystem_UnlockNeighbor");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_UnlockNeighbor, ItemData) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_UnlockNeighbor::ItemData' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_UnlockNeighbor, OnSuccess) == 0x000048, "Member 'OnlineStoreGameInstanceSubsystem_UnlockNeighbor::OnSuccess' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_UnlockNeighbor, OnError) == 0x000058, "Member 'OnlineStoreGameInstanceSubsystem_UnlockNeighbor::OnError' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.UnlockNeighborItem
// 0x0070 (0x0070 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_UnlockNeighborItem final
{
public:
	struct FGameplayTag                           NeighborID;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOnlineStoreItemData                   ItemData;                                          // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSuccess;                                         // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& ErrorMessage)> OnError;                                           // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_UnlockNeighborItem) == 0x000008, "Wrong alignment on OnlineStoreGameInstanceSubsystem_UnlockNeighborItem");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_UnlockNeighborItem) == 0x000070, "Wrong size on OnlineStoreGameInstanceSubsystem_UnlockNeighborItem");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_UnlockNeighborItem, NeighborID) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_UnlockNeighborItem::NeighborID' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_UnlockNeighborItem, ItemData) == 0x000008, "Member 'OnlineStoreGameInstanceSubsystem_UnlockNeighborItem::ItemData' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_UnlockNeighborItem, OnSuccess) == 0x000050, "Member 'OnlineStoreGameInstanceSubsystem_UnlockNeighborItem::OnSuccess' has a wrong offset!");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_UnlockNeighborItem, OnError) == 0x000060, "Member 'OnlineStoreGameInstanceSubsystem_UnlockNeighborItem::OnError' has a wrong offset!");

// Function JP.OnlineStoreGameInstanceSubsystem.GetNeighborsFilteredByActive
// 0x0010 (0x0010 - 0x0000)
struct OnlineStoreGameInstanceSubsystem_GetNeighborsFilteredByActive final
{
public:
	TArray<struct FOnlineStoreItemData>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStoreGameInstanceSubsystem_GetNeighborsFilteredByActive) == 0x000008, "Wrong alignment on OnlineStoreGameInstanceSubsystem_GetNeighborsFilteredByActive");
static_assert(sizeof(OnlineStoreGameInstanceSubsystem_GetNeighborsFilteredByActive) == 0x000010, "Wrong size on OnlineStoreGameInstanceSubsystem_GetNeighborsFilteredByActive");
static_assert(offsetof(OnlineStoreGameInstanceSubsystem_GetNeighborsFilteredByActive, ReturnValue) == 0x000000, "Member 'OnlineStoreGameInstanceSubsystem_GetNeighborsFilteredByActive::ReturnValue' has a wrong offset!");

// Function JP.PerkManagerComponent.GetPerkManagerComponentFromController
// 0x0010 (0x0010 - 0x0000)
struct PerkManagerComponent_GetPerkManagerComponentFromController final
{
public:
	class AController*                            Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPerkManagerComponent*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManagerComponent_GetPerkManagerComponentFromController) == 0x000008, "Wrong alignment on PerkManagerComponent_GetPerkManagerComponentFromController");
static_assert(sizeof(PerkManagerComponent_GetPerkManagerComponentFromController) == 0x000010, "Wrong size on PerkManagerComponent_GetPerkManagerComponentFromController");
static_assert(offsetof(PerkManagerComponent_GetPerkManagerComponentFromController, Target) == 0x000000, "Member 'PerkManagerComponent_GetPerkManagerComponentFromController::Target' has a wrong offset!");
static_assert(offsetof(PerkManagerComponent_GetPerkManagerComponentFromController, ReturnValue) == 0x000008, "Member 'PerkManagerComponent_GetPerkManagerComponentFromController::ReturnValue' has a wrong offset!");

// Function JP.PerkManagerComponent.GetPerkManagerComponentFromPawn
// 0x0010 (0x0010 - 0x0000)
struct PerkManagerComponent_GetPerkManagerComponentFromPawn final
{
public:
	class APawn*                                  Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPerkManagerComponent*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManagerComponent_GetPerkManagerComponentFromPawn) == 0x000008, "Wrong alignment on PerkManagerComponent_GetPerkManagerComponentFromPawn");
static_assert(sizeof(PerkManagerComponent_GetPerkManagerComponentFromPawn) == 0x000010, "Wrong size on PerkManagerComponent_GetPerkManagerComponentFromPawn");
static_assert(offsetof(PerkManagerComponent_GetPerkManagerComponentFromPawn, Target) == 0x000000, "Member 'PerkManagerComponent_GetPerkManagerComponentFromPawn::Target' has a wrong offset!");
static_assert(offsetof(PerkManagerComponent_GetPerkManagerComponentFromPawn, ReturnValue) == 0x000008, "Member 'PerkManagerComponent_GetPerkManagerComponentFromPawn::ReturnValue' has a wrong offset!");

// Function JP.PerkManagerComponent.GetPerkManagerComponentFromPlayerState
// 0x0010 (0x0010 - 0x0000)
struct PerkManagerComponent_GetPerkManagerComponentFromPlayerState final
{
public:
	class APlayerState*                           Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPerkManagerComponent*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManagerComponent_GetPerkManagerComponentFromPlayerState) == 0x000008, "Wrong alignment on PerkManagerComponent_GetPerkManagerComponentFromPlayerState");
static_assert(sizeof(PerkManagerComponent_GetPerkManagerComponentFromPlayerState) == 0x000010, "Wrong size on PerkManagerComponent_GetPerkManagerComponentFromPlayerState");
static_assert(offsetof(PerkManagerComponent_GetPerkManagerComponentFromPlayerState, Target) == 0x000000, "Member 'PerkManagerComponent_GetPerkManagerComponentFromPlayerState::Target' has a wrong offset!");
static_assert(offsetof(PerkManagerComponent_GetPerkManagerComponentFromPlayerState, ReturnValue) == 0x000008, "Member 'PerkManagerComponent_GetPerkManagerComponentFromPlayerState::ReturnValue' has a wrong offset!");

// Function JP.PerkManagerComponent.K2_GetAllActionsOfType
// 0x0018 (0x0018 - 0x0000)
struct PerkManagerComponent_K2_GetAllActionsOfType final
{
public:
	TSubclassOf<class UPerkAction>                ActionType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPerkAction*>                    ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManagerComponent_K2_GetAllActionsOfType) == 0x000008, "Wrong alignment on PerkManagerComponent_K2_GetAllActionsOfType");
static_assert(sizeof(PerkManagerComponent_K2_GetAllActionsOfType) == 0x000018, "Wrong size on PerkManagerComponent_K2_GetAllActionsOfType");
static_assert(offsetof(PerkManagerComponent_K2_GetAllActionsOfType, ActionType) == 0x000000, "Member 'PerkManagerComponent_K2_GetAllActionsOfType::ActionType' has a wrong offset!");
static_assert(offsetof(PerkManagerComponent_K2_GetAllActionsOfType, ReturnValue) == 0x000008, "Member 'PerkManagerComponent_K2_GetAllActionsOfType::ReturnValue' has a wrong offset!");

// Function JP.PerkManagerComponent.K2_GetFirstActionOfType
// 0x0010 (0x0010 - 0x0000)
struct PerkManagerComponent_K2_GetFirstActionOfType final
{
public:
	TSubclassOf<class UPerkAction>                ActionType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPerkAction*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManagerComponent_K2_GetFirstActionOfType) == 0x000008, "Wrong alignment on PerkManagerComponent_K2_GetFirstActionOfType");
static_assert(sizeof(PerkManagerComponent_K2_GetFirstActionOfType) == 0x000010, "Wrong size on PerkManagerComponent_K2_GetFirstActionOfType");
static_assert(offsetof(PerkManagerComponent_K2_GetFirstActionOfType, ActionType) == 0x000000, "Member 'PerkManagerComponent_K2_GetFirstActionOfType::ActionType' has a wrong offset!");
static_assert(offsetof(PerkManagerComponent_K2_GetFirstActionOfType, ReturnValue) == 0x000008, "Member 'PerkManagerComponent_K2_GetFirstActionOfType::ReturnValue' has a wrong offset!");

// Function JP.PingableComponent.GetPingDataBP
// 0x0098 (0x0098 - 0x0000)
struct PingableComponent_GetPingDataBP final
{
public:
	class APlayerControllerJP_Match*              InPC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPingData                              ReturnValue;                                       // 0x0008(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingableComponent_GetPingDataBP) == 0x000008, "Wrong alignment on PingableComponent_GetPingDataBP");
static_assert(sizeof(PingableComponent_GetPingDataBP) == 0x000098, "Wrong size on PingableComponent_GetPingDataBP");
static_assert(offsetof(PingableComponent_GetPingDataBP, InPC) == 0x000000, "Member 'PingableComponent_GetPingDataBP::InPC' has a wrong offset!");
static_assert(offsetof(PingableComponent_GetPingDataBP, ReturnValue) == 0x000008, "Member 'PingableComponent_GetPingDataBP::ReturnValue' has a wrong offset!");

// Function JP.PingableComponent.GetPingData
// 0x0098 (0x0098 - 0x0000)
struct PingableComponent_GetPingData final
{
public:
	class APlayerControllerJP_Match*              InPC;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPingData                              ReturnValue;                                       // 0x0008(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingableComponent_GetPingData) == 0x000008, "Wrong alignment on PingableComponent_GetPingData");
static_assert(sizeof(PingableComponent_GetPingData) == 0x000098, "Wrong size on PingableComponent_GetPingData");
static_assert(offsetof(PingableComponent_GetPingData, InPC) == 0x000000, "Member 'PingableComponent_GetPingData::InPC' has a wrong offset!");
static_assert(offsetof(PingableComponent_GetPingData, ReturnValue) == 0x000008, "Member 'PingableComponent_GetPingData::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP_Lobby.GetIsHost
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateJP_Lobby_GetIsHost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_Lobby_GetIsHost) == 0x000001, "Wrong alignment on PlayerStateJP_Lobby_GetIsHost");
static_assert(sizeof(PlayerStateJP_Lobby_GetIsHost) == 0x000001, "Wrong size on PlayerStateJP_Lobby_GetIsHost");
static_assert(offsetof(PlayerStateJP_Lobby_GetIsHost, ReturnValue) == 0x000000, "Member 'PlayerStateJP_Lobby_GetIsHost::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP_Lobby.GetReadyAndWaiting
// 0x0001 (0x0001 - 0x0000)
struct PlayerStateJP_Lobby_GetReadyAndWaiting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_Lobby_GetReadyAndWaiting) == 0x000001, "Wrong alignment on PlayerStateJP_Lobby_GetReadyAndWaiting");
static_assert(sizeof(PlayerStateJP_Lobby_GetReadyAndWaiting) == 0x000001, "Wrong size on PlayerStateJP_Lobby_GetReadyAndWaiting");
static_assert(offsetof(PlayerStateJP_Lobby_GetReadyAndWaiting, ReturnValue) == 0x000000, "Member 'PlayerStateJP_Lobby_GetReadyAndWaiting::ReturnValue' has a wrong offset!");

// Function JP.PlayerStateJP_Tutorial.SetNeighborLoadoutOverride
// 0x0030 (0x0030 - 0x0000)
struct PlayerStateJP_Tutorial_SetNeighborLoadoutOverride final
{
public:
	struct FNeighborLoadout                       LoadoutOverride;                                   // 0x0000(0x0030)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStateJP_Tutorial_SetNeighborLoadoutOverride) == 0x000008, "Wrong alignment on PlayerStateJP_Tutorial_SetNeighborLoadoutOverride");
static_assert(sizeof(PlayerStateJP_Tutorial_SetNeighborLoadoutOverride) == 0x000030, "Wrong size on PlayerStateJP_Tutorial_SetNeighborLoadoutOverride");
static_assert(offsetof(PlayerStateJP_Tutorial_SetNeighborLoadoutOverride, LoadoutOverride) == 0x000000, "Member 'PlayerStateJP_Tutorial_SetNeighborLoadoutOverride::LoadoutOverride' has a wrong offset!");

// Function JP.PooledActor.IsActive
// 0x0001 (0x0001 - 0x0000)
struct PooledActor_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledActor_IsActive) == 0x000001, "Wrong alignment on PooledActor_IsActive");
static_assert(sizeof(PooledActor_IsActive) == 0x000001, "Wrong size on PooledActor_IsActive");
static_assert(offsetof(PooledActor_IsActive, ReturnValue) == 0x000000, "Member 'PooledActor_IsActive::ReturnValue' has a wrong offset!");

// Function JP.PreLobbyServerBrowserEntry.ApplyViewModel
// 0x0030 (0x0030 - 0x0000)
struct PreLobbyServerBrowserEntry_ApplyViewModel final
{
public:
	struct FPreLobbyServerBrowserEntryViewModel   InViewModel;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreLobbyServerBrowserEntry_ApplyViewModel) == 0x000008, "Wrong alignment on PreLobbyServerBrowserEntry_ApplyViewModel");
static_assert(sizeof(PreLobbyServerBrowserEntry_ApplyViewModel) == 0x000030, "Wrong size on PreLobbyServerBrowserEntry_ApplyViewModel");
static_assert(offsetof(PreLobbyServerBrowserEntry_ApplyViewModel, InViewModel) == 0x000000, "Member 'PreLobbyServerBrowserEntry_ApplyViewModel::InViewModel' has a wrong offset!");

// Function JP.PreLobbyServerBrowserEntry.GetViewModel
// 0x0030 (0x0030 - 0x0000)
struct PreLobbyServerBrowserEntry_GetViewModel final
{
public:
	struct FPreLobbyServerBrowserEntryViewModel   ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreLobbyServerBrowserEntry_GetViewModel) == 0x000008, "Wrong alignment on PreLobbyServerBrowserEntry_GetViewModel");
static_assert(sizeof(PreLobbyServerBrowserEntry_GetViewModel) == 0x000030, "Wrong size on PreLobbyServerBrowserEntry_GetViewModel");
static_assert(offsetof(PreLobbyServerBrowserEntry_GetViewModel, ReturnValue) == 0x000000, "Member 'PreLobbyServerBrowserEntry_GetViewModel::ReturnValue' has a wrong offset!");

// Function JP.PreLobbyServerBrowserWidget.ApplyViewModel
// 0x0068 (0x0068 - 0x0000)
struct PreLobbyServerBrowserWidget_ApplyViewModel final
{
public:
	struct FPreLobbyServerBrowserViewModel        InViewModel;                                       // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreLobbyServerBrowserWidget_ApplyViewModel) == 0x000008, "Wrong alignment on PreLobbyServerBrowserWidget_ApplyViewModel");
static_assert(sizeof(PreLobbyServerBrowserWidget_ApplyViewModel) == 0x000068, "Wrong size on PreLobbyServerBrowserWidget_ApplyViewModel");
static_assert(offsetof(PreLobbyServerBrowserWidget_ApplyViewModel, InViewModel) == 0x000000, "Member 'PreLobbyServerBrowserWidget_ApplyViewModel::InViewModel' has a wrong offset!");

// Function JP.PreLobbyServerBrowserWidget.RequestLobbies
// 0x0001 (0x0001 - 0x0000)
struct PreLobbyServerBrowserWidget_RequestLobbies final
{
public:
	bool                                          bInDoBackendRequest;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreLobbyServerBrowserWidget_RequestLobbies) == 0x000001, "Wrong alignment on PreLobbyServerBrowserWidget_RequestLobbies");
static_assert(sizeof(PreLobbyServerBrowserWidget_RequestLobbies) == 0x000001, "Wrong size on PreLobbyServerBrowserWidget_RequestLobbies");
static_assert(offsetof(PreLobbyServerBrowserWidget_RequestLobbies, bInDoBackendRequest) == 0x000000, "Member 'PreLobbyServerBrowserWidget_RequestLobbies::bInDoBackendRequest' has a wrong offset!");

// Function JP.PreLobbyServerBrowserWidget.SetBoolValue
// 0x0010 (0x0010 - 0x0000)
struct PreLobbyServerBrowserWidget_SetBoolValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDoBackendRequest;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PreLobbyServerBrowserWidget_SetBoolValue) == 0x000008, "Wrong alignment on PreLobbyServerBrowserWidget_SetBoolValue");
static_assert(sizeof(PreLobbyServerBrowserWidget_SetBoolValue) == 0x000010, "Wrong size on PreLobbyServerBrowserWidget_SetBoolValue");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetBoolValue, InWidget) == 0x000000, "Member 'PreLobbyServerBrowserWidget_SetBoolValue::InWidget' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetBoolValue, InValue) == 0x000008, "Member 'PreLobbyServerBrowserWidget_SetBoolValue::InValue' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetBoolValue, bInDoBackendRequest) == 0x000009, "Member 'PreLobbyServerBrowserWidget_SetBoolValue::bInDoBackendRequest' has a wrong offset!");

// Function JP.PreLobbyServerBrowserWidget.SetIntegerValue
// 0x0010 (0x0010 - 0x0000)
struct PreLobbyServerBrowserWidget_SetIntegerValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDoBackendRequest;                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PreLobbyServerBrowserWidget_SetIntegerValue) == 0x000008, "Wrong alignment on PreLobbyServerBrowserWidget_SetIntegerValue");
static_assert(sizeof(PreLobbyServerBrowserWidget_SetIntegerValue) == 0x000010, "Wrong size on PreLobbyServerBrowserWidget_SetIntegerValue");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetIntegerValue, InWidget) == 0x000000, "Member 'PreLobbyServerBrowserWidget_SetIntegerValue::InWidget' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetIntegerValue, InValue) == 0x000008, "Member 'PreLobbyServerBrowserWidget_SetIntegerValue::InValue' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetIntegerValue, bInDoBackendRequest) == 0x00000C, "Member 'PreLobbyServerBrowserWidget_SetIntegerValue::bInDoBackendRequest' has a wrong offset!");

// Function JP.PreLobbyServerBrowserWidget.SetMultiChoiceValue
// 0x0060 (0x0060 - 0x0000)
struct PreLobbyServerBrowserWidget_SetMultiChoiceValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<int32>                                   InValue;                                           // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	bool                                          bInDoBackendRequest;                               // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PreLobbyServerBrowserWidget_SetMultiChoiceValue) == 0x000008, "Wrong alignment on PreLobbyServerBrowserWidget_SetMultiChoiceValue");
static_assert(sizeof(PreLobbyServerBrowserWidget_SetMultiChoiceValue) == 0x000060, "Wrong size on PreLobbyServerBrowserWidget_SetMultiChoiceValue");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetMultiChoiceValue, InWidget) == 0x000000, "Member 'PreLobbyServerBrowserWidget_SetMultiChoiceValue::InWidget' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetMultiChoiceValue, InValue) == 0x000008, "Member 'PreLobbyServerBrowserWidget_SetMultiChoiceValue::InValue' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetMultiChoiceValue, bInDoBackendRequest) == 0x000058, "Member 'PreLobbyServerBrowserWidget_SetMultiChoiceValue::bInDoBackendRequest' has a wrong offset!");

// Function JP.PreLobbyServerBrowserWidget.SetScalarValue
// 0x0010 (0x0010 - 0x0000)
struct PreLobbyServerBrowserWidget_SetScalarValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDoBackendRequest;                               // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PreLobbyServerBrowserWidget_SetScalarValue) == 0x000008, "Wrong alignment on PreLobbyServerBrowserWidget_SetScalarValue");
static_assert(sizeof(PreLobbyServerBrowserWidget_SetScalarValue) == 0x000010, "Wrong size on PreLobbyServerBrowserWidget_SetScalarValue");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetScalarValue, InWidget) == 0x000000, "Member 'PreLobbyServerBrowserWidget_SetScalarValue::InWidget' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetScalarValue, InValue) == 0x000008, "Member 'PreLobbyServerBrowserWidget_SetScalarValue::InValue' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetScalarValue, bInDoBackendRequest) == 0x00000C, "Member 'PreLobbyServerBrowserWidget_SetScalarValue::bInDoBackendRequest' has a wrong offset!");

// Function JP.PreLobbyServerBrowserWidget.SetStringValue
// 0x0020 (0x0020 - 0x0000)
struct PreLobbyServerBrowserWidget_SetStringValue final
{
public:
	class UJPSettingWidget*                       InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InValue;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDoBackendRequest;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PreLobbyServerBrowserWidget_SetStringValue) == 0x000008, "Wrong alignment on PreLobbyServerBrowserWidget_SetStringValue");
static_assert(sizeof(PreLobbyServerBrowserWidget_SetStringValue) == 0x000020, "Wrong size on PreLobbyServerBrowserWidget_SetStringValue");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetStringValue, InWidget) == 0x000000, "Member 'PreLobbyServerBrowserWidget_SetStringValue::InWidget' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetStringValue, InValue) == 0x000008, "Member 'PreLobbyServerBrowserWidget_SetStringValue::InValue' has a wrong offset!");
static_assert(offsetof(PreLobbyServerBrowserWidget_SetStringValue, bInDoBackendRequest) == 0x000018, "Member 'PreLobbyServerBrowserWidget_SetStringValue::bInDoBackendRequest' has a wrong offset!");

// Function JP.RandomLootSpawner.GetRandomLootTagBasedOnProbability
// 0x0058 (0x0058 - 0x0000)
struct RandomLootSpawner_GetRandomLootTagBasedOnProbability final
{
public:
	TMap<struct FGameplayTag, float>              LootProbabilities;                                 // 0x0000(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RandomLootSpawner_GetRandomLootTagBasedOnProbability) == 0x000008, "Wrong alignment on RandomLootSpawner_GetRandomLootTagBasedOnProbability");
static_assert(sizeof(RandomLootSpawner_GetRandomLootTagBasedOnProbability) == 0x000058, "Wrong size on RandomLootSpawner_GetRandomLootTagBasedOnProbability");
static_assert(offsetof(RandomLootSpawner_GetRandomLootTagBasedOnProbability, LootProbabilities) == 0x000000, "Member 'RandomLootSpawner_GetRandomLootTagBasedOnProbability::LootProbabilities' has a wrong offset!");
static_assert(offsetof(RandomLootSpawner_GetRandomLootTagBasedOnProbability, ReturnValue) == 0x000050, "Member 'RandomLootSpawner_GetRandomLootTagBasedOnProbability::ReturnValue' has a wrong offset!");

// Function JP.RandomLootSpawner.SetNewLootDefinition
// 0x0008 (0x0008 - 0x0000)
struct RandomLootSpawner_SetNewLootDefinition final
{
public:
	class URandomLootDefinition*                  Definition;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RandomLootSpawner_SetNewLootDefinition) == 0x000008, "Wrong alignment on RandomLootSpawner_SetNewLootDefinition");
static_assert(sizeof(RandomLootSpawner_SetNewLootDefinition) == 0x000008, "Wrong size on RandomLootSpawner_SetNewLootDefinition");
static_assert(offsetof(RandomLootSpawner_SetNewLootDefinition, Definition) == 0x000000, "Member 'RandomLootSpawner_SetNewLootDefinition::Definition' has a wrong offset!");

// Function JP.RandomLootSpawner.TriggerLootSelection
// 0x0008 (0x0008 - 0x0000)
struct RandomLootSpawner_TriggerLootSelection final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RandomLootSpawner_TriggerLootSelection) == 0x000004, "Wrong alignment on RandomLootSpawner_TriggerLootSelection");
static_assert(sizeof(RandomLootSpawner_TriggerLootSelection) == 0x000008, "Wrong size on RandomLootSpawner_TriggerLootSelection");
static_assert(offsetof(RandomLootSpawner_TriggerLootSelection, ReturnValue) == 0x000000, "Member 'RandomLootSpawner_TriggerLootSelection::ReturnValue' has a wrong offset!");

// Function JP.RichTextBlockInputImageDecorator.HasImageBrushForTag
// 0x000C (0x000C - 0x0000)
struct RichTextBlockInputImageDecorator_HasImageBrushForTag final
{
public:
	class FName                                   TagOrId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RichTextBlockInputImageDecorator_HasImageBrushForTag) == 0x000004, "Wrong alignment on RichTextBlockInputImageDecorator_HasImageBrushForTag");
static_assert(sizeof(RichTextBlockInputImageDecorator_HasImageBrushForTag) == 0x00000C, "Wrong size on RichTextBlockInputImageDecorator_HasImageBrushForTag");
static_assert(offsetof(RichTextBlockInputImageDecorator_HasImageBrushForTag, TagOrId) == 0x000000, "Member 'RichTextBlockInputImageDecorator_HasImageBrushForTag::TagOrId' has a wrong offset!");
static_assert(offsetof(RichTextBlockInputImageDecorator_HasImageBrushForTag, ReturnValue) == 0x000008, "Member 'RichTextBlockInputImageDecorator_HasImageBrushForTag::ReturnValue' has a wrong offset!");

// Function JP.RoomVolume.GetAllTrackedActors
// 0x0010 (0x0010 - 0x0000)
struct RoomVolume_GetAllTrackedActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomVolume_GetAllTrackedActors) == 0x000008, "Wrong alignment on RoomVolume_GetAllTrackedActors");
static_assert(sizeof(RoomVolume_GetAllTrackedActors) == 0x000010, "Wrong size on RoomVolume_GetAllTrackedActors");
static_assert(offsetof(RoomVolume_GetAllTrackedActors, ReturnValue) == 0x000000, "Member 'RoomVolume_GetAllTrackedActors::ReturnValue' has a wrong offset!");

// Function JP.RoomVolume.GetAllTrackedActorsOfType
// 0x0018 (0x0018 - 0x0000)
struct RoomVolume_GetAllTrackedActorsOfType final
{
public:
	TSubclassOf<class AActor>                     Type;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomVolume_GetAllTrackedActorsOfType) == 0x000008, "Wrong alignment on RoomVolume_GetAllTrackedActorsOfType");
static_assert(sizeof(RoomVolume_GetAllTrackedActorsOfType) == 0x000018, "Wrong size on RoomVolume_GetAllTrackedActorsOfType");
static_assert(offsetof(RoomVolume_GetAllTrackedActorsOfType, Type) == 0x000000, "Member 'RoomVolume_GetAllTrackedActorsOfType::Type' has a wrong offset!");
static_assert(offsetof(RoomVolume_GetAllTrackedActorsOfType, ReturnValue) == 0x000008, "Member 'RoomVolume_GetAllTrackedActorsOfType::ReturnValue' has a wrong offset!");

// Function JP.RoomVolume.TrackActor
// 0x0008 (0x0008 - 0x0000)
struct RoomVolume_TrackActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomVolume_TrackActor) == 0x000008, "Wrong alignment on RoomVolume_TrackActor");
static_assert(sizeof(RoomVolume_TrackActor) == 0x000008, "Wrong size on RoomVolume_TrackActor");
static_assert(offsetof(RoomVolume_TrackActor, Actor) == 0x000000, "Member 'RoomVolume_TrackActor::Actor' has a wrong offset!");

// Function JP.RoomVolume.UntrackActor
// 0x0008 (0x0008 - 0x0000)
struct RoomVolume_UntrackActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoomVolume_UntrackActor) == 0x000008, "Wrong alignment on RoomVolume_UntrackActor");
static_assert(sizeof(RoomVolume_UntrackActor) == 0x000008, "Wrong size on RoomVolume_UntrackActor");
static_assert(offsetof(RoomVolume_UntrackActor, Actor) == 0x000000, "Member 'RoomVolume_UntrackActor::Actor' has a wrong offset!");

// Function JP.SeasonPassContainerWidgetFull.CreateTierWidget
// 0x0028 (0x0028 - 0x0000)
struct SeasonPassContainerWidgetFull_CreateTierWidget final
{
public:
	struct FSeasonPassTierViewModel               ViewModel;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassContainerWidgetFull_CreateTierWidget) == 0x000008, "Wrong alignment on SeasonPassContainerWidgetFull_CreateTierWidget");
static_assert(sizeof(SeasonPassContainerWidgetFull_CreateTierWidget) == 0x000028, "Wrong size on SeasonPassContainerWidgetFull_CreateTierWidget");
static_assert(offsetof(SeasonPassContainerWidgetFull_CreateTierWidget, ViewModel) == 0x000000, "Member 'SeasonPassContainerWidgetFull_CreateTierWidget::ViewModel' has a wrong offset!");

// Function JP.SeasonPassRewardContent_NeighborInterface.ApplyNeighborViewModel
// 0x0028 (0x0028 - 0x0000)
struct SeasonPassRewardContent_NeighborInterface_ApplyNeighborViewModel final
{
public:
	struct FSeasonPassRewardContent_NeighborViewModel ViewModel;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassRewardContent_NeighborInterface_ApplyNeighborViewModel) == 0x000008, "Wrong alignment on SeasonPassRewardContent_NeighborInterface_ApplyNeighborViewModel");
static_assert(sizeof(SeasonPassRewardContent_NeighborInterface_ApplyNeighborViewModel) == 0x000028, "Wrong size on SeasonPassRewardContent_NeighborInterface_ApplyNeighborViewModel");
static_assert(offsetof(SeasonPassRewardContent_NeighborInterface_ApplyNeighborViewModel, ViewModel) == 0x000000, "Member 'SeasonPassRewardContent_NeighborInterface_ApplyNeighborViewModel::ViewModel' has a wrong offset!");

// Function JP.RewardContentFactory.GetContentFromRewardType
// 0x0010 (0x0010 - 0x0000)
struct RewardContentFactory_GetContentFromRewardType final
{
public:
	ESeasonPassRewardType                         RewardType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RewardContentFactory_GetContentFromRewardType) == 0x000008, "Wrong alignment on RewardContentFactory_GetContentFromRewardType");
static_assert(sizeof(RewardContentFactory_GetContentFromRewardType) == 0x000010, "Wrong size on RewardContentFactory_GetContentFromRewardType");
static_assert(offsetof(RewardContentFactory_GetContentFromRewardType, RewardType) == 0x000000, "Member 'RewardContentFactory_GetContentFromRewardType::RewardType' has a wrong offset!");
static_assert(offsetof(RewardContentFactory_GetContentFromRewardType, ReturnValue) == 0x000008, "Member 'RewardContentFactory_GetContentFromRewardType::ReturnValue' has a wrong offset!");

// Function JP.SeasonPassTierWidget.ApplyViewModel
// 0x0028 (0x0028 - 0x0000)
struct SeasonPassTierWidget_ApplyViewModel final
{
public:
	struct FSeasonPassTierViewModel               InViewModel;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassTierWidget_ApplyViewModel) == 0x000008, "Wrong alignment on SeasonPassTierWidget_ApplyViewModel");
static_assert(sizeof(SeasonPassTierWidget_ApplyViewModel) == 0x000028, "Wrong size on SeasonPassTierWidget_ApplyViewModel");
static_assert(offsetof(SeasonPassTierWidget_ApplyViewModel, InViewModel) == 0x000000, "Member 'SeasonPassTierWidget_ApplyViewModel::InViewModel' has a wrong offset!");

// Function JP.SeasonPassTierWidget.CreateSingleRewardWidget
// 0x0018 (0x0018 - 0x0000)
struct SeasonPassTierWidget_CreateSingleRewardWidget final
{
public:
	class UPanelWidget*                           Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPremium;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USeasonPassRewardEntryWidgetBase> WidgetType;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassTierWidget_CreateSingleRewardWidget) == 0x000008, "Wrong alignment on SeasonPassTierWidget_CreateSingleRewardWidget");
static_assert(sizeof(SeasonPassTierWidget_CreateSingleRewardWidget) == 0x000018, "Wrong size on SeasonPassTierWidget_CreateSingleRewardWidget");
static_assert(offsetof(SeasonPassTierWidget_CreateSingleRewardWidget, Parent) == 0x000000, "Member 'SeasonPassTierWidget_CreateSingleRewardWidget::Parent' has a wrong offset!");
static_assert(offsetof(SeasonPassTierWidget_CreateSingleRewardWidget, bIsPremium) == 0x000008, "Member 'SeasonPassTierWidget_CreateSingleRewardWidget::bIsPremium' has a wrong offset!");
static_assert(offsetof(SeasonPassTierWidget_CreateSingleRewardWidget, WidgetType) == 0x000010, "Member 'SeasonPassTierWidget_CreateSingleRewardWidget::WidgetType' has a wrong offset!");

// Function JP.SeasonPassTierWidget.K2_ApplyViewModel
// 0x0028 (0x0028 - 0x0000)
struct SeasonPassTierWidget_K2_ApplyViewModel final
{
public:
	struct FSeasonPassTierViewModel               ViewModel;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeasonPassTierWidget_K2_ApplyViewModel) == 0x000008, "Wrong alignment on SeasonPassTierWidget_K2_ApplyViewModel");
static_assert(sizeof(SeasonPassTierWidget_K2_ApplyViewModel) == 0x000028, "Wrong size on SeasonPassTierWidget_K2_ApplyViewModel");
static_assert(offsetof(SeasonPassTierWidget_K2_ApplyViewModel, ViewModel) == 0x000000, "Member 'SeasonPassTierWidget_K2_ApplyViewModel::ViewModel' has a wrong offset!");

// Function JP.SeasonPassTierWidget.TryGetFirstReward
// 0x0050 (0x0050 - 0x0000)
struct SeasonPassTierWidget_TryGetFirstReward final
{
public:
	bool                                          bIsPremium;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSeasonPassReward                      OutReward;                                         // 0x0008(0x0040)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeasonPassTierWidget_TryGetFirstReward) == 0x000008, "Wrong alignment on SeasonPassTierWidget_TryGetFirstReward");
static_assert(sizeof(SeasonPassTierWidget_TryGetFirstReward) == 0x000050, "Wrong size on SeasonPassTierWidget_TryGetFirstReward");
static_assert(offsetof(SeasonPassTierWidget_TryGetFirstReward, bIsPremium) == 0x000000, "Member 'SeasonPassTierWidget_TryGetFirstReward::bIsPremium' has a wrong offset!");
static_assert(offsetof(SeasonPassTierWidget_TryGetFirstReward, OutReward) == 0x000008, "Member 'SeasonPassTierWidget_TryGetFirstReward::OutReward' has a wrong offset!");
static_assert(offsetof(SeasonPassTierWidget_TryGetFirstReward, ReturnValue) == 0x000048, "Member 'SeasonPassTierWidget_TryGetFirstReward::ReturnValue' has a wrong offset!");

// Function JP.ServiceMessageHandler.GetAllServiceMessages
// 0x0010 (0x0010 - 0x0000)
struct ServiceMessageHandler_GetAllServiceMessages final
{
public:
	TArray<class UServiceMessage*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServiceMessageHandler_GetAllServiceMessages) == 0x000008, "Wrong alignment on ServiceMessageHandler_GetAllServiceMessages");
static_assert(sizeof(ServiceMessageHandler_GetAllServiceMessages) == 0x000010, "Wrong size on ServiceMessageHandler_GetAllServiceMessages");
static_assert(offsetof(ServiceMessageHandler_GetAllServiceMessages, ReturnValue) == 0x000000, "Member 'ServiceMessageHandler_GetAllServiceMessages::ReturnValue' has a wrong offset!");

// Function JP.SessionSearchResultViewModel.CreateViewModel
// 0x0010 (0x0010 - 0x0000)
struct SessionSearchResultViewModel_CreateViewModel final
{
public:
	class UCommonSession_SearchSessionRequest*    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USessionSearchResultViewModel*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SessionSearchResultViewModel_CreateViewModel) == 0x000008, "Wrong alignment on SessionSearchResultViewModel_CreateViewModel");
static_assert(sizeof(SessionSearchResultViewModel_CreateViewModel) == 0x000010, "Wrong size on SessionSearchResultViewModel_CreateViewModel");
static_assert(offsetof(SessionSearchResultViewModel_CreateViewModel, Target) == 0x000000, "Member 'SessionSearchResultViewModel_CreateViewModel::Target' has a wrong offset!");
static_assert(offsetof(SessionSearchResultViewModel_CreateViewModel, ReturnValue) == 0x000008, "Member 'SessionSearchResultViewModel_CreateViewModel::ReturnValue' has a wrong offset!");

// Function JP.ShopInteractionComponent.AddAmmo
// 0x0090 (0x0090 - 0x0000)
struct ShopInteractionComponent_AddAmmo final
{
public:
	class UItemDefinition*                        ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShopItemViewModel                     ShopItemViewModel;                                 // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopInteractionComponent_AddAmmo) == 0x000008, "Wrong alignment on ShopInteractionComponent_AddAmmo");
static_assert(sizeof(ShopInteractionComponent_AddAmmo) == 0x000090, "Wrong size on ShopInteractionComponent_AddAmmo");
static_assert(offsetof(ShopInteractionComponent_AddAmmo, ItemDefinition) == 0x000000, "Member 'ShopInteractionComponent_AddAmmo::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_AddAmmo, ShopItemViewModel) == 0x000008, "Member 'ShopInteractionComponent_AddAmmo::ShopItemViewModel' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_AddAmmo, ReturnValue) == 0x000088, "Member 'ShopInteractionComponent_AddAmmo::ReturnValue' has a wrong offset!");

// Function JP.ShopInteractionComponent.AttemptItemPurchase
// 0x0018 (0x0018 - 0x0000)
struct ShopInteractionComponent_AttemptItemPurchase final
{
public:
	class UItemDefinition*                        ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemInstance*                          OptionalItemToDropFromInventory;                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeliveryOrderConfirmed;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopInteractionComponent_AttemptItemPurchase) == 0x000008, "Wrong alignment on ShopInteractionComponent_AttemptItemPurchase");
static_assert(sizeof(ShopInteractionComponent_AttemptItemPurchase) == 0x000018, "Wrong size on ShopInteractionComponent_AttemptItemPurchase");
static_assert(offsetof(ShopInteractionComponent_AttemptItemPurchase, ItemDefinition) == 0x000000, "Member 'ShopInteractionComponent_AttemptItemPurchase::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_AttemptItemPurchase, OptionalItemToDropFromInventory) == 0x000008, "Member 'ShopInteractionComponent_AttemptItemPurchase::OptionalItemToDropFromInventory' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_AttemptItemPurchase, DeliveryOrderConfirmed) == 0x000010, "Member 'ShopInteractionComponent_AttemptItemPurchase::DeliveryOrderConfirmed' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_AttemptItemPurchase, ReturnValue) == 0x000011, "Member 'ShopInteractionComponent_AttemptItemPurchase::ReturnValue' has a wrong offset!");

// Function JP.ShopInteractionComponent.CanAddAmmo
// 0x0010 (0x0010 - 0x0000)
struct ShopInteractionComponent_CanAddAmmo final
{
public:
	class UItemDefinition*                        ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopInteractionComponent_CanAddAmmo) == 0x000008, "Wrong alignment on ShopInteractionComponent_CanAddAmmo");
static_assert(sizeof(ShopInteractionComponent_CanAddAmmo) == 0x000010, "Wrong size on ShopInteractionComponent_CanAddAmmo");
static_assert(offsetof(ShopInteractionComponent_CanAddAmmo, ItemDefinition) == 0x000000, "Member 'ShopInteractionComponent_CanAddAmmo::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_CanAddAmmo, ReturnValue) == 0x000008, "Member 'ShopInteractionComponent_CanAddAmmo::ReturnValue' has a wrong offset!");

// Function JP.ShopInteractionComponent.CanPurchaseItem
// 0x0010 (0x0010 - 0x0000)
struct ShopInteractionComponent_CanPurchaseItem final
{
public:
	class UItemDefinition*                        ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopInteractionComponent_CanPurchaseItem) == 0x000008, "Wrong alignment on ShopInteractionComponent_CanPurchaseItem");
static_assert(sizeof(ShopInteractionComponent_CanPurchaseItem) == 0x000010, "Wrong size on ShopInteractionComponent_CanPurchaseItem");
static_assert(offsetof(ShopInteractionComponent_CanPurchaseItem, ItemDefinition) == 0x000000, "Member 'ShopInteractionComponent_CanPurchaseItem::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_CanPurchaseItem, ReturnValue) == 0x000008, "Member 'ShopInteractionComponent_CanPurchaseItem::ReturnValue' has a wrong offset!");

// Function JP.ShopInteractionComponent.DropItem
// 0x0008 (0x0008 - 0x0000)
struct ShopInteractionComponent_DropItem final
{
public:
	class UItemInstance*                          ItemToDropFromInventory;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopInteractionComponent_DropItem) == 0x000008, "Wrong alignment on ShopInteractionComponent_DropItem");
static_assert(sizeof(ShopInteractionComponent_DropItem) == 0x000008, "Wrong size on ShopInteractionComponent_DropItem");
static_assert(offsetof(ShopInteractionComponent_DropItem, ItemToDropFromInventory) == 0x000000, "Member 'ShopInteractionComponent_DropItem::ItemToDropFromInventory' has a wrong offset!");

// Function JP.ShopInteractionComponent.ModifyItemAmountFromPerks
// 0x0010 (0x0010 - 0x0000)
struct ShopInteractionComponent_ModifyItemAmountFromPerks final
{
public:
	class UItemDefinition*                        ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopInteractionComponent_ModifyItemAmountFromPerks) == 0x000008, "Wrong alignment on ShopInteractionComponent_ModifyItemAmountFromPerks");
static_assert(sizeof(ShopInteractionComponent_ModifyItemAmountFromPerks) == 0x000010, "Wrong size on ShopInteractionComponent_ModifyItemAmountFromPerks");
static_assert(offsetof(ShopInteractionComponent_ModifyItemAmountFromPerks, ItemDefinition) == 0x000000, "Member 'ShopInteractionComponent_ModifyItemAmountFromPerks::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_ModifyItemAmountFromPerks, ReturnValue) == 0x000008, "Member 'ShopInteractionComponent_ModifyItemAmountFromPerks::ReturnValue' has a wrong offset!");

// Function JP.ShopInteractionComponent.OrderDelivery
// 0x0088 (0x0088 - 0x0000)
struct ShopInteractionComponent_OrderDelivery final
{
public:
	TSubclassOf<class AActor>                     Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShopItemViewModel                     ShopItemViewModel;                                 // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopInteractionComponent_OrderDelivery) == 0x000008, "Wrong alignment on ShopInteractionComponent_OrderDelivery");
static_assert(sizeof(ShopInteractionComponent_OrderDelivery) == 0x000088, "Wrong size on ShopInteractionComponent_OrderDelivery");
static_assert(offsetof(ShopInteractionComponent_OrderDelivery, Actor) == 0x000000, "Member 'ShopInteractionComponent_OrderDelivery::Actor' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_OrderDelivery, ShopItemViewModel) == 0x000008, "Member 'ShopInteractionComponent_OrderDelivery::ShopItemViewModel' has a wrong offset!");

// Function JP.ShopInteractionComponent.PurchaseItem
// 0x0098 (0x0098 - 0x0000)
struct ShopInteractionComponent_PurchaseItem final
{
public:
	class UItemDefinition*                        ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShopItemViewModel                     ShopItemViewModel;                                 // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Amount;                                            // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemInstance*                          ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopInteractionComponent_PurchaseItem) == 0x000008, "Wrong alignment on ShopInteractionComponent_PurchaseItem");
static_assert(sizeof(ShopInteractionComponent_PurchaseItem) == 0x000098, "Wrong size on ShopInteractionComponent_PurchaseItem");
static_assert(offsetof(ShopInteractionComponent_PurchaseItem, ItemDefinition) == 0x000000, "Member 'ShopInteractionComponent_PurchaseItem::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_PurchaseItem, ShopItemViewModel) == 0x000008, "Member 'ShopInteractionComponent_PurchaseItem::ShopItemViewModel' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_PurchaseItem, Amount) == 0x000088, "Member 'ShopInteractionComponent_PurchaseItem::Amount' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_PurchaseItem, ReturnValue) == 0x000090, "Member 'ShopInteractionComponent_PurchaseItem::ReturnValue' has a wrong offset!");

// Function JP.ShopInteractionComponent.Server_RequestPurchase
// 0x0018 (0x0018 - 0x0000)
struct ShopInteractionComponent_Server_RequestPurchase final
{
public:
	struct FGameplayTag                           ItemDefinitionTag;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemInstance*                          OptionalItemToDropFromInventory;                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeliveryOrderConfirmed;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopInteractionComponent_Server_RequestPurchase) == 0x000008, "Wrong alignment on ShopInteractionComponent_Server_RequestPurchase");
static_assert(sizeof(ShopInteractionComponent_Server_RequestPurchase) == 0x000018, "Wrong size on ShopInteractionComponent_Server_RequestPurchase");
static_assert(offsetof(ShopInteractionComponent_Server_RequestPurchase, ItemDefinitionTag) == 0x000000, "Member 'ShopInteractionComponent_Server_RequestPurchase::ItemDefinitionTag' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_Server_RequestPurchase, OptionalItemToDropFromInventory) == 0x000008, "Member 'ShopInteractionComponent_Server_RequestPurchase::OptionalItemToDropFromInventory' has a wrong offset!");
static_assert(offsetof(ShopInteractionComponent_Server_RequestPurchase, DeliveryOrderConfirmed) == 0x000010, "Member 'ShopInteractionComponent_Server_RequestPurchase::DeliveryOrderConfirmed' has a wrong offset!");

// Function JP.ShopInteractionComponent.SetInventory
// 0x0001 (0x0001 - 0x0000)
struct ShopInteractionComponent_SetInventory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopInteractionComponent_SetInventory) == 0x000001, "Wrong alignment on ShopInteractionComponent_SetInventory");
static_assert(sizeof(ShopInteractionComponent_SetInventory) == 0x000001, "Wrong size on ShopInteractionComponent_SetInventory");
static_assert(offsetof(ShopInteractionComponent_SetInventory, ReturnValue) == 0x000000, "Member 'ShopInteractionComponent_SetInventory::ReturnValue' has a wrong offset!");

// Function JP.ShopInteractionComponent.ShowDeliveryConfirmationPrompt
// 0x0008 (0x0008 - 0x0000)
struct ShopInteractionComponent_ShowDeliveryConfirmationPrompt final
{
public:
	class UItemDefinition*                        ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopInteractionComponent_ShowDeliveryConfirmationPrompt) == 0x000008, "Wrong alignment on ShopInteractionComponent_ShowDeliveryConfirmationPrompt");
static_assert(sizeof(ShopInteractionComponent_ShowDeliveryConfirmationPrompt) == 0x000008, "Wrong size on ShopInteractionComponent_ShowDeliveryConfirmationPrompt");
static_assert(offsetof(ShopInteractionComponent_ShowDeliveryConfirmationPrompt, ItemDefinition) == 0x000000, "Member 'ShopInteractionComponent_ShowDeliveryConfirmationPrompt::ItemDefinition' has a wrong offset!");

// Function JP.ShopManagerComponent.GetShopItemViewModel
// 0x00B0 (0x00B0 - 0x0000)
struct ShopManagerComponent_GetShopItemViewModel final
{
public:
	TSoftObjectPtr<class UItemDefinition>         ItemDefinition;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShopItemViewModel                     ReturnValue;                                       // 0x0030(0x0080)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopManagerComponent_GetShopItemViewModel) == 0x000008, "Wrong alignment on ShopManagerComponent_GetShopItemViewModel");
static_assert(sizeof(ShopManagerComponent_GetShopItemViewModel) == 0x0000B0, "Wrong size on ShopManagerComponent_GetShopItemViewModel");
static_assert(offsetof(ShopManagerComponent_GetShopItemViewModel, ItemDefinition) == 0x000000, "Member 'ShopManagerComponent_GetShopItemViewModel::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ShopManagerComponent_GetShopItemViewModel, TeamId) == 0x000028, "Member 'ShopManagerComponent_GetShopItemViewModel::TeamId' has a wrong offset!");
static_assert(offsetof(ShopManagerComponent_GetShopItemViewModel, ReturnValue) == 0x000030, "Member 'ShopManagerComponent_GetShopItemViewModel::ReturnValue' has a wrong offset!");

// Function JP.ShopManagerComponent.GetTeamShopItems
// 0x0018 (0x0018 - 0x0000)
struct ShopManagerComponent_GetTeamShopItems final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FShopItemViewModel>             ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopManagerComponent_GetTeamShopItems) == 0x000008, "Wrong alignment on ShopManagerComponent_GetTeamShopItems");
static_assert(sizeof(ShopManagerComponent_GetTeamShopItems) == 0x000018, "Wrong size on ShopManagerComponent_GetTeamShopItems");
static_assert(offsetof(ShopManagerComponent_GetTeamShopItems, TeamId) == 0x000000, "Member 'ShopManagerComponent_GetTeamShopItems::TeamId' has a wrong offset!");
static_assert(offsetof(ShopManagerComponent_GetTeamShopItems, ReturnValue) == 0x000008, "Member 'ShopManagerComponent_GetTeamShopItems::ReturnValue' has a wrong offset!");

// Function JP.ShopManagerComponent.ReactToShopItemChangeTeam1
// 0x0080 (0x0080 - 0x0000)
struct ShopManagerComponent_ReactToShopItemChangeTeam1 final
{
public:
	struct FShopItemViewModel                     ShopItemViewModel;                                 // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopManagerComponent_ReactToShopItemChangeTeam1) == 0x000008, "Wrong alignment on ShopManagerComponent_ReactToShopItemChangeTeam1");
static_assert(sizeof(ShopManagerComponent_ReactToShopItemChangeTeam1) == 0x000080, "Wrong size on ShopManagerComponent_ReactToShopItemChangeTeam1");
static_assert(offsetof(ShopManagerComponent_ReactToShopItemChangeTeam1, ShopItemViewModel) == 0x000000, "Member 'ShopManagerComponent_ReactToShopItemChangeTeam1::ShopItemViewModel' has a wrong offset!");

// Function JP.ShopManagerComponent.ReactToShopItemChangeTeam2
// 0x0080 (0x0080 - 0x0000)
struct ShopManagerComponent_ReactToShopItemChangeTeam2 final
{
public:
	struct FShopItemViewModel                     ShopItemViewModel;                                 // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopManagerComponent_ReactToShopItemChangeTeam2) == 0x000008, "Wrong alignment on ShopManagerComponent_ReactToShopItemChangeTeam2");
static_assert(sizeof(ShopManagerComponent_ReactToShopItemChangeTeam2) == 0x000080, "Wrong size on ShopManagerComponent_ReactToShopItemChangeTeam2");
static_assert(offsetof(ShopManagerComponent_ReactToShopItemChangeTeam2, ShopItemViewModel) == 0x000000, "Member 'ShopManagerComponent_ReactToShopItemChangeTeam2::ShopItemViewModel' has a wrong offset!");

// Function JP.ShopManagerComponent.TutorialChangeAllItemsEnabled
// 0x0002 (0x0002 - 0x0000)
struct ShopManagerComponent_TutorialChangeAllItemsEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopManagerComponent_TutorialChangeAllItemsEnabled) == 0x000001, "Wrong alignment on ShopManagerComponent_TutorialChangeAllItemsEnabled");
static_assert(sizeof(ShopManagerComponent_TutorialChangeAllItemsEnabled) == 0x000002, "Wrong size on ShopManagerComponent_TutorialChangeAllItemsEnabled");
static_assert(offsetof(ShopManagerComponent_TutorialChangeAllItemsEnabled, IsEnabled) == 0x000000, "Member 'ShopManagerComponent_TutorialChangeAllItemsEnabled::IsEnabled' has a wrong offset!");
static_assert(offsetof(ShopManagerComponent_TutorialChangeAllItemsEnabled, TeamId) == 0x000001, "Member 'ShopManagerComponent_TutorialChangeAllItemsEnabled::TeamId' has a wrong offset!");

// Function JP.ShopManagerComponent.TutorialChangeItemEnabled
// 0x0030 (0x0030 - 0x0000)
struct ShopManagerComponent_TutorialChangeItemEnabled final
{
public:
	TSoftObjectPtr<class UItemDefinition>         ItemDefinition;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShopManagerComponent_TutorialChangeItemEnabled) == 0x000008, "Wrong alignment on ShopManagerComponent_TutorialChangeItemEnabled");
static_assert(sizeof(ShopManagerComponent_TutorialChangeItemEnabled) == 0x000030, "Wrong size on ShopManagerComponent_TutorialChangeItemEnabled");
static_assert(offsetof(ShopManagerComponent_TutorialChangeItemEnabled, ItemDefinition) == 0x000000, "Member 'ShopManagerComponent_TutorialChangeItemEnabled::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ShopManagerComponent_TutorialChangeItemEnabled, IsEnabled) == 0x000028, "Member 'ShopManagerComponent_TutorialChangeItemEnabled::IsEnabled' has a wrong offset!");
static_assert(offsetof(ShopManagerComponent_TutorialChangeItemEnabled, TeamId) == 0x000029, "Member 'ShopManagerComponent_TutorialChangeItemEnabled::TeamId' has a wrong offset!");

// Function JP.ShopManagerComponent.TutorialChangeUpgradeEnabled
// 0x0002 (0x0002 - 0x0000)
struct ShopManagerComponent_TutorialChangeUpgradeEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShopItemCategory                             Category;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopManagerComponent_TutorialChangeUpgradeEnabled) == 0x000001, "Wrong alignment on ShopManagerComponent_TutorialChangeUpgradeEnabled");
static_assert(sizeof(ShopManagerComponent_TutorialChangeUpgradeEnabled) == 0x000002, "Wrong size on ShopManagerComponent_TutorialChangeUpgradeEnabled");
static_assert(offsetof(ShopManagerComponent_TutorialChangeUpgradeEnabled, IsEnabled) == 0x000000, "Member 'ShopManagerComponent_TutorialChangeUpgradeEnabled::IsEnabled' has a wrong offset!");
static_assert(offsetof(ShopManagerComponent_TutorialChangeUpgradeEnabled, Category) == 0x000001, "Member 'ShopManagerComponent_TutorialChangeUpgradeEnabled::Category' has a wrong offset!");

// Function JP.ShopManagerComponent.UpdateShopViewModelGarageTier
// 0x0001 (0x0001 - 0x0000)
struct ShopManagerComponent_UpdateShopViewModelGarageTier final
{
public:
	uint8                                         GarageTier;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopManagerComponent_UpdateShopViewModelGarageTier) == 0x000001, "Wrong alignment on ShopManagerComponent_UpdateShopViewModelGarageTier");
static_assert(sizeof(ShopManagerComponent_UpdateShopViewModelGarageTier) == 0x000001, "Wrong size on ShopManagerComponent_UpdateShopViewModelGarageTier");
static_assert(offsetof(ShopManagerComponent_UpdateShopViewModelGarageTier, GarageTier) == 0x000000, "Member 'ShopManagerComponent_UpdateShopViewModelGarageTier::GarageTier' has a wrong offset!");

// Function JP.ShopManagerComponent.UpdateShopViewModelHouseLevel
// 0x0001 (0x0001 - 0x0000)
struct ShopManagerComponent_UpdateShopViewModelHouseLevel final
{
public:
	uint8                                         HouseLevel;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopManagerComponent_UpdateShopViewModelHouseLevel) == 0x000001, "Wrong alignment on ShopManagerComponent_UpdateShopViewModelHouseLevel");
static_assert(sizeof(ShopManagerComponent_UpdateShopViewModelHouseLevel) == 0x000001, "Wrong size on ShopManagerComponent_UpdateShopViewModelHouseLevel");
static_assert(offsetof(ShopManagerComponent_UpdateShopViewModelHouseLevel, HouseLevel) == 0x000000, "Member 'ShopManagerComponent_UpdateShopViewModelHouseLevel::HouseLevel' has a wrong offset!");

// Function JP.ShopManagerComponent.UpdateShopViewModelKitchenTier
// 0x0001 (0x0001 - 0x0000)
struct ShopManagerComponent_UpdateShopViewModelKitchenTier final
{
public:
	uint8                                         KitchenTier;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopManagerComponent_UpdateShopViewModelKitchenTier) == 0x000001, "Wrong alignment on ShopManagerComponent_UpdateShopViewModelKitchenTier");
static_assert(sizeof(ShopManagerComponent_UpdateShopViewModelKitchenTier) == 0x000001, "Wrong size on ShopManagerComponent_UpdateShopViewModelKitchenTier");
static_assert(offsetof(ShopManagerComponent_UpdateShopViewModelKitchenTier, KitchenTier) == 0x000000, "Member 'ShopManagerComponent_UpdateShopViewModelKitchenTier::KitchenTier' has a wrong offset!");

// Function JP.ShopManagerComponent.UpdateShopViewModelPottingBenchTier
// 0x0001 (0x0001 - 0x0000)
struct ShopManagerComponent_UpdateShopViewModelPottingBenchTier final
{
public:
	uint8                                         PottingBenchTier;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopManagerComponent_UpdateShopViewModelPottingBenchTier) == 0x000001, "Wrong alignment on ShopManagerComponent_UpdateShopViewModelPottingBenchTier");
static_assert(sizeof(ShopManagerComponent_UpdateShopViewModelPottingBenchTier) == 0x000001, "Wrong size on ShopManagerComponent_UpdateShopViewModelPottingBenchTier");
static_assert(offsetof(ShopManagerComponent_UpdateShopViewModelPottingBenchTier, PottingBenchTier) == 0x000000, "Member 'ShopManagerComponent_UpdateShopViewModelPottingBenchTier::PottingBenchTier' has a wrong offset!");

// Function JP.ShopWidgetItemEntry.GetButton
// 0x0008 (0x0008 - 0x0000)
struct ShopWidgetItemEntry_GetButton final
{
public:
	class UButton*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopWidgetItemEntry_GetButton) == 0x000008, "Wrong alignment on ShopWidgetItemEntry_GetButton");
static_assert(sizeof(ShopWidgetItemEntry_GetButton) == 0x000008, "Wrong size on ShopWidgetItemEntry_GetButton");
static_assert(offsetof(ShopWidgetItemEntry_GetButton, ReturnValue) == 0x000000, "Member 'ShopWidgetItemEntry_GetButton::ReturnValue' has a wrong offset!");

// Function JP.ShopWidgetTier.InitializeWidget
// 0x0002 (0x0002 - 0x0000)
struct ShopWidgetTier_InitializeWidget final
{
public:
	EShopItemCategory                             InCategory;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InShopTier;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShopWidgetTier_InitializeWidget) == 0x000001, "Wrong alignment on ShopWidgetTier_InitializeWidget");
static_assert(sizeof(ShopWidgetTier_InitializeWidget) == 0x000002, "Wrong size on ShopWidgetTier_InitializeWidget");
static_assert(offsetof(ShopWidgetTier_InitializeWidget, InCategory) == 0x000000, "Member 'ShopWidgetTier_InitializeWidget::InCategory' has a wrong offset!");
static_assert(offsetof(ShopWidgetTier_InitializeWidget, InShopTier) == 0x000001, "Member 'ShopWidgetTier_InitializeWidget::InShopTier' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.AcceptPartyInvite
// 0x0020 (0x0020 - 0x0000)
struct SocialGameInstanceSubsystem_AcceptPartyInvite final
{
public:
	struct FPartyInvite                           InviteToAccept;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_AcceptPartyInvite) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_AcceptPartyInvite");
static_assert(sizeof(SocialGameInstanceSubsystem_AcceptPartyInvite) == 0x000020, "Wrong size on SocialGameInstanceSubsystem_AcceptPartyInvite");
static_assert(offsetof(SocialGameInstanceSubsystem_AcceptPartyInvite, InviteToAccept) == 0x000000, "Member 'SocialGameInstanceSubsystem_AcceptPartyInvite::InviteToAccept' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.BlockPlayer
// 0x0008 (0x0008 - 0x0000)
struct SocialGameInstanceSubsystem_BlockPlayer final
{
public:
	const class UOnlineServicesUserBase*          User;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_BlockPlayer) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_BlockPlayer");
static_assert(sizeof(SocialGameInstanceSubsystem_BlockPlayer) == 0x000008, "Wrong size on SocialGameInstanceSubsystem_BlockPlayer");
static_assert(offsetof(SocialGameInstanceSubsystem_BlockPlayer, User) == 0x000000, "Member 'SocialGameInstanceSubsystem_BlockPlayer::User' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.CanUseSocials
// 0x0001 (0x0001 - 0x0000)
struct SocialGameInstanceSubsystem_CanUseSocials final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_CanUseSocials) == 0x000001, "Wrong alignment on SocialGameInstanceSubsystem_CanUseSocials");
static_assert(sizeof(SocialGameInstanceSubsystem_CanUseSocials) == 0x000001, "Wrong size on SocialGameInstanceSubsystem_CanUseSocials");
static_assert(offsetof(SocialGameInstanceSubsystem_CanUseSocials, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_CanUseSocials::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.DeclinePartyInvite
// 0x0020 (0x0020 - 0x0000)
struct SocialGameInstanceSubsystem_DeclinePartyInvite final
{
public:
	struct FPartyInvite                           Invite;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_DeclinePartyInvite) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_DeclinePartyInvite");
static_assert(sizeof(SocialGameInstanceSubsystem_DeclinePartyInvite) == 0x000020, "Wrong size on SocialGameInstanceSubsystem_DeclinePartyInvite");
static_assert(offsetof(SocialGameInstanceSubsystem_DeclinePartyInvite, Invite) == 0x000000, "Member 'SocialGameInstanceSubsystem_DeclinePartyInvite::Invite' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetBlockedPlayers
// 0x0010 (0x0010 - 0x0000)
struct SocialGameInstanceSubsystem_GetBlockedPlayers final
{
public:
	TArray<class UOnlineServicesBlockedPlayer*>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetBlockedPlayers) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_GetBlockedPlayers");
static_assert(sizeof(SocialGameInstanceSubsystem_GetBlockedPlayers) == 0x000010, "Wrong size on SocialGameInstanceSubsystem_GetBlockedPlayers");
static_assert(offsetof(SocialGameInstanceSubsystem_GetBlockedPlayers, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetBlockedPlayers::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetFriends
// 0x0010 (0x0010 - 0x0000)
struct SocialGameInstanceSubsystem_GetFriends final
{
public:
	TArray<class UOnlineServicesFriend*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetFriends) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_GetFriends");
static_assert(sizeof(SocialGameInstanceSubsystem_GetFriends) == 0x000010, "Wrong size on SocialGameInstanceSubsystem_GetFriends");
static_assert(offsetof(SocialGameInstanceSubsystem_GetFriends, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetFriends::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetMaxNumPartyMembers
// 0x0004 (0x0004 - 0x0000)
struct SocialGameInstanceSubsystem_GetMaxNumPartyMembers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetMaxNumPartyMembers) == 0x000004, "Wrong alignment on SocialGameInstanceSubsystem_GetMaxNumPartyMembers");
static_assert(sizeof(SocialGameInstanceSubsystem_GetMaxNumPartyMembers) == 0x000004, "Wrong size on SocialGameInstanceSubsystem_GetMaxNumPartyMembers");
static_assert(offsetof(SocialGameInstanceSubsystem_GetMaxNumPartyMembers, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetMaxNumPartyMembers::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetNumFriendsPlayingJP
// 0x0004 (0x0004 - 0x0000)
struct SocialGameInstanceSubsystem_GetNumFriendsPlayingJP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetNumFriendsPlayingJP) == 0x000004, "Wrong alignment on SocialGameInstanceSubsystem_GetNumFriendsPlayingJP");
static_assert(sizeof(SocialGameInstanceSubsystem_GetNumFriendsPlayingJP) == 0x000004, "Wrong size on SocialGameInstanceSubsystem_GetNumFriendsPlayingJP");
static_assert(offsetof(SocialGameInstanceSubsystem_GetNumFriendsPlayingJP, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetNumFriendsPlayingJP::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetNumOnlineFriends
// 0x0004 (0x0004 - 0x0000)
struct SocialGameInstanceSubsystem_GetNumOnlineFriends final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetNumOnlineFriends) == 0x000004, "Wrong alignment on SocialGameInstanceSubsystem_GetNumOnlineFriends");
static_assert(sizeof(SocialGameInstanceSubsystem_GetNumOnlineFriends) == 0x000004, "Wrong size on SocialGameInstanceSubsystem_GetNumOnlineFriends");
static_assert(offsetof(SocialGameInstanceSubsystem_GetNumOnlineFriends, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetNumOnlineFriends::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct SocialGameInstanceSubsystem_GetPartyMembers final
{
public:
	TArray<class UOnlineServicesPartyMember*>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetPartyMembers) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_GetPartyMembers");
static_assert(sizeof(SocialGameInstanceSubsystem_GetPartyMembers) == 0x000010, "Wrong size on SocialGameInstanceSubsystem_GetPartyMembers");
static_assert(offsetof(SocialGameInstanceSubsystem_GetPartyMembers, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetPartyMembers::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetRecentPlayers
// 0x0010 (0x0010 - 0x0000)
struct SocialGameInstanceSubsystem_GetRecentPlayers final
{
public:
	TArray<class UOnlineServicesRecentPlayer*>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetRecentPlayers) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_GetRecentPlayers");
static_assert(sizeof(SocialGameInstanceSubsystem_GetRecentPlayers) == 0x000010, "Wrong size on SocialGameInstanceSubsystem_GetRecentPlayers");
static_assert(offsetof(SocialGameInstanceSubsystem_GetRecentPlayers, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetRecentPlayers::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetSourceUserAvatar
// 0x0030 (0x0030 - 0x0000)
struct SocialGameInstanceSubsystem_GetSourceUserAvatar final
{
public:
	struct FPartyInvite                           PartyInvite;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(TSoftObjectPtr<class UTexture> Avatar)> Callback;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetSourceUserAvatar) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_GetSourceUserAvatar");
static_assert(sizeof(SocialGameInstanceSubsystem_GetSourceUserAvatar) == 0x000030, "Wrong size on SocialGameInstanceSubsystem_GetSourceUserAvatar");
static_assert(offsetof(SocialGameInstanceSubsystem_GetSourceUserAvatar, PartyInvite) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetSourceUserAvatar::PartyInvite' has a wrong offset!");
static_assert(offsetof(SocialGameInstanceSubsystem_GetSourceUserAvatar, Callback) == 0x000020, "Member 'SocialGameInstanceSubsystem_GetSourceUserAvatar::Callback' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetUserAvatar
// 0x0018 (0x0018 - 0x0000)
struct SocialGameInstanceSubsystem_GetUserAvatar final
{
public:
	const class UOnlineServicesUserBase*          User;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(TSoftObjectPtr<class UTexture> Avatar)> Callback;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetUserAvatar) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_GetUserAvatar");
static_assert(sizeof(SocialGameInstanceSubsystem_GetUserAvatar) == 0x000018, "Wrong size on SocialGameInstanceSubsystem_GetUserAvatar");
static_assert(offsetof(SocialGameInstanceSubsystem_GetUserAvatar, User) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetUserAvatar::User' has a wrong offset!");
static_assert(offsetof(SocialGameInstanceSubsystem_GetUserAvatar, Callback) == 0x000008, "Member 'SocialGameInstanceSubsystem_GetUserAvatar::Callback' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.HasPostMatchLeaderLeftCountdownStarted
// 0x0001 (0x0001 - 0x0000)
struct SocialGameInstanceSubsystem_HasPostMatchLeaderLeftCountdownStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_HasPostMatchLeaderLeftCountdownStarted) == 0x000001, "Wrong alignment on SocialGameInstanceSubsystem_HasPostMatchLeaderLeftCountdownStarted");
static_assert(sizeof(SocialGameInstanceSubsystem_HasPostMatchLeaderLeftCountdownStarted) == 0x000001, "Wrong size on SocialGameInstanceSubsystem_HasPostMatchLeaderLeftCountdownStarted");
static_assert(offsetof(SocialGameInstanceSubsystem_HasPostMatchLeaderLeftCountdownStarted, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_HasPostMatchLeaderLeftCountdownStarted::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.InviteToParty
// 0x0008 (0x0008 - 0x0000)
struct SocialGameInstanceSubsystem_InviteToParty final
{
public:
	const class UOnlineServicesUserBase*          User;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_InviteToParty) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_InviteToParty");
static_assert(sizeof(SocialGameInstanceSubsystem_InviteToParty) == 0x000008, "Wrong size on SocialGameInstanceSubsystem_InviteToParty");
static_assert(offsetof(SocialGameInstanceSubsystem_InviteToParty, User) == 0x000000, "Member 'SocialGameInstanceSubsystem_InviteToParty::User' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.IsPartyFull
// 0x0001 (0x0001 - 0x0000)
struct SocialGameInstanceSubsystem_IsPartyFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_IsPartyFull) == 0x000001, "Wrong alignment on SocialGameInstanceSubsystem_IsPartyFull");
static_assert(sizeof(SocialGameInstanceSubsystem_IsPartyFull) == 0x000001, "Wrong size on SocialGameInstanceSubsystem_IsPartyFull");
static_assert(offsetof(SocialGameInstanceSubsystem_IsPartyFull, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_IsPartyFull::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.IsPartyLeaderWithMembers
// 0x0001 (0x0001 - 0x0000)
struct SocialGameInstanceSubsystem_IsPartyLeaderWithMembers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_IsPartyLeaderWithMembers) == 0x000001, "Wrong alignment on SocialGameInstanceSubsystem_IsPartyLeaderWithMembers");
static_assert(sizeof(SocialGameInstanceSubsystem_IsPartyLeaderWithMembers) == 0x000001, "Wrong size on SocialGameInstanceSubsystem_IsPartyLeaderWithMembers");
static_assert(offsetof(SocialGameInstanceSubsystem_IsPartyLeaderWithMembers, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_IsPartyLeaderWithMembers::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.KickPartyMember
// 0x0008 (0x0008 - 0x0000)
struct SocialGameInstanceSubsystem_KickPartyMember final
{
public:
	const class UOnlineServicesPartyMember*       PartyMember;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_KickPartyMember) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_KickPartyMember");
static_assert(sizeof(SocialGameInstanceSubsystem_KickPartyMember) == 0x000008, "Wrong size on SocialGameInstanceSubsystem_KickPartyMember");
static_assert(offsetof(SocialGameInstanceSubsystem_KickPartyMember, PartyMember) == 0x000000, "Member 'SocialGameInstanceSubsystem_KickPartyMember::PartyMember' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.PromotePartyMember
// 0x0008 (0x0008 - 0x0000)
struct SocialGameInstanceSubsystem_PromotePartyMember final
{
public:
	const class UOnlineServicesPartyMember*       PartyMember;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_PromotePartyMember) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_PromotePartyMember");
static_assert(sizeof(SocialGameInstanceSubsystem_PromotePartyMember) == 0x000008, "Wrong size on SocialGameInstanceSubsystem_PromotePartyMember");
static_assert(offsetof(SocialGameInstanceSubsystem_PromotePartyMember, PartyMember) == 0x000000, "Member 'SocialGameInstanceSubsystem_PromotePartyMember::PartyMember' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.UnblockPlayer
// 0x0008 (0x0008 - 0x0000)
struct SocialGameInstanceSubsystem_UnblockPlayer final
{
public:
	const class UOnlineServicesUserBase*          User;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_UnblockPlayer) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_UnblockPlayer");
static_assert(sizeof(SocialGameInstanceSubsystem_UnblockPlayer) == 0x000008, "Wrong size on SocialGameInstanceSubsystem_UnblockPlayer");
static_assert(offsetof(SocialGameInstanceSubsystem_UnblockPlayer, User) == 0x000000, "Member 'SocialGameInstanceSubsystem_UnblockPlayer::User' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetCachedNetworkFailureAsString
// 0x0010 (0x0010 - 0x0000)
struct SocialGameInstanceSubsystem_GetCachedNetworkFailureAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetCachedNetworkFailureAsString) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_GetCachedNetworkFailureAsString");
static_assert(sizeof(SocialGameInstanceSubsystem_GetCachedNetworkFailureAsString) == 0x000010, "Wrong size on SocialGameInstanceSubsystem_GetCachedNetworkFailureAsString");
static_assert(offsetof(SocialGameInstanceSubsystem_GetCachedNetworkFailureAsString, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetCachedNetworkFailureAsString::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetExistingPartyInvites
// 0x0010 (0x0010 - 0x0000)
struct SocialGameInstanceSubsystem_GetExistingPartyInvites final
{
public:
	TArray<struct FPartyInvite>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetExistingPartyInvites) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_GetExistingPartyInvites");
static_assert(sizeof(SocialGameInstanceSubsystem_GetExistingPartyInvites) == 0x000010, "Wrong size on SocialGameInstanceSubsystem_GetExistingPartyInvites");
static_assert(offsetof(SocialGameInstanceSubsystem_GetExistingPartyInvites, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetExistingPartyInvites::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.GetPostMatchLeaderLeftLeaveTime
// 0x0004 (0x0004 - 0x0000)
struct SocialGameInstanceSubsystem_GetPostMatchLeaderLeftLeaveTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_GetPostMatchLeaderLeftLeaveTime) == 0x000004, "Wrong alignment on SocialGameInstanceSubsystem_GetPostMatchLeaderLeftLeaveTime");
static_assert(sizeof(SocialGameInstanceSubsystem_GetPostMatchLeaderLeftLeaveTime) == 0x000004, "Wrong size on SocialGameInstanceSubsystem_GetPostMatchLeaderLeftLeaveTime");
static_assert(offsetof(SocialGameInstanceSubsystem_GetPostMatchLeaderLeftLeaveTime, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_GetPostMatchLeaderLeftLeaveTime::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.HasCachedNetworkFailure
// 0x0001 (0x0001 - 0x0000)
struct SocialGameInstanceSubsystem_HasCachedNetworkFailure final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_HasCachedNetworkFailure) == 0x000001, "Wrong alignment on SocialGameInstanceSubsystem_HasCachedNetworkFailure");
static_assert(sizeof(SocialGameInstanceSubsystem_HasCachedNetworkFailure) == 0x000001, "Wrong size on SocialGameInstanceSubsystem_HasCachedNetworkFailure");
static_assert(offsetof(SocialGameInstanceSubsystem_HasCachedNetworkFailure, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_HasCachedNetworkFailure::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.IsInParty
// 0x0001 (0x0001 - 0x0000)
struct SocialGameInstanceSubsystem_IsInParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_IsInParty) == 0x000001, "Wrong alignment on SocialGameInstanceSubsystem_IsInParty");
static_assert(sizeof(SocialGameInstanceSubsystem_IsInParty) == 0x000001, "Wrong size on SocialGameInstanceSubsystem_IsInParty");
static_assert(offsetof(SocialGameInstanceSubsystem_IsInParty, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_IsInParty::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.IsLocalUserPartyLeader
// 0x0001 (0x0001 - 0x0000)
struct SocialGameInstanceSubsystem_IsLocalUserPartyLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialGameInstanceSubsystem_IsLocalUserPartyLeader) == 0x000001, "Wrong alignment on SocialGameInstanceSubsystem_IsLocalUserPartyLeader");
static_assert(sizeof(SocialGameInstanceSubsystem_IsLocalUserPartyLeader) == 0x000001, "Wrong size on SocialGameInstanceSubsystem_IsLocalUserPartyLeader");
static_assert(offsetof(SocialGameInstanceSubsystem_IsLocalUserPartyLeader, ReturnValue) == 0x000000, "Member 'SocialGameInstanceSubsystem_IsLocalUserPartyLeader::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.IsPartyMemberLeader
// 0x0010 (0x0010 - 0x0000)
struct SocialGameInstanceSubsystem_IsPartyMemberLeader final
{
public:
	const class UOnlineServicesPartyMember*       PartyMember;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SocialGameInstanceSubsystem_IsPartyMemberLeader) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_IsPartyMemberLeader");
static_assert(sizeof(SocialGameInstanceSubsystem_IsPartyMemberLeader) == 0x000010, "Wrong size on SocialGameInstanceSubsystem_IsPartyMemberLeader");
static_assert(offsetof(SocialGameInstanceSubsystem_IsPartyMemberLeader, PartyMember) == 0x000000, "Member 'SocialGameInstanceSubsystem_IsPartyMemberLeader::PartyMember' has a wrong offset!");
static_assert(offsetof(SocialGameInstanceSubsystem_IsPartyMemberLeader, ReturnValue) == 0x000008, "Member 'SocialGameInstanceSubsystem_IsPartyMemberLeader::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.TryGetCachedNetworkFailureAsTag
// 0x000C (0x000C - 0x0000)
struct SocialGameInstanceSubsystem_TryGetCachedNetworkFailureAsTag final
{
public:
	struct FGameplayTag                           NetworkFailureTag;                                 // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SocialGameInstanceSubsystem_TryGetCachedNetworkFailureAsTag) == 0x000004, "Wrong alignment on SocialGameInstanceSubsystem_TryGetCachedNetworkFailureAsTag");
static_assert(sizeof(SocialGameInstanceSubsystem_TryGetCachedNetworkFailureAsTag) == 0x00000C, "Wrong size on SocialGameInstanceSubsystem_TryGetCachedNetworkFailureAsTag");
static_assert(offsetof(SocialGameInstanceSubsystem_TryGetCachedNetworkFailureAsTag, NetworkFailureTag) == 0x000000, "Member 'SocialGameInstanceSubsystem_TryGetCachedNetworkFailureAsTag::NetworkFailureTag' has a wrong offset!");
static_assert(offsetof(SocialGameInstanceSubsystem_TryGetCachedNetworkFailureAsTag, ReturnValue) == 0x000008, "Member 'SocialGameInstanceSubsystem_TryGetCachedNetworkFailureAsTag::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.TryGetFollowLeaderNetworkFailureDescriptor
// 0x0020 (0x0020 - 0x0000)
struct SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor final
{
public:
	class FString                                 FailureString;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonGameDialogDescriptor*            Descriptor;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor");
static_assert(sizeof(SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor) == 0x000020, "Wrong size on SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor");
static_assert(offsetof(SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor, FailureString) == 0x000000, "Member 'SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor::FailureString' has a wrong offset!");
static_assert(offsetof(SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor, Descriptor) == 0x000010, "Member 'SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor::Descriptor' has a wrong offset!");
static_assert(offsetof(SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor, ReturnValue) == 0x000018, "Member 'SocialGameInstanceSubsystem_TryGetFollowLeaderNetworkFailureDescriptor::ReturnValue' has a wrong offset!");

// Function JP.SocialGameInstanceSubsystem.TryGetNetworkFailureTagDescriptor
// 0x0018 (0x0018 - 0x0000)
struct SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor final
{
public:
	struct FGameplayTag                           FailureTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonGameDialogDescriptor*            Descriptor;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor) == 0x000008, "Wrong alignment on SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor");
static_assert(sizeof(SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor) == 0x000018, "Wrong size on SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor");
static_assert(offsetof(SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor, FailureTag) == 0x000000, "Member 'SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor::FailureTag' has a wrong offset!");
static_assert(offsetof(SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor, Descriptor) == 0x000008, "Member 'SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor::Descriptor' has a wrong offset!");
static_assert(offsetof(SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor, ReturnValue) == 0x000010, "Member 'SocialGameInstanceSubsystem_TryGetNetworkFailureTagDescriptor::ReturnValue' has a wrong offset!");

// Function JP.SocialPartyInviteWidget.SetAvatar
// 0x0028 (0x0028 - 0x0000)
struct SocialPartyInviteWidget_SetAvatar final
{
public:
	TSoftObjectPtr<class UTexture>                InAvatar;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialPartyInviteWidget_SetAvatar) == 0x000008, "Wrong alignment on SocialPartyInviteWidget_SetAvatar");
static_assert(sizeof(SocialPartyInviteWidget_SetAvatar) == 0x000028, "Wrong size on SocialPartyInviteWidget_SetAvatar");
static_assert(offsetof(SocialPartyInviteWidget_SetAvatar, InAvatar) == 0x000000, "Member 'SocialPartyInviteWidget_SetAvatar::InAvatar' has a wrong offset!");

// Function JP.SocialPartyMemberInteractionWidget.SetPartyInfo
// 0x0003 (0x0003 - 0x0000)
struct SocialPartyMemberInteractionWidget_SetPartyInfo final
{
public:
	bool                                          bIsPartyOfOne;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalUser;                                      // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalUserPartyLeader;                           // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SocialPartyMemberInteractionWidget_SetPartyInfo) == 0x000001, "Wrong alignment on SocialPartyMemberInteractionWidget_SetPartyInfo");
static_assert(sizeof(SocialPartyMemberInteractionWidget_SetPartyInfo) == 0x000003, "Wrong size on SocialPartyMemberInteractionWidget_SetPartyInfo");
static_assert(offsetof(SocialPartyMemberInteractionWidget_SetPartyInfo, bIsPartyOfOne) == 0x000000, "Member 'SocialPartyMemberInteractionWidget_SetPartyInfo::bIsPartyOfOne' has a wrong offset!");
static_assert(offsetof(SocialPartyMemberInteractionWidget_SetPartyInfo, bIsLocalUser) == 0x000001, "Member 'SocialPartyMemberInteractionWidget_SetPartyInfo::bIsLocalUser' has a wrong offset!");
static_assert(offsetof(SocialPartyMemberInteractionWidget_SetPartyInfo, bIsLocalUserPartyLeader) == 0x000002, "Member 'SocialPartyMemberInteractionWidget_SetPartyInfo::bIsLocalUserPartyLeader' has a wrong offset!");

// Function JP.StaminaAttributeSetListener.OnStaminaChanged
// 0x0008 (0x0008 - 0x0000)
struct StaminaAttributeSetListener_OnStaminaChanged final
{
public:
	float                                         Stamina;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStamina;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaAttributeSetListener_OnStaminaChanged) == 0x000004, "Wrong alignment on StaminaAttributeSetListener_OnStaminaChanged");
static_assert(sizeof(StaminaAttributeSetListener_OnStaminaChanged) == 0x000008, "Wrong size on StaminaAttributeSetListener_OnStaminaChanged");
static_assert(offsetof(StaminaAttributeSetListener_OnStaminaChanged, Stamina) == 0x000000, "Member 'StaminaAttributeSetListener_OnStaminaChanged::Stamina' has a wrong offset!");
static_assert(offsetof(StaminaAttributeSetListener_OnStaminaChanged, MaxStamina) == 0x000004, "Member 'StaminaAttributeSetListener_OnStaminaChanged::MaxStamina' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnAgilityChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnAgilityChanged final
{
public:
	float                                         Agility;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnAgilityChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnAgilityChanged");
static_assert(sizeof(StatsAttributeSetListener_OnAgilityChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnAgilityChanged");
static_assert(offsetof(StatsAttributeSetListener_OnAgilityChanged, Agility) == 0x000000, "Member 'StatsAttributeSetListener_OnAgilityChanged::Agility' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnAgilityModifierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnAgilityModifierChanged final
{
public:
	float                                         Agility;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnAgilityModifierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnAgilityModifierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnAgilityModifierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnAgilityModifierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnAgilityModifierChanged, Agility) == 0x000000, "Member 'StatsAttributeSetListener_OnAgilityModifierChanged::Agility' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnArmorModifierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnArmorModifierChanged final
{
public:
	float                                         Armor;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnArmorModifierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnArmorModifierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnArmorModifierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnArmorModifierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnArmorModifierChanged, Armor) == 0x000000, "Member 'StatsAttributeSetListener_OnArmorModifierChanged::Armor' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnCritChanceChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnCritChanceChanged final
{
public:
	float                                         CritChance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnCritChanceChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnCritChanceChanged");
static_assert(sizeof(StatsAttributeSetListener_OnCritChanceChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnCritChanceChanged");
static_assert(offsetof(StatsAttributeSetListener_OnCritChanceChanged, CritChance) == 0x000000, "Member 'StatsAttributeSetListener_OnCritChanceChanged::CritChance' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnCritMultiplierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnCritMultiplierChanged final
{
public:
	float                                         CritMultiplier;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnCritMultiplierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnCritMultiplierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnCritMultiplierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnCritMultiplierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnCritMultiplierChanged, CritMultiplier) == 0x000000, "Member 'StatsAttributeSetListener_OnCritMultiplierChanged::CritMultiplier' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnEnduranceChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnEnduranceChanged final
{
public:
	float                                         Endurance;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnEnduranceChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnEnduranceChanged");
static_assert(sizeof(StatsAttributeSetListener_OnEnduranceChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnEnduranceChanged");
static_assert(offsetof(StatsAttributeSetListener_OnEnduranceChanged, Endurance) == 0x000000, "Member 'StatsAttributeSetListener_OnEnduranceChanged::Endurance' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnEnduranceModifierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnEnduranceModifierChanged final
{
public:
	float                                         Endurance;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnEnduranceModifierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnEnduranceModifierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnEnduranceModifierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnEnduranceModifierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnEnduranceModifierChanged, Endurance) == 0x000000, "Member 'StatsAttributeSetListener_OnEnduranceModifierChanged::Endurance' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnHealthChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnHealthChanged final
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnHealthChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnHealthChanged");
static_assert(sizeof(StatsAttributeSetListener_OnHealthChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnHealthChanged");
static_assert(offsetof(StatsAttributeSetListener_OnHealthChanged, Health) == 0x000000, "Member 'StatsAttributeSetListener_OnHealthChanged::Health' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnHealthModifierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnHealthModifierChanged final
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnHealthModifierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnHealthModifierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnHealthModifierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnHealthModifierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnHealthModifierChanged, Health) == 0x000000, "Member 'StatsAttributeSetListener_OnHealthModifierChanged::Health' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnLevelDamageModifierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnLevelDamageModifierChanged final
{
public:
	float                                         LevelDamageModifier;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnLevelDamageModifierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnLevelDamageModifierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnLevelDamageModifierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnLevelDamageModifierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnLevelDamageModifierChanged, LevelDamageModifier) == 0x000000, "Member 'StatsAttributeSetListener_OnLevelDamageModifierChanged::LevelDamageModifier' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnMeleeDamageModifierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnMeleeDamageModifierChanged final
{
public:
	float                                         MeleeDamageModifier;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnMeleeDamageModifierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnMeleeDamageModifierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnMeleeDamageModifierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnMeleeDamageModifierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnMeleeDamageModifierChanged, MeleeDamageModifier) == 0x000000, "Member 'StatsAttributeSetListener_OnMeleeDamageModifierChanged::MeleeDamageModifier' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnPlayerDamageMultiplierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnPlayerDamageMultiplierChanged final
{
public:
	float                                         PlayerDamage;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnPlayerDamageMultiplierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnPlayerDamageMultiplierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnPlayerDamageMultiplierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnPlayerDamageMultiplierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnPlayerDamageMultiplierChanged, PlayerDamage) == 0x000000, "Member 'StatsAttributeSetListener_OnPlayerDamageMultiplierChanged::PlayerDamage' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnRangedDamageModifierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnRangedDamageModifierChanged final
{
public:
	float                                         RangedDamageModifier;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnRangedDamageModifierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnRangedDamageModifierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnRangedDamageModifierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnRangedDamageModifierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnRangedDamageModifierChanged, RangedDamageModifier) == 0x000000, "Member 'StatsAttributeSetListener_OnRangedDamageModifierChanged::RangedDamageModifier' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnStrengthChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnStrengthChanged final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnStrengthChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnStrengthChanged");
static_assert(sizeof(StatsAttributeSetListener_OnStrengthChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnStrengthChanged");
static_assert(offsetof(StatsAttributeSetListener_OnStrengthChanged, Strength) == 0x000000, "Member 'StatsAttributeSetListener_OnStrengthChanged::Strength' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnStrengthModifierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnStrengthModifierChanged final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnStrengthModifierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnStrengthModifierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnStrengthModifierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnStrengthModifierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnStrengthModifierChanged, Strength) == 0x000000, "Member 'StatsAttributeSetListener_OnStrengthModifierChanged::Strength' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnSubtletyChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnSubtletyChanged final
{
public:
	float                                         Subtlety;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnSubtletyChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnSubtletyChanged");
static_assert(sizeof(StatsAttributeSetListener_OnSubtletyChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnSubtletyChanged");
static_assert(offsetof(StatsAttributeSetListener_OnSubtletyChanged, Subtlety) == 0x000000, "Member 'StatsAttributeSetListener_OnSubtletyChanged::Subtlety' has a wrong offset!");

// Function JP.StatsAttributeSetListener.OnSubtletyModifierChanged
// 0x0004 (0x0004 - 0x0000)
struct StatsAttributeSetListener_OnSubtletyModifierChanged final
{
public:
	float                                         Subtlety;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsAttributeSetListener_OnSubtletyModifierChanged) == 0x000004, "Wrong alignment on StatsAttributeSetListener_OnSubtletyModifierChanged");
static_assert(sizeof(StatsAttributeSetListener_OnSubtletyModifierChanged) == 0x000004, "Wrong size on StatsAttributeSetListener_OnSubtletyModifierChanged");
static_assert(offsetof(StatsAttributeSetListener_OnSubtletyModifierChanged, Subtlety) == 0x000000, "Member 'StatsAttributeSetListener_OnSubtletyModifierChanged::Subtlety' has a wrong offset!");

// Function JP.SubObjective.GetIsCompleted
// 0x0001 (0x0001 - 0x0000)
struct SubObjective_GetIsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubObjective_GetIsCompleted) == 0x000001, "Wrong alignment on SubObjective_GetIsCompleted");
static_assert(sizeof(SubObjective_GetIsCompleted) == 0x000001, "Wrong size on SubObjective_GetIsCompleted");
static_assert(offsetof(SubObjective_GetIsCompleted, ReturnValue) == 0x000000, "Member 'SubObjective_GetIsCompleted::ReturnValue' has a wrong offset!");

// Function JP.SubObjective.GetIsUnlocked
// 0x0001 (0x0001 - 0x0000)
struct SubObjective_GetIsUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubObjective_GetIsUnlocked) == 0x000001, "Wrong alignment on SubObjective_GetIsUnlocked");
static_assert(sizeof(SubObjective_GetIsUnlocked) == 0x000001, "Wrong size on SubObjective_GetIsUnlocked");
static_assert(offsetof(SubObjective_GetIsUnlocked, ReturnValue) == 0x000000, "Member 'SubObjective_GetIsUnlocked::ReturnValue' has a wrong offset!");

// Function JP.SubObjective.GetText
// 0x0010 (0x0010 - 0x0000)
struct SubObjective_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubObjective_GetText) == 0x000008, "Wrong alignment on SubObjective_GetText");
static_assert(sizeof(SubObjective_GetText) == 0x000010, "Wrong size on SubObjective_GetText");
static_assert(offsetof(SubObjective_GetText, ReturnValue) == 0x000000, "Member 'SubObjective_GetText::ReturnValue' has a wrong offset!");

// Function JP.SubObjective.OwningObjectiveDestroyed
// 0x0010 (0x0010 - 0x0000)
struct SubObjective_OwningObjectiveDestroyed final
{
public:
	struct FObjectiveAndOwningPlayer              Objective;                                         // 0x0000(0x0010)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubObjective_OwningObjectiveDestroyed) == 0x000008, "Wrong alignment on SubObjective_OwningObjectiveDestroyed");
static_assert(sizeof(SubObjective_OwningObjectiveDestroyed) == 0x000010, "Wrong size on SubObjective_OwningObjectiveDestroyed");
static_assert(offsetof(SubObjective_OwningObjectiveDestroyed, Objective) == 0x000000, "Member 'SubObjective_OwningObjectiveDestroyed::Objective' has a wrong offset!");

// Function JP.SubObjective.SetIsUnlocked
// 0x0001 (0x0001 - 0x0000)
struct SubObjective_SetIsUnlocked final
{
public:
	bool                                          IsUnlocked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubObjective_SetIsUnlocked) == 0x000001, "Wrong alignment on SubObjective_SetIsUnlocked");
static_assert(sizeof(SubObjective_SetIsUnlocked) == 0x000001, "Wrong size on SubObjective_SetIsUnlocked");
static_assert(offsetof(SubObjective_SetIsUnlocked, IsUnlocked) == 0x000000, "Member 'SubObjective_SetIsUnlocked::IsUnlocked' has a wrong offset!");

// Function JP.TaskSpawner.GetAllSpawnersSupportingTypes
// 0x0028 (0x0028 - 0x0000)
struct TaskSpawner_GetAllSpawnersSupportingTypes final
{
public:
	TArray<TSubclassOf<class AActor>>             SupportingTypes;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSpawner_GetAllSpawnersSupportingTypes) == 0x000008, "Wrong alignment on TaskSpawner_GetAllSpawnersSupportingTypes");
static_assert(sizeof(TaskSpawner_GetAllSpawnersSupportingTypes) == 0x000028, "Wrong size on TaskSpawner_GetAllSpawnersSupportingTypes");
static_assert(offsetof(TaskSpawner_GetAllSpawnersSupportingTypes, SupportingTypes) == 0x000000, "Member 'TaskSpawner_GetAllSpawnersSupportingTypes::SupportingTypes' has a wrong offset!");
static_assert(offsetof(TaskSpawner_GetAllSpawnersSupportingTypes, WorldContextObject) == 0x000010, "Member 'TaskSpawner_GetAllSpawnersSupportingTypes::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TaskSpawner_GetAllSpawnersSupportingTypes, ReturnValue) == 0x000018, "Member 'TaskSpawner_GetAllSpawnersSupportingTypes::ReturnValue' has a wrong offset!");

// Function JP.TaskSpawner.CanSpawnType
// 0x0010 (0x0010 - 0x0000)
struct TaskSpawner_CanSpawnType final
{
public:
	TSubclassOf<class AActor>                     TaskType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TaskSpawner_CanSpawnType) == 0x000008, "Wrong alignment on TaskSpawner_CanSpawnType");
static_assert(sizeof(TaskSpawner_CanSpawnType) == 0x000010, "Wrong size on TaskSpawner_CanSpawnType");
static_assert(offsetof(TaskSpawner_CanSpawnType, TaskType) == 0x000000, "Member 'TaskSpawner_CanSpawnType::TaskType' has a wrong offset!");
static_assert(offsetof(TaskSpawner_CanSpawnType, ReturnValue) == 0x000008, "Member 'TaskSpawner_CanSpawnType::ReturnValue' has a wrong offset!");

// Function JP.TaskSpawner.ClaimSpawner
// 0x0008 (0x0008 - 0x0000)
struct TaskSpawner_ClaimSpawner final
{
public:
	class AActor*                                 SpawnedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSpawner_ClaimSpawner) == 0x000008, "Wrong alignment on TaskSpawner_ClaimSpawner");
static_assert(sizeof(TaskSpawner_ClaimSpawner) == 0x000008, "Wrong size on TaskSpawner_ClaimSpawner");
static_assert(offsetof(TaskSpawner_ClaimSpawner, SpawnedActor) == 0x000000, "Member 'TaskSpawner_ClaimSpawner::SpawnedActor' has a wrong offset!");

// Function JP.TaskSpawner.GetFirstSpawnableType
// 0x0010 (0x0010 - 0x0000)
struct TaskSpawner_GetFirstSpawnableType final
{
public:
	TSubclassOf<class AActor>                     ParentType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSpawner_GetFirstSpawnableType) == 0x000008, "Wrong alignment on TaskSpawner_GetFirstSpawnableType");
static_assert(sizeof(TaskSpawner_GetFirstSpawnableType) == 0x000010, "Wrong size on TaskSpawner_GetFirstSpawnableType");
static_assert(offsetof(TaskSpawner_GetFirstSpawnableType, ParentType) == 0x000000, "Member 'TaskSpawner_GetFirstSpawnableType::ParentType' has a wrong offset!");
static_assert(offsetof(TaskSpawner_GetFirstSpawnableType, ReturnValue) == 0x000008, "Member 'TaskSpawner_GetFirstSpawnableType::ReturnValue' has a wrong offset!");

// Function JP.TaskSpawner.OnGroundsKeeperChanged
// 0x0010 (0x0010 - 0x0000)
struct TaskSpawner_OnGroundsKeeperChanged final
{
public:
	class AGroundsKeeper*                         OldGroundsKeeper;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGroundsKeeper*                         NewGroundskeeper;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSpawner_OnGroundsKeeperChanged) == 0x000008, "Wrong alignment on TaskSpawner_OnGroundsKeeperChanged");
static_assert(sizeof(TaskSpawner_OnGroundsKeeperChanged) == 0x000010, "Wrong size on TaskSpawner_OnGroundsKeeperChanged");
static_assert(offsetof(TaskSpawner_OnGroundsKeeperChanged, OldGroundsKeeper) == 0x000000, "Member 'TaskSpawner_OnGroundsKeeperChanged::OldGroundsKeeper' has a wrong offset!");
static_assert(offsetof(TaskSpawner_OnGroundsKeeperChanged, NewGroundskeeper) == 0x000008, "Member 'TaskSpawner_OnGroundsKeeperChanged::NewGroundskeeper' has a wrong offset!");

// Function JP.TaskSpawner.ReleaseSpawner
// 0x0008 (0x0008 - 0x0000)
struct TaskSpawner_ReleaseSpawner final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSpawner_ReleaseSpawner) == 0x000008, "Wrong alignment on TaskSpawner_ReleaseSpawner");
static_assert(sizeof(TaskSpawner_ReleaseSpawner) == 0x000008, "Wrong size on TaskSpawner_ReleaseSpawner");
static_assert(offsetof(TaskSpawner_ReleaseSpawner, DestroyedActor) == 0x000000, "Member 'TaskSpawner_ReleaseSpawner::DestroyedActor' has a wrong offset!");

// Function JP.TaskSpawner.SpawnTask
// 0x0010 (0x0010 - 0x0000)
struct TaskSpawner_SpawnTask final
{
public:
	TSubclassOf<class AActor>                     TaskType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSpawner_SpawnTask) == 0x000008, "Wrong alignment on TaskSpawner_SpawnTask");
static_assert(sizeof(TaskSpawner_SpawnTask) == 0x000010, "Wrong size on TaskSpawner_SpawnTask");
static_assert(offsetof(TaskSpawner_SpawnTask, TaskType) == 0x000000, "Member 'TaskSpawner_SpawnTask::TaskType' has a wrong offset!");
static_assert(offsetof(TaskSpawner_SpawnTask, ReturnValue) == 0x000008, "Member 'TaskSpawner_SpawnTask::ReturnValue' has a wrong offset!");

// Function JP.TaskSpawner.GetTaskTransform
// 0x0060 (0x0060 - 0x0000)
struct TaskSpawner_GetTaskTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSpawner_GetTaskTransform) == 0x000010, "Wrong alignment on TaskSpawner_GetTaskTransform");
static_assert(sizeof(TaskSpawner_GetTaskTransform) == 0x000060, "Wrong size on TaskSpawner_GetTaskTransform");
static_assert(offsetof(TaskSpawner_GetTaskTransform, ReturnValue) == 0x000000, "Member 'TaskSpawner_GetTaskTransform::ReturnValue' has a wrong offset!");

// Function JP.TeamAssignableInterface.SetTeamType
// 0x0001 (0x0001 - 0x0000)
struct TeamAssignableInterface_SetTeamType final
{
public:
	ETeamType                                     TeamType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamAssignableInterface_SetTeamType) == 0x000001, "Wrong alignment on TeamAssignableInterface_SetTeamType");
static_assert(sizeof(TeamAssignableInterface_SetTeamType) == 0x000001, "Wrong size on TeamAssignableInterface_SetTeamType");
static_assert(offsetof(TeamAssignableInterface_SetTeamType, TeamType) == 0x000000, "Member 'TeamAssignableInterface_SetTeamType::TeamType' has a wrong offset!");

// Function JP.TeamColoredStaticMeshActor.SetTeam
// 0x0038 (0x0038 - 0x0000)
struct TeamColoredStaticMeshActor_SetTeam final
{
public:
	struct FTeam                                  Team;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamColoredStaticMeshActor_SetTeam) == 0x000008, "Wrong alignment on TeamColoredStaticMeshActor_SetTeam");
static_assert(sizeof(TeamColoredStaticMeshActor_SetTeam) == 0x000038, "Wrong size on TeamColoredStaticMeshActor_SetTeam");
static_assert(offsetof(TeamColoredStaticMeshActor_SetTeam, Team) == 0x000000, "Member 'TeamColoredStaticMeshActor_SetTeam::Team' has a wrong offset!");

// Function JP.TeamScoreInterface.AddScore
// 0x0004 (0x0004 - 0x0000)
struct TeamScoreInterface_AddScore final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamScoreInterface_AddScore) == 0x000004, "Wrong alignment on TeamScoreInterface_AddScore");
static_assert(sizeof(TeamScoreInterface_AddScore) == 0x000004, "Wrong size on TeamScoreInterface_AddScore");
static_assert(offsetof(TeamScoreInterface_AddScore, Score) == 0x000000, "Member 'TeamScoreInterface_AddScore::Score' has a wrong offset!");

// Function JP.TeamScoreInterface.SubtractScore
// 0x0004 (0x0004 - 0x0000)
struct TeamScoreInterface_SubtractScore final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamScoreInterface_SubtractScore) == 0x000004, "Wrong alignment on TeamScoreInterface_SubtractScore");
static_assert(sizeof(TeamScoreInterface_SubtractScore) == 0x000004, "Wrong size on TeamScoreInterface_SubtractScore");
static_assert(offsetof(TeamScoreInterface_SubtractScore, Score) == 0x000000, "Member 'TeamScoreInterface_SubtractScore::Score' has a wrong offset!");

// Function JP.TeamUtilityLibrary.DoAllTeamsExist
// 0x0010 (0x0010 - 0x0000)
struct TeamUtilityLibrary_DoAllTeamsExist final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamUtilityLibrary_DoAllTeamsExist) == 0x000008, "Wrong alignment on TeamUtilityLibrary_DoAllTeamsExist");
static_assert(sizeof(TeamUtilityLibrary_DoAllTeamsExist) == 0x000010, "Wrong size on TeamUtilityLibrary_DoAllTeamsExist");
static_assert(offsetof(TeamUtilityLibrary_DoAllTeamsExist, WorldContextObject) == 0x000000, "Member 'TeamUtilityLibrary_DoAllTeamsExist::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_DoAllTeamsExist, ReturnValue) == 0x000008, "Member 'TeamUtilityLibrary_DoAllTeamsExist::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.DoesTeamExist
// 0x0018 (0x0018 - 0x0000)
struct TeamUtilityLibrary_DoesTeamExist final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamUtilityLibrary_DoesTeamExist) == 0x000008, "Wrong alignment on TeamUtilityLibrary_DoesTeamExist");
static_assert(sizeof(TeamUtilityLibrary_DoesTeamExist) == 0x000018, "Wrong size on TeamUtilityLibrary_DoesTeamExist");
static_assert(offsetof(TeamUtilityLibrary_DoesTeamExist, TeamId) == 0x000000, "Member 'TeamUtilityLibrary_DoesTeamExist::TeamId' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_DoesTeamExist, WorldContextObject) == 0x000008, "Member 'TeamUtilityLibrary_DoesTeamExist::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_DoesTeamExist, ReturnValue) == 0x000010, "Member 'TeamUtilityLibrary_DoesTeamExist::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetGroundsKeeperAtPoint
// 0x0040 (0x0040 - 0x0000)
struct TeamUtilityLibrary_GetGroundsKeeperAtPoint final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundTeam;                                        // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATeamVolume*>                    OverlappingTeamVolumes;                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AGroundsKeeper*                         ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamUtilityLibrary_GetGroundsKeeperAtPoint) == 0x000008, "Wrong alignment on TeamUtilityLibrary_GetGroundsKeeperAtPoint");
static_assert(sizeof(TeamUtilityLibrary_GetGroundsKeeperAtPoint) == 0x000040, "Wrong size on TeamUtilityLibrary_GetGroundsKeeperAtPoint");
static_assert(offsetof(TeamUtilityLibrary_GetGroundsKeeperAtPoint, WorldContextObject) == 0x000000, "Member 'TeamUtilityLibrary_GetGroundsKeeperAtPoint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetGroundsKeeperAtPoint, Point) == 0x000008, "Member 'TeamUtilityLibrary_GetGroundsKeeperAtPoint::Point' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetGroundsKeeperAtPoint, bFoundTeam) == 0x000020, "Member 'TeamUtilityLibrary_GetGroundsKeeperAtPoint::bFoundTeam' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetGroundsKeeperAtPoint, OverlappingTeamVolumes) == 0x000028, "Member 'TeamUtilityLibrary_GetGroundsKeeperAtPoint::OverlappingTeamVolumes' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetGroundsKeeperAtPoint, ReturnValue) == 0x000038, "Member 'TeamUtilityLibrary_GetGroundsKeeperAtPoint::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetGroundsKeeperByTeamId
// 0x0018 (0x0018 - 0x0000)
struct TeamUtilityLibrary_GetGroundsKeeperByTeamId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGroundsKeeper*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamUtilityLibrary_GetGroundsKeeperByTeamId) == 0x000008, "Wrong alignment on TeamUtilityLibrary_GetGroundsKeeperByTeamId");
static_assert(sizeof(TeamUtilityLibrary_GetGroundsKeeperByTeamId) == 0x000018, "Wrong size on TeamUtilityLibrary_GetGroundsKeeperByTeamId");
static_assert(offsetof(TeamUtilityLibrary_GetGroundsKeeperByTeamId, WorldContextObject) == 0x000000, "Member 'TeamUtilityLibrary_GetGroundsKeeperByTeamId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetGroundsKeeperByTeamId, TeamId) == 0x000008, "Member 'TeamUtilityLibrary_GetGroundsKeeperByTeamId::TeamId' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetGroundsKeeperByTeamId, ReturnValue) == 0x000010, "Member 'TeamUtilityLibrary_GetGroundsKeeperByTeamId::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetMinimumTeamID
// 0x0001 (0x0001 - 0x0000)
struct TeamUtilityLibrary_GetMinimumTeamID final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamUtilityLibrary_GetMinimumTeamID) == 0x000001, "Wrong alignment on TeamUtilityLibrary_GetMinimumTeamID");
static_assert(sizeof(TeamUtilityLibrary_GetMinimumTeamID) == 0x000001, "Wrong size on TeamUtilityLibrary_GetMinimumTeamID");
static_assert(offsetof(TeamUtilityLibrary_GetMinimumTeamID, ReturnValue) == 0x000000, "Member 'TeamUtilityLibrary_GetMinimumTeamID::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetNextTeamID
// 0x0002 (0x0002 - 0x0000)
struct TeamUtilityLibrary_GetNextTeamID final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamUtilityLibrary_GetNextTeamID) == 0x000001, "Wrong alignment on TeamUtilityLibrary_GetNextTeamID");
static_assert(sizeof(TeamUtilityLibrary_GetNextTeamID) == 0x000002, "Wrong size on TeamUtilityLibrary_GetNextTeamID");
static_assert(offsetof(TeamUtilityLibrary_GetNextTeamID, TeamId) == 0x000000, "Member 'TeamUtilityLibrary_GetNextTeamID::TeamId' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetNextTeamID, ReturnValue) == 0x000001, "Member 'TeamUtilityLibrary_GetNextTeamID::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetNumberOfActiveTeams
// 0x0010 (0x0010 - 0x0000)
struct TeamUtilityLibrary_GetNumberOfActiveTeams final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamUtilityLibrary_GetNumberOfActiveTeams) == 0x000008, "Wrong alignment on TeamUtilityLibrary_GetNumberOfActiveTeams");
static_assert(sizeof(TeamUtilityLibrary_GetNumberOfActiveTeams) == 0x000010, "Wrong size on TeamUtilityLibrary_GetNumberOfActiveTeams");
static_assert(offsetof(TeamUtilityLibrary_GetNumberOfActiveTeams, WorldContextObject) == 0x000000, "Member 'TeamUtilityLibrary_GetNumberOfActiveTeams::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetNumberOfActiveTeams, ReturnValue) == 0x000008, "Member 'TeamUtilityLibrary_GetNumberOfActiveTeams::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetPlayerControllersOfTeam
// 0x0020 (0x0020 - 0x0000)
struct TeamUtilityLibrary_GetPlayerControllersOfTeam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerControllerJP*>            ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamUtilityLibrary_GetPlayerControllersOfTeam) == 0x000008, "Wrong alignment on TeamUtilityLibrary_GetPlayerControllersOfTeam");
static_assert(sizeof(TeamUtilityLibrary_GetPlayerControllersOfTeam) == 0x000020, "Wrong size on TeamUtilityLibrary_GetPlayerControllersOfTeam");
static_assert(offsetof(TeamUtilityLibrary_GetPlayerControllersOfTeam, WorldContextObject) == 0x000000, "Member 'TeamUtilityLibrary_GetPlayerControllersOfTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetPlayerControllersOfTeam, TeamId) == 0x000008, "Member 'TeamUtilityLibrary_GetPlayerControllersOfTeam::TeamId' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetPlayerControllersOfTeam, ReturnValue) == 0x000010, "Member 'TeamUtilityLibrary_GetPlayerControllersOfTeam::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetPlayersOfTeam
// 0x0020 (0x0020 - 0x0000)
struct TeamUtilityLibrary_GetPlayersOfTeam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerStateJP*>                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamUtilityLibrary_GetPlayersOfTeam) == 0x000008, "Wrong alignment on TeamUtilityLibrary_GetPlayersOfTeam");
static_assert(sizeof(TeamUtilityLibrary_GetPlayersOfTeam) == 0x000020, "Wrong size on TeamUtilityLibrary_GetPlayersOfTeam");
static_assert(offsetof(TeamUtilityLibrary_GetPlayersOfTeam, WorldContextObject) == 0x000000, "Member 'TeamUtilityLibrary_GetPlayersOfTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetPlayersOfTeam, TeamId) == 0x000008, "Member 'TeamUtilityLibrary_GetPlayersOfTeam::TeamId' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetPlayersOfTeam, ReturnValue) == 0x000010, "Member 'TeamUtilityLibrary_GetPlayersOfTeam::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetTeam
// 0x0048 (0x0048 - 0x0000)
struct TeamUtilityLibrary_GetTeam final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTeam                                  ReturnValue;                                       // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamUtilityLibrary_GetTeam) == 0x000008, "Wrong alignment on TeamUtilityLibrary_GetTeam");
static_assert(sizeof(TeamUtilityLibrary_GetTeam) == 0x000048, "Wrong size on TeamUtilityLibrary_GetTeam");
static_assert(offsetof(TeamUtilityLibrary_GetTeam, TeamId) == 0x000000, "Member 'TeamUtilityLibrary_GetTeam::TeamId' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetTeam, WorldContextObject) == 0x000008, "Member 'TeamUtilityLibrary_GetTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetTeam, ReturnValue) == 0x000010, "Member 'TeamUtilityLibrary_GetTeam::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetTeamAtPoint
// 0x0068 (0x0068 - 0x0000)
struct TeamUtilityLibrary_GetTeamAtPoint final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundTeam;                                        // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TeamVolumeGameplayTag;                             // 0x0024(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  ReturnValue;                                       // 0x0030(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamUtilityLibrary_GetTeamAtPoint) == 0x000008, "Wrong alignment on TeamUtilityLibrary_GetTeamAtPoint");
static_assert(sizeof(TeamUtilityLibrary_GetTeamAtPoint) == 0x000068, "Wrong size on TeamUtilityLibrary_GetTeamAtPoint");
static_assert(offsetof(TeamUtilityLibrary_GetTeamAtPoint, WorldContextObject) == 0x000000, "Member 'TeamUtilityLibrary_GetTeamAtPoint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetTeamAtPoint, Point) == 0x000008, "Member 'TeamUtilityLibrary_GetTeamAtPoint::Point' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetTeamAtPoint, bFoundTeam) == 0x000020, "Member 'TeamUtilityLibrary_GetTeamAtPoint::bFoundTeam' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetTeamAtPoint, TeamVolumeGameplayTag) == 0x000024, "Member 'TeamUtilityLibrary_GetTeamAtPoint::TeamVolumeGameplayTag' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetTeamAtPoint, ReturnValue) == 0x000030, "Member 'TeamUtilityLibrary_GetTeamAtPoint::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetTeams
// 0x0018 (0x0018 - 0x0000)
struct TeamUtilityLibrary_GetTeams final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTeam>                          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamUtilityLibrary_GetTeams) == 0x000008, "Wrong alignment on TeamUtilityLibrary_GetTeams");
static_assert(sizeof(TeamUtilityLibrary_GetTeams) == 0x000018, "Wrong size on TeamUtilityLibrary_GetTeams");
static_assert(offsetof(TeamUtilityLibrary_GetTeams, WorldContextObject) == 0x000000, "Member 'TeamUtilityLibrary_GetTeams::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetTeams, ReturnValue) == 0x000008, "Member 'TeamUtilityLibrary_GetTeams::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.GetTeamWithLeastPlayersID
// 0x0010 (0x0010 - 0x0000)
struct TeamUtilityLibrary_GetTeamWithLeastPlayersID final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamUtilityLibrary_GetTeamWithLeastPlayersID) == 0x000008, "Wrong alignment on TeamUtilityLibrary_GetTeamWithLeastPlayersID");
static_assert(sizeof(TeamUtilityLibrary_GetTeamWithLeastPlayersID) == 0x000010, "Wrong size on TeamUtilityLibrary_GetTeamWithLeastPlayersID");
static_assert(offsetof(TeamUtilityLibrary_GetTeamWithLeastPlayersID, WorldContextObject) == 0x000000, "Member 'TeamUtilityLibrary_GetTeamWithLeastPlayersID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_GetTeamWithLeastPlayersID, ReturnValue) == 0x000008, "Member 'TeamUtilityLibrary_GetTeamWithLeastPlayersID::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.IsTeamIDValid
// 0x0002 (0x0002 - 0x0000)
struct TeamUtilityLibrary_IsTeamIDValid final
{
public:
	uint8                                         TeamId;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeamUtilityLibrary_IsTeamIDValid) == 0x000001, "Wrong alignment on TeamUtilityLibrary_IsTeamIDValid");
static_assert(sizeof(TeamUtilityLibrary_IsTeamIDValid) == 0x000002, "Wrong size on TeamUtilityLibrary_IsTeamIDValid");
static_assert(offsetof(TeamUtilityLibrary_IsTeamIDValid, TeamId) == 0x000000, "Member 'TeamUtilityLibrary_IsTeamIDValid::TeamId' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_IsTeamIDValid, ReturnValue) == 0x000001, "Member 'TeamUtilityLibrary_IsTeamIDValid::ReturnValue' has a wrong offset!");

// Function JP.TeamUtilityLibrary.IsTeamValid
// 0x0040 (0x0040 - 0x0000)
struct TeamUtilityLibrary_IsTeamValid final
{
public:
	struct FTeam                                  Team;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeamUtilityLibrary_IsTeamValid) == 0x000008, "Wrong alignment on TeamUtilityLibrary_IsTeamValid");
static_assert(sizeof(TeamUtilityLibrary_IsTeamValid) == 0x000040, "Wrong size on TeamUtilityLibrary_IsTeamValid");
static_assert(offsetof(TeamUtilityLibrary_IsTeamValid, Team) == 0x000000, "Member 'TeamUtilityLibrary_IsTeamValid::Team' has a wrong offset!");
static_assert(offsetof(TeamUtilityLibrary_IsTeamValid, ReturnValue) == 0x000038, "Member 'TeamUtilityLibrary_IsTeamValid::ReturnValue' has a wrong offset!");

// Function JP.TurretFunctionLibrary.GetOverlappingActorsWithInterface
// 0x0020 (0x0020 - 0x0000)
struct TurretFunctionLibrary_GetOverlappingActorsWithInterface final
{
public:
	class UPrimitiveComponent*                    OverlapComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class IInterface>                 InterfaceClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TurretFunctionLibrary_GetOverlappingActorsWithInterface) == 0x000008, "Wrong alignment on TurretFunctionLibrary_GetOverlappingActorsWithInterface");
static_assert(sizeof(TurretFunctionLibrary_GetOverlappingActorsWithInterface) == 0x000020, "Wrong size on TurretFunctionLibrary_GetOverlappingActorsWithInterface");
static_assert(offsetof(TurretFunctionLibrary_GetOverlappingActorsWithInterface, OverlapComponent) == 0x000000, "Member 'TurretFunctionLibrary_GetOverlappingActorsWithInterface::OverlapComponent' has a wrong offset!");
static_assert(offsetof(TurretFunctionLibrary_GetOverlappingActorsWithInterface, InterfaceClass) == 0x000008, "Member 'TurretFunctionLibrary_GetOverlappingActorsWithInterface::InterfaceClass' has a wrong offset!");
static_assert(offsetof(TurretFunctionLibrary_GetOverlappingActorsWithInterface, ReturnValue) == 0x000010, "Member 'TurretFunctionLibrary_GetOverlappingActorsWithInterface::ReturnValue' has a wrong offset!");

// Function JP.CharacterInitializationStepComponent.ReceivePlayerStateChanged
// 0x0001 (0x0001 - 0x0000)
struct CharacterInitializationStepComponent_ReceivePlayerStateChanged final
{
public:
	bool                                          ValidPlayerState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInitializationStepComponent_ReceivePlayerStateChanged) == 0x000001, "Wrong alignment on CharacterInitializationStepComponent_ReceivePlayerStateChanged");
static_assert(sizeof(CharacterInitializationStepComponent_ReceivePlayerStateChanged) == 0x000001, "Wrong size on CharacterInitializationStepComponent_ReceivePlayerStateChanged");
static_assert(offsetof(CharacterInitializationStepComponent_ReceivePlayerStateChanged, ValidPlayerState) == 0x000000, "Member 'CharacterInitializationStepComponent_ReceivePlayerStateChanged::ValidPlayerState' has a wrong offset!");

// Function JP.EconomySubsystem.BeginPlayerEconomy
// 0x0008 (0x0008 - 0x0000)
struct EconomySubsystem_BeginPlayerEconomy final
{
public:
	class AActor*                                 RecipientActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomySubsystem_BeginPlayerEconomy) == 0x000008, "Wrong alignment on EconomySubsystem_BeginPlayerEconomy");
static_assert(sizeof(EconomySubsystem_BeginPlayerEconomy) == 0x000008, "Wrong size on EconomySubsystem_BeginPlayerEconomy");
static_assert(offsetof(EconomySubsystem_BeginPlayerEconomy, RecipientActor) == 0x000000, "Member 'EconomySubsystem_BeginPlayerEconomy::RecipientActor' has a wrong offset!");

// Function JP.EconomySubsystem.BeginPlayerEconomyLateJoin
// 0x0008 (0x0008 - 0x0000)
struct EconomySubsystem_BeginPlayerEconomyLateJoin final
{
public:
	class AActor*                                 RecipientActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomySubsystem_BeginPlayerEconomyLateJoin) == 0x000008, "Wrong alignment on EconomySubsystem_BeginPlayerEconomyLateJoin");
static_assert(sizeof(EconomySubsystem_BeginPlayerEconomyLateJoin) == 0x000008, "Wrong size on EconomySubsystem_BeginPlayerEconomyLateJoin");
static_assert(offsetof(EconomySubsystem_BeginPlayerEconomyLateJoin, RecipientActor) == 0x000000, "Member 'EconomySubsystem_BeginPlayerEconomyLateJoin::RecipientActor' has a wrong offset!");

// Function JP.EconomySubsystem.CanAfford
// 0x0018 (0x0018 - 0x0000)
struct EconomySubsystem_CanAfford final
{
public:
	class UEconomyDefinition*                     EconomyToTest;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EconomyOwner;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EconomySubsystem_CanAfford) == 0x000008, "Wrong alignment on EconomySubsystem_CanAfford");
static_assert(sizeof(EconomySubsystem_CanAfford) == 0x000018, "Wrong size on EconomySubsystem_CanAfford");
static_assert(offsetof(EconomySubsystem_CanAfford, EconomyToTest) == 0x000000, "Member 'EconomySubsystem_CanAfford::EconomyToTest' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_CanAfford, EconomyOwner) == 0x000008, "Member 'EconomySubsystem_CanAfford::EconomyOwner' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_CanAfford, ReturnValue) == 0x000010, "Member 'EconomySubsystem_CanAfford::ReturnValue' has a wrong offset!");

// Function JP.EconomySubsystem.DepositEconomy
// 0x0018 (0x0018 - 0x0000)
struct EconomySubsystem_DepositEconomy final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEconomyDefinition*                     EconomyToAdd;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 RecipientActor;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomySubsystem_DepositEconomy) == 0x000008, "Wrong alignment on EconomySubsystem_DepositEconomy");
static_assert(sizeof(EconomySubsystem_DepositEconomy) == 0x000018, "Wrong size on EconomySubsystem_DepositEconomy");
static_assert(offsetof(EconomySubsystem_DepositEconomy, WorldContextObject) == 0x000000, "Member 'EconomySubsystem_DepositEconomy::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_DepositEconomy, EconomyToAdd) == 0x000008, "Member 'EconomySubsystem_DepositEconomy::EconomyToAdd' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_DepositEconomy, RecipientActor) == 0x000010, "Member 'EconomySubsystem_DepositEconomy::RecipientActor' has a wrong offset!");

// Function JP.EconomySubsystem.DepositEconomyToTeam
// 0x0018 (0x0018 - 0x0000)
struct EconomySubsystem_DepositEconomyToTeam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEconomyDefinition*                     EconomyToAdd;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EconomySubsystem_DepositEconomyToTeam) == 0x000008, "Wrong alignment on EconomySubsystem_DepositEconomyToTeam");
static_assert(sizeof(EconomySubsystem_DepositEconomyToTeam) == 0x000018, "Wrong size on EconomySubsystem_DepositEconomyToTeam");
static_assert(offsetof(EconomySubsystem_DepositEconomyToTeam, WorldContextObject) == 0x000000, "Member 'EconomySubsystem_DepositEconomyToTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_DepositEconomyToTeam, EconomyToAdd) == 0x000008, "Member 'EconomySubsystem_DepositEconomyToTeam::EconomyToAdd' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_DepositEconomyToTeam, TeamId) == 0x000010, "Member 'EconomySubsystem_DepositEconomyToTeam::TeamId' has a wrong offset!");

// Function JP.EconomySubsystem.DepositEconomyToTeamAtPoint
// 0x0028 (0x0028 - 0x0000)
struct EconomySubsystem_DepositEconomyToTeamAtPoint final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEconomyDefinition*                     EconomyToAdd;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomySubsystem_DepositEconomyToTeamAtPoint) == 0x000008, "Wrong alignment on EconomySubsystem_DepositEconomyToTeamAtPoint");
static_assert(sizeof(EconomySubsystem_DepositEconomyToTeamAtPoint) == 0x000028, "Wrong size on EconomySubsystem_DepositEconomyToTeamAtPoint");
static_assert(offsetof(EconomySubsystem_DepositEconomyToTeamAtPoint, WorldContextObject) == 0x000000, "Member 'EconomySubsystem_DepositEconomyToTeamAtPoint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_DepositEconomyToTeamAtPoint, EconomyToAdd) == 0x000008, "Member 'EconomySubsystem_DepositEconomyToTeamAtPoint::EconomyToAdd' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_DepositEconomyToTeamAtPoint, Position) == 0x000010, "Member 'EconomySubsystem_DepositEconomyToTeamAtPoint::Position' has a wrong offset!");

// Function JP.EconomySubsystem.EndPlayerEconomy
// 0x0008 (0x0008 - 0x0000)
struct EconomySubsystem_EndPlayerEconomy final
{
public:
	class AActor*                                 RecipientActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomySubsystem_EndPlayerEconomy) == 0x000008, "Wrong alignment on EconomySubsystem_EndPlayerEconomy");
static_assert(sizeof(EconomySubsystem_EndPlayerEconomy) == 0x000008, "Wrong size on EconomySubsystem_EndPlayerEconomy");
static_assert(offsetof(EconomySubsystem_EndPlayerEconomy, RecipientActor) == 0x000000, "Member 'EconomySubsystem_EndPlayerEconomy::RecipientActor' has a wrong offset!");

// Function JP.EconomySubsystem.GetPassiveIncomePerTick
// 0x0010 (0x0010 - 0x0000)
struct EconomySubsystem_GetPassiveIncomePerTick final
{
public:
	class AActor*                                 RecipientActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EconomySubsystem_GetPassiveIncomePerTick) == 0x000008, "Wrong alignment on EconomySubsystem_GetPassiveIncomePerTick");
static_assert(sizeof(EconomySubsystem_GetPassiveIncomePerTick) == 0x000010, "Wrong size on EconomySubsystem_GetPassiveIncomePerTick");
static_assert(offsetof(EconomySubsystem_GetPassiveIncomePerTick, RecipientActor) == 0x000000, "Member 'EconomySubsystem_GetPassiveIncomePerTick::RecipientActor' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_GetPassiveIncomePerTick, ReturnValue) == 0x000008, "Member 'EconomySubsystem_GetPassiveIncomePerTick::ReturnValue' has a wrong offset!");

// Function JP.EconomySubsystem.GetPassiveIncomeStat
// 0x0010 (0x0010 - 0x0000)
struct EconomySubsystem_GetPassiveIncomeStat final
{
public:
	class AActor*                                 RecipientActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EconomySubsystem_GetPassiveIncomeStat) == 0x000008, "Wrong alignment on EconomySubsystem_GetPassiveIncomeStat");
static_assert(sizeof(EconomySubsystem_GetPassiveIncomeStat) == 0x000010, "Wrong size on EconomySubsystem_GetPassiveIncomeStat");
static_assert(offsetof(EconomySubsystem_GetPassiveIncomeStat, RecipientActor) == 0x000000, "Member 'EconomySubsystem_GetPassiveIncomeStat::RecipientActor' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_GetPassiveIncomeStat, ReturnValue) == 0x000008, "Member 'EconomySubsystem_GetPassiveIncomeStat::ReturnValue' has a wrong offset!");

// Function JP.EconomySubsystem.GrantKillReward
// 0x03F0 (0x03F0 - 0x0000)
struct EconomySubsystem_GrantKillReward final
{
public:
	struct FKillReward                            KillReward;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FKillInfo                              Info;                                              // 0x0018(0x03D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomySubsystem_GrantKillReward) == 0x000008, "Wrong alignment on EconomySubsystem_GrantKillReward");
static_assert(sizeof(EconomySubsystem_GrantKillReward) == 0x0003F0, "Wrong size on EconomySubsystem_GrantKillReward");
static_assert(offsetof(EconomySubsystem_GrantKillReward, KillReward) == 0x000000, "Member 'EconomySubsystem_GrantKillReward::KillReward' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_GrantKillReward, Info) == 0x000018, "Member 'EconomySubsystem_GrantKillReward::Info' has a wrong offset!");

// Function JP.EconomySubsystem.SetPassiveIncomePerTick
// 0x0010 (0x0010 - 0x0000)
struct EconomySubsystem_SetPassiveIncomePerTick final
{
public:
	const class AActor*                           RecipientActor;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EconomySubsystem_SetPassiveIncomePerTick) == 0x000008, "Wrong alignment on EconomySubsystem_SetPassiveIncomePerTick");
static_assert(sizeof(EconomySubsystem_SetPassiveIncomePerTick) == 0x000010, "Wrong size on EconomySubsystem_SetPassiveIncomePerTick");
static_assert(offsetof(EconomySubsystem_SetPassiveIncomePerTick, RecipientActor) == 0x000000, "Member 'EconomySubsystem_SetPassiveIncomePerTick::RecipientActor' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_SetPassiveIncomePerTick, NewValue) == 0x000008, "Member 'EconomySubsystem_SetPassiveIncomePerTick::NewValue' has a wrong offset!");

// Function JP.EconomySubsystem.WithdrawEconomy
// 0x0020 (0x0020 - 0x0000)
struct EconomySubsystem_WithdrawEconomy final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEconomyDefinition*                     EconomyToRemove;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GiverActor;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EconomySubsystem_WithdrawEconomy) == 0x000008, "Wrong alignment on EconomySubsystem_WithdrawEconomy");
static_assert(sizeof(EconomySubsystem_WithdrawEconomy) == 0x000020, "Wrong size on EconomySubsystem_WithdrawEconomy");
static_assert(offsetof(EconomySubsystem_WithdrawEconomy, WorldContextObject) == 0x000000, "Member 'EconomySubsystem_WithdrawEconomy::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_WithdrawEconomy, EconomyToRemove) == 0x000008, "Member 'EconomySubsystem_WithdrawEconomy::EconomyToRemove' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_WithdrawEconomy, GiverActor) == 0x000010, "Member 'EconomySubsystem_WithdrawEconomy::GiverActor' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_WithdrawEconomy, ReturnValue) == 0x000018, "Member 'EconomySubsystem_WithdrawEconomy::ReturnValue' has a wrong offset!");

// Function JP.EconomySubsystem.WithdrawEconomyFromTeam
// 0x0018 (0x0018 - 0x0000)
struct EconomySubsystem_WithdrawEconomyFromTeam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEconomyDefinition*                     EconomyToRemove;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EconomySubsystem_WithdrawEconomyFromTeam) == 0x000008, "Wrong alignment on EconomySubsystem_WithdrawEconomyFromTeam");
static_assert(sizeof(EconomySubsystem_WithdrawEconomyFromTeam) == 0x000018, "Wrong size on EconomySubsystem_WithdrawEconomyFromTeam");
static_assert(offsetof(EconomySubsystem_WithdrawEconomyFromTeam, WorldContextObject) == 0x000000, "Member 'EconomySubsystem_WithdrawEconomyFromTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_WithdrawEconomyFromTeam, EconomyToRemove) == 0x000008, "Member 'EconomySubsystem_WithdrawEconomyFromTeam::EconomyToRemove' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_WithdrawEconomyFromTeam, TeamId) == 0x000010, "Member 'EconomySubsystem_WithdrawEconomyFromTeam::TeamId' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_WithdrawEconomyFromTeam, ReturnValue) == 0x000014, "Member 'EconomySubsystem_WithdrawEconomyFromTeam::ReturnValue' has a wrong offset!");

// Function JP.EconomySubsystem.WithdrawEconomyFromTeamAtPoint
// 0x0030 (0x0030 - 0x0000)
struct EconomySubsystem_WithdrawEconomyFromTeamAtPoint final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEconomyDefinition*                     EconomyToRemove;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EconomySubsystem_WithdrawEconomyFromTeamAtPoint) == 0x000008, "Wrong alignment on EconomySubsystem_WithdrawEconomyFromTeamAtPoint");
static_assert(sizeof(EconomySubsystem_WithdrawEconomyFromTeamAtPoint) == 0x000030, "Wrong size on EconomySubsystem_WithdrawEconomyFromTeamAtPoint");
static_assert(offsetof(EconomySubsystem_WithdrawEconomyFromTeamAtPoint, WorldContextObject) == 0x000000, "Member 'EconomySubsystem_WithdrawEconomyFromTeamAtPoint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_WithdrawEconomyFromTeamAtPoint, EconomyToRemove) == 0x000008, "Member 'EconomySubsystem_WithdrawEconomyFromTeamAtPoint::EconomyToRemove' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_WithdrawEconomyFromTeamAtPoint, Position) == 0x000010, "Member 'EconomySubsystem_WithdrawEconomyFromTeamAtPoint::Position' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_WithdrawEconomyFromTeamAtPoint, ReturnValue) == 0x000028, "Member 'EconomySubsystem_WithdrawEconomyFromTeamAtPoint::ReturnValue' has a wrong offset!");

// Function JP.EconomySubsystem.CanAffordResourceType
// 0x0020 (0x0020 - 0x0000)
struct EconomySubsystem_CanAffordResourceType final
{
public:
	EResourceType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           Owner;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEconomyDefinition*                     EconomyToTest;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EconomySubsystem_CanAffordResourceType) == 0x000008, "Wrong alignment on EconomySubsystem_CanAffordResourceType");
static_assert(sizeof(EconomySubsystem_CanAffordResourceType) == 0x000020, "Wrong size on EconomySubsystem_CanAffordResourceType");
static_assert(offsetof(EconomySubsystem_CanAffordResourceType, Type) == 0x000000, "Member 'EconomySubsystem_CanAffordResourceType::Type' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_CanAffordResourceType, Owner) == 0x000008, "Member 'EconomySubsystem_CanAffordResourceType::Owner' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_CanAffordResourceType, EconomyToTest) == 0x000010, "Member 'EconomySubsystem_CanAffordResourceType::EconomyToTest' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_CanAffordResourceType, ReturnValue) == 0x000018, "Member 'EconomySubsystem_CanAffordResourceType::ReturnValue' has a wrong offset!");

// Function JP.EconomySubsystem.GetPlayerEconomy
// 0x0028 (0x0028 - 0x0000)
struct EconomySubsystem_GetPlayerEconomy final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FResourceData                          Money;                                             // 0x0008(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FResourceData                          Wood;                                              // 0x0010(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FResourceData                          Perfectness;                                       // 0x0018(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FResourceData                          PassiveIncome;                                     // 0x0020(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomySubsystem_GetPlayerEconomy) == 0x000008, "Wrong alignment on EconomySubsystem_GetPlayerEconomy");
static_assert(sizeof(EconomySubsystem_GetPlayerEconomy) == 0x000028, "Wrong size on EconomySubsystem_GetPlayerEconomy");
static_assert(offsetof(EconomySubsystem_GetPlayerEconomy, PlayerController) == 0x000000, "Member 'EconomySubsystem_GetPlayerEconomy::PlayerController' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_GetPlayerEconomy, Money) == 0x000008, "Member 'EconomySubsystem_GetPlayerEconomy::Money' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_GetPlayerEconomy, Wood) == 0x000010, "Member 'EconomySubsystem_GetPlayerEconomy::Wood' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_GetPlayerEconomy, Perfectness) == 0x000018, "Member 'EconomySubsystem_GetPlayerEconomy::Perfectness' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_GetPlayerEconomy, PassiveIncome) == 0x000020, "Member 'EconomySubsystem_GetPlayerEconomy::PassiveIncome' has a wrong offset!");

// Function JP.EconomySubsystem.GetPlayerEconomyAsText
// 0x0040 (0x0040 - 0x0000)
struct EconomySubsystem_GetPlayerEconomyAsText final
{
public:
	class FText                                   Money;                                             // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   Wood;                                              // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   Perfectness;                                       // 0x0020(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   PerfectnessNormalised;                             // 0x0030(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EconomySubsystem_GetPlayerEconomyAsText) == 0x000008, "Wrong alignment on EconomySubsystem_GetPlayerEconomyAsText");
static_assert(sizeof(EconomySubsystem_GetPlayerEconomyAsText) == 0x000040, "Wrong size on EconomySubsystem_GetPlayerEconomyAsText");
static_assert(offsetof(EconomySubsystem_GetPlayerEconomyAsText, Money) == 0x000000, "Member 'EconomySubsystem_GetPlayerEconomyAsText::Money' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_GetPlayerEconomyAsText, Wood) == 0x000010, "Member 'EconomySubsystem_GetPlayerEconomyAsText::Wood' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_GetPlayerEconomyAsText, Perfectness) == 0x000020, "Member 'EconomySubsystem_GetPlayerEconomyAsText::Perfectness' has a wrong offset!");
static_assert(offsetof(EconomySubsystem_GetPlayerEconomyAsText, PerfectnessNormalised) == 0x000030, "Member 'EconomySubsystem_GetPlayerEconomyAsText::PerfectnessNormalised' has a wrong offset!");

// Function JP.PlayerEconomyComponent.ServerAddMoneyCheat
// 0x0004 (0x0004 - 0x0000)
struct PlayerEconomyComponent_ServerAddMoneyCheat final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerEconomyComponent_ServerAddMoneyCheat) == 0x000004, "Wrong alignment on PlayerEconomyComponent_ServerAddMoneyCheat");
static_assert(sizeof(PlayerEconomyComponent_ServerAddMoneyCheat) == 0x000004, "Wrong size on PlayerEconomyComponent_ServerAddMoneyCheat");
static_assert(offsetof(PlayerEconomyComponent_ServerAddMoneyCheat, Amount) == 0x000000, "Member 'PlayerEconomyComponent_ServerAddMoneyCheat::Amount' has a wrong offset!");

// Function JP.PlayerEconomyComponent.ServerAddPassiveIncome
// 0x0004 (0x0004 - 0x0000)
struct PlayerEconomyComponent_ServerAddPassiveIncome final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerEconomyComponent_ServerAddPassiveIncome) == 0x000004, "Wrong alignment on PlayerEconomyComponent_ServerAddPassiveIncome");
static_assert(sizeof(PlayerEconomyComponent_ServerAddPassiveIncome) == 0x000004, "Wrong size on PlayerEconomyComponent_ServerAddPassiveIncome");
static_assert(offsetof(PlayerEconomyComponent_ServerAddPassiveIncome, Amount) == 0x000000, "Member 'PlayerEconomyComponent_ServerAddPassiveIncome::Amount' has a wrong offset!");

// Function JP.PlayerEconomyComponent.ServerAddWoodCheat
// 0x0004 (0x0004 - 0x0000)
struct PlayerEconomyComponent_ServerAddWoodCheat final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerEconomyComponent_ServerAddWoodCheat) == 0x000004, "Wrong alignment on PlayerEconomyComponent_ServerAddWoodCheat");
static_assert(sizeof(PlayerEconomyComponent_ServerAddWoodCheat) == 0x000004, "Wrong size on PlayerEconomyComponent_ServerAddWoodCheat");
static_assert(offsetof(PlayerEconomyComponent_ServerAddWoodCheat, Amount) == 0x000000, "Member 'PlayerEconomyComponent_ServerAddWoodCheat::Amount' has a wrong offset!");

// Function JP.LyraLocalPlayer.OnCompletedAudioDeviceSwap
// 0x0028 (0x0028 - 0x0000)
struct LyraLocalPlayer_OnCompletedAudioDeviceSwap final
{
public:
	struct FSwapAudioOutputResult                 SwapResult;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLocalPlayer_OnCompletedAudioDeviceSwap) == 0x000008, "Wrong alignment on LyraLocalPlayer_OnCompletedAudioDeviceSwap");
static_assert(sizeof(LyraLocalPlayer_OnCompletedAudioDeviceSwap) == 0x000028, "Wrong size on LyraLocalPlayer_OnCompletedAudioDeviceSwap");
static_assert(offsetof(LyraLocalPlayer_OnCompletedAudioDeviceSwap, SwapResult) == 0x000000, "Member 'LyraLocalPlayer_OnCompletedAudioDeviceSwap::SwapResult' has a wrong offset!");

// Function JP.LyraLocalPlayer.OnControllerChangedTeam
// 0x0010 (0x0010 - 0x0000)
struct LyraLocalPlayer_OnControllerChangedTeam final
{
public:
	class UObject*                                TeamAgent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldTeam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeam;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLocalPlayer_OnControllerChangedTeam) == 0x000008, "Wrong alignment on LyraLocalPlayer_OnControllerChangedTeam");
static_assert(sizeof(LyraLocalPlayer_OnControllerChangedTeam) == 0x000010, "Wrong size on LyraLocalPlayer_OnControllerChangedTeam");
static_assert(offsetof(LyraLocalPlayer_OnControllerChangedTeam, TeamAgent) == 0x000000, "Member 'LyraLocalPlayer_OnControllerChangedTeam::TeamAgent' has a wrong offset!");
static_assert(offsetof(LyraLocalPlayer_OnControllerChangedTeam, OldTeam) == 0x000008, "Member 'LyraLocalPlayer_OnControllerChangedTeam::OldTeam' has a wrong offset!");
static_assert(offsetof(LyraLocalPlayer_OnControllerChangedTeam, NewTeam) == 0x00000C, "Member 'LyraLocalPlayer_OnControllerChangedTeam::NewTeam' has a wrong offset!");

// Function JP.LyraLocalPlayer.GetLocalSettings
// 0x0008 (0x0008 - 0x0000)
struct LyraLocalPlayer_GetLocalSettings final
{
public:
	class ULyraSettingsLocal*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLocalPlayer_GetLocalSettings) == 0x000008, "Wrong alignment on LyraLocalPlayer_GetLocalSettings");
static_assert(sizeof(LyraLocalPlayer_GetLocalSettings) == 0x000008, "Wrong size on LyraLocalPlayer_GetLocalSettings");
static_assert(offsetof(LyraLocalPlayer_GetLocalSettings, ReturnValue) == 0x000000, "Member 'LyraLocalPlayer_GetLocalSettings::ReturnValue' has a wrong offset!");

// Function JP.LyraLocalPlayer.GetSharedSettings
// 0x0008 (0x0008 - 0x0000)
struct LyraLocalPlayer_GetSharedSettings final
{
public:
	class ULyraSettingsShared*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLocalPlayer_GetSharedSettings) == 0x000008, "Wrong alignment on LyraLocalPlayer_GetSharedSettings");
static_assert(sizeof(LyraLocalPlayer_GetSharedSettings) == 0x000008, "Wrong size on LyraLocalPlayer_GetSharedSettings");
static_assert(offsetof(LyraLocalPlayer_GetSharedSettings, ReturnValue) == 0x000000, "Member 'LyraLocalPlayer_GetSharedSettings::ReturnValue' has a wrong offset!");

// Function JP.MaterialProgressBar.AnimateProgressFromCurrent
// 0x0008 (0x0008 - 0x0000)
struct MaterialProgressBar_AnimateProgressFromCurrent final
{
public:
	float                                         End;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimSpeed;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_AnimateProgressFromCurrent) == 0x000004, "Wrong alignment on MaterialProgressBar_AnimateProgressFromCurrent");
static_assert(sizeof(MaterialProgressBar_AnimateProgressFromCurrent) == 0x000008, "Wrong size on MaterialProgressBar_AnimateProgressFromCurrent");
static_assert(offsetof(MaterialProgressBar_AnimateProgressFromCurrent, End) == 0x000000, "Member 'MaterialProgressBar_AnimateProgressFromCurrent::End' has a wrong offset!");
static_assert(offsetof(MaterialProgressBar_AnimateProgressFromCurrent, AnimSpeed) == 0x000004, "Member 'MaterialProgressBar_AnimateProgressFromCurrent::AnimSpeed' has a wrong offset!");

// Function JP.MaterialProgressBar.AnimateProgressFromStart
// 0x000C (0x000C - 0x0000)
struct MaterialProgressBar_AnimateProgressFromStart final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimSpeed;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_AnimateProgressFromStart) == 0x000004, "Wrong alignment on MaterialProgressBar_AnimateProgressFromStart");
static_assert(sizeof(MaterialProgressBar_AnimateProgressFromStart) == 0x00000C, "Wrong size on MaterialProgressBar_AnimateProgressFromStart");
static_assert(offsetof(MaterialProgressBar_AnimateProgressFromStart, Start) == 0x000000, "Member 'MaterialProgressBar_AnimateProgressFromStart::Start' has a wrong offset!");
static_assert(offsetof(MaterialProgressBar_AnimateProgressFromStart, End) == 0x000004, "Member 'MaterialProgressBar_AnimateProgressFromStart::End' has a wrong offset!");
static_assert(offsetof(MaterialProgressBar_AnimateProgressFromStart, AnimSpeed) == 0x000008, "Member 'MaterialProgressBar_AnimateProgressFromStart::AnimSpeed' has a wrong offset!");

// Function JP.MaterialProgressBar.SetColorA
// 0x0010 (0x0010 - 0x0000)
struct MaterialProgressBar_SetColorA final
{
public:
	struct FLinearColor                           ColorA;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_SetColorA) == 0x000004, "Wrong alignment on MaterialProgressBar_SetColorA");
static_assert(sizeof(MaterialProgressBar_SetColorA) == 0x000010, "Wrong size on MaterialProgressBar_SetColorA");
static_assert(offsetof(MaterialProgressBar_SetColorA, ColorA) == 0x000000, "Member 'MaterialProgressBar_SetColorA::ColorA' has a wrong offset!");

// Function JP.MaterialProgressBar.SetColorB
// 0x0010 (0x0010 - 0x0000)
struct MaterialProgressBar_SetColorB final
{
public:
	struct FLinearColor                           ColorB;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_SetColorB) == 0x000004, "Wrong alignment on MaterialProgressBar_SetColorB");
static_assert(sizeof(MaterialProgressBar_SetColorB) == 0x000010, "Wrong size on MaterialProgressBar_SetColorB");
static_assert(offsetof(MaterialProgressBar_SetColorB, ColorB) == 0x000000, "Member 'MaterialProgressBar_SetColorB::ColorB' has a wrong offset!");

// Function JP.MaterialProgressBar.SetColorBackground
// 0x0010 (0x0010 - 0x0000)
struct MaterialProgressBar_SetColorBackground final
{
public:
	struct FLinearColor                           ColorBackground;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_SetColorBackground) == 0x000004, "Wrong alignment on MaterialProgressBar_SetColorBackground");
static_assert(sizeof(MaterialProgressBar_SetColorBackground) == 0x000010, "Wrong size on MaterialProgressBar_SetColorBackground");
static_assert(offsetof(MaterialProgressBar_SetColorBackground, ColorBackground) == 0x000000, "Member 'MaterialProgressBar_SetColorBackground::ColorBackground' has a wrong offset!");

// Function JP.MaterialProgressBar.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct MaterialProgressBar_SetProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_SetProgress) == 0x000004, "Wrong alignment on MaterialProgressBar_SetProgress");
static_assert(sizeof(MaterialProgressBar_SetProgress) == 0x000004, "Wrong size on MaterialProgressBar_SetProgress");
static_assert(offsetof(MaterialProgressBar_SetProgress, Progress) == 0x000000, "Member 'MaterialProgressBar_SetProgress::Progress' has a wrong offset!");

// Function JP.MaterialProgressBar.SetStartProgress
// 0x0004 (0x0004 - 0x0000)
struct MaterialProgressBar_SetStartProgress final
{
public:
	float                                         StartProgress;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialProgressBar_SetStartProgress) == 0x000004, "Wrong alignment on MaterialProgressBar_SetStartProgress");
static_assert(sizeof(MaterialProgressBar_SetStartProgress) == 0x000004, "Wrong size on MaterialProgressBar_SetStartProgress");
static_assert(offsetof(MaterialProgressBar_SetStartProgress, StartProgress) == 0x000000, "Member 'MaterialProgressBar_SetStartProgress::StartProgress' has a wrong offset!");

// Function JP.LyraTabButtonInterface.SetTabLabelInfo
// 0x0110 (0x0110 - 0x0000)
struct LyraTabButtonInterface_SetTabLabelInfo final
{
public:
	struct FLyraTabDescriptor                     TabDescriptor;                                     // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTabButtonInterface_SetTabLabelInfo) == 0x000010, "Wrong alignment on LyraTabButtonInterface_SetTabLabelInfo");
static_assert(sizeof(LyraTabButtonInterface_SetTabLabelInfo) == 0x000110, "Wrong size on LyraTabButtonInterface_SetTabLabelInfo");
static_assert(offsetof(LyraTabButtonInterface_SetTabLabelInfo, TabDescriptor) == 0x000000, "Member 'LyraTabButtonInterface_SetTabLabelInfo::TabDescriptor' has a wrong offset!");

// Function JP.LyraWidgetFactory.FindWidgetClassForData
// 0x0010 (0x0010 - 0x0000)
struct LyraWidgetFactory_FindWidgetClassForData final
{
public:
	const class UObject*                          Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraWidgetFactory_FindWidgetClassForData) == 0x000008, "Wrong alignment on LyraWidgetFactory_FindWidgetClassForData");
static_assert(sizeof(LyraWidgetFactory_FindWidgetClassForData) == 0x000010, "Wrong size on LyraWidgetFactory_FindWidgetClassForData");
static_assert(offsetof(LyraWidgetFactory_FindWidgetClassForData, Data) == 0x000000, "Member 'LyraWidgetFactory_FindWidgetClassForData::Data' has a wrong offset!");
static_assert(offsetof(LyraWidgetFactory_FindWidgetClassForData, ReturnValue) == 0x000008, "Member 'LyraWidgetFactory_FindWidgetClassForData::ReturnValue' has a wrong offset!");

// Function JP.LyraLoadingScreenSubsystem.SetLoadingScreenContentWidget
// 0x0008 (0x0008 - 0x0000)
struct LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget final
{
public:
	TSubclassOf<class UUserWidget>                NewWidgetClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget) == 0x000008, "Wrong alignment on LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget");
static_assert(sizeof(LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget) == 0x000008, "Wrong size on LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget");
static_assert(offsetof(LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget, NewWidgetClass) == 0x000000, "Member 'LyraLoadingScreenSubsystem_SetLoadingScreenContentWidget::NewWidgetClass' has a wrong offset!");

// Function JP.LyraLoadingScreenSubsystem.GetLoadingScreenContentWidget
// 0x0008 (0x0008 - 0x0000)
struct LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget final
{
public:
	TSubclassOf<class UUserWidget>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget) == 0x000008, "Wrong alignment on LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget");
static_assert(sizeof(LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget) == 0x000008, "Wrong size on LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget");
static_assert(offsetof(LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget, ReturnValue) == 0x000000, "Member 'LyraLoadingScreenSubsystem_GetLoadingScreenContentWidget::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetAutoRemoveWhenIndicatorComponentIsNull
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull final
{
public:
	bool                                          CanAutomaticallyRemove;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull");
static_assert(sizeof(IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull) == 0x000001, "Wrong size on IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull");
static_assert(offsetof(IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull, CanAutomaticallyRemove) == 0x000000, "Member 'IndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull::CanAutomaticallyRemove' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetBoundingBoxAnchor
// 0x0018 (0x0018 - 0x0000)
struct IndicatorDescriptor_SetBoundingBoxAnchor final
{
public:
	struct FVector                                InBoundingBoxAnchor;                               // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetBoundingBoxAnchor) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetBoundingBoxAnchor");
static_assert(sizeof(IndicatorDescriptor_SetBoundingBoxAnchor) == 0x000018, "Wrong size on IndicatorDescriptor_SetBoundingBoxAnchor");
static_assert(offsetof(IndicatorDescriptor_SetBoundingBoxAnchor, InBoundingBoxAnchor) == 0x000000, "Member 'IndicatorDescriptor_SetBoundingBoxAnchor::InBoundingBoxAnchor' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetClampToScreen
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetClampToScreen final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetClampToScreen) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetClampToScreen");
static_assert(sizeof(IndicatorDescriptor_SetClampToScreen) == 0x000001, "Wrong size on IndicatorDescriptor_SetClampToScreen");
static_assert(offsetof(IndicatorDescriptor_SetClampToScreen, bValue) == 0x000000, "Member 'IndicatorDescriptor_SetClampToScreen::bValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetComponentSocketName
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_SetComponentSocketName final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetComponentSocketName) == 0x000004, "Wrong alignment on IndicatorDescriptor_SetComponentSocketName");
static_assert(sizeof(IndicatorDescriptor_SetComponentSocketName) == 0x000008, "Wrong size on IndicatorDescriptor_SetComponentSocketName");
static_assert(offsetof(IndicatorDescriptor_SetComponentSocketName, SocketName) == 0x000000, "Member 'IndicatorDescriptor_SetComponentSocketName::SocketName' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetDataObject
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_SetDataObject final
{
public:
	class UObject*                                InDataObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetDataObject) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetDataObject");
static_assert(sizeof(IndicatorDescriptor_SetDataObject) == 0x000008, "Wrong size on IndicatorDescriptor_SetDataObject");
static_assert(offsetof(IndicatorDescriptor_SetDataObject, InDataObject) == 0x000000, "Member 'IndicatorDescriptor_SetDataObject::InDataObject' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetDesiredVisibility
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetDesiredVisibility final
{
public:
	bool                                          InVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetDesiredVisibility) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetDesiredVisibility");
static_assert(sizeof(IndicatorDescriptor_SetDesiredVisibility) == 0x000001, "Wrong size on IndicatorDescriptor_SetDesiredVisibility");
static_assert(offsetof(IndicatorDescriptor_SetDesiredVisibility, InVisible) == 0x000000, "Member 'IndicatorDescriptor_SetDesiredVisibility::InVisible' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetHAlign
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetHAlign final
{
public:
	EHorizontalAlignment                          InHAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetHAlign) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetHAlign");
static_assert(sizeof(IndicatorDescriptor_SetHAlign) == 0x000001, "Wrong size on IndicatorDescriptor_SetHAlign");
static_assert(offsetof(IndicatorDescriptor_SetHAlign, InHAlignment) == 0x000000, "Member 'IndicatorDescriptor_SetHAlign::InHAlignment' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetIndicatorClass
// 0x0028 (0x0028 - 0x0000)
struct IndicatorDescriptor_SetIndicatorClass final
{
public:
	TSoftClassPtr<class UClass>                   InIndicatorWidgetClass;                            // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetIndicatorClass) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetIndicatorClass");
static_assert(sizeof(IndicatorDescriptor_SetIndicatorClass) == 0x000028, "Wrong size on IndicatorDescriptor_SetIndicatorClass");
static_assert(offsetof(IndicatorDescriptor_SetIndicatorClass, InIndicatorWidgetClass) == 0x000000, "Member 'IndicatorDescriptor_SetIndicatorClass::InIndicatorWidgetClass' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetPriority
// 0x0004 (0x0004 - 0x0000)
struct IndicatorDescriptor_SetPriority final
{
public:
	int32                                         InPriority;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetPriority) == 0x000004, "Wrong alignment on IndicatorDescriptor_SetPriority");
static_assert(sizeof(IndicatorDescriptor_SetPriority) == 0x000004, "Wrong size on IndicatorDescriptor_SetPriority");
static_assert(offsetof(IndicatorDescriptor_SetPriority, InPriority) == 0x000000, "Member 'IndicatorDescriptor_SetPriority::InPriority' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetProjectionMode
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetProjectionMode final
{
public:
	EActorCanvasProjectionMode                    InProjectionMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetProjectionMode) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetProjectionMode");
static_assert(sizeof(IndicatorDescriptor_SetProjectionMode) == 0x000001, "Wrong size on IndicatorDescriptor_SetProjectionMode");
static_assert(offsetof(IndicatorDescriptor_SetProjectionMode, InProjectionMode) == 0x000000, "Member 'IndicatorDescriptor_SetProjectionMode::InProjectionMode' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_SetSceneComponent final
{
public:
	class USceneComponent*                        InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetSceneComponent) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetSceneComponent");
static_assert(sizeof(IndicatorDescriptor_SetSceneComponent) == 0x000008, "Wrong size on IndicatorDescriptor_SetSceneComponent");
static_assert(offsetof(IndicatorDescriptor_SetSceneComponent, InComponent) == 0x000000, "Member 'IndicatorDescriptor_SetSceneComponent::InComponent' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetScreenSpaceOffset
// 0x0010 (0x0010 - 0x0000)
struct IndicatorDescriptor_SetScreenSpaceOffset final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetScreenSpaceOffset) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetScreenSpaceOffset");
static_assert(sizeof(IndicatorDescriptor_SetScreenSpaceOffset) == 0x000010, "Wrong size on IndicatorDescriptor_SetScreenSpaceOffset");
static_assert(offsetof(IndicatorDescriptor_SetScreenSpaceOffset, Offset) == 0x000000, "Member 'IndicatorDescriptor_SetScreenSpaceOffset::Offset' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetShowClampToScreenArrow
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetShowClampToScreenArrow final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetShowClampToScreenArrow) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetShowClampToScreenArrow");
static_assert(sizeof(IndicatorDescriptor_SetShowClampToScreenArrow) == 0x000001, "Wrong size on IndicatorDescriptor_SetShowClampToScreenArrow");
static_assert(offsetof(IndicatorDescriptor_SetShowClampToScreenArrow, bValue) == 0x000000, "Member 'IndicatorDescriptor_SetShowClampToScreenArrow::bValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetVAlign
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_SetVAlign final
{
public:
	EVerticalAlignment                            InVAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetVAlign) == 0x000001, "Wrong alignment on IndicatorDescriptor_SetVAlign");
static_assert(sizeof(IndicatorDescriptor_SetVAlign) == 0x000001, "Wrong size on IndicatorDescriptor_SetVAlign");
static_assert(offsetof(IndicatorDescriptor_SetVAlign, InVAlignment) == 0x000000, "Member 'IndicatorDescriptor_SetVAlign::InVAlignment' has a wrong offset!");

// Function JP.IndicatorDescriptor.SetWorldPositionOffset
// 0x0018 (0x0018 - 0x0000)
struct IndicatorDescriptor_SetWorldPositionOffset final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_SetWorldPositionOffset) == 0x000008, "Wrong alignment on IndicatorDescriptor_SetWorldPositionOffset");
static_assert(sizeof(IndicatorDescriptor_SetWorldPositionOffset) == 0x000018, "Wrong size on IndicatorDescriptor_SetWorldPositionOffset");
static_assert(offsetof(IndicatorDescriptor_SetWorldPositionOffset, Offset) == 0x000000, "Member 'IndicatorDescriptor_SetWorldPositionOffset::Offset' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetAutoRemoveWhenIndicatorComponentIsNull
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull");
static_assert(sizeof(IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull) == 0x000001, "Wrong size on IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull");
static_assert(offsetof(IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetBoundingBoxAnchor
// 0x0018 (0x0018 - 0x0000)
struct IndicatorDescriptor_GetBoundingBoxAnchor final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetBoundingBoxAnchor) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetBoundingBoxAnchor");
static_assert(sizeof(IndicatorDescriptor_GetBoundingBoxAnchor) == 0x000018, "Wrong size on IndicatorDescriptor_GetBoundingBoxAnchor");
static_assert(offsetof(IndicatorDescriptor_GetBoundingBoxAnchor, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetBoundingBoxAnchor::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetClampToScreen
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetClampToScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetClampToScreen) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetClampToScreen");
static_assert(sizeof(IndicatorDescriptor_GetClampToScreen) == 0x000001, "Wrong size on IndicatorDescriptor_GetClampToScreen");
static_assert(offsetof(IndicatorDescriptor_GetClampToScreen, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetClampToScreen::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetComponentSocketName
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_GetComponentSocketName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetComponentSocketName) == 0x000004, "Wrong alignment on IndicatorDescriptor_GetComponentSocketName");
static_assert(sizeof(IndicatorDescriptor_GetComponentSocketName) == 0x000008, "Wrong size on IndicatorDescriptor_GetComponentSocketName");
static_assert(offsetof(IndicatorDescriptor_GetComponentSocketName, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetComponentSocketName::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetDataObject
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_GetDataObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetDataObject) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetDataObject");
static_assert(sizeof(IndicatorDescriptor_GetDataObject) == 0x000008, "Wrong size on IndicatorDescriptor_GetDataObject");
static_assert(offsetof(IndicatorDescriptor_GetDataObject, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetDataObject::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetHAlign
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetHAlign final
{
public:
	EHorizontalAlignment                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetHAlign) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetHAlign");
static_assert(sizeof(IndicatorDescriptor_GetHAlign) == 0x000001, "Wrong size on IndicatorDescriptor_GetHAlign");
static_assert(offsetof(IndicatorDescriptor_GetHAlign, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetHAlign::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetIndicatorClass
// 0x0028 (0x0028 - 0x0000)
struct IndicatorDescriptor_GetIndicatorClass final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetIndicatorClass) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetIndicatorClass");
static_assert(sizeof(IndicatorDescriptor_GetIndicatorClass) == 0x000028, "Wrong size on IndicatorDescriptor_GetIndicatorClass");
static_assert(offsetof(IndicatorDescriptor_GetIndicatorClass, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetIndicatorClass::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetIsVisible
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetIsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetIsVisible) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetIsVisible");
static_assert(sizeof(IndicatorDescriptor_GetIsVisible) == 0x000001, "Wrong size on IndicatorDescriptor_GetIsVisible");
static_assert(offsetof(IndicatorDescriptor_GetIsVisible, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetIsVisible::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetPriority
// 0x0004 (0x0004 - 0x0000)
struct IndicatorDescriptor_GetPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetPriority) == 0x000004, "Wrong alignment on IndicatorDescriptor_GetPriority");
static_assert(sizeof(IndicatorDescriptor_GetPriority) == 0x000004, "Wrong size on IndicatorDescriptor_GetPriority");
static_assert(offsetof(IndicatorDescriptor_GetPriority, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetPriority::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetProjectionMode
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetProjectionMode final
{
public:
	EActorCanvasProjectionMode                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetProjectionMode) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetProjectionMode");
static_assert(sizeof(IndicatorDescriptor_GetProjectionMode) == 0x000001, "Wrong size on IndicatorDescriptor_GetProjectionMode");
static_assert(offsetof(IndicatorDescriptor_GetProjectionMode, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetProjectionMode::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct IndicatorDescriptor_GetSceneComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetSceneComponent) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetSceneComponent");
static_assert(sizeof(IndicatorDescriptor_GetSceneComponent) == 0x000008, "Wrong size on IndicatorDescriptor_GetSceneComponent");
static_assert(offsetof(IndicatorDescriptor_GetSceneComponent, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetSceneComponent::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetScreenSpaceOffset
// 0x0010 (0x0010 - 0x0000)
struct IndicatorDescriptor_GetScreenSpaceOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetScreenSpaceOffset) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetScreenSpaceOffset");
static_assert(sizeof(IndicatorDescriptor_GetScreenSpaceOffset) == 0x000010, "Wrong size on IndicatorDescriptor_GetScreenSpaceOffset");
static_assert(offsetof(IndicatorDescriptor_GetScreenSpaceOffset, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetScreenSpaceOffset::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetShowClampToScreenArrow
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetShowClampToScreenArrow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetShowClampToScreenArrow) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetShowClampToScreenArrow");
static_assert(sizeof(IndicatorDescriptor_GetShowClampToScreenArrow) == 0x000001, "Wrong size on IndicatorDescriptor_GetShowClampToScreenArrow");
static_assert(offsetof(IndicatorDescriptor_GetShowClampToScreenArrow, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetShowClampToScreenArrow::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetVAlign
// 0x0001 (0x0001 - 0x0000)
struct IndicatorDescriptor_GetVAlign final
{
public:
	EVerticalAlignment                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetVAlign) == 0x000001, "Wrong alignment on IndicatorDescriptor_GetVAlign");
static_assert(sizeof(IndicatorDescriptor_GetVAlign) == 0x000001, "Wrong size on IndicatorDescriptor_GetVAlign");
static_assert(offsetof(IndicatorDescriptor_GetVAlign, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetVAlign::ReturnValue' has a wrong offset!");

// Function JP.IndicatorDescriptor.GetWorldPositionOffset
// 0x0018 (0x0018 - 0x0000)
struct IndicatorDescriptor_GetWorldPositionOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IndicatorDescriptor_GetWorldPositionOffset) == 0x000008, "Wrong alignment on IndicatorDescriptor_GetWorldPositionOffset");
static_assert(sizeof(IndicatorDescriptor_GetWorldPositionOffset) == 0x000018, "Wrong size on IndicatorDescriptor_GetWorldPositionOffset");
static_assert(offsetof(IndicatorDescriptor_GetWorldPositionOffset, ReturnValue) == 0x000000, "Member 'IndicatorDescriptor_GetWorldPositionOffset::ReturnValue' has a wrong offset!");

// Function JP.LyraIndicatorManagerComponent.AddIndicator
// 0x0008 (0x0008 - 0x0000)
struct LyraIndicatorManagerComponent_AddIndicator final
{
public:
	class UIndicatorDescriptor*                   IndicatorDescriptor;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraIndicatorManagerComponent_AddIndicator) == 0x000008, "Wrong alignment on LyraIndicatorManagerComponent_AddIndicator");
static_assert(sizeof(LyraIndicatorManagerComponent_AddIndicator) == 0x000008, "Wrong size on LyraIndicatorManagerComponent_AddIndicator");
static_assert(offsetof(LyraIndicatorManagerComponent_AddIndicator, IndicatorDescriptor) == 0x000000, "Member 'LyraIndicatorManagerComponent_AddIndicator::IndicatorDescriptor' has a wrong offset!");

// Function JP.LyraIndicatorManagerComponent.RemoveIndicator
// 0x0008 (0x0008 - 0x0000)
struct LyraIndicatorManagerComponent_RemoveIndicator final
{
public:
	class UIndicatorDescriptor*                   IndicatorDescriptor;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraIndicatorManagerComponent_RemoveIndicator) == 0x000008, "Wrong alignment on LyraIndicatorManagerComponent_RemoveIndicator");
static_assert(sizeof(LyraIndicatorManagerComponent_RemoveIndicator) == 0x000008, "Wrong size on LyraIndicatorManagerComponent_RemoveIndicator");
static_assert(offsetof(LyraIndicatorManagerComponent_RemoveIndicator, IndicatorDescriptor) == 0x000000, "Member 'LyraIndicatorManagerComponent_RemoveIndicator::IndicatorDescriptor' has a wrong offset!");

// Function JP.LyraSimulatedInputWidget.InputKeyValue
// 0x0018 (0x0018 - 0x0000)
struct LyraSimulatedInputWidget_InputKeyValue final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSimulatedInputWidget_InputKeyValue) == 0x000008, "Wrong alignment on LyraSimulatedInputWidget_InputKeyValue");
static_assert(sizeof(LyraSimulatedInputWidget_InputKeyValue) == 0x000018, "Wrong size on LyraSimulatedInputWidget_InputKeyValue");
static_assert(offsetof(LyraSimulatedInputWidget_InputKeyValue, Value) == 0x000000, "Member 'LyraSimulatedInputWidget_InputKeyValue::Value' has a wrong offset!");

// Function JP.LyraSimulatedInputWidget.InputKeyValue2D
// 0x0010 (0x0010 - 0x0000)
struct LyraSimulatedInputWidget_InputKeyValue2D final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSimulatedInputWidget_InputKeyValue2D) == 0x000008, "Wrong alignment on LyraSimulatedInputWidget_InputKeyValue2D");
static_assert(sizeof(LyraSimulatedInputWidget_InputKeyValue2D) == 0x000010, "Wrong size on LyraSimulatedInputWidget_InputKeyValue2D");
static_assert(offsetof(LyraSimulatedInputWidget_InputKeyValue2D, Value) == 0x000000, "Member 'LyraSimulatedInputWidget_InputKeyValue2D::Value' has a wrong offset!");

// Function JP.LyraSimulatedInputWidget.GetAssociatedAction
// 0x0008 (0x0008 - 0x0000)
struct LyraSimulatedInputWidget_GetAssociatedAction final
{
public:
	const class UInputAction*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSimulatedInputWidget_GetAssociatedAction) == 0x000008, "Wrong alignment on LyraSimulatedInputWidget_GetAssociatedAction");
static_assert(sizeof(LyraSimulatedInputWidget_GetAssociatedAction) == 0x000008, "Wrong size on LyraSimulatedInputWidget_GetAssociatedAction");
static_assert(offsetof(LyraSimulatedInputWidget_GetAssociatedAction, ReturnValue) == 0x000000, "Member 'LyraSimulatedInputWidget_GetAssociatedAction::ReturnValue' has a wrong offset!");

// Function JP.LyraSimulatedInputWidget.GetEnhancedInputSubsystem
// 0x0008 (0x0008 - 0x0000)
struct LyraSimulatedInputWidget_GetEnhancedInputSubsystem final
{
public:
	class UEnhancedInputLocalPlayerSubsystem*     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSimulatedInputWidget_GetEnhancedInputSubsystem) == 0x000008, "Wrong alignment on LyraSimulatedInputWidget_GetEnhancedInputSubsystem");
static_assert(sizeof(LyraSimulatedInputWidget_GetEnhancedInputSubsystem) == 0x000008, "Wrong size on LyraSimulatedInputWidget_GetEnhancedInputSubsystem");
static_assert(offsetof(LyraSimulatedInputWidget_GetEnhancedInputSubsystem, ReturnValue) == 0x000000, "Member 'LyraSimulatedInputWidget_GetEnhancedInputSubsystem::ReturnValue' has a wrong offset!");

// Function JP.LyraSimulatedInputWidget.GetSimulatedKey
// 0x0018 (0x0018 - 0x0000)
struct LyraSimulatedInputWidget_GetSimulatedKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraSimulatedInputWidget_GetSimulatedKey) == 0x000008, "Wrong alignment on LyraSimulatedInputWidget_GetSimulatedKey");
static_assert(sizeof(LyraSimulatedInputWidget_GetSimulatedKey) == 0x000018, "Wrong size on LyraSimulatedInputWidget_GetSimulatedKey");
static_assert(offsetof(LyraSimulatedInputWidget_GetSimulatedKey, ReturnValue) == 0x000000, "Member 'LyraSimulatedInputWidget_GetSimulatedKey::ReturnValue' has a wrong offset!");

// Function JP.LyraTouchRegion.ShouldSimulateInput
// 0x0001 (0x0001 - 0x0000)
struct LyraTouchRegion_ShouldSimulateInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraTouchRegion_ShouldSimulateInput) == 0x000001, "Wrong alignment on LyraTouchRegion_ShouldSimulateInput");
static_assert(sizeof(LyraTouchRegion_ShouldSimulateInput) == 0x000001, "Wrong size on LyraTouchRegion_ShouldSimulateInput");
static_assert(offsetof(LyraTouchRegion_ShouldSimulateInput, ReturnValue) == 0x000000, "Member 'LyraTouchRegion_ShouldSimulateInput::ReturnValue' has a wrong offset!");

// Function JP.LyraPerfStatWidgetBase.FetchStatValue
// 0x0008 (0x0008 - 0x0000)
struct LyraPerfStatWidgetBase_FetchStatValue final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPerfStatWidgetBase_FetchStatValue) == 0x000008, "Wrong alignment on LyraPerfStatWidgetBase_FetchStatValue");
static_assert(sizeof(LyraPerfStatWidgetBase_FetchStatValue) == 0x000008, "Wrong size on LyraPerfStatWidgetBase_FetchStatValue");
static_assert(offsetof(LyraPerfStatWidgetBase_FetchStatValue, ReturnValue) == 0x000000, "Member 'LyraPerfStatWidgetBase_FetchStatValue::ReturnValue' has a wrong offset!");

// Function JP.LyraPerfStatWidgetBase.GetStatToDisplay
// 0x0001 (0x0001 - 0x0000)
struct LyraPerfStatWidgetBase_GetStatToDisplay final
{
public:
	ELyraDisplayablePerformanceStat               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LyraPerfStatWidgetBase_GetStatToDisplay) == 0x000001, "Wrong alignment on LyraPerfStatWidgetBase_GetStatToDisplay");
static_assert(sizeof(LyraPerfStatWidgetBase_GetStatToDisplay) == 0x000001, "Wrong size on LyraPerfStatWidgetBase_GetStatToDisplay");
static_assert(offsetof(LyraPerfStatWidgetBase_GetStatToDisplay, ReturnValue) == 0x000000, "Member 'LyraPerfStatWidgetBase_GetStatToDisplay::ReturnValue' has a wrong offset!");

// Function JP.MainMenuFlowControllerStateComponent.OnExperienceLoaded
// 0x0008 (0x0008 - 0x0000)
struct MainMenuFlowControllerStateComponent_OnExperienceLoaded final
{
public:
	const class UExperienceDefinition*            Experience;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuFlowControllerStateComponent_OnExperienceLoaded) == 0x000008, "Wrong alignment on MainMenuFlowControllerStateComponent_OnExperienceLoaded");
static_assert(sizeof(MainMenuFlowControllerStateComponent_OnExperienceLoaded) == 0x000008, "Wrong size on MainMenuFlowControllerStateComponent_OnExperienceLoaded");
static_assert(offsetof(MainMenuFlowControllerStateComponent_OnExperienceLoaded, Experience) == 0x000000, "Member 'MainMenuFlowControllerStateComponent_OnExperienceLoaded::Experience' has a wrong offset!");

// Function JP.MainMenuFlowControllerStateComponent.OnUserInitialized
// 0x0028 (0x0028 - 0x0000)
struct MainMenuFlowControllerStateComponent_OnUserInitialized final
{
public:
	const class UCommonUserInfo*                  UserInfo;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Error;                                             // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
	ECommonUserPrivilege                          RequestedPrivilege;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonUserOnlineContext                      OnlineContext;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuFlowControllerStateComponent_OnUserInitialized) == 0x000008, "Wrong alignment on MainMenuFlowControllerStateComponent_OnUserInitialized");
static_assert(sizeof(MainMenuFlowControllerStateComponent_OnUserInitialized) == 0x000028, "Wrong size on MainMenuFlowControllerStateComponent_OnUserInitialized");
static_assert(offsetof(MainMenuFlowControllerStateComponent_OnUserInitialized, UserInfo) == 0x000000, "Member 'MainMenuFlowControllerStateComponent_OnUserInitialized::UserInfo' has a wrong offset!");
static_assert(offsetof(MainMenuFlowControllerStateComponent_OnUserInitialized, bSuccess) == 0x000008, "Member 'MainMenuFlowControllerStateComponent_OnUserInitialized::bSuccess' has a wrong offset!");
static_assert(offsetof(MainMenuFlowControllerStateComponent_OnUserInitialized, Error) == 0x000010, "Member 'MainMenuFlowControllerStateComponent_OnUserInitialized::Error' has a wrong offset!");
static_assert(offsetof(MainMenuFlowControllerStateComponent_OnUserInitialized, RequestedPrivilege) == 0x000020, "Member 'MainMenuFlowControllerStateComponent_OnUserInitialized::RequestedPrivilege' has a wrong offset!");
static_assert(offsetof(MainMenuFlowControllerStateComponent_OnUserInitialized, OnlineContext) == 0x000021, "Member 'MainMenuFlowControllerStateComponent_OnUserInitialized::OnlineContext' has a wrong offset!");

}

