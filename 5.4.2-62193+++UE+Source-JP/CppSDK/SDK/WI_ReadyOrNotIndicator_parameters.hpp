#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_ReadyOrNotIndicator

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WI_ReadyOrNotIndicator.WI_ReadyOrNotIndicator_C.ExecuteUbergraph_WI_ReadyOrNotIndicator
// 0x0008 (0x0008 - 0x0000)
struct WI_ReadyOrNotIndicator_C_ExecuteUbergraph_WI_ReadyOrNotIndicator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_ReadyOrNotIndicator_C_ExecuteUbergraph_WI_ReadyOrNotIndicator) == 0x000004, "Wrong alignment on WI_ReadyOrNotIndicator_C_ExecuteUbergraph_WI_ReadyOrNotIndicator");
static_assert(sizeof(WI_ReadyOrNotIndicator_C_ExecuteUbergraph_WI_ReadyOrNotIndicator) == 0x000008, "Wrong size on WI_ReadyOrNotIndicator_C_ExecuteUbergraph_WI_ReadyOrNotIndicator");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_ExecuteUbergraph_WI_ReadyOrNotIndicator, EntryPoint) == 0x000000, "Member 'WI_ReadyOrNotIndicator_C_ExecuteUbergraph_WI_ReadyOrNotIndicator::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_ExecuteUbergraph_WI_ReadyOrNotIndicator, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WI_ReadyOrNotIndicator_C_ExecuteUbergraph_WI_ReadyOrNotIndicator::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WI_ReadyOrNotIndicator.WI_ReadyOrNotIndicator_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WI_ReadyOrNotIndicator_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_ReadyOrNotIndicator_C_PreConstruct) == 0x000001, "Wrong alignment on WI_ReadyOrNotIndicator_C_PreConstruct");
static_assert(sizeof(WI_ReadyOrNotIndicator_C_PreConstruct) == 0x000001, "Wrong size on WI_ReadyOrNotIndicator_C_PreConstruct");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WI_ReadyOrNotIndicator_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WI_ReadyOrNotIndicator.WI_ReadyOrNotIndicator_C.SetIsReady
// 0x0010 (0x0010 - 0x0000)
struct WI_ReadyOrNotIndicator_C_SetIsReady final
{
public:
	bool                                          IsReady_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_ReadyOrNotIndicator_C_SetIsReady) == 0x000004, "Wrong alignment on WI_ReadyOrNotIndicator_C_SetIsReady");
static_assert(sizeof(WI_ReadyOrNotIndicator_C_SetIsReady) == 0x000010, "Wrong size on WI_ReadyOrNotIndicator_C_SetIsReady");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetIsReady, IsReady_0) == 0x000000, "Member 'WI_ReadyOrNotIndicator_C_SetIsReady::IsReady_0' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetIsReady, Temp_bool_Variable) == 0x000001, "Member 'WI_ReadyOrNotIndicator_C_SetIsReady::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetIsReady, Temp_int_Variable) == 0x000004, "Member 'WI_ReadyOrNotIndicator_C_SetIsReady::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetIsReady, Temp_int_Variable_1) == 0x000008, "Member 'WI_ReadyOrNotIndicator_C_SetIsReady::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetIsReady, K2Node_Select_Default) == 0x00000C, "Member 'WI_ReadyOrNotIndicator_C_SetIsReady::K2Node_Select_Default' has a wrong offset!");

// Function WI_ReadyOrNotIndicator.WI_ReadyOrNotIndicator_C.SetShowCheckmarkWhenReady
// 0x0005 (0x0005 - 0x0000)
struct WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady final
{
public:
	bool                                          ShowCheckmarkWhenReady_0;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady) == 0x000001, "Wrong alignment on WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady");
static_assert(sizeof(WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady) == 0x000005, "Wrong size on WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady, ShowCheckmarkWhenReady_0) == 0x000000, "Member 'WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady::ShowCheckmarkWhenReady_0' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady, Temp_bool_Variable) == 0x000001, "Member 'WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady, Temp_byte_Variable) == 0x000002, "Member 'WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady, Temp_byte_Variable_1) == 0x000003, "Member 'WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady, K2Node_Select_Default) == 0x000004, "Member 'WI_ReadyOrNotIndicator_C_SetShowCheckmarkWhenReady::K2Node_Select_Default' has a wrong offset!");

// Function WI_ReadyOrNotIndicator.WI_ReadyOrNotIndicator_C.SetShowCrossWhenNotReady
// 0x0005 (0x0005 - 0x0000)
struct WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady final
{
public:
	bool                                          ShowCrossWhenNotReady_0;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady) == 0x000001, "Wrong alignment on WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady");
static_assert(sizeof(WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady) == 0x000005, "Wrong size on WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady, ShowCrossWhenNotReady_0) == 0x000000, "Member 'WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady::ShowCrossWhenNotReady_0' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady, Temp_bool_Variable) == 0x000001, "Member 'WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady, Temp_byte_Variable) == 0x000002, "Member 'WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady, Temp_byte_Variable_1) == 0x000003, "Member 'WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady, K2Node_Select_Default) == 0x000004, "Member 'WI_ReadyOrNotIndicator_C_SetShowCrossWhenNotReady::K2Node_Select_Default' has a wrong offset!");

}

