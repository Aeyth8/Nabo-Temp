#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PU_Jackhammer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_PickupBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PU_Jackhammer.PU_Jackhammer_C
// 0x0038 (0x0638 - 0x0600)
class APU_Jackhammer_C final : public ABP_PickupBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PU_Jackhammer_C;                    // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Niagara;                                           // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDistanceScalingWidgetComponent*        DistanceScalingWidget;                             // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioBounce;                                       // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereKnockback;                                   // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioLoop;                                         // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__PU_Jackhammer_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Bounce();
	void ExecuteUbergraph_PU_Jackhammer(int32 EntryPoint);
	struct FVector GetKnockbackVelocity(class AActor* HitActor);
	void GrantJackhammer(class AActor* InteractingActor_0);
	void K2_FellOutOfWorld();
	void Multi_Knocked_Back_Target();
	void On_Bounce_Timer_Elapsed();
	void PlayPunchCosmetics();
	void ReceiveDestroyed();
	bool CanActivateTrap();
	void Multi_Launch(const struct FVector& Velocity);
	void PostInteract(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PU_Jackhammer_C">();
	}
	static class APU_Jackhammer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APU_Jackhammer_C>();
	}
};
static_assert(alignof(APU_Jackhammer_C) == 0x000008, "Wrong alignment on APU_Jackhammer_C");
static_assert(sizeof(APU_Jackhammer_C) == 0x000638, "Wrong size on APU_Jackhammer_C");
static_assert(offsetof(APU_Jackhammer_C, UberGraphFrame_PU_Jackhammer_C) == 0x000600, "Member 'APU_Jackhammer_C::UberGraphFrame_PU_Jackhammer_C' has a wrong offset!");
static_assert(offsetof(APU_Jackhammer_C, Niagara) == 0x000608, "Member 'APU_Jackhammer_C::Niagara' has a wrong offset!");
static_assert(offsetof(APU_Jackhammer_C, DistanceScalingWidget) == 0x000610, "Member 'APU_Jackhammer_C::DistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(APU_Jackhammer_C, AudioBounce) == 0x000618, "Member 'APU_Jackhammer_C::AudioBounce' has a wrong offset!");
static_assert(offsetof(APU_Jackhammer_C, SphereKnockback) == 0x000620, "Member 'APU_Jackhammer_C::SphereKnockback' has a wrong offset!");
static_assert(offsetof(APU_Jackhammer_C, AudioLoop) == 0x000628, "Member 'APU_Jackhammer_C::AudioLoop' has a wrong offset!");
static_assert(offsetof(APU_Jackhammer_C, SkeletalMesh) == 0x000630, "Member 'APU_Jackhammer_C::SkeletalMesh' has a wrong offset!");

}

