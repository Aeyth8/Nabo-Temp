#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bp_ThrowableProp_Base

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "JP_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "E_MaterialTypes_structs.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C
// 0x0260 (0x0500 - 0x02A0)
#pragma pack(push, 0x1)
class alignas(0x10) ABp_ThrowableProp_Base_C : public AStaticMeshActorJP
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AudioImpactThrowableSpecific;                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioPickUpThrow;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioImpact;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      TrailParticle;                                     // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   InteractableMesh;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             HoldingCharacter;                                  // 0x02D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             AttachRelativeTransform;                           // 0x02E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             PropIsGrabbed;                                     // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             PropIsDropped;                                     // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UGrabThrowableWI_C*                     GrabThrowableWI;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Held;                                              // 0x0368(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             LocalHolder;                                       // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ThrowPowerMax;                                     // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReleasePowerMultiplier;                            // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThrowPowerMin;                                     // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideThrow;                                     // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             ThrowSound;                                        // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PickUpSound;                                       // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DropSound;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             GripPoint;                                         // 0x03B0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseGripPoint;                                      // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     VolumeCurve;                                       // 0x0418(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                SpawnLocation;                                     // 0x04A0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxReleaseVelocity;                                // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             ThrowingCharacter;                                 // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Audio_ImpactSpecific;                              // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UItemDefinition>         ItemDefinitionToGrantUponInteraction;              // 0x04D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void AddImpulseOwner(const struct FVector& Impulse);
	void AddImpulseServer(const struct FVector& Impulse);
	void AttemptSecondary();
	void Audio_Drop();
	void Audio_Pick_Up();
	void Audio_Throw();
	void BelowDeathPlane();
	void CancelInteraction(class UPrimitiveComponent* InteractionComponent);
	void DebugGripPoint();
	void ExecuteUbergraph_Bp_ThrowableProp_Base(int32 EntryPoint);
	void FocusGained();
	void FocusLost();
	void GetDurabilityCostWhenHit(double* Amount);
	void GetInteractSound();
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void GetNewWidgetColor(struct FSlateColor* NewColor);
	void GetOptionalText(class FText* Return, class FText* Optional_Second_Line);
	void GetPriority(int32* Priority);
	void GetWidgetLocation(struct FVector* Location);
	void GrippedLocal(class ACharacter* GrippingCharacter);
	void GrippedServer(class ACharacter* GrippingCharacter);
	void HideInteractionWidget(bool* Return);
	void HighConstrastModeChanged(bool IsEnabled);
	void HitInterface(const struct FVector& Direction);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void InteractableCancelInteraction(class UPrimitiveComponent* InteractionComponent);
	void InteractPressed(class AActor* InteractingActor);
	void InteractReleased(class AActor* InteractingActor);
	void InternalFocusGained();
	void InternalFocusLost();
	bool IsBeingHeld();
	void IsInFocus(class AActor* Focusing_Actor);
	void IsInteractable(bool* Interactable);
	void K2_FellOutOfWorld();
	void Knockback(const struct FVector& Velocity, bool XYOverride, bool ZOverride, double AirControlMultiplier, bool* Void);
	void LimitVelocity();
	void MeleeHit(const class AActor*& AttackingActor);
	void Multi_TeleportToSpawnPosition();
	void OnRep_Held();
	void OnRep_HoldingCharacter();
	void PlayHitAudio(class UPhysicalMaterial* Hit, class UPrimitiveComponent* Component);
	void PlayImpactCosmetics(const struct FVector& Location, const struct FHitResult& Hit, class UPrimitiveComponent* MyComponent);
	void PostInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void PreInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void PropIsDropped__DelegateSignature();
	void PropIsGrabbed__DelegateSignature();
	void ReceiveBeginPlay();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void RegisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor);
	void Released_Local(class ACharacter* ReleasingCharacter);
	void ReleasedServer(class ACharacter* ReleasingCharacter);
	void ReloadAfterHousesLoaded(bool* Return);
	void SetHighContrastMode(bool Enabled);
	void SetHoveredComponent(class UInteractionComponent_C* HoveredComponent, bool* Void);
	void SetInteractable(bool Interactable);
	void SetLinearVelocityOwner(const struct FVector& NewVelocity);
	void SetLinearVelocityServer(const struct FVector& NewVelocity);
	void Show_Throwable_Widget(bool Show);
	void TakeDamage();
	void UnregisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor);

	float GetInteractionDuration(class UPrimitiveComponent* InteractionComponent) const;
	void GetPostInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	void GetPreInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForEnemyTeam(class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForInteraction(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Bp_ThrowableProp_Base_C">();
	}
	static class ABp_ThrowableProp_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABp_ThrowableProp_Base_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABp_ThrowableProp_Base_C) == 0x000010, "Wrong alignment on ABp_ThrowableProp_Base_C");
static_assert(sizeof(ABp_ThrowableProp_Base_C) == 0x000500, "Wrong size on ABp_ThrowableProp_Base_C");
static_assert(offsetof(ABp_ThrowableProp_Base_C, UberGraphFrame) == 0x0002A0, "Member 'ABp_ThrowableProp_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, AudioImpactThrowableSpecific) == 0x0002A8, "Member 'ABp_ThrowableProp_Base_C::AudioImpactThrowableSpecific' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, AudioPickUpThrow) == 0x0002B0, "Member 'ABp_ThrowableProp_Base_C::AudioPickUpThrow' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, AudioImpact) == 0x0002B8, "Member 'ABp_ThrowableProp_Base_C::AudioImpact' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, TrailParticle) == 0x0002C0, "Member 'ABp_ThrowableProp_Base_C::TrailParticle' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, Widget) == 0x0002C8, "Member 'ABp_ThrowableProp_Base_C::Widget' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, InteractableMesh) == 0x0002D0, "Member 'ABp_ThrowableProp_Base_C::InteractableMesh' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, HoldingCharacter) == 0x0002D8, "Member 'ABp_ThrowableProp_Base_C::HoldingCharacter' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, AttachRelativeTransform) == 0x0002E0, "Member 'ABp_ThrowableProp_Base_C::AttachRelativeTransform' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, PropIsGrabbed) == 0x000340, "Member 'ABp_ThrowableProp_Base_C::PropIsGrabbed' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, PropIsDropped) == 0x000350, "Member 'ABp_ThrowableProp_Base_C::PropIsDropped' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, GrabThrowableWI) == 0x000360, "Member 'ABp_ThrowableProp_Base_C::GrabThrowableWI' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, Held) == 0x000368, "Member 'ABp_ThrowableProp_Base_C::Held' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, LocalHolder) == 0x000370, "Member 'ABp_ThrowableProp_Base_C::LocalHolder' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, ThrowPowerMax) == 0x000378, "Member 'ABp_ThrowableProp_Base_C::ThrowPowerMax' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, ReleasePowerMultiplier) == 0x000380, "Member 'ABp_ThrowableProp_Base_C::ReleasePowerMultiplier' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, ThrowPowerMin) == 0x000388, "Member 'ABp_ThrowableProp_Base_C::ThrowPowerMin' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, OverrideThrow) == 0x000390, "Member 'ABp_ThrowableProp_Base_C::OverrideThrow' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, ThrowSound) == 0x000398, "Member 'ABp_ThrowableProp_Base_C::ThrowSound' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, PickUpSound) == 0x0003A0, "Member 'ABp_ThrowableProp_Base_C::PickUpSound' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, DropSound) == 0x0003A8, "Member 'ABp_ThrowableProp_Base_C::DropSound' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, GripPoint) == 0x0003B0, "Member 'ABp_ThrowableProp_Base_C::GripPoint' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, UseGripPoint) == 0x000410, "Member 'ABp_ThrowableProp_Base_C::UseGripPoint' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, VolumeCurve) == 0x000418, "Member 'ABp_ThrowableProp_Base_C::VolumeCurve' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, SpawnLocation) == 0x0004A0, "Member 'ABp_ThrowableProp_Base_C::SpawnLocation' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, MaxReleaseVelocity) == 0x0004B8, "Member 'ABp_ThrowableProp_Base_C::MaxReleaseVelocity' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, ThrowingCharacter) == 0x0004C0, "Member 'ABp_ThrowableProp_Base_C::ThrowingCharacter' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, Audio_ImpactSpecific) == 0x0004C8, "Member 'ABp_ThrowableProp_Base_C::Audio_ImpactSpecific' has a wrong offset!");
static_assert(offsetof(ABp_ThrowableProp_Base_C, ItemDefinitionToGrantUponInteraction) == 0x0004D0, "Member 'ABp_ThrowableProp_Base_C::ItemDefinitionToGrantUponInteraction' has a wrong offset!");

}

