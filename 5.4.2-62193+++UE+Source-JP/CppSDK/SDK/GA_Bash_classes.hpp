#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Bash

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_TeamStatus_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_ImpactEffect_structs.hpp"
#include "GA_Equipment_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Bash.GA_Bash_C
// 0x01B0 (0x0790 - 0x05E0)
class UGA_Bash_C : public UGA_Equipment_C
{
public:
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Bash_C;                          // 0x05D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTagContainer                  VulnerabilityTagsToLookFor;                        // 0x05E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_TeamStatus                                  TeamToAffect;                                      // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Charged;                                           // 0x0601(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602[0x2];                                      // 0x0602(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTraceDelay;                                   // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitRange;                                          // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerKnockback;                                   // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MessItemKnockback;                                 // 0x0611(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_612[0x2];                                      // 0x0612(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockBackForce;                                    // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayerKnockbackMultiplier;                         // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AffectedCueGameplayTag;                            // 0x0620(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_ImpactEffect                                ImpactEffectType;                                  // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HeldTimer;                                         // 0x0630(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Swinging;                                          // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Held;                                              // 0x0639(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63A[0x6];                                      // 0x063A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              InitialOneShotSound;                               // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CompatibleSound;                                   // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              AffectedSound;                                     // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              BlockedSound;                                      // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayMaterialLayerSound;                            // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_661[0x7];                                      // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CantApplyHitMessage;                               // 0x0668(0x0010)(Edit, BlueprintVisible, Config)
	bool                                          ModifiedTarget;                                    // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_679[0x7];                                      // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           CompatibleCameraShake;                             // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 SwingCameraShake;                                  // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         CompatibleParticles;                               // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UseNormalForParticles;                             // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699[0x7];                                      // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimInstance*>                  OwnerAmimBPs;                                      // 0x06A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Width;                                             // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Height;                                            // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TraceHightOffset;                                  // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentHitRotationOffset;                          // 0x06C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTimerHandle                           MultiBashTimer;                                    // 0x06E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HitActors;                                         // 0x06E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Debug;                                             // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F9[0x7];                                      // 0x06F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TrailDuration;                                     // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideZVelocity;                                 // 0x0708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_709[0x7];                                      // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ZVelocity;                                         // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseBashMontages;                                   // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemInstance*                          ItemInstance;                                      // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          TraceOnNotify;                                     // 0x0728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_729[0x7];                                      // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_AddTagStackOverTime*       ChargeTask;                                        // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CompatibleHit;                                     // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayLocalCompatibleParticle;                       // 0x0739(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73A[0x6];                                      // 0x073A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputPress*            Wait_For_Press_Async_Task;                         // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CenterLocationForHit;                              // 0x0748(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HitBone;                                           // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeCharged;                                       // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChargeStartTime;                                   // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ignore_Teammates;                                  // 0x0778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_779[0x3];                                      // 0x0779(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           HitDecalID;                                        // 0x077C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnLocalHitDecal;                                // 0x0784(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_785[0x3];                                      // 0x0785(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ChargeTag;                                         // 0x0788(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddAffectedCue(const struct FHitResult& Hit);
	void AddGameplayCueToOwner();
	void ApplyGameplayEffectToHitActorASC(class UAbilitySystemComponent* Target, TSubclassOf<class UGameplayEffect> GameplayEffectClass, const struct FGameplayTag& DataTag, double Magnitude, const struct FHitResult& HitResult, const struct FGameplayTag& StructureDamageTag);
	void ApplyKillAssistedEffect(class UAbilitySystemComponent* TargetASC);
	void Bash_Trace();
	void Bash_With_Hit_Delay();
	void CalculateChargeUsingTime(double TimeHeld, double* Charge);
	void CanAffectTeam(class AActor* Target, bool* Return);
	bool CanApplyHit(class AActor* Actor, const struct FHitResult& Hit, class UAbilitySystemComponentIW** HitActorASC);
	void CanUseStamina(bool* HasBlockingTag);
	void ClearTimers();
	void CommitStaminaCost();
	void Create_Cant_Apply_Hit_Message(class UAbilitySystemComponentIW* HitActorASC, class FText* CantApplyHitMessage_0);
	struct FGameplayCueParameters CreateCosmeticProjectileCueParameters();
	void Display_Cant_Apply_Hit_Message_Auth(class ABP_ResidentCharacter_C* BP_ResidentCharacter, class UAbilitySystemComponentIW* TargetedActorASC);
	void DisplayCantHitMessage(class UAbilitySystemComponentIW* TargetedActorASC, const class UObject* Actor);
	void DoesShieldIntercept(bool* Intercepted, struct FHitResult* OutHit);
	void EnableTrailOnSpawnedActor(bool Enable);
	void EndAbilityAfterDelay();
	void ExecuteUbergraph_GA_Bash(int32 EntryPoint);
	void FinishedTracing();
	struct FVector GetCenterLocationForImpact(const struct FVector& ImpactLocation, const struct FVector& TraceFrom, const struct FVector& ForwardVector);
	double GetChargedTime();
	void GetCosmeticLocationAndNormal(const struct FHitResult& Hit, struct FVector* Location, struct FVector* Normal);
	void GetDamageToShield(const struct FHitResult& HitResult, class UAbilitySystemComponentIW* HitActorASC, int32* Damage);
	void GetEffectCauser(class AActor** EffectCauser);
	void GetHitBashBoneName(class FName* Return);
	void GetImpactEffectType(E_ImpactEffect* Return);
	void GetInitialBashSound(class USoundCue** InitialSound);
	void GetItemAffectedSound(class USoundCue** Return);
	void GetItemCompatibleSound(class USoundCue** Return);
	bool GetNoAbilityCost();
	const struct FVector GetNormal(const struct FVector& Normal);
	void GetOwnerAbilitySystemComponent(class UAbilitySystemComponent** Return);
	void GetOwnerAnimBPs(TArray<class UAnimInstance*>* Array_Element);
	void GetOwnersBlockingVolume(class ABP_BlockingVolume_C** BlockingVolume);
	void GetPercentageCharged(double* Percentage);
	void GetPlayMaterialLayerSound(bool* Return);
	void GetSpawnedActor(class AActor** Return);
	uint8 GetTeamFromActor(class UObject* Actor, bool* TeamFound);
	bool HasMatchEnded();
	void Hit_Actor(const struct FHitResult& HitResult, class UAbilitySystemComponentIW* HitActorASC);
	void Hit_Actor_Now(const struct FHitResult& Hit);
	void HitNonASCActor(class AActor* HitActor, const struct FHitResult& Hit);
	bool HitThisActorAlready(class AActor* Actor);
	bool IsBelowMinimumDurability();
	void K2_ActivateAbility();
	void K2_OnAbilityAdded();
	void K2_OnEndAbility(bool bWasCancelled);
	void Knockback(const struct FVector& ForwardVector, class UObject* Target, bool TargetIsPlayer);
	void KnockBackTarget(const struct FVector& ForwardVector, float Force, class UObject* Target, bool TargetIsPlayer);
	void LocalBlockedCosmetics(class UObject* SpawnedActor);
	void MontageNotify(class FName NotifyName);
	void OnFinish_498B34F041C5F8AB11CA549501BA3FCD();
	void OnFinish_B44E43F4463396E0A71A699915EDF7AA();
	void Play_Compatible_Particle(const struct FVector& Location, const struct FVector& Normal);
	void PlayMontageBash();
	void PlayPhysMatParticle(const struct FVector& Location, const struct FVector& Normal, class UPhysicalMaterial* PhysicalMat);
	void RanOutOfCost();
	void Swing_Cosmetics();
	void Try_Spawn_Hit_Decal(const struct FHitResult& Hit);
	void TryCallShieldBlocked(const struct FHitResult& HitResult, class UAbilitySystemComponentIW* HitActorASC);
	void TryKnockbackMessItem(class UObject* Actor, bool* HitMessItem);
	void TryPlayInitialSound(class AActor* SpawnedActor);

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Bash_C">();
	}
	static class UGA_Bash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Bash_C>();
	}
};
static_assert(alignof(UGA_Bash_C) == 0x000010, "Wrong alignment on UGA_Bash_C");
static_assert(sizeof(UGA_Bash_C) == 0x000790, "Wrong size on UGA_Bash_C");
static_assert(offsetof(UGA_Bash_C, UberGraphFrame_GA_Bash_C) == 0x0005D8, "Member 'UGA_Bash_C::UberGraphFrame_GA_Bash_C' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, VulnerabilityTagsToLookFor) == 0x0005E0, "Member 'UGA_Bash_C::VulnerabilityTagsToLookFor' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, TeamToAffect) == 0x000600, "Member 'UGA_Bash_C::TeamToAffect' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, Charged) == 0x000601, "Member 'UGA_Bash_C::Charged' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, StartTraceDelay) == 0x000604, "Member 'UGA_Bash_C::StartTraceDelay' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, HitRange) == 0x000608, "Member 'UGA_Bash_C::HitRange' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, PlayerKnockback) == 0x000610, "Member 'UGA_Bash_C::PlayerKnockback' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, MessItemKnockback) == 0x000611, "Member 'UGA_Bash_C::MessItemKnockback' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, KnockBackForce) == 0x000614, "Member 'UGA_Bash_C::KnockBackForce' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, PlayerKnockbackMultiplier) == 0x000618, "Member 'UGA_Bash_C::PlayerKnockbackMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, AffectedCueGameplayTag) == 0x000620, "Member 'UGA_Bash_C::AffectedCueGameplayTag' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, ImpactEffectType) == 0x000628, "Member 'UGA_Bash_C::ImpactEffectType' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, HeldTimer) == 0x000630, "Member 'UGA_Bash_C::HeldTimer' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, Swinging) == 0x000638, "Member 'UGA_Bash_C::Swinging' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, Held) == 0x000639, "Member 'UGA_Bash_C::Held' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, InitialOneShotSound) == 0x000640, "Member 'UGA_Bash_C::InitialOneShotSound' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, CompatibleSound) == 0x000648, "Member 'UGA_Bash_C::CompatibleSound' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, AffectedSound) == 0x000650, "Member 'UGA_Bash_C::AffectedSound' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, BlockedSound) == 0x000658, "Member 'UGA_Bash_C::BlockedSound' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, PlayMaterialLayerSound) == 0x000660, "Member 'UGA_Bash_C::PlayMaterialLayerSound' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, CantApplyHitMessage) == 0x000668, "Member 'UGA_Bash_C::CantApplyHitMessage' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, ModifiedTarget) == 0x000678, "Member 'UGA_Bash_C::ModifiedTarget' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, CompatibleCameraShake) == 0x000680, "Member 'UGA_Bash_C::CompatibleCameraShake' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, SwingCameraShake) == 0x000688, "Member 'UGA_Bash_C::SwingCameraShake' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, CompatibleParticles) == 0x000690, "Member 'UGA_Bash_C::CompatibleParticles' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, UseNormalForParticles) == 0x000698, "Member 'UGA_Bash_C::UseNormalForParticles' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, OwnerAmimBPs) == 0x0006A0, "Member 'UGA_Bash_C::OwnerAmimBPs' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, Width) == 0x0006B0, "Member 'UGA_Bash_C::Width' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, Height) == 0x0006B8, "Member 'UGA_Bash_C::Height' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, TraceHightOffset) == 0x0006C0, "Member 'UGA_Bash_C::TraceHightOffset' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, CurrentHitRotationOffset) == 0x0006C8, "Member 'UGA_Bash_C::CurrentHitRotationOffset' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, MultiBashTimer) == 0x0006E0, "Member 'UGA_Bash_C::MultiBashTimer' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, HitActors) == 0x0006E8, "Member 'UGA_Bash_C::HitActors' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, Debug) == 0x0006F8, "Member 'UGA_Bash_C::Debug' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, TrailDuration) == 0x000700, "Member 'UGA_Bash_C::TrailDuration' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, OverrideZVelocity) == 0x000708, "Member 'UGA_Bash_C::OverrideZVelocity' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, ZVelocity) == 0x000710, "Member 'UGA_Bash_C::ZVelocity' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, UseBashMontages) == 0x000718, "Member 'UGA_Bash_C::UseBashMontages' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, ItemInstance) == 0x000720, "Member 'UGA_Bash_C::ItemInstance' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, TraceOnNotify) == 0x000728, "Member 'UGA_Bash_C::TraceOnNotify' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, ChargeTask) == 0x000730, "Member 'UGA_Bash_C::ChargeTask' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, CompatibleHit) == 0x000738, "Member 'UGA_Bash_C::CompatibleHit' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, PlayLocalCompatibleParticle) == 0x000739, "Member 'UGA_Bash_C::PlayLocalCompatibleParticle' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, Wait_For_Press_Async_Task) == 0x000740, "Member 'UGA_Bash_C::Wait_For_Press_Async_Task' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, CenterLocationForHit) == 0x000748, "Member 'UGA_Bash_C::CenterLocationForHit' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, HitBone) == 0x000760, "Member 'UGA_Bash_C::HitBone' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, TimeCharged) == 0x000768, "Member 'UGA_Bash_C::TimeCharged' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, ChargeStartTime) == 0x000770, "Member 'UGA_Bash_C::ChargeStartTime' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, Ignore_Teammates) == 0x000778, "Member 'UGA_Bash_C::Ignore_Teammates' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, HitDecalID) == 0x00077C, "Member 'UGA_Bash_C::HitDecalID' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, SpawnLocalHitDecal) == 0x000784, "Member 'UGA_Bash_C::SpawnLocalHitDecal' has a wrong offset!");
static_assert(offsetof(UGA_Bash_C, ChargeTag) == 0x000788, "Member 'UGA_Bash_C::ChargeTag' has a wrong offset!");

}

