#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_MultipointDeployable

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GA_Equipment_classes.hpp"
#include "JP_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_MultipointDeployable.GA_MultipointDeployable_C
// 0x02B0 (0x0890 - 0x05E0)
class UGA_MultipointDeployable_C : public UGA_Equipment_C
{
public:
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_MultipointDeployable_C;          // 0x05D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_ResidentCharacter_C*                BPResident_Character;                              // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_MultipointDeployableEquipmentInstance_C* EquipmentInstance;                                 // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CurrentTraceHit;                                   // 0x05F0(0x00F8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          TraceHitBool;                                      // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E9[0x7];                                      // 0x06E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     ValidTraceHits;                                    // 0x06F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ABP_PreviewMesh_C*                      PreviewMesh;                                       // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         PointNumber;                                       // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_70C[0x4];                                      // 0x070C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PreviewMesh_C*>              SpawnedPreviewMeshes;                              // 0x0710(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        SphereTraceRadius;                                 // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PlacePointSound;                                   // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ConstructSound;                                    // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDeployabeLegality                     LegalPlacement;                                    // 0x0739(0x000B)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          Initialized;                                       // 0x0744(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_745[0x3];                                      // 0x0745(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemInstance*                          ItemInstance;                                      // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        OptionalAngle;                                     // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OptionalVector;                                    // 0x0758(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimInstance*>                  OwnerAmimBPs;                                      // 0x0770(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          GrantReward;                                       // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_781[0x7];                                      // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Legal_Placement_Material;                          // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Illegal_Placement_Material;                        // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityAsync_WaitGameplayTagAdded*     Async_Action;                                      // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitDelay*                 Async_Task;                                        // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         LastCount;                                         // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseMultipointUnsetAnimState;                      // 0x07AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWaitForAnimationBeforeEndAbility;                 // 0x07AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AE[0x2];                                      // 0x07AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PreviewTargetTransform;                            // 0x07B0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PreviewMesh_C*                      Preview_Mesh;                                      // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_818[0x8];                                      // 0x0818(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuaternionSpringState                 PreviewRotationSpring;                             // 0x0820(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	double                                        PreviewInterpMaxDistance;                          // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceEndOffset;                                    // 0x0868(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            DeployingEffectHandle;                             // 0x0880(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         RequiredPointsCount;                               // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GreyOutSecondaryAbilityOnInit;                     // 0x088C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldSetAnimState;                               // 0x088D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Point();
	void AddDeployingGameplayEffect();
	void Added_A0072EF3441974EDF04C3F901EEDDD3D();
	void AnimPrimaryPressed();
	void AnimSecondaryPressed();
	void Auth_SpawnItem(const TArray<struct FHitResult>& TraceHits, const struct FRotator& PreviewRotation, double OptionalAngle_0, const struct FVector& OptionalVector_0);
	void Blocked_by_Dynamic_Object(bool* NotBlocked);
	struct FVector BoxTraceEnd();
	void BoxTraceHalfSize(double* X, double* Y);
	void CloneSpawnPreviewMesh();
	bool CollisionBetweenPoints();
	void ConstructCosmetics(const struct FVector& Location);
	void DebugPlacement();
	void EndWaitDelayTaskIfExists();
	void EndWaitTagTaskIfExists();
	void ExecuteUbergraph_GA_MultipointDeployable(int32 EntryPoint);
	void GetAllowedObjectTypes(TArray<EObjectTypeQuery>* AllowedObjectTypes);
	void GetEquipmentCasted(class UBP_MultipointDeployableEquipmentInstance_C** AsBP_Deployable_Equipment_Instance);
	void GetItemInstance(class UItemInstance** ItemInstance_0);
	struct FGameplayTag GetItemTag();
	void GetOwnerAnimBPs(TArray<class UAnimInstance*>* Array_Element);
	void GetPreviewMaterial(bool ValidPlacement, class UMaterialInterface** NewParam);
	struct FRotator GetPreviewMeshRotation();
	void GetResidentCasted(class ABP_ResidentCharacter_C** AsBPResidentCharacter);
	void GetSphereTraceStartEnd(const struct FHitResult& StartHit, const struct FHitResult& EndHit, struct FVector* Start, struct FVector* End);
	void GetTagCount(const struct FGameplayTag& Tag, int32* Count);
	void GetTracePoints(class UObject* Object, struct FVector* Start, struct FVector* End);
	void GrantRewardToPlayer(class UEconomyDefinition* EconomyToAdd);
	void HidePreviewMesh();
	void IncrementPlacement();
	void Init();
	void InitializePreviewMeshes();
	void InitializeResultPreviewMesh();
	void IsAboveMinHeight(bool* Return);
	void IsInsideBlocker(bool* IsInside);
	void IsNotOnEnemyPlot(bool* NotOnEnemyPlot);
	bool IsOwnerChargingADropThrow();
	void K2_ActivateAbility();
	void K2_OnAbilityAdded();
	void K2_OnEndAbility(bool bWasCancelled);
	bool LegalAngle();
	bool LegalLengthBetweenPoints();
	void LegalPreviewMeshCollision(bool* Return_Value, class AActor** HitActor);
	void LegalTeam(bool* OnTeamGrounds);
	void MovePreviewMeshToTrace();
	void OnFinish_05BA4BA74289495EA234D5980470C09E();
	void OnFinished_C433343E4649B5EAE596A8A8637F5ECF(int32 ActionNumber);
	void OnPerformAction_C433343E4649B5EAE596A8A8637F5ECF(int32 ActionNumber);
	void OnPress_B1785CF84B0B601BA84D17A61C5C9E32(float TimeWaited);
	void OnRelease_796AF87F43799A4D551C0D998EBAE204(float TimeHeld);
	void OverrideInputStart();
	void PlacementLegalityMessage();
	void PlacePointCosmetics(const struct FVector& Location);
	void PreviewMeshMovementTick();
	void ReMinuswait();
	void RemoveDeployingGameplayEffect();
	bool RequiredAmountOfPoints();
	void ResetPreviewMeshMovementTick();
	void RestartTrace();
	void Set_Materials(class UMaterialInterface* InMaterial, class UPrimitiveComponent* InPrimitive);
	void SetBuildingOutlinePPEnabled(bool Enabled);
	void Spawn_Item(TArray<struct FHitResult>& TraceHits, const struct FRotator& PreviewRotation);
	void SpawnDeployable(TArray<struct FHitResult>& HitResults, const struct FRotator& PreviewRotation, double OptionalAngle_0, const struct FVector& OptionalVector_0);
	bool SphereTraceBetweenPoints(const struct FHitResult& StartHit, const struct FHitResult& EndHit);
	void StartPreviewMeshMovementTick();
	void ToggleM2GreyOut(bool GreyedOut);
	void Trace();
	bool TraceHitContainsIllegalPhysicsMaterial();
	void Update_Placement_Legalality(bool* IsLegal, class FText* DeploymentMessage);
	void UpdateResultPreviewMesh();

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_MultipointDeployable_C">();
	}
	static class UGA_MultipointDeployable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_MultipointDeployable_C>();
	}
};
static_assert(alignof(UGA_MultipointDeployable_C) == 0x000010, "Wrong alignment on UGA_MultipointDeployable_C");
static_assert(sizeof(UGA_MultipointDeployable_C) == 0x000890, "Wrong size on UGA_MultipointDeployable_C");
static_assert(offsetof(UGA_MultipointDeployable_C, UberGraphFrame_GA_MultipointDeployable_C) == 0x0005D8, "Member 'UGA_MultipointDeployable_C::UberGraphFrame_GA_MultipointDeployable_C' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, BPResident_Character) == 0x0005E0, "Member 'UGA_MultipointDeployable_C::BPResident_Character' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, EquipmentInstance) == 0x0005E8, "Member 'UGA_MultipointDeployable_C::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, CurrentTraceHit) == 0x0005F0, "Member 'UGA_MultipointDeployable_C::CurrentTraceHit' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, TraceHitBool) == 0x0006E8, "Member 'UGA_MultipointDeployable_C::TraceHitBool' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, ValidTraceHits) == 0x0006F0, "Member 'UGA_MultipointDeployable_C::ValidTraceHits' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, PreviewMesh) == 0x000700, "Member 'UGA_MultipointDeployable_C::PreviewMesh' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, PointNumber) == 0x000708, "Member 'UGA_MultipointDeployable_C::PointNumber' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, SpawnedPreviewMeshes) == 0x000710, "Member 'UGA_MultipointDeployable_C::SpawnedPreviewMeshes' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, SphereTraceRadius) == 0x000720, "Member 'UGA_MultipointDeployable_C::SphereTraceRadius' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, PlacePointSound) == 0x000728, "Member 'UGA_MultipointDeployable_C::PlacePointSound' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, ConstructSound) == 0x000730, "Member 'UGA_MultipointDeployable_C::ConstructSound' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, Debug) == 0x000738, "Member 'UGA_MultipointDeployable_C::Debug' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, LegalPlacement) == 0x000739, "Member 'UGA_MultipointDeployable_C::LegalPlacement' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, Initialized) == 0x000744, "Member 'UGA_MultipointDeployable_C::Initialized' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, ItemInstance) == 0x000748, "Member 'UGA_MultipointDeployable_C::ItemInstance' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, OptionalAngle) == 0x000750, "Member 'UGA_MultipointDeployable_C::OptionalAngle' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, OptionalVector) == 0x000758, "Member 'UGA_MultipointDeployable_C::OptionalVector' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, OwnerAmimBPs) == 0x000770, "Member 'UGA_MultipointDeployable_C::OwnerAmimBPs' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, GrantReward) == 0x000780, "Member 'UGA_MultipointDeployable_C::GrantReward' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, Legal_Placement_Material) == 0x000788, "Member 'UGA_MultipointDeployable_C::Legal_Placement_Material' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, Illegal_Placement_Material) == 0x000790, "Member 'UGA_MultipointDeployable_C::Illegal_Placement_Material' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, Async_Action) == 0x000798, "Member 'UGA_MultipointDeployable_C::Async_Action' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, Async_Task) == 0x0007A0, "Member 'UGA_MultipointDeployable_C::Async_Task' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, LastCount) == 0x0007A8, "Member 'UGA_MultipointDeployable_C::LastCount' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, bUseMultipointUnsetAnimState) == 0x0007AC, "Member 'UGA_MultipointDeployable_C::bUseMultipointUnsetAnimState' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, bWaitForAnimationBeforeEndAbility) == 0x0007AD, "Member 'UGA_MultipointDeployable_C::bWaitForAnimationBeforeEndAbility' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, PreviewTargetTransform) == 0x0007B0, "Member 'UGA_MultipointDeployable_C::PreviewTargetTransform' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, Preview_Mesh) == 0x000810, "Member 'UGA_MultipointDeployable_C::Preview_Mesh' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, PreviewRotationSpring) == 0x000820, "Member 'UGA_MultipointDeployable_C::PreviewRotationSpring' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, PreviewInterpMaxDistance) == 0x000860, "Member 'UGA_MultipointDeployable_C::PreviewInterpMaxDistance' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, TraceEndOffset) == 0x000868, "Member 'UGA_MultipointDeployable_C::TraceEndOffset' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, DeployingEffectHandle) == 0x000880, "Member 'UGA_MultipointDeployable_C::DeployingEffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, RequiredPointsCount) == 0x000888, "Member 'UGA_MultipointDeployable_C::RequiredPointsCount' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, GreyOutSecondaryAbilityOnInit) == 0x00088C, "Member 'UGA_MultipointDeployable_C::GreyOutSecondaryAbilityOnInit' has a wrong offset!");
static_assert(offsetof(UGA_MultipointDeployable_C, bShouldSetAnimState) == 0x00088D, "Member 'UGA_MultipointDeployable_C::bShouldSetAnimState' has a wrong offset!");

}

