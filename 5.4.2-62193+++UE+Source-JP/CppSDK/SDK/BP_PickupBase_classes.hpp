#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PickupBase

#include "Basic.hpp"

#include "IWCore_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "JP_structs.hpp"
#include "JP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PickupBase.BP_PickupBase_C
// 0x0360 (0x0600 - 0x02A0)
class ABP_PickupBase_C : public AStaticMeshActorJP
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PingableComponent_C*                BP_PingableComponent;                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioImpactSpecific;                               // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioImpactSurface;                                // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        InteractWidgetLocation;                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   InteractableMesh;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroyOnPickup;                                   // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AmmoTag;                                           // 0x02D4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           MaxAmmoTag;                                        // 0x02DC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemDefinition*                        ItemToGrant;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             On_PickedUp;                                       // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             On_PickedUpSucces;                                 // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         AmountToGrant;                                     // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StoredDurability;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     InteractionMaterial;                               // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UItemInstance*                          ItemInInventory;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagStackContainer             CachedTagStacks;                                   // 0x0330(0x0180)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UInventoryComponent*                    Inventory;                                         // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                InteractingResidentCharacter;                      // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroyIfEmptied;                                  // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewItemForCharacter;                               // 0x04C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2[0x6];                                      // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DropSound;                                         // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PickUpSound;                                       // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FPPPickupMontage;                                  // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TPPPickupMontage;                                  // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   ItemText;                                          // 0x04E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   InventoryStatus;                                   // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            FreeInventoryColor;                                // 0x0508(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            FullInventoryColor;                                // 0x051C(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            WidgetColor;                                       // 0x0530(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Interactable;                                      // 0x0544(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_545[0x3];                                      // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InteractingActor;                                  // 0x0548(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          OnCooldown;                                        // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CoolDownTime;                                      // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReloadWhenHousesLoaded;                            // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561[0x3];                                      // 0x0561(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRuntimeFloatCurve                     VolumeCurve;                                       // 0x0568(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        HitSoundVelocityThreshold;                         // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NormalizeToRangeMaxVelocity;                       // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Ammo(int32 AmmoCount);
	class UItemInstance* AddNewItem(class UInventoryComponent* Inventory_0);
	int32 AmmoInPickup();
	void AssignCacheToItem(class UItemInstance* Item);
	void BndEvt__BP_PickupBase_StaticMeshComponent_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	int32 CalculateAmmoToAdd();
	bool CanActivateTrap();
	void CancelInteraction(class UPrimitiveComponent* InteractionComponent);
	void CheckIfItemAlreadyInInventory(class AActor* InteractingActor_0, bool* ItemAlreadyInInventory);
	void DisplayFullAmmoMessage_Auth(class ABP_ResidentCharacter_C* BP_ResidentCharacter);
	void DisplayFullInventoryMessage_Auth(class ABP_ResidentCharacter_C* BP_ResidentCharacter);
	void Event_Interact_Cosmetics(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent);
	void ExecuteUbergraph_BP_PickupBase(int32 EntryPoint);
	void GetDurability(double* Amount);
	void GetInteractSound();
	void GetItemColor(struct FSlateColor* SlateColor, int32* StencilValue);
	void GetNewWidgetColor(struct FSlateColor* NewColor);
	void GetOptionalText(class FText* Return, class FText* Optional_Second_Line);
	void GetPriority(int32* Priority_0);
	void GetRenderMeshes(TArray<class UMeshComponent*>* Meshes);
	void GetWidgetLocation(struct FVector* Location);
	void HideInteractionWidget(bool* Return);
	void HighConstrastModeChanged(bool IsEnabled);
	void Interact_Pressed_Succes(class AActor* InteractingActor_0);
	void Interactable_Cosmetics(bool Interactable_0);
	void Interactable_In_Focus(bool InFocus);
	void InteractableCancelInteraction(class UPrimitiveComponent* InteractionComponent);
	void InteractPressed(class AActor* InteractingActor_0);
	void InteractReleased(class AActor* InteractingActor_0);
	void IsInFocus(class AActor* Focusing_Actor);
	void IsInteractable(bool* Interactable_0);
	bool IsInventoryNotFull(class UInventoryComponent* Inventory_0);
	void IsThereAmmoMaximum(bool* Return_Value);
	void Knockback(const struct FVector& Velocity, bool XYOverride, bool ZOverride, double AirControlMultiplier, bool* Void);
	void MaxAmmoUnsetWarning();
	void Multi_Interact_Pressed_Cosmetics();
	void Multi_Launch(const struct FVector& Velocity);
	void Multi_Play_Pick_Up_Audio();
	void MulticastPlayTPPPickupMontage();
	void NonASCActorHit(class AActor* Instigator_0, class UGameplayAbilityIW* Ability, const struct FHitResult& Hit);
	void On_PickedUp__DelegateSignature(bool Succes);
	void On_PickedUpSucces__DelegateSignature();
	void OnBlendOut_770EEC2341F018E6642145BB4D3B8DCF(class FName NotifyName);
	void OnBlendOut_C75049FD4FE6C1D28317FF882A5F7D3D(class FName NotifyName);
	void OnCompleted_770EEC2341F018E6642145BB4D3B8DCF(class FName NotifyName);
	void OnCompleted_C75049FD4FE6C1D28317FF882A5F7D3D(class FName NotifyName);
	void OnEnded_8DD6AD0C484431366F22F794B13C804E();
	void OnInterrupted_770EEC2341F018E6642145BB4D3B8DCF(class FName NotifyName);
	void OnInterrupted_C75049FD4FE6C1D28317FF882A5F7D3D(class FName NotifyName);
	void OnNotifyBegin_770EEC2341F018E6642145BB4D3B8DCF(class FName NotifyName);
	void OnNotifyBegin_C75049FD4FE6C1D28317FF882A5F7D3D(class FName NotifyName);
	void OnNotifyEnd_770EEC2341F018E6642145BB4D3B8DCF(class FName NotifyName);
	void OnNotifyEnd_C75049FD4FE6C1D28317FF882A5F7D3D(class FName NotifyName);
	void OnRep_Interactable();
	void PickupMessage();
	void PlayDropSound();
	void PlayErrorSound(class USoundBase* Sound);
	void PlayImpactCosmetics(const struct FVector& Location, const struct FHitResult& Hit, class UPrimitiveComponent* MyComponent);
	void PostInteract(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent);
	void PreInteract(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent);
	void ReceiveBeginPlay();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void RegisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor_0);
	void ReloadAfterHousesLoaded(bool* Return);
	void Reset_Cooldown();
	void ResetInventoryWidget();
	void Set_Widget_Text_and_Color(class UItemDefinition* Definition, bool InventoryFull, const class FText& OptionalSecondText);
	void SetDurability(double Amount, bool* Void);
	void SetHighContrastMode(bool Enabled);
	void SetHoveredComponent(class UInteractionComponent_C* HoveredComponent, bool* Void);
	void SetInteractable(bool Interactable_0);
	void SetWidgetForAmmoItems();
	bool ShouldAmmoBeAdded();
	void UnregisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor_0);
	void UpdateInventoryWidget(class AActor* InteractingActor_0);
	void UserConstructionScript();

	float GetInteractionDuration(class UPrimitiveComponent* InteractionComponent) const;
	void GetPostInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	void GetPreInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForEnemyTeam(class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForInteraction(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PickupBase_C">();
	}
	static class ABP_PickupBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PickupBase_C>();
	}
};
static_assert(alignof(ABP_PickupBase_C) == 0x000008, "Wrong alignment on ABP_PickupBase_C");
static_assert(sizeof(ABP_PickupBase_C) == 0x000600, "Wrong size on ABP_PickupBase_C");
static_assert(offsetof(ABP_PickupBase_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_PickupBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, BP_PingableComponent) == 0x0002A8, "Member 'ABP_PickupBase_C::BP_PingableComponent' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, AudioImpactSpecific) == 0x0002B0, "Member 'ABP_PickupBase_C::AudioImpactSpecific' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, AudioImpactSurface) == 0x0002B8, "Member 'ABP_PickupBase_C::AudioImpactSurface' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, InteractWidgetLocation) == 0x0002C0, "Member 'ABP_PickupBase_C::InteractWidgetLocation' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, InteractableMesh) == 0x0002C8, "Member 'ABP_PickupBase_C::InteractableMesh' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, DestroyOnPickup) == 0x0002D0, "Member 'ABP_PickupBase_C::DestroyOnPickup' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, AmmoTag) == 0x0002D4, "Member 'ABP_PickupBase_C::AmmoTag' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, MaxAmmoTag) == 0x0002DC, "Member 'ABP_PickupBase_C::MaxAmmoTag' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, ItemToGrant) == 0x0002E8, "Member 'ABP_PickupBase_C::ItemToGrant' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, On_PickedUp) == 0x0002F0, "Member 'ABP_PickupBase_C::On_PickedUp' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, On_PickedUpSucces) == 0x000300, "Member 'ABP_PickupBase_C::On_PickedUpSucces' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, AmountToGrant) == 0x000310, "Member 'ABP_PickupBase_C::AmountToGrant' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, StoredDurability) == 0x000318, "Member 'ABP_PickupBase_C::StoredDurability' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, InteractionMaterial) == 0x000320, "Member 'ABP_PickupBase_C::InteractionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, ItemInInventory) == 0x000328, "Member 'ABP_PickupBase_C::ItemInInventory' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, CachedTagStacks) == 0x000330, "Member 'ABP_PickupBase_C::CachedTagStacks' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, Inventory) == 0x0004B0, "Member 'ABP_PickupBase_C::Inventory' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, InteractingResidentCharacter) == 0x0004B8, "Member 'ABP_PickupBase_C::InteractingResidentCharacter' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, DestroyIfEmptied) == 0x0004C0, "Member 'ABP_PickupBase_C::DestroyIfEmptied' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, NewItemForCharacter) == 0x0004C1, "Member 'ABP_PickupBase_C::NewItemForCharacter' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, DropSound) == 0x0004C8, "Member 'ABP_PickupBase_C::DropSound' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, PickUpSound) == 0x0004D0, "Member 'ABP_PickupBase_C::PickUpSound' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, FPPPickupMontage) == 0x0004D8, "Member 'ABP_PickupBase_C::FPPPickupMontage' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, TPPPickupMontage) == 0x0004E0, "Member 'ABP_PickupBase_C::TPPPickupMontage' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, ItemText) == 0x0004E8, "Member 'ABP_PickupBase_C::ItemText' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, InventoryStatus) == 0x0004F8, "Member 'ABP_PickupBase_C::InventoryStatus' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, FreeInventoryColor) == 0x000508, "Member 'ABP_PickupBase_C::FreeInventoryColor' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, FullInventoryColor) == 0x00051C, "Member 'ABP_PickupBase_C::FullInventoryColor' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, WidgetColor) == 0x000530, "Member 'ABP_PickupBase_C::WidgetColor' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, Interactable) == 0x000544, "Member 'ABP_PickupBase_C::Interactable' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, InteractingActor) == 0x000548, "Member 'ABP_PickupBase_C::InteractingActor' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, OnCooldown) == 0x000550, "Member 'ABP_PickupBase_C::OnCooldown' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, CoolDownTime) == 0x000558, "Member 'ABP_PickupBase_C::CoolDownTime' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, ReloadWhenHousesLoaded) == 0x000560, "Member 'ABP_PickupBase_C::ReloadWhenHousesLoaded' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, Priority) == 0x000564, "Member 'ABP_PickupBase_C::Priority' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, VolumeCurve) == 0x000568, "Member 'ABP_PickupBase_C::VolumeCurve' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, HitSoundVelocityThreshold) == 0x0005F0, "Member 'ABP_PickupBase_C::HitSoundVelocityThreshold' has a wrong offset!");
static_assert(offsetof(ABP_PickupBase_C, NormalizeToRangeMaxVelocity) == 0x0005F8, "Member 'ABP_PickupBase_C::NormalizeToRangeMaxVelocity' has a wrong offset!");

}

