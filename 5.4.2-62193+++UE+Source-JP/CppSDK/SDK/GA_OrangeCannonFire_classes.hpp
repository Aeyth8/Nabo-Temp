#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_OrangeCannonFire

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GA_ThrowProjectile_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_OrangeCannonFire.GA_OrangeCannonFire_C
// 0x0040 (0x0620 - 0x05E0)
class UGA_OrangeCannonFire_C final : public UGA_ThrowProjectile_C
{
public:
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_OrangeCannonFire_C;              // 0x05D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class APawn*                                  OwnerAsPawn;                                       // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           FailGameplayCue;                                   // 0x05E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          AimRandomness;                                     // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	float                                         Hip_fire_Spread_Cone_Half_Angle_in_Degrees;        // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RandomRotation;                                    // 0x0600(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void CancelAim();
	void CreateCosmeticProjectile();
	struct FGameplayCueParameters CreateCosmeticProjectileCueParameters();
	void CreateRandomDirection();
	void ExecuteCues();
	void ExecuteUbergraph_GA_OrangeCannonFire(int32 EntryPoint);
	struct FTransform GetProjectileData(class APawn** OwnerAsPawn_0, struct FVector* LocalSpaceVelocity, double* ChargePercentage, double* GravityScale, double* MinDamage, double* MaxDamage, double* MinSpeed, double* MaxSpeed);
	struct FTransform GetRandomizedSpawnTransform(const struct FTransform& SpawnTransform);
	void K2_ActivateAbility();
	void Server_SpawnProjectiles(const struct FTransform& Spawn_Transform, class APawn* Owner, const struct FVector& LocalVelocity, double PercentageCharged, double GravityScale, double MinDamage, double MaxDamage, double MinSpeed, double MaxSpeed, double SructureDamageMultiplier);
	void SetCountFromGameplayTag();

	double Get_Percentage_Charged() const;
	double GetGravityScale() const;
	struct FTransform GetProjectileTransform() const;
	bool IsHipFire() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_OrangeCannonFire_C">();
	}
	static class UGA_OrangeCannonFire_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_OrangeCannonFire_C>();
	}
};
static_assert(alignof(UGA_OrangeCannonFire_C) == 0x000010, "Wrong alignment on UGA_OrangeCannonFire_C");
static_assert(sizeof(UGA_OrangeCannonFire_C) == 0x000620, "Wrong size on UGA_OrangeCannonFire_C");
static_assert(offsetof(UGA_OrangeCannonFire_C, UberGraphFrame_GA_OrangeCannonFire_C) == 0x0005D8, "Member 'UGA_OrangeCannonFire_C::UberGraphFrame_GA_OrangeCannonFire_C' has a wrong offset!");
static_assert(offsetof(UGA_OrangeCannonFire_C, OwnerAsPawn) == 0x0005E0, "Member 'UGA_OrangeCannonFire_C::OwnerAsPawn' has a wrong offset!");
static_assert(offsetof(UGA_OrangeCannonFire_C, FailGameplayCue) == 0x0005E8, "Member 'UGA_OrangeCannonFire_C::FailGameplayCue' has a wrong offset!");
static_assert(offsetof(UGA_OrangeCannonFire_C, AimRandomness) == 0x0005F0, "Member 'UGA_OrangeCannonFire_C::AimRandomness' has a wrong offset!");
static_assert(offsetof(UGA_OrangeCannonFire_C, Hip_fire_Spread_Cone_Half_Angle_in_Degrees) == 0x0005F8, "Member 'UGA_OrangeCannonFire_C::Hip_fire_Spread_Cone_Half_Angle_in_Degrees' has a wrong offset!");
static_assert(offsetof(UGA_OrangeCannonFire_C, RandomRotation) == 0x000600, "Member 'UGA_OrangeCannonFire_C::RandomRotation' has a wrong offset!");

}

