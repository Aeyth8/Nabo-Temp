#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Lockpickable

#include "Basic.hpp"

#include "I_Lockpickable_classes.hpp"
#include "I_Lockpickable_parameters.hpp"


namespace SDK
{

// Function I_Lockpickable.I_Lockpickable_C.GetLockPickDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Lockpickable_C::GetLockPickDuration(int32* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Lockpickable_C", "GetLockPickDuration");

	Params::I_Lockpickable_C_GetLockPickDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function I_Lockpickable.I_Lockpickable_C.IsClosed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Open                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Lockpickable_C::IsClosed(bool* Open)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Lockpickable_C", "IsClosed");

	Params::I_Lockpickable_C_IsClosed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Open != nullptr)
		*Open = Parms.Open;
}


// Function I_Lockpickable.I_Lockpickable_C.IsNotLockpickable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNotLockpickable_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Lockpickable_C::IsNotLockpickable(bool* IsNotLockpickable_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Lockpickable_C", "IsNotLockpickable");

	Params::I_Lockpickable_C_IsNotLockpickable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNotLockpickable_0 != nullptr)
		*IsNotLockpickable_0 = Parms.IsNotLockpickable_0;
}


// Function I_Lockpickable.I_Lockpickable_C.LockpickBegin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PickerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Lockpickable_C::LockpickBegin(class APlayerController* PickerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Lockpickable_C", "LockpickBegin");

	Params::I_Lockpickable_C_LockpickBegin Parms{};

	Parms.PickerController = PickerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function I_Lockpickable.I_Lockpickable_C.LockpickSuccess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PickerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Lockpickable_C::LockpickSuccess(class APlayerController* PickerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Lockpickable_C", "LockpickSuccess");

	Params::I_Lockpickable_C_LockpickSuccess Parms{};

	Parms.PickerController = PickerController;

	UObject::ProcessEvent(Func, &Parms);
}

}

