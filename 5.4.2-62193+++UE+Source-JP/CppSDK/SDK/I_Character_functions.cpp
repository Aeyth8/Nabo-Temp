#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Character

#include "Basic.hpp"

#include "I_Character_classes.hpp"
#include "I_Character_parameters.hpp"


namespace SDK
{

// Function I_Character.I_Character_C.Get1PMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           OnePMesh                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void II_Character_C::Get1PMesh(class USkeletalMeshComponent** OnePMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Character_C", "Get1PMesh");

	Params::I_Character_C_Get1PMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OnePMesh != nullptr)
		*OnePMesh = Parms.OnePMesh;
}


// Function I_Character.I_Character_C.Get3PMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           ThreePMesh                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void II_Character_C::Get3PMesh(class USkeletalMeshComponent** ThreePMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Character_C", "Get3PMesh");

	Params::I_Character_C_Get3PMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ThreePMesh != nullptr)
		*ThreePMesh = Parms.ThreePMesh;
}


// Function I_Character.I_Character_C.GetAnimBPs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UAnimInstance*>            AnimBPs                                                (Parm, OutParm)

void II_Character_C::GetAnimBPs(TArray<class UAnimInstance*>* AnimBPs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Character_C", "GetAnimBPs");

	Params::I_Character_C_GetAnimBPs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimBPs != nullptr)
		*AnimBPs = std::move(Parms.AnimBPs);
}


// Function I_Character.I_Character_C.GetCharacterName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterName                          CharacterName                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Character_C::GetCharacterName(ECharacterName* CharacterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Character_C", "GetCharacterName");

	Params::I_Character_C_GetCharacterName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharacterName != nullptr)
		*CharacterName = Parms.CharacterName;
}


// Function I_Character.I_Character_C.GetCharacterSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharacterSize                          CharacterSize                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Character_C::GetCharacterSize(ECharacterSize* CharacterSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Character_C", "GetCharacterSize");

	Params::I_Character_C_GetCharacterSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharacterSize != nullptr)
		*CharacterSize = Parms.CharacterSize;
}


// Function I_Character.I_Character_C.GetGuardDogTargetOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetOffset                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Character_C::GetGuardDogTargetOffset(struct FVector* TargetOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Character_C", "GetGuardDogTargetOffset");

	Params::I_Character_C_GetGuardDogTargetOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetOffset != nullptr)
		*TargetOffset = std::move(Parms.TargetOffset);
}


// Function I_Character.I_Character_C.GetInventory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UShopInteractionAC_C*             Inventory                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void II_Character_C::GetInventory(class UShopInteractionAC_C** Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Character_C", "GetInventory");

	Params::I_Character_C_GetInventory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Inventory != nullptr)
		*Inventory = Parms.Inventory;
}


// Function I_Character.I_Character_C.GetIsDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dead                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Character_C::GetIsDead(bool* Dead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Character_C", "GetIsDead");

	Params::I_Character_C_GetIsDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dead != nullptr)
		*Dead = Parms.Dead;
}


// Function I_Character.I_Character_C.GetJPPlayerController
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerControllerJP*              PlayerController                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Character_C::GetJPPlayerController(class APlayerControllerJP** PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Character_C", "GetJPPlayerController");

	Params::I_Character_C_GetJPPlayerController Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerController != nullptr)
		*PlayerController = Parms.PlayerController;
}


// Function I_Character.I_Character_C.SetIsDead
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Dead                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OptionalVelocity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKillInfo                        KillInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void II_Character_C::SetIsDead(bool Dead, const struct FVector& OptionalVelocity, const struct FKillInfo& KillInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Character_C", "SetIsDead");

	Params::I_Character_C_SetIsDead Parms{};

	Parms.Dead = Dead;
	Parms.OptionalVelocity = std::move(OptionalVelocity);
	Parms.KillInfo = std::move(KillInfo);

	UObject::ProcessEvent(Func, &Parms);
}

}

