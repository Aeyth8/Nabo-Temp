#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Window

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "E_ImpactEffect_structs.hpp"
#include "JP_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Window.BP_Window_C.AddImpulseToBrokenWindow
// 0x0090 (0x0090 - 0x0000)
struct BP_Window_C_AddImpulseToBrokenWindow final
{
public:
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_AddImpulseToBrokenWindow) == 0x000008, "Wrong alignment on BP_Window_C_AddImpulseToBrokenWindow");
static_assert(sizeof(BP_Window_C_AddImpulseToBrokenWindow) == 0x000090, "Wrong size on BP_Window_C_AddImpulseToBrokenWindow");
static_assert(offsetof(BP_Window_C_AddImpulseToBrokenWindow, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000000, "Member 'BP_Window_C_AddImpulseToBrokenWindow::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_AddImpulseToBrokenWindow, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_Window_C_AddImpulseToBrokenWindow::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_AddImpulseToBrokenWindow, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_Window_C_AddImpulseToBrokenWindow::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_AddImpulseToBrokenWindow, CallFunc_FindLookAtRotation_ReturnValue) == 0x000048, "Member 'BP_Window_C_AddImpulseToBrokenWindow::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_AddImpulseToBrokenWindow, CallFunc_GetForwardVector_ReturnValue) == 0x000060, "Member 'BP_Window_C_AddImpulseToBrokenWindow::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_AddImpulseToBrokenWindow, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000078, "Member 'BP_Window_C_AddImpulseToBrokenWindow::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.AddMeshBounceComponents
// 0x0010 (0x0010 - 0x0000)
struct BP_Window_C_AddMeshBounceComponents final
{
public:
	TArray<class UMeshComponent*>                 K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_Window_C_AddMeshBounceComponents) == 0x000008, "Wrong alignment on BP_Window_C_AddMeshBounceComponents");
static_assert(sizeof(BP_Window_C_AddMeshBounceComponents) == 0x000010, "Wrong size on BP_Window_C_AddMeshBounceComponents");
static_assert(offsetof(BP_Window_C_AddMeshBounceComponents, K2Node_MakeArray_Array) == 0x000000, "Member 'BP_Window_C_AddMeshBounceComponents::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_Window.BP_Window_C.ApplyDebugDamage
// 0x0030 (0x0030 - 0x0000)
struct BP_Window_C_ApplyDebugDamage final
{
public:
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue;             // 0x0000(0x0010)()
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x0010(0x0010)()
	bool                                          CallFunc_ApplyGameplayEffectSpecToTargetWithChange_Changed; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_ApplyGameplayEffectSpecToTargetWithChange_ReturnValue; // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_ApplyDebugDamage) == 0x000008, "Wrong alignment on BP_Window_C_ApplyDebugDamage");
static_assert(sizeof(BP_Window_C_ApplyDebugDamage) == 0x000030, "Wrong size on BP_Window_C_ApplyDebugDamage");
static_assert(offsetof(BP_Window_C_ApplyDebugDamage, CallFunc_MakeOutgoingSpec_ReturnValue) == 0x000000, "Member 'BP_Window_C_ApplyDebugDamage::CallFunc_MakeOutgoingSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ApplyDebugDamage, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x000010, "Member 'BP_Window_C_ApplyDebugDamage::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ApplyDebugDamage, CallFunc_ApplyGameplayEffectSpecToTargetWithChange_Changed) == 0x000020, "Member 'BP_Window_C_ApplyDebugDamage::CallFunc_ApplyGameplayEffectSpecToTargetWithChange_Changed' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ApplyDebugDamage, CallFunc_ApplyGameplayEffectSpecToTargetWithChange_ReturnValue) == 0x000024, "Member 'BP_Window_C_ApplyDebugDamage::CallFunc_ApplyGameplayEffectSpecToTargetWithChange_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.Event Apply Audio Multiplier
// 0x0008 (0x0008 - 0x0000)
struct BP_Window_C_Event_Apply_Audio_Multiplier final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_Event_Apply_Audio_Multiplier) == 0x000008, "Wrong alignment on BP_Window_C_Event_Apply_Audio_Multiplier");
static_assert(sizeof(BP_Window_C_Event_Apply_Audio_Multiplier) == 0x000008, "Wrong size on BP_Window_C_Event_Apply_Audio_Multiplier");
static_assert(offsetof(BP_Window_C_Event_Apply_Audio_Multiplier, InteractingActor) == 0x000000, "Member 'BP_Window_C_Event_Apply_Audio_Multiplier::InteractingActor' has a wrong offset!");

// Function BP_Window.BP_Window_C.ExecuteUbergraph_BP_Window
// 0x0630 (0x0630 - 0x0000)
struct BP_Window_C_ExecuteUbergraph_BP_Window final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAnimationAsset*                        Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_Event_PickerController_1;                   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        Temp_object_Variable_1;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Location_1;                           // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitImpulse;                           // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ImpactEffect                                K2Node_Event_ImpactEffect;                         // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_SabotagingActor;                      // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_InteractionComponent;                 // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInteractingActorATeamMember_Return;     // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDotProductTo_ReturnValue;              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_PlayerControllerMessage_C> K2Node_DynamicCast_AsI_Player_Controller_Message;  // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_PickerController;                     // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Delta;                                // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Causer;                               // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FCombatParticipant                     K2Node_Event_CombatParticipant;                    // 0x0120(0x0060)(ConstParm)
	struct FKillMethod                            K2Node_Event_KillMethod;                           // 0x0180(0x02E8)(ConstParm)
	struct FVector_NetQuantize                    K2Node_Event_Location;                             // 0x0468(0x0018)(NoDestructor, HasGetValueTypeHash)
	class UEconomySubsystem*                      CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0480(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WithdrawEconomyFromTeamAtPoint_ReturnValue; // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_InteractingActor;               // 0x0490(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_InteractionAudioMultiplier_C> K2Node_DynamicCast_AsI_Interaction_Audio_Multiplier; // 0x0498(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x04A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AA[0x6];                                      // 0x04AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEconomySubsystem*                      CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimationAsset*                        Temp_object_Variable_2;                            // 0x04B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimationAsset*                        Temp_object_Variable_3;                            // 0x04C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1; // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x3];                                      // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1; // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        K2Node_Select_Default;                             // 0x04D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x04E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0500(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0560(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_569[0x7];                                      // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Window_Destroyed_C*                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0570(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimationAsset*                        K2Node_Select_Default_1;                           // 0x0578(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_4;               // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Focusing_Actor;                       // 0x0588(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0590(0x0010)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x05A0(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x05B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FPlayerMessage                         K2Node_MakeStruct_PlayerMessage;                   // 0x05C0(0x0058)()
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_1;    // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_2;    // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_ExecuteUbergraph_BP_Window) == 0x000010, "Wrong alignment on BP_Window_C_ExecuteUbergraph_BP_Window");
static_assert(sizeof(BP_Window_C_ExecuteUbergraph_BP_Window) == 0x000630, "Wrong size on BP_Window_C_ExecuteUbergraph_BP_Window");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, EntryPoint) == 0x000000, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute) == 0x000004, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue) == 0x000008, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00000C, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_bool_Has_Been_Initd_Variable) == 0x00000D, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_object_Variable) == 0x000028, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_HasAuthority_ReturnValue) == 0x000030, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_HasAuthority_ReturnValue_1) == 0x000031, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_bool_Variable) == 0x000032, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_HasAuthority_ReturnValue_2) == 0x000033, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_bool_Has_Been_Initd_Variable_1) == 0x000034, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_bool_IsClosed_Variable) == 0x000035, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_bool_Has_Been_Initd_Variable_2) == 0x000036, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_bool_IsClosed_Variable_1) == 0x000037, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_PickerController_1) == 0x000038, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_PickerController_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_object_Variable_1) == 0x000048, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_Location_1) == 0x000050, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_Location_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_HitImpulse) == 0x000068, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_HitImpulse' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_ImpactEffect) == 0x000080, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_ImpactEffect' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_SabotagingActor) == 0x000088, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_SabotagingActor' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_bool_IsClosed_Variable_2) == 0x000090, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_HasAuthority_ReturnValue_3) == 0x000091, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_InteractingActor) == 0x000098, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_InteractionComponent) == 0x0000A0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_InteractionComponent' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000A8, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_DynamicCast_AsPawn) == 0x0000C0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_IsInteractingActorATeamMember_Return) == 0x0000C9, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_IsInteractingActorATeamMember_Return' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_IsLocallyControlled_ReturnValue) == 0x0000CA, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_BooleanOR_ReturnValue) == 0x0000CB, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_GetController_ReturnValue) == 0x0000D0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_GetDotProductTo_ReturnValue) == 0x0000D8, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_GetDotProductTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_DynamicCast_AsPlayer_Controller) == 0x0000E0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_DynamicCast_bSuccess_1) == 0x0000E8, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000E9, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_DynamicCast_AsI_Player_Controller_Message) == 0x0000F0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_DynamicCast_AsI_Player_Controller_Message' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_DynamicCast_bSuccess_2) == 0x000100, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_IsPlaying_ReturnValue) == 0x000101, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_PickerController) == 0x000108, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_PickerController' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_Delta) == 0x000110, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_Delta' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_Causer) == 0x000118, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_Causer' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_CombatParticipant) == 0x000120, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_CombatParticipant' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_KillMethod) == 0x000180, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_KillMethod' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_Location) == 0x000468, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_Location' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000480, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_WithdrawEconomyFromTeamAtPoint_ReturnValue) == 0x000488, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_WithdrawEconomyFromTeamAtPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_CustomEvent_InteractingActor) == 0x000490, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_CustomEvent_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_DynamicCast_AsI_Interaction_Audio_Multiplier) == 0x000498, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_DynamicCast_AsI_Interaction_Audio_Multiplier' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_DynamicCast_bSuccess_3) == 0x0004A8, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_DoesImplementInterface_ReturnValue) == 0x0004A9, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x0004B0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_object_Variable_2) == 0x0004B8, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_object_Variable_3) == 0x0004C0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1) == 0x0004C8, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1) == 0x0004CC, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0004D0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Select_Default) == 0x0004D8, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0004E0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000500, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000560, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, Temp_bool_Variable_1) == 0x000568, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_FinishSpawningActor_ReturnValue) == 0x000570, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Select_Default_1) == 0x000578, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_HasAuthority_ReturnValue_4) == 0x000580, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_HasAuthority_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_Focusing_Actor) == 0x000588, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_Focusing_Actor' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_MakeLiteralText_ReturnValue) == 0x000590, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_TextToUpper_ReturnValue) == 0x0005A0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_Conv_TextToString_ReturnValue) == 0x0005B0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_MakeStruct_PlayerMessage) == 0x0005C0, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_MakeStruct_PlayerMessage' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000618, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_Greater_DoubleDouble_A_ImplicitCast_1) == 0x000620, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_Greater_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_Greater_DoubleDouble_A_ImplicitCast_2) == 0x000628, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_Greater_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");

// Function BP_Window.BP_Window_C.GetCenterLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_Window_C_GetCenterLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_GetCenterLocation) == 0x000008, "Wrong alignment on BP_Window_C_GetCenterLocation");
static_assert(sizeof(BP_Window_C_GetCenterLocation) == 0x000030, "Wrong size on BP_Window_C_GetCenterLocation");
static_assert(offsetof(BP_Window_C_GetCenterLocation, Location) == 0x000000, "Member 'BP_Window_C_GetCenterLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_Window_C_GetCenterLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_Window_C_GetCenterLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.GetInteractableLockedCosmetics
// 0x0001 (0x0001 - 0x0000)
struct BP_Window_C_GetInteractableLockedCosmetics final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_GetInteractableLockedCosmetics) == 0x000001, "Wrong alignment on BP_Window_C_GetInteractableLockedCosmetics");
static_assert(sizeof(BP_Window_C_GetInteractableLockedCosmetics) == 0x000001, "Wrong size on BP_Window_C_GetInteractableLockedCosmetics");
static_assert(offsetof(BP_Window_C_GetInteractableLockedCosmetics, Return) == 0x000000, "Member 'BP_Window_C_GetInteractableLockedCosmetics::Return' has a wrong offset!");

// Function BP_Window.BP_Window_C.GetLockPickDuration
// 0x0004 (0x0004 - 0x0000)
struct BP_Window_C_GetLockPickDuration final
{
public:
	int32                                         Return;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_GetLockPickDuration) == 0x000004, "Wrong alignment on BP_Window_C_GetLockPickDuration");
static_assert(sizeof(BP_Window_C_GetLockPickDuration) == 0x000004, "Wrong size on BP_Window_C_GetLockPickDuration");
static_assert(offsetof(BP_Window_C_GetLockPickDuration, Return) == 0x000000, "Member 'BP_Window_C_GetLockPickDuration::Return' has a wrong offset!");

// Function BP_Window.BP_Window_C.GetWidgetLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_Window_C_GetWidgetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_GetWidgetLocation) == 0x000008, "Wrong alignment on BP_Window_C_GetWidgetLocation");
static_assert(sizeof(BP_Window_C_GetWidgetLocation) == 0x000030, "Wrong size on BP_Window_C_GetWidgetLocation");
static_assert(offsetof(BP_Window_C_GetWidgetLocation, Location) == 0x000000, "Member 'BP_Window_C_GetWidgetLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_Window_C_GetWidgetLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_Window_C_GetWidgetLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.GetWindowBaseHealth
// 0x0018 (0x0018 - 0x0000)
struct BP_Window_C_GetWindowBaseHealth final
{
public:
	double                                        Health;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_TweakableData_C*                    CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_GetWindowBaseHealth) == 0x000008, "Wrong alignment on BP_Window_C_GetWindowBaseHealth");
static_assert(sizeof(BP_Window_C_GetWindowBaseHealth) == 0x000018, "Wrong size on BP_Window_C_GetWindowBaseHealth");
static_assert(offsetof(BP_Window_C_GetWindowBaseHealth, Health) == 0x000000, "Member 'BP_Window_C_GetWindowBaseHealth::Health' has a wrong offset!");
static_assert(offsetof(BP_Window_C_GetWindowBaseHealth, CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data) == 0x000008, "Member 'BP_Window_C_GetWindowBaseHealth::CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data' has a wrong offset!");
static_assert(offsetof(BP_Window_C_GetWindowBaseHealth, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000010, "Member 'BP_Window_C_GetWindowBaseHealth::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.HideInteractionWidget
// 0x0001 (0x0001 - 0x0000)
struct BP_Window_C_HideInteractionWidget final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_HideInteractionWidget) == 0x000001, "Wrong alignment on BP_Window_C_HideInteractionWidget");
static_assert(sizeof(BP_Window_C_HideInteractionWidget) == 0x000001, "Wrong size on BP_Window_C_HideInteractionWidget");
static_assert(offsetof(BP_Window_C_HideInteractionWidget, Return) == 0x000000, "Member 'BP_Window_C_HideInteractionWidget::Return' has a wrong offset!");

// Function BP_Window.BP_Window_C.House Actor Impact Cosmetics
// 0x0038 (0x0038 - 0x0000)
struct BP_Window_C_House_Actor_Impact_Cosmetics final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitImpulse;                                        // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ImpactEffect                                ImpactEffect;                                      // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_House_Actor_Impact_Cosmetics) == 0x000008, "Wrong alignment on BP_Window_C_House_Actor_Impact_Cosmetics");
static_assert(sizeof(BP_Window_C_House_Actor_Impact_Cosmetics) == 0x000038, "Wrong size on BP_Window_C_House_Actor_Impact_Cosmetics");
static_assert(offsetof(BP_Window_C_House_Actor_Impact_Cosmetics, Location) == 0x000000, "Member 'BP_Window_C_House_Actor_Impact_Cosmetics::Location' has a wrong offset!");
static_assert(offsetof(BP_Window_C_House_Actor_Impact_Cosmetics, HitImpulse) == 0x000018, "Member 'BP_Window_C_House_Actor_Impact_Cosmetics::HitImpulse' has a wrong offset!");
static_assert(offsetof(BP_Window_C_House_Actor_Impact_Cosmetics, ImpactEffect) == 0x000030, "Member 'BP_Window_C_House_Actor_Impact_Cosmetics::ImpactEffect' has a wrong offset!");

// Function BP_Window.BP_Window_C.IsActorSameTeam
// 0x0040 (0x0040 - 0x0000)
struct BP_Window_C_IsActorSameTeam final
{
public:
	class UObject*                                FocusingActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITeamableInterface>    K2Node_DynamicCast_AsTeamable_Interface;           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITeamableInterface>    K2Node_DynamicCast_AsTeamable_Interface_1;         // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue_1;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_IsActorSameTeam) == 0x000008, "Wrong alignment on BP_Window_C_IsActorSameTeam");
static_assert(sizeof(BP_Window_C_IsActorSameTeam) == 0x000040, "Wrong size on BP_Window_C_IsActorSameTeam");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, FocusingActor) == 0x000000, "Member 'BP_Window_C_IsActorSameTeam::FocusingActor' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, ReturnValue) == 0x000008, "Member 'BP_Window_C_IsActorSameTeam::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, Temp_byte_Variable) == 0x000009, "Member 'BP_Window_C_IsActorSameTeam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, K2Node_DynamicCast_AsTeamable_Interface) == 0x000010, "Member 'BP_Window_C_IsActorSameTeam::K2Node_DynamicCast_AsTeamable_Interface' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Window_C_IsActorSameTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, CallFunc_GetTeamID_ReturnValue) == 0x000021, "Member 'BP_Window_C_IsActorSameTeam::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, Temp_byte_Variable_1) == 0x000022, "Member 'BP_Window_C_IsActorSameTeam::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000023, "Member 'BP_Window_C_IsActorSameTeam::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, K2Node_DynamicCast_AsTeamable_Interface_1) == 0x000028, "Member 'BP_Window_C_IsActorSameTeam::K2Node_DynamicCast_AsTeamable_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_Window_C_IsActorSameTeam::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsActorSameTeam, CallFunc_GetTeamID_ReturnValue_1) == 0x000039, "Member 'BP_Window_C_IsActorSameTeam::CallFunc_GetTeamID_ReturnValue_1' has a wrong offset!");

// Function BP_Window.BP_Window_C.IsClosed
// 0x0001 (0x0001 - 0x0000)
struct BP_Window_C_IsClosed final
{
public:
	bool                                          Open;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_IsClosed) == 0x000001, "Wrong alignment on BP_Window_C_IsClosed");
static_assert(sizeof(BP_Window_C_IsClosed) == 0x000001, "Wrong size on BP_Window_C_IsClosed");
static_assert(offsetof(BP_Window_C_IsClosed, Open) == 0x000000, "Member 'BP_Window_C_IsClosed::Open' has a wrong offset!");

// Function BP_Window.BP_Window_C.IsGooseTargetAlive
// 0x0002 (0x0002 - 0x0000)
struct BP_Window_C_IsGooseTargetAlive final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_IsGooseTargetAlive) == 0x000001, "Wrong alignment on BP_Window_C_IsGooseTargetAlive");
static_assert(sizeof(BP_Window_C_IsGooseTargetAlive) == 0x000002, "Wrong size on BP_Window_C_IsGooseTargetAlive");
static_assert(offsetof(BP_Window_C_IsGooseTargetAlive, Return) == 0x000000, "Member 'BP_Window_C_IsGooseTargetAlive::Return' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsGooseTargetAlive, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_Window_C_IsGooseTargetAlive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.IsInFocus
// 0x0008 (0x0008 - 0x0000)
struct BP_Window_C_IsInFocus final
{
public:
	class AActor*                                 Focusing_Actor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_IsInFocus) == 0x000008, "Wrong alignment on BP_Window_C_IsInFocus");
static_assert(sizeof(BP_Window_C_IsInFocus) == 0x000008, "Wrong size on BP_Window_C_IsInFocus");
static_assert(offsetof(BP_Window_C_IsInFocus, Focusing_Actor) == 0x000000, "Member 'BP_Window_C_IsInFocus::Focusing_Actor' has a wrong offset!");

// Function BP_Window.BP_Window_C.IsInteractable
// 0x0002 (0x0002 - 0x0000)
struct BP_Window_C_IsInteractable final
{
public:
	bool                                          Interactable;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_IsInteractable) == 0x000001, "Wrong alignment on BP_Window_C_IsInteractable");
static_assert(sizeof(BP_Window_C_IsInteractable) == 0x000002, "Wrong size on BP_Window_C_IsInteractable");
static_assert(offsetof(BP_Window_C_IsInteractable, Interactable) == 0x000000, "Member 'BP_Window_C_IsInteractable::Interactable' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsInteractable, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_Window_C_IsInteractable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.IsInteractingActorATeamMember
// 0x0068 (0x0068 - 0x0000)
struct BP_Window_C_IsInteractingActorATeamMember final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeam_ReturnValue;                      // 0x0020(0x0038)(ConstParm, NoDestructor)
	class APlayerStateJP*                         K2Node_DynamicCast_AsPlayer_State_JP;              // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_IsInteractingActorATeamMember) == 0x000008, "Wrong alignment on BP_Window_C_IsInteractingActorATeamMember");
static_assert(sizeof(BP_Window_C_IsInteractingActorATeamMember) == 0x000068, "Wrong size on BP_Window_C_IsInteractingActorATeamMember");
static_assert(offsetof(BP_Window_C_IsInteractingActorATeamMember, Actor) == 0x000000, "Member 'BP_Window_C_IsInteractingActorATeamMember::Actor' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsInteractingActorATeamMember, Return) == 0x000008, "Member 'BP_Window_C_IsInteractingActorATeamMember::Return' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsInteractingActorATeamMember, K2Node_DynamicCast_AsCharacter) == 0x000010, "Member 'BP_Window_C_IsInteractingActorATeamMember::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsInteractingActorATeamMember, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Window_C_IsInteractingActorATeamMember::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsInteractingActorATeamMember, CallFunc_GetTeam_ReturnValue) == 0x000020, "Member 'BP_Window_C_IsInteractingActorATeamMember::CallFunc_GetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsInteractingActorATeamMember, K2Node_DynamicCast_AsPlayer_State_JP) == 0x000058, "Member 'BP_Window_C_IsInteractingActorATeamMember::K2Node_DynamicCast_AsPlayer_State_JP' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsInteractingActorATeamMember, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'BP_Window_C_IsInteractingActorATeamMember::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsInteractingActorATeamMember, CallFunc_GetTeamID_ReturnValue) == 0x000061, "Member 'BP_Window_C_IsInteractingActorATeamMember::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsInteractingActorATeamMember, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000062, "Member 'BP_Window_C_IsInteractingActorATeamMember::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.IsLockedToPlayer
// 0x0020 (0x0020 - 0x0000)
struct BP_Window_C_IsLockedToPlayer final
{
public:
	const class AActor*                           FocusingActor;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDotProductTo_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActorSameTeam_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_IsLockedToPlayer) == 0x000008, "Wrong alignment on BP_Window_C_IsLockedToPlayer");
static_assert(sizeof(BP_Window_C_IsLockedToPlayer) == 0x000020, "Wrong size on BP_Window_C_IsLockedToPlayer");
static_assert(offsetof(BP_Window_C_IsLockedToPlayer, FocusingActor) == 0x000000, "Member 'BP_Window_C_IsLockedToPlayer::FocusingActor' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsLockedToPlayer, CallFunc_GetDotProductTo_ReturnValue) == 0x000008, "Member 'BP_Window_C_IsLockedToPlayer::CallFunc_GetDotProductTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsLockedToPlayer, CallFunc_IsActorSameTeam_ReturnValue) == 0x00000C, "Member 'BP_Window_C_IsLockedToPlayer::CallFunc_IsActorSameTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsLockedToPlayer, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00000D, "Member 'BP_Window_C_IsLockedToPlayer::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsLockedToPlayer, CallFunc_Not_PreBool_ReturnValue) == 0x00000E, "Member 'BP_Window_C_IsLockedToPlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsLockedToPlayer, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000F, "Member 'BP_Window_C_IsLockedToPlayer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsLockedToPlayer, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'BP_Window_C_IsLockedToPlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_IsLockedToPlayer, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000018, "Member 'BP_Window_C_IsLockedToPlayer::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_Window.BP_Window_C.IsNotLockpickable
// 0x0001 (0x0001 - 0x0000)
struct BP_Window_C_IsNotLockpickable final
{
public:
	bool                                          IsNotLockpickable_0;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_IsNotLockpickable) == 0x000001, "Wrong alignment on BP_Window_C_IsNotLockpickable");
static_assert(sizeof(BP_Window_C_IsNotLockpickable) == 0x000001, "Wrong size on BP_Window_C_IsNotLockpickable");
static_assert(offsetof(BP_Window_C_IsNotLockpickable, IsNotLockpickable_0) == 0x000000, "Member 'BP_Window_C_IsNotLockpickable::IsNotLockpickable_0' has a wrong offset!");

// Function BP_Window.BP_Window_C.LocalSetTeamColor
// 0x0020 (0x0020 - 0x0000)
struct BP_Window_C_LocalSetTeamColor final
{
public:
	bool                                          IsEnemyTeam;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_LocalSetTeamColor) == 0x000008, "Wrong alignment on BP_Window_C_LocalSetTeamColor");
static_assert(sizeof(BP_Window_C_LocalSetTeamColor) == 0x000020, "Wrong size on BP_Window_C_LocalSetTeamColor");
static_assert(offsetof(BP_Window_C_LocalSetTeamColor, IsEnemyTeam) == 0x000000, "Member 'BP_Window_C_LocalSetTeamColor::IsEnemyTeam' has a wrong offset!");
static_assert(offsetof(BP_Window_C_LocalSetTeamColor, Temp_bool_Variable) == 0x000001, "Member 'BP_Window_C_LocalSetTeamColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Window_C_LocalSetTeamColor, Temp_object_Variable) == 0x000008, "Member 'BP_Window_C_LocalSetTeamColor::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Window_C_LocalSetTeamColor, Temp_object_Variable_1) == 0x000010, "Member 'BP_Window_C_LocalSetTeamColor::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_LocalSetTeamColor, K2Node_Select_Default) == 0x000018, "Member 'BP_Window_C_LocalSetTeamColor::K2Node_Select_Default' has a wrong offset!");

// Function BP_Window.BP_Window_C.LockpickBegin
// 0x0008 (0x0008 - 0x0000)
struct BP_Window_C_LockpickBegin final
{
public:
	class APlayerController*                      PickerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_LockpickBegin) == 0x000008, "Wrong alignment on BP_Window_C_LockpickBegin");
static_assert(sizeof(BP_Window_C_LockpickBegin) == 0x000008, "Wrong size on BP_Window_C_LockpickBegin");
static_assert(offsetof(BP_Window_C_LockpickBegin, PickerController) == 0x000000, "Member 'BP_Window_C_LockpickBegin::PickerController' has a wrong offset!");

// Function BP_Window.BP_Window_C.LockpickSuccess
// 0x0008 (0x0008 - 0x0000)
struct BP_Window_C_LockpickSuccess final
{
public:
	class APlayerController*                      PickerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_LockpickSuccess) == 0x000008, "Wrong alignment on BP_Window_C_LockpickSuccess");
static_assert(sizeof(BP_Window_C_LockpickSuccess) == 0x000008, "Wrong size on BP_Window_C_LockpickSuccess");
static_assert(offsetof(BP_Window_C_LockpickSuccess, PickerController) == 0x000000, "Member 'BP_Window_C_LockpickSuccess::PickerController' has a wrong offset!");

// Function BP_Window.BP_Window_C.OnDamaged
// 0x0370 (0x0370 - 0x0000)
struct BP_Window_C_OnDamaged final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Causer;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FCombatParticipant                     CombatParticipant;                                 // 0x0010(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	struct FKillMethod                            KillMethod;                                        // 0x0070(0x02E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	struct FVector_NetQuantize                    Location;                                          // 0x0358(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_OnDamaged) == 0x000008, "Wrong alignment on BP_Window_C_OnDamaged");
static_assert(sizeof(BP_Window_C_OnDamaged) == 0x000370, "Wrong size on BP_Window_C_OnDamaged");
static_assert(offsetof(BP_Window_C_OnDamaged, Delta) == 0x000000, "Member 'BP_Window_C_OnDamaged::Delta' has a wrong offset!");
static_assert(offsetof(BP_Window_C_OnDamaged, Causer) == 0x000008, "Member 'BP_Window_C_OnDamaged::Causer' has a wrong offset!");
static_assert(offsetof(BP_Window_C_OnDamaged, CombatParticipant) == 0x000010, "Member 'BP_Window_C_OnDamaged::CombatParticipant' has a wrong offset!");
static_assert(offsetof(BP_Window_C_OnDamaged, KillMethod) == 0x000070, "Member 'BP_Window_C_OnDamaged::KillMethod' has a wrong offset!");
static_assert(offsetof(BP_Window_C_OnDamaged, Location) == 0x000358, "Member 'BP_Window_C_OnDamaged::Location' has a wrong offset!");

// Function BP_Window.BP_Window_C.PingTeamOnDestruction
// 0x0030 (0x0030 - 0x0000)
struct BP_Window_C_PingTeamOnDestruction final
{
public:
	TArray<class APlayerControllerJP*>            CallFunc_GetPlayerControllersOfTeam_ReturnValue;   // 0x0000(0x0010)(ReferenceParm)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP*                    CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_MatchBP_C*          K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_PingTeamOnDestruction) == 0x000008, "Wrong alignment on BP_Window_C_PingTeamOnDestruction");
static_assert(sizeof(BP_Window_C_PingTeamOnDestruction) == 0x000030, "Wrong size on BP_Window_C_PingTeamOnDestruction");
static_assert(offsetof(BP_Window_C_PingTeamOnDestruction, CallFunc_GetPlayerControllersOfTeam_ReturnValue) == 0x000000, "Member 'BP_Window_C_PingTeamOnDestruction::CallFunc_GetPlayerControllersOfTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PingTeamOnDestruction, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BP_Window_C_PingTeamOnDestruction::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PingTeamOnDestruction, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_Window_C_PingTeamOnDestruction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PingTeamOnDestruction, K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP) == 0x000020, "Member 'BP_Window_C_PingTeamOnDestruction::K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PingTeamOnDestruction, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Window_C_PingTeamOnDestruction::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Window.BP_Window_C.PostInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_Window_C_PostInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    InteractionComponent;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_PostInteract) == 0x000008, "Wrong alignment on BP_Window_C_PostInteract");
static_assert(sizeof(BP_Window_C_PostInteract) == 0x000010, "Wrong size on BP_Window_C_PostInteract");
static_assert(offsetof(BP_Window_C_PostInteract, InteractingActor) == 0x000000, "Member 'BP_Window_C_PostInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PostInteract, InteractionComponent) == 0x000008, "Member 'BP_Window_C_PostInteract::InteractionComponent' has a wrong offset!");

// Function BP_Window.BP_Window_C.ReloadAfterHousesLoaded
// 0x0001 (0x0001 - 0x0000)
struct BP_Window_C_ReloadAfterHousesLoaded final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_ReloadAfterHousesLoaded) == 0x000001, "Wrong alignment on BP_Window_C_ReloadAfterHousesLoaded");
static_assert(sizeof(BP_Window_C_ReloadAfterHousesLoaded) == 0x000001, "Wrong size on BP_Window_C_ReloadAfterHousesLoaded");
static_assert(offsetof(BP_Window_C_ReloadAfterHousesLoaded, Return) == 0x000000, "Member 'BP_Window_C_ReloadAfterHousesLoaded::Return' has a wrong offset!");

// Function BP_Window.BP_Window_C.Sabotage
// 0x0008 (0x0008 - 0x0000)
struct BP_Window_C_Sabotage final
{
public:
	class AActor*                                 SabotagingActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_Sabotage) == 0x000008, "Wrong alignment on BP_Window_C_Sabotage");
static_assert(sizeof(BP_Window_C_Sabotage) == 0x000008, "Wrong size on BP_Window_C_Sabotage");
static_assert(offsetof(BP_Window_C_Sabotage, SabotagingActor) == 0x000000, "Member 'BP_Window_C_Sabotage::SabotagingActor' has a wrong offset!");

// Function BP_Window.BP_Window_C.SetInitialWindowHealth
// 0x0038 (0x0038 - 0x0000)
struct BP_Window_C_SetInitialWindowHealth final
{
public:
	double                                        CallFunc_GetWindowBaseHealth_Health;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue;             // 0x0008(0x0010)()
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x0018(0x0010)()
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue; // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_LastSetHealth_ImplicitCast;     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_SetInitialWindowHealth) == 0x000008, "Wrong alignment on BP_Window_C_SetInitialWindowHealth");
static_assert(sizeof(BP_Window_C_SetInitialWindowHealth) == 0x000038, "Wrong size on BP_Window_C_SetInitialWindowHealth");
static_assert(offsetof(BP_Window_C_SetInitialWindowHealth, CallFunc_GetWindowBaseHealth_Health) == 0x000000, "Member 'BP_Window_C_SetInitialWindowHealth::CallFunc_GetWindowBaseHealth_Health' has a wrong offset!");
static_assert(offsetof(BP_Window_C_SetInitialWindowHealth, CallFunc_MakeOutgoingSpec_ReturnValue) == 0x000008, "Member 'BP_Window_C_SetInitialWindowHealth::CallFunc_MakeOutgoingSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_SetInitialWindowHealth, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x000018, "Member 'BP_Window_C_SetInitialWindowHealth::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_SetInitialWindowHealth, CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue) == 0x000028, "Member 'BP_Window_C_SetInitialWindowHealth::CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_SetInitialWindowHealth, K2Node_VariableSet_LastSetHealth_ImplicitCast) == 0x000030, "Member 'BP_Window_C_SetInitialWindowHealth::K2Node_VariableSet_LastSetHealth_ImplicitCast' has a wrong offset!");

// Function BP_Window.BP_Window_C.SpawnRandomGlassHit
// 0x0018 (0x0018 - 0x0000)
struct BP_Window_C_SpawnRandomGlassHit final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_SpawnRandomGlassHit) == 0x000008, "Wrong alignment on BP_Window_C_SpawnRandomGlassHit");
static_assert(sizeof(BP_Window_C_SpawnRandomGlassHit) == 0x000018, "Wrong size on BP_Window_C_SpawnRandomGlassHit");
static_assert(offsetof(BP_Window_C_SpawnRandomGlassHit, Location) == 0x000000, "Member 'BP_Window_C_SpawnRandomGlassHit::Location' has a wrong offset!");

// Function BP_Window.BP_Window_C.UpdateWindowCrackEffect
// 0x0038 (0x0038 - 0x0000)
struct BP_Window_C_UpdateWindowCrackEffect final
{
public:
	bool                                          CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMorphTarget_Value_ImplicitCast;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_UpdateWindowCrackEffect) == 0x000008, "Wrong alignment on BP_Window_C_UpdateWindowCrackEffect");
static_assert(sizeof(BP_Window_C_UpdateWindowCrackEffect) == 0x000038, "Wrong size on BP_Window_C_UpdateWindowCrackEffect");
static_assert(offsetof(BP_Window_C_UpdateWindowCrackEffect, CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute) == 0x000000, "Member 'BP_Window_C_UpdateWindowCrackEffect::CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(BP_Window_C_UpdateWindowCrackEffect, CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue) == 0x000004, "Member 'BP_Window_C_UpdateWindowCrackEffect::CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_UpdateWindowCrackEffect, CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1) == 0x000008, "Member 'BP_Window_C_UpdateWindowCrackEffect::CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_UpdateWindowCrackEffect, CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1) == 0x00000C, "Member 'BP_Window_C_UpdateWindowCrackEffect::CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_UpdateWindowCrackEffect, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_Window_C_UpdateWindowCrackEffect::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_UpdateWindowCrackEffect, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_Window_C_UpdateWindowCrackEffect::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_UpdateWindowCrackEffect, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000020, "Member 'BP_Window_C_UpdateWindowCrackEffect::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Window_C_UpdateWindowCrackEffect, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000028, "Member 'BP_Window_C_UpdateWindowCrackEffect::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Window_C_UpdateWindowCrackEffect, CallFunc_SetMorphTarget_Value_ImplicitCast) == 0x000030, "Member 'BP_Window_C_UpdateWindowCrackEffect::CallFunc_SetMorphTarget_Value_ImplicitCast' has a wrong offset!");

// Function BP_Window.BP_Window_C.UserConstructionScript
// 0x0010 (0x0010 - 0x0000)
struct BP_Window_C_UserConstructionScript final
{
public:
	TArray<class USkeletalMeshComponent*>         K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_Window_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_Window_C_UserConstructionScript");
static_assert(sizeof(BP_Window_C_UserConstructionScript) == 0x000010, "Wrong size on BP_Window_C_UserConstructionScript");
static_assert(offsetof(BP_Window_C_UserConstructionScript, K2Node_MakeArray_Array) == 0x000000, "Member 'BP_Window_C_UserConstructionScript::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_Window.BP_Window_C.WindowImpactCosmetics
// 0x0070 (0x0070 - 0x0000)
struct BP_Window_C_WindowImpactCosmetics final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ImpactEffect                                Selection;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitImpulse;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_WindowImpactCosmetics) == 0x000008, "Wrong alignment on BP_Window_C_WindowImpactCosmetics");
static_assert(sizeof(BP_Window_C_WindowImpactCosmetics) == 0x000070, "Wrong size on BP_Window_C_WindowImpactCosmetics");
static_assert(offsetof(BP_Window_C_WindowImpactCosmetics, Location) == 0x000000, "Member 'BP_Window_C_WindowImpactCosmetics::Location' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowImpactCosmetics, Selection) == 0x000018, "Member 'BP_Window_C_WindowImpactCosmetics::Selection' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowImpactCosmetics, HitImpulse) == 0x000020, "Member 'BP_Window_C_WindowImpactCosmetics::HitImpulse' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowImpactCosmetics, K2Node_SwitchEnum_CmpSuccess) == 0x000038, "Member 'BP_Window_C_WindowImpactCosmetics::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowImpactCosmetics, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000040, "Member 'BP_Window_C_WindowImpactCosmetics::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowImpactCosmetics, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000058, "Member 'BP_Window_C_WindowImpactCosmetics::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.WindowSabotaged
// 0x000C (0x000C - 0x0000)
struct BP_Window_C_WindowSabotaged final
{
public:
	bool                                          TURR;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_WindowSabotaged) == 0x000004, "Wrong alignment on BP_Window_C_WindowSabotaged");
static_assert(sizeof(BP_Window_C_WindowSabotaged) == 0x00000C, "Wrong size on BP_Window_C_WindowSabotaged");
static_assert(offsetof(BP_Window_C_WindowSabotaged, TURR) == 0x000000, "Member 'BP_Window_C_WindowSabotaged::TURR' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowSabotaged, CallFunc_MakeLiteralName_ReturnValue) == 0x000004, "Member 'BP_Window_C_WindowSabotaged::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");

}

