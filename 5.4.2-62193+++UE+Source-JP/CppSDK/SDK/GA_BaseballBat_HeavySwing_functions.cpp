#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_BaseballBat_HeavySwing

#include "Basic.hpp"

#include "GA_BaseballBat_HeavySwing_classes.hpp"
#include "GA_BaseballBat_HeavySwing_parameters.hpp"


namespace SDK
{

// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.CreateCombatParticipants
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ResidentCharacterPawn                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FCombatParticipant               NewParam                                               (Parm, OutParm)

void UGA_BaseballBat_HeavySwing_C::CreateCombatParticipants(class APawn* ResidentCharacterPawn, struct FCombatParticipant* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "CreateCombatParticipants");

	Params::GA_BaseballBat_HeavySwing_C_CreateCombatParticipants Parms{};

	Parms.ResidentCharacterPawn = ResidentCharacterPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.CreateCosmeticProjectile
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_BaseballBat_HeavySwing_C::CreateCosmeticProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "CreateCosmeticProjectile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.CreateCosmeticProjectileCueParameters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayCueParameters           Params_0                                               (Parm, OutParm, ContainsInstancedReference)

void UGA_BaseballBat_HeavySwing_C::CreateCosmeticProjectileCueParameters(struct FGameplayCueParameters* Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "CreateCosmeticProjectileCueParameters");

	Params::GA_BaseballBat_HeavySwing_C_CreateCosmeticProjectileCueParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Params_0 != nullptr)
		*Params_0 = std::move(Parms.Params_0);
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.CreateSpawnTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_BaseballBat_HeavySwing_C::CreateSpawnTransform(struct FTransform* SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "CreateSpawnTransform");

	Params::GA_BaseballBat_HeavySwing_C_CreateSpawnTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnTransform != nullptr)
		*SpawnTransform = std::move(Parms.SpawnTransform);
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.ExecuteUbergraph_GA_BaseballBat_HeavySwing
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_BaseballBat_HeavySwing_C::ExecuteUbergraph_GA_BaseballBat_HeavySwing(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "ExecuteUbergraph_GA_BaseballBat_HeavySwing");

	Params::GA_BaseballBat_HeavySwing_C_ExecuteUbergraph_GA_BaseballBat_HeavySwing Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.Get Min Max Damage Speed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MinDamageSpeed                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDamageSpeed                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_BaseballBat_HeavySwing_C::Get_Min_Max_Damage_Speed(double* MinDamageSpeed, double* MaxDamageSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "Get Min Max Damage Speed");

	Params::GA_BaseballBat_HeavySwing_C_Get_Min_Max_Damage_Speed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MinDamageSpeed != nullptr)
		*MinDamageSpeed = Parms.MinDamageSpeed;

	if (MaxDamageSpeed != nullptr)
		*MaxDamageSpeed = Parms.MaxDamageSpeed;
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.GetMinMaxDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseMinMaxDamage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_BaseballBat_HeavySwing_C::GetMinMaxDamage(bool UseMinMaxDamage, double* MinDamage, double* MaxDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "GetMinMaxDamage");

	Params::GA_BaseballBat_HeavySwing_C_GetMinMaxDamage Parms{};

	Parms.UseMinMaxDamage = UseMinMaxDamage;

	UObject::ProcessEvent(Func, &Parms);

	if (MinDamage != nullptr)
		*MinDamage = Parms.MinDamage;

	if (MaxDamage != nullptr)
		*MaxDamage = Parms.MaxDamage;
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.GetProjectileSpawnData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseMinMaxDamage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ResidentCharacterPawn                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ProjectileInstigator                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ESpawnActorCollisionHandlingMethod      CollisionHandlingOverride                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ProjectileToSpawn                                      (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESpawnActorCollisionHandlingMethod      SpawnCollisionHandlingOverride                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ProjectileSpeed                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinDamageSpeed                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDamageSpeed                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCombatParticipant               CombatParticipants                                     (Parm, OutParm)
// class APawn*                            Instigator                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_BaseballBat_HeavySwing_C::GetProjectileSpawnData(bool UseMinMaxDamage, class APawn* ResidentCharacterPawn, class APawn* ProjectileInstigator, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class UClass** ProjectileToSpawn, struct FTransform* SpawnTransform, ESpawnActorCollisionHandlingMethod* SpawnCollisionHandlingOverride, double* ProjectileSpeed, double* MinDamage, double* MaxDamage, double* MinDamageSpeed, double* MaxDamageSpeed, struct FCombatParticipant* CombatParticipants, class APawn** Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "GetProjectileSpawnData");

	Params::GA_BaseballBat_HeavySwing_C_GetProjectileSpawnData Parms{};

	Parms.UseMinMaxDamage = UseMinMaxDamage;
	Parms.ResidentCharacterPawn = ResidentCharacterPawn;
	Parms.ProjectileInstigator = ProjectileInstigator;
	Parms.CollisionHandlingOverride = CollisionHandlingOverride;

	UObject::ProcessEvent(Func, &Parms);

	if (ProjectileToSpawn != nullptr)
		*ProjectileToSpawn = Parms.ProjectileToSpawn;

	if (SpawnTransform != nullptr)
		*SpawnTransform = std::move(Parms.SpawnTransform);

	if (SpawnCollisionHandlingOverride != nullptr)
		*SpawnCollisionHandlingOverride = Parms.SpawnCollisionHandlingOverride;

	if (ProjectileSpeed != nullptr)
		*ProjectileSpeed = Parms.ProjectileSpeed;

	if (MinDamage != nullptr)
		*MinDamage = Parms.MinDamage;

	if (MaxDamage != nullptr)
		*MaxDamage = Parms.MaxDamage;

	if (MinDamageSpeed != nullptr)
		*MinDamageSpeed = Parms.MinDamageSpeed;

	if (MaxDamageSpeed != nullptr)
		*MaxDamageSpeed = Parms.MaxDamageSpeed;

	if (CombatParticipants != nullptr)
		*CombatParticipants = std::move(Parms.CombatParticipants);

	if (Instigator != nullptr)
		*Instigator = Parms.Instigator;
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.GetProjectileSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ProjectileSpeed                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_BaseballBat_HeavySwing_C::GetProjectileSpeed(double Speed, double* ProjectileSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "GetProjectileSpeed");

	Params::GA_BaseballBat_HeavySwing_C_GetProjectileSpeed Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);

	if (ProjectileSpeed != nullptr)
		*ProjectileSpeed = Parms.ProjectileSpeed;
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.GetProjectileToSpawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ProjectileClass                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_BaseballBat_HeavySwing_C::GetProjectileToSpawn(class UClass** ProjectileClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "GetProjectileToSpawn");

	Params::GA_BaseballBat_HeavySwing_C_GetProjectileToSpawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ProjectileClass != nullptr)
		*ProjectileClass = Parms.ProjectileClass;
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_BaseballBat_HeavySwing_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.K2_OnAbilityFailed
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            FailureReason                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UGA_BaseballBat_HeavySwing_C::K2_OnAbilityFailed(const struct FGameplayTagContainer& FailureReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "K2_OnAbilityFailed");

	Params::GA_BaseballBat_HeavySwing_C_K2_OnAbilityFailed Parms{};

	Parms.FailureReason = std::move(FailureReason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_BaseballBat_HeavySwing_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "K2_OnEndAbility");

	Params::GA_BaseballBat_HeavySwing_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.OnFinish_4FE550FF4BA1B0A443969BA1CD2A3A3B
// (BlueprintCallable, BlueprintEvent)

void UGA_BaseballBat_HeavySwing_C::OnFinish_4FE550FF4BA1B0A443969BA1CD2A3A3B()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "OnFinish_4FE550FF4BA1B0A443969BA1CD2A3A3B");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_BaseballBat_HeavySwing.GA_BaseballBat_HeavySwing_C.Server_ProjectileSpawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ProjectileToSpawn                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESpawnActorCollisionHandlingMethod      SpawnCollisionHandlingOverride                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ProjectileSpeed                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinDamageSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDamageSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCombatParticipant               CombatParticipants                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// class APawn*                            Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  DamageMultiplerToStructures                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_BaseballBat_HeavySwing_C::Server_ProjectileSpawn(class UClass* ProjectileToSpawn, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingOverride, double ProjectileSpeed, double MinDamage, double MaxDamage, double MinDamageSpeed, double MaxDamageSpeed, const struct FCombatParticipant& CombatParticipants, class APawn* Instigator, double DamageMultiplerToStructures)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_BaseballBat_HeavySwing_C", "Server_ProjectileSpawn");

	Params::GA_BaseballBat_HeavySwing_C_Server_ProjectileSpawn Parms{};

	Parms.ProjectileToSpawn = ProjectileToSpawn;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.SpawnCollisionHandlingOverride = SpawnCollisionHandlingOverride;
	Parms.ProjectileSpeed = ProjectileSpeed;
	Parms.MinDamage = MinDamage;
	Parms.MaxDamage = MaxDamage;
	Parms.MinDamageSpeed = MinDamageSpeed;
	Parms.MaxDamageSpeed = MaxDamageSpeed;
	Parms.CombatParticipants = std::move(CombatParticipants);
	Parms.Instigator = Instigator;
	Parms.DamageMultiplerToStructures = DamageMultiplerToStructures;

	UObject::ProcessEvent(Func, &Parms);
}

}

