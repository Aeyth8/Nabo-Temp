#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WC_WinscreenNamePlate

#include "Basic.hpp"


namespace SDK::Params
{

// Function WC_WinscreenNamePlate.WC_WinscreenNamePlate_C.ExecuteUbergraph_WC_WinscreenNamePlate
// 0x0078 (0x0078 - 0x0000)
struct WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_WinscreenNameplate_C*               K2Node_DynamicCast_AsWI_Winscreen_Nameplate;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              K2Node_CustomEvent_Texture;                        // 0x0020(0x0028)(HasGetValueTypeHash)
	class FText                                   K2Node_CustomEvent_InText;                         // 0x0048(0x0010)()
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsTalking;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue_1;        // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_WinscreenNameplate_C*               K2Node_DynamicCast_AsWI_Winscreen_Nameplate_1;     // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate) == 0x000008, "Wrong alignment on WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate");
static_assert(sizeof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate) == 0x000078, "Wrong size on WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, EntryPoint) == 0x000000, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::EntryPoint' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000008, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, K2Node_DynamicCast_AsWI_Winscreen_Nameplate) == 0x000010, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::K2Node_DynamicCast_AsWI_Winscreen_Nameplate' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, K2Node_CustomEvent_Texture) == 0x000020, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::K2Node_CustomEvent_Texture' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, K2Node_CustomEvent_InText) == 0x000048, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::K2Node_CustomEvent_InText' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000058, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, K2Node_CustomEvent_IsTalking) == 0x000059, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::K2Node_CustomEvent_IsTalking' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, CallFunc_GetUserWidgetObject_ReturnValue_1) == 0x000060, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::CallFunc_GetUserWidgetObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, K2Node_DynamicCast_AsWI_Winscreen_Nameplate_1) == 0x000068, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::K2Node_DynamicCast_AsWI_Winscreen_Nameplate_1' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'WC_WinscreenNamePlate_C_ExecuteUbergraph_WC_WinscreenNamePlate::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function WC_WinscreenNamePlate.WC_WinscreenNamePlate_C.SetPortraitAndName
// 0x0038 (0x0038 - 0x0000)
struct WC_WinscreenNamePlate_C_SetPortraitAndName final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FText                                   InText;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WC_WinscreenNamePlate_C_SetPortraitAndName) == 0x000008, "Wrong alignment on WC_WinscreenNamePlate_C_SetPortraitAndName");
static_assert(sizeof(WC_WinscreenNamePlate_C_SetPortraitAndName) == 0x000038, "Wrong size on WC_WinscreenNamePlate_C_SetPortraitAndName");
static_assert(offsetof(WC_WinscreenNamePlate_C_SetPortraitAndName, Texture) == 0x000000, "Member 'WC_WinscreenNamePlate_C_SetPortraitAndName::Texture' has a wrong offset!");
static_assert(offsetof(WC_WinscreenNamePlate_C_SetPortraitAndName, InText) == 0x000028, "Member 'WC_WinscreenNamePlate_C_SetPortraitAndName::InText' has a wrong offset!");

// Function WC_WinscreenNamePlate.WC_WinscreenNamePlate_C.SetTalkingVisibility
// 0x0001 (0x0001 - 0x0000)
struct WC_WinscreenNamePlate_C_SetTalkingVisibility final
{
public:
	bool                                          IsTalking;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WC_WinscreenNamePlate_C_SetTalkingVisibility) == 0x000001, "Wrong alignment on WC_WinscreenNamePlate_C_SetTalkingVisibility");
static_assert(sizeof(WC_WinscreenNamePlate_C_SetTalkingVisibility) == 0x000001, "Wrong size on WC_WinscreenNamePlate_C_SetTalkingVisibility");
static_assert(offsetof(WC_WinscreenNamePlate_C_SetTalkingVisibility, IsTalking) == 0x000000, "Member 'WC_WinscreenNamePlate_C_SetTalkingVisibility::IsTalking' has a wrong offset!");

}

