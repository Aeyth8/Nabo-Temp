#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_JPCommonSetting_SingleChoice

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WI_JPCommonSetting_SingleChoice.WI_JPCommonSetting_SingleChoice_C.BndEvt__WI_JPCommonSetting_SingleChoice_WI_JPSelector_K2Node_ComponentBoundEvent_0_OnSelectedIndexChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct WI_JPCommonSetting_SingleChoice_C_BndEvt__WI_JPCommonSetting_SingleChoice_WI_JPSelector_K2Node_ComponentBoundEvent_0_OnSelectedIndexChanged__DelegateSignature final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_JPCommonSetting_SingleChoice_C_BndEvt__WI_JPCommonSetting_SingleChoice_WI_JPSelector_K2Node_ComponentBoundEvent_0_OnSelectedIndexChanged__DelegateSignature) == 0x000004, "Wrong alignment on WI_JPCommonSetting_SingleChoice_C_BndEvt__WI_JPCommonSetting_SingleChoice_WI_JPSelector_K2Node_ComponentBoundEvent_0_OnSelectedIndexChanged__DelegateSignature");
static_assert(sizeof(WI_JPCommonSetting_SingleChoice_C_BndEvt__WI_JPCommonSetting_SingleChoice_WI_JPSelector_K2Node_ComponentBoundEvent_0_OnSelectedIndexChanged__DelegateSignature) == 0x000004, "Wrong size on WI_JPCommonSetting_SingleChoice_C_BndEvt__WI_JPCommonSetting_SingleChoice_WI_JPSelector_K2Node_ComponentBoundEvent_0_OnSelectedIndexChanged__DelegateSignature");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_BndEvt__WI_JPCommonSetting_SingleChoice_WI_JPSelector_K2Node_ComponentBoundEvent_0_OnSelectedIndexChanged__DelegateSignature, SelectedIndex) == 0x000000, "Member 'WI_JPCommonSetting_SingleChoice_C_BndEvt__WI_JPCommonSetting_SingleChoice_WI_JPSelector_K2Node_ComponentBoundEvent_0_OnSelectedIndexChanged__DelegateSignature::SelectedIndex' has a wrong offset!");

// Function WI_JPCommonSetting_SingleChoice.WI_JPCommonSetting_SingleChoice_C.ExecuteUbergraph_WI_JPCommonSetting_SingleChoice
// 0x0138 (0x0138 - 0x0000)
struct WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_SelectedIndex;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x000C(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0048(0x0078)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x00C0(0x0078)(ConstParm)
};
static_assert(alignof(WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice) == 0x000008, "Wrong alignment on WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice");
static_assert(sizeof(WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice) == 0x000138, "Wrong size on WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice, EntryPoint) == 0x000000, "Member 'WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice, K2Node_ComponentBoundEvent_SelectedIndex) == 0x000008, "Member 'WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice::K2Node_ComponentBoundEvent_SelectedIndex' has a wrong offset!");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice, K2Node_Event_MyGeometry) == 0x00000C, "Member 'WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice, K2Node_Event_MouseEvent_1) == 0x000048, "Member 'WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice, K2Node_Event_MouseEvent) == 0x0000C0, "Member 'WI_JPCommonSetting_SingleChoice_C_ExecuteUbergraph_WI_JPCommonSetting_SingleChoice::K2Node_Event_MouseEvent' has a wrong offset!");

// Function WI_JPCommonSetting_SingleChoice.WI_JPCommonSetting_SingleChoice_C.GetValue
// 0x0004 (0x0004 - 0x0000)
struct WI_JPCommonSetting_SingleChoice_C_GetValue final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_JPCommonSetting_SingleChoice_C_GetValue) == 0x000004, "Wrong alignment on WI_JPCommonSetting_SingleChoice_C_GetValue");
static_assert(sizeof(WI_JPCommonSetting_SingleChoice_C_GetValue) == 0x000004, "Wrong size on WI_JPCommonSetting_SingleChoice_C_GetValue");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_GetValue, SelectedIndex) == 0x000000, "Member 'WI_JPCommonSetting_SingleChoice_C_GetValue::SelectedIndex' has a wrong offset!");

// Function WI_JPCommonSetting_SingleChoice.WI_JPCommonSetting_SingleChoice_C.OnMouseEnter
// 0x00B0 (0x00B0 - 0x0000)
struct WI_JPCommonSetting_SingleChoice_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WI_JPCommonSetting_SingleChoice_C_OnMouseEnter) == 0x000008, "Wrong alignment on WI_JPCommonSetting_SingleChoice_C_OnMouseEnter");
static_assert(sizeof(WI_JPCommonSetting_SingleChoice_C_OnMouseEnter) == 0x0000B0, "Wrong size on WI_JPCommonSetting_SingleChoice_C_OnMouseEnter");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'WI_JPCommonSetting_SingleChoice_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'WI_JPCommonSetting_SingleChoice_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function WI_JPCommonSetting_SingleChoice.WI_JPCommonSetting_SingleChoice_C.OnMouseLeave
// 0x0078 (0x0078 - 0x0000)
struct WI_JPCommonSetting_SingleChoice_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WI_JPCommonSetting_SingleChoice_C_OnMouseLeave) == 0x000008, "Wrong alignment on WI_JPCommonSetting_SingleChoice_C_OnMouseLeave");
static_assert(sizeof(WI_JPCommonSetting_SingleChoice_C_OnMouseLeave) == 0x000078, "Wrong size on WI_JPCommonSetting_SingleChoice_C_OnMouseLeave");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'WI_JPCommonSetting_SingleChoice_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function WI_JPCommonSetting_SingleChoice.WI_JPCommonSetting_SingleChoice_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WI_JPCommonSetting_SingleChoice_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_JPCommonSetting_SingleChoice_C_PreConstruct) == 0x000001, "Wrong alignment on WI_JPCommonSetting_SingleChoice_C_PreConstruct");
static_assert(sizeof(WI_JPCommonSetting_SingleChoice_C_PreConstruct) == 0x000001, "Wrong size on WI_JPCommonSetting_SingleChoice_C_PreConstruct");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WI_JPCommonSetting_SingleChoice_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WI_JPCommonSetting_SingleChoice.WI_JPCommonSetting_SingleChoice_C.SetTextStyle
// 0x0001 (0x0001 - 0x0000)
struct WI_JPCommonSetting_SingleChoice_C_SetTextStyle final
{
public:
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_JPCommonSetting_SingleChoice_C_SetTextStyle) == 0x000001, "Wrong alignment on WI_JPCommonSetting_SingleChoice_C_SetTextStyle");
static_assert(sizeof(WI_JPCommonSetting_SingleChoice_C_SetTextStyle) == 0x000001, "Wrong size on WI_JPCommonSetting_SingleChoice_C_SetTextStyle");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_SetTextStyle, CallFunc_IsValidClass_ReturnValue) == 0x000000, "Member 'WI_JPCommonSetting_SingleChoice_C_SetTextStyle::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");

// Function WI_JPCommonSetting_SingleChoice.WI_JPCommonSetting_SingleChoice_C.SetValue
// 0x000C (0x000C - 0x0000)
struct WI_JPCommonSetting_SingleChoice_C_SetValue final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSelectedIndex_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_JPCommonSetting_SingleChoice_C_SetValue) == 0x000004, "Wrong alignment on WI_JPCommonSetting_SingleChoice_C_SetValue");
static_assert(sizeof(WI_JPCommonSetting_SingleChoice_C_SetValue) == 0x00000C, "Wrong size on WI_JPCommonSetting_SingleChoice_C_SetValue");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_SetValue, InIndex) == 0x000000, "Member 'WI_JPCommonSetting_SingleChoice_C_SetValue::InIndex' has a wrong offset!");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_SetValue, CallFunc_GetSelectedIndex_ReturnValue) == 0x000004, "Member 'WI_JPCommonSetting_SingleChoice_C_SetValue::CallFunc_GetSelectedIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_JPCommonSetting_SingleChoice_C_SetValue, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000008, "Member 'WI_JPCommonSetting_SingleChoice_C_SetValue::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

}

