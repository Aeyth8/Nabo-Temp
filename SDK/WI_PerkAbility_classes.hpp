#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_PerkAbility

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WI_PerkAbility.WI_PerkAbility_C
// 0x00C0 (0x03A0 - 0x02E0)
class UWI_PerkAbility_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       FailedToActivateAbility;                           // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AbilityEnabledAnim;                                // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWI_JPActionWidget_C*                   ActionWidget;                                      // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               BoundActionSizeBox;                                // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             CooldownTimerLabel;                                // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon;                                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Overlay;                                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Main;                                      // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar;                                       // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         ProgressBarFillFraction;                           // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CooldownText;                                      // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ShowOverlay;                                       // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         IconSoftTexture;                                   // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowBoundAction;                                   // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34B[0x5];                                      // 0x034B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           InputAction;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UGameplayAbilityIW*                     GameplayAbility;                                   // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CooldownDuration;                                  // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ElapsedCooldownTime;                               // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyCooldownTick;                                 // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             AbilityRefreshSound;                               // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AbilityFailedSound;                                // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPerkDefinition*                        PerkDefinition;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          StartOnCooldown;                                   // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_PerkAbilityContainer_C*             PerkAbilityContainer;                              // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityRefreshed();
	void Construct();
	void ExecuteUbergraph_WI_PerkAbility(int32 EntryPoint);
	class FString GetCooldownText(double TimeRemaining);
	void HasValidCooldownTime(class UGameplayAbilityIW* Ability, bool* ValidCooldownTime);
	void InitializePerkAbilityWidget(class UGameplayAbilityIW* TargetGameplayAbility, double TimeSinceAbilityAdded, class UWI_PerkAbilityContainer_C* AbilityContainer);
	void OnCooldownEnded();
	void OnCooldownStarted(double TimeRemaining, double CooldownDuration_0, double PercentageDone);
	void OnCooldownTick(double TimeRemaining, double CooldownDuration_0, double PercentageDone);
	void OnMessageReceived_8D62D7AE48C77B20978CD2877453A7F9(class UAsyncAction_ListenForGameplayMessage* ProxyObject, const struct FGameplayTag& ActualChannel);
	void PlayActivationFailAnimation();
	void PreConstruct(bool IsDesignTime);
	void Set_Icon_Tint_Color(const struct FSlateColor& NewParam);
	void SetCooldownText(const class FString& Cooldown_Text);
	void SetIconTexture(TSoftObjectPtr<class UTexture2D> SoftTexture);
	void SetInputAction(class UInputAction* InputAction_0);
	void SetProgressBarFillFraction(float InPercent);
	void SetShowBoundAction(bool Index_0);
	void SetShowCooldownText(bool Show);
	void SetShowOverlay(bool Show);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WI_PerkAbility_C">();
	}
	static class UWI_PerkAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWI_PerkAbility_C>();
	}
};
static_assert(alignof(UWI_PerkAbility_C) == 0x000008, "Wrong alignment on UWI_PerkAbility_C");
static_assert(sizeof(UWI_PerkAbility_C) == 0x0003A0, "Wrong size on UWI_PerkAbility_C");
static_assert(offsetof(UWI_PerkAbility_C, UberGraphFrame) == 0x0002E0, "Member 'UWI_PerkAbility_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, FailedToActivateAbility) == 0x0002E8, "Member 'UWI_PerkAbility_C::FailedToActivateAbility' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, AbilityEnabledAnim) == 0x0002F0, "Member 'UWI_PerkAbility_C::AbilityEnabledAnim' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, ActionWidget) == 0x0002F8, "Member 'UWI_PerkAbility_C::ActionWidget' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, BoundActionSizeBox) == 0x000300, "Member 'UWI_PerkAbility_C::BoundActionSizeBox' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, CooldownTimerLabel) == 0x000308, "Member 'UWI_PerkAbility_C::CooldownTimerLabel' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, Icon) == 0x000310, "Member 'UWI_PerkAbility_C::Icon' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, Overlay) == 0x000318, "Member 'UWI_PerkAbility_C::Overlay' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, Overlay_Main) == 0x000320, "Member 'UWI_PerkAbility_C::Overlay_Main' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, ProgressBar) == 0x000328, "Member 'UWI_PerkAbility_C::ProgressBar' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, ProgressBarFillFraction) == 0x000330, "Member 'UWI_PerkAbility_C::ProgressBarFillFraction' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, CooldownText) == 0x000338, "Member 'UWI_PerkAbility_C::CooldownText' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, ShowOverlay) == 0x000348, "Member 'UWI_PerkAbility_C::ShowOverlay' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, IconSoftTexture) == 0x000349, "Member 'UWI_PerkAbility_C::IconSoftTexture' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, ShowBoundAction) == 0x00034A, "Member 'UWI_PerkAbility_C::ShowBoundAction' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, InputAction) == 0x000350, "Member 'UWI_PerkAbility_C::InputAction' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, GameplayAbility) == 0x000358, "Member 'UWI_PerkAbility_C::GameplayAbility' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, CooldownDuration) == 0x000360, "Member 'UWI_PerkAbility_C::CooldownDuration' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, ElapsedCooldownTime) == 0x000368, "Member 'UWI_PerkAbility_C::ElapsedCooldownTime' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, ApplyCooldownTick) == 0x000370, "Member 'UWI_PerkAbility_C::ApplyCooldownTick' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, AbilityRefreshSound) == 0x000378, "Member 'UWI_PerkAbility_C::AbilityRefreshSound' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, AbilityFailedSound) == 0x000380, "Member 'UWI_PerkAbility_C::AbilityFailedSound' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, PerkDefinition) == 0x000388, "Member 'UWI_PerkAbility_C::PerkDefinition' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, StartOnCooldown) == 0x000390, "Member 'UWI_PerkAbility_C::StartOnCooldown' has a wrong offset!");
static_assert(offsetof(UWI_PerkAbility_C, PerkAbilityContainer) == 0x000398, "Member 'UWI_PerkAbility_C::PerkAbilityContainer' has a wrong offset!");

}

