#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWOnlineServices

#include "Basic.hpp"


namespace SDK
{

// Enum IWOnlineServices.EBackfillingState
// NumValues: 0x0007
enum class EBackfillingState : uint8
{
	None                                     = 0,
	CreatingTicket                           = 1,
	SearchInProgress                         = 2,
	Matched                                  = 3,
	CancelingTicket                          = 4,
	Error                                    = 5,
	EBackfillingState_MAX                    = 6,
};

// Enum IWOnlineServices.EErrorCode
// NumValues: 0x0002
enum class EErrorCode : uint16
{
	FailedToGetActiveSeasonPasses            = 626,
	EErrorCode_MAX                           = 627,
};

// Enum IWOnlineServices.EClientIdentityLoginState
// NumValues: 0x0007
enum class EClientIdentityLoginState : uint8
{
	None                                     = 0,
	NotLoggedIn                              = 1,
	LoggingIn                                = 2,
	LoggedIn                                 = 3,
	Banned                                   = 4,
	Error                                    = 5,
	EClientIdentityLoginState_MAX            = 6,
};

// Enum IWOnlineServices.EMatchmakingState
// NumValues: 0x000B
enum class EMatchmakingState : uint8
{
	None                                     = 0,
	Initialize                               = 1,
	Error                                    = 2,
	Searching                                = 3,
	Invited                                  = 4,
	Joining                                  = 5,
	Cancelling                               = 6,
	Cancelled                                = 7,
	TimedOut                                 = 8,
	Fatal                                    = 9,
	EMatchmakingState_MAX                    = 10,
};

// Enum IWOnlineServices.EPartyLeaderMatchmakingState
// NumValues: 0x0005
enum class EPartyLeaderMatchmakingState : uint8
{
	None                                     = 0,
	Searching                                = 1,
	InProgress                               = 2,
	Leaving                                  = 3,
	EPartyLeaderMatchmakingState_MAX         = 4,
};

// Enum IWOnlineServices.EPartyManagerState
// NumValues: 0x0007
enum class EPartyManagerState : uint8
{
	None                                     = 0,
	NotInParty                               = 1,
	InParty                                  = 2,
	CreatingParty                            = 3,
	JoiningParty                             = 4,
	LeavingParty                             = 5,
	EPartyManagerState_MAX                   = 6,
};

// Enum IWOnlineServices.EPlatformStoreState
// NumValues: 0x0006
enum class EPlatformStoreState : uint8
{
	Ready                                    = 0,
	InitiatingPurchase                       = 1,
	AwaitingAuth                             = 2,
	ProcessingPurchase                       = 3,
	RedeemingPurchase                        = 4,
	EPlatformStoreState_MAX                  = 5,
};

// Enum IWOnlineServices.EPlatformType
// NumValues: 0x0005
enum class EPlatformType : uint8
{
	None                                     = 0,
	CustomID                                 = 1,
	Steam                                    = 2,
	EpicAccountServices                      = 3,
	EPlatformType_MAX                        = 4,
};

// Enum IWOnlineServices.EPurchaseState
// NumValues: 0x0005
enum class EPurchaseState : uint8
{
	None                                     = 0,
	InProgress                               = 1,
	Succeeded                                = 2,
	Failed                                   = 3,
	EPurchaseState_MAX                       = 4,
};

// Enum IWOnlineServices.EServerAuthLoginState
// NumValues: 0x0006
enum class EServerAuthLoginState : uint8
{
	None                                     = 0,
	NotLoggedIn                              = 1,
	LoggingIn                                = 2,
	LoggedIn                                 = 3,
	Error                                    = 4,
	EServerAuthLoginState_MAX                = 5,
};

// ScriptStruct IWOnlineServices.EulaSpecificLanguageVersion
// 0x0038 (0x0038 - 0x0000)
struct FEulaSpecificLanguageVersion final
{
public:
	int32                                         EulaVersion;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrivacyPolicyVersion;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EulaDownloadURL;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrivacyPolicyDownloadURL;                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEulaSpecificLanguageVersion) == 0x000008, "Wrong alignment on FEulaSpecificLanguageVersion");
static_assert(sizeof(FEulaSpecificLanguageVersion) == 0x000038, "Wrong size on FEulaSpecificLanguageVersion");
static_assert(offsetof(FEulaSpecificLanguageVersion, EulaVersion) == 0x000000, "Member 'FEulaSpecificLanguageVersion::EulaVersion' has a wrong offset!");
static_assert(offsetof(FEulaSpecificLanguageVersion, PrivacyPolicyVersion) == 0x000004, "Member 'FEulaSpecificLanguageVersion::PrivacyPolicyVersion' has a wrong offset!");
static_assert(offsetof(FEulaSpecificLanguageVersion, Language) == 0x000008, "Member 'FEulaSpecificLanguageVersion::Language' has a wrong offset!");
static_assert(offsetof(FEulaSpecificLanguageVersion, EulaDownloadURL) == 0x000018, "Member 'FEulaSpecificLanguageVersion::EulaDownloadURL' has a wrong offset!");
static_assert(offsetof(FEulaSpecificLanguageVersion, PrivacyPolicyDownloadURL) == 0x000028, "Member 'FEulaSpecificLanguageVersion::PrivacyPolicyDownloadURL' has a wrong offset!");

// ScriptStruct IWOnlineServices.EulaConfigData
// 0x0010 (0x0010 - 0x0000)
struct FEulaConfigData final
{
public:
	TArray<struct FEulaSpecificLanguageVersion>   EULAConfigurations;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEulaConfigData) == 0x000008, "Wrong alignment on FEulaConfigData");
static_assert(sizeof(FEulaConfigData) == 0x000010, "Wrong size on FEulaConfigData");
static_assert(offsetof(FEulaConfigData, EULAConfigurations) == 0x000000, "Member 'FEulaConfigData::EULAConfigurations' has a wrong offset!");

// ScriptStruct IWOnlineServices.MatchmakingSettings
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FMatchmakingSettings final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingSettings) == 0x000008, "Wrong alignment on FMatchmakingSettings");
static_assert(sizeof(FMatchmakingSettings) == 0x000040, "Wrong size on FMatchmakingSettings");

// ScriptStruct IWOnlineServices.PartySessionMatchmakingData
// 0x0020 (0x0020 - 0x0000)
struct FPartySessionMatchmakingData final
{
public:
	class FString                                 TicketId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartySessionMatchmakingData) == 0x000008, "Wrong alignment on FPartySessionMatchmakingData");
static_assert(sizeof(FPartySessionMatchmakingData) == 0x000020, "Wrong size on FPartySessionMatchmakingData");
static_assert(offsetof(FPartySessionMatchmakingData, TicketId) == 0x000000, "Member 'FPartySessionMatchmakingData::TicketId' has a wrong offset!");
static_assert(offsetof(FPartySessionMatchmakingData, QueueName) == 0x000010, "Member 'FPartySessionMatchmakingData::QueueName' has a wrong offset!");

// ScriptStruct IWOnlineServices.PlatformStoreOffer
// 0x0040 (0x0040 - 0x0000)
struct FPlatformStoreOffer final
{
public:
	class FString                                 PlatformID;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetKey;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPrice;                                      // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasePrice;                                         // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformStoreOffer) == 0x000008, "Wrong alignment on FPlatformStoreOffer");
static_assert(sizeof(FPlatformStoreOffer) == 0x000040, "Wrong size on FPlatformStoreOffer");
static_assert(offsetof(FPlatformStoreOffer, PlatformID) == 0x000000, "Member 'FPlatformStoreOffer::PlatformID' has a wrong offset!");
static_assert(offsetof(FPlatformStoreOffer, AssetKey) == 0x000010, "Member 'FPlatformStoreOffer::AssetKey' has a wrong offset!");
static_assert(offsetof(FPlatformStoreOffer, Amount) == 0x000020, "Member 'FPlatformStoreOffer::Amount' has a wrong offset!");
static_assert(offsetof(FPlatformStoreOffer, CurrencyCode) == 0x000028, "Member 'FPlatformStoreOffer::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FPlatformStoreOffer, CurrentPrice) == 0x000038, "Member 'FPlatformStoreOffer::CurrentPrice' has a wrong offset!");
static_assert(offsetof(FPlatformStoreOffer, BasePrice) == 0x00003C, "Member 'FPlatformStoreOffer::BasePrice' has a wrong offset!");

// ScriptStruct IWOnlineServices.PlayFabOnlinePlayer
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FPlayFabOnlinePlayer final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayFabOnlinePlayer) == 0x000008, "Wrong alignment on FPlayFabOnlinePlayer");
static_assert(sizeof(FPlayFabOnlinePlayer) == 0x000050, "Wrong size on FPlayFabOnlinePlayer");

// ScriptStruct IWOnlineServices.AgreedUserAgreement
// 0x0020 (0x0020 - 0x0000)
struct FAgreedUserAgreement final
{
public:
	int32                                         EulaVersion;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrivacyPolicyVersion;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatformType                                 Platform;                                          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAgreedUserAgreement) == 0x000008, "Wrong alignment on FAgreedUserAgreement");
static_assert(sizeof(FAgreedUserAgreement) == 0x000020, "Wrong size on FAgreedUserAgreement");
static_assert(offsetof(FAgreedUserAgreement, EulaVersion) == 0x000000, "Member 'FAgreedUserAgreement::EulaVersion' has a wrong offset!");
static_assert(offsetof(FAgreedUserAgreement, PrivacyPolicyVersion) == 0x000004, "Member 'FAgreedUserAgreement::PrivacyPolicyVersion' has a wrong offset!");
static_assert(offsetof(FAgreedUserAgreement, PlayerId) == 0x000008, "Member 'FAgreedUserAgreement::PlayerId' has a wrong offset!");
static_assert(offsetof(FAgreedUserAgreement, Platform) == 0x000018, "Member 'FAgreedUserAgreement::Platform' has a wrong offset!");

// ScriptStruct IWOnlineServices.UserDataEntry
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FUserDataEntry final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserDataEntry) == 0x000008, "Wrong alignment on FUserDataEntry");
static_assert(sizeof(FUserDataEntry) == 0x000020, "Wrong size on FUserDataEntry");

}

