#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Deployable_Magpie_Nest

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JP_structs.hpp"
#include "S_MagpieTargetPair_structs.hpp"
#include "BP_HouseAdditionBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Deployable_Magpie_Nest.BP_Deployable_Magpie_Nest_C
// 0x0110 (0x0548 - 0x0438)
class ABP_Deployable_Magpie_Nest_C final : public ABP_HouseAdditionBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Deployable_Magpie_Nest_C;        // 0x0438(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioIdle;                                         // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MagpieIdle4;                                       // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MagpieIdle3;                                       // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MagpieIdle1;                                       // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MagpieIdle2;                                       // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       FallOffZone;                                       // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MagpiePosition4;                                   // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MagpiePosition3;                                   // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MagpiePosition2;                                   // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MagpiePosition1;                                   // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       TriggerZone;                                       // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDebugging;                                       // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         OwningTeamID;                                      // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4A2[0x6];                                      // 0x04A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCombatParticipant                     Killer;                                            // 0x04A8(0x0060)(Edit, BlueprintVisible, ExposeOnSpawn)
	TArray<struct FS_MagpieTargetPair>            MagpieTargetPairList;                              // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         MaxBirdsAmount;                                    // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ValidTargets;                                      // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Damage;                                            // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class USceneComponent*>                StartPositions;                                    // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void AbilitySystemComponentIsPlayer(class UAbilitySystemComponent* TargetASC, bool* IsPlayer, class ABP_ResidentCharacter_C** ResidentCharacter);
	void BelongsToEnemyTeam(class AActor* TargetASC, bool* IsEnemy);
	void CleanPairFollowingState(class ABP_Magpie_Projectile_C* Bird);
	void Contains_Bird(class ABP_Magpie_Projectile_C* Bird, TArray<struct FS_MagpieTargetPair>& List, bool* Return, struct FS_MagpieTargetPair* MagpieTargetPair);
	void ContainsTarget(TArray<struct FS_MagpieTargetPair>& List, class AActor* TargetASC, bool* Return, struct FS_MagpieTargetPair* MagpieTargetPair);
	void CreateNewBird(class AActor* TargetASC, class USceneComponent* StartPosition);
	void ExecuteUbergraph_BP_Deployable_Magpie_Nest(int32 EntryPoint);
	void GetActiveBirdCount(TArray<struct FS_MagpieTargetPair>& List, int32* Amount);
	void GetHomingTarget(class AActor* ActorComponent, bool* FoundTarget, class USceneComponent** HomingTarget);
	void GetNextAvailableBird(TArray<struct FS_MagpieTargetPair>& List, struct FS_MagpieTargetPair* Pair, bool* FoundAvailableBird);
	void GetPairFromBird(class ABP_Magpie_Projectile_C* Bird, TArray<struct FS_MagpieTargetPair>& List, bool* FoundMatch, struct FS_MagpieTargetPair* Pair);
	void GetPairFromTarget(TArray<struct FS_MagpieTargetPair>& List, class UAbilitySystemComponent* TargetASC, bool* FoundMatch, struct FS_MagpieTargetPair* Pair);
	void HasLineOfSightOver(class AActor* TargetCharacter, bool* HasLineOfSite);
	void IsWithinTriggerZone(class USphereComponent* SphereCollision, class AActor* TargetActor, bool* ToReturn);
	void LogMessage(const class FText& Text, bool IsError, double Duration);
	void OnBirdReturnedToNest(class ABP_Magpie_Projectile_C* ReturningBird);
	void ProcessInvalidTarget(class AActor* TargetCharacter);
	void ProcessValidTarget(class AActor* TargetCharacter, bool IsPriorityTarget);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void Remove_Pair_From_List(class UAbilitySystemComponent* TargetASC, class ABP_Magpie_Projectile_C* Bird);
	void ScanForTargets();
	void SendBirdAfterTarget(class AActor* Target_ASC, class ABP_Magpie_Projectile_C* Bird);
	void SendBirdBackToNest(class ABP_Magpie_Projectile_C* BirdToReturn);
	void SetIdleBirdState(class USceneComponent* StartPosition, bool Visibility);
	void SetTargetForExistingBird(class UAbilitySystemComponent* TargetASC, class ABP_Magpie_Projectile_C* Bird, class USceneComponent* StartPosition);
	void ThrowProjectile(const struct FTransform& SpawnTransform, double ProjectileSpeed, class APawn* Owner_0, class USceneComponent* HomingTarget, const class AActor* TargetASC, class USceneComponent* StartPosition, double Damage_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Deployable_Magpie_Nest_C">();
	}
	static class ABP_Deployable_Magpie_Nest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Deployable_Magpie_Nest_C>();
	}
};
static_assert(alignof(ABP_Deployable_Magpie_Nest_C) == 0x000008, "Wrong alignment on ABP_Deployable_Magpie_Nest_C");
static_assert(sizeof(ABP_Deployable_Magpie_Nest_C) == 0x000548, "Wrong size on ABP_Deployable_Magpie_Nest_C");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, UberGraphFrame_BP_Deployable_Magpie_Nest_C) == 0x000438, "Member 'ABP_Deployable_Magpie_Nest_C::UberGraphFrame_BP_Deployable_Magpie_Nest_C' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, Box) == 0x000440, "Member 'ABP_Deployable_Magpie_Nest_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, AudioIdle) == 0x000448, "Member 'ABP_Deployable_Magpie_Nest_C::AudioIdle' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, MagpieIdle4) == 0x000450, "Member 'ABP_Deployable_Magpie_Nest_C::MagpieIdle4' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, MagpieIdle3) == 0x000458, "Member 'ABP_Deployable_Magpie_Nest_C::MagpieIdle3' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, MagpieIdle1) == 0x000460, "Member 'ABP_Deployable_Magpie_Nest_C::MagpieIdle1' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, MagpieIdle2) == 0x000468, "Member 'ABP_Deployable_Magpie_Nest_C::MagpieIdle2' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, FallOffZone) == 0x000470, "Member 'ABP_Deployable_Magpie_Nest_C::FallOffZone' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, MagpiePosition4) == 0x000478, "Member 'ABP_Deployable_Magpie_Nest_C::MagpiePosition4' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, MagpiePosition3) == 0x000480, "Member 'ABP_Deployable_Magpie_Nest_C::MagpiePosition3' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, MagpiePosition2) == 0x000488, "Member 'ABP_Deployable_Magpie_Nest_C::MagpiePosition2' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, MagpiePosition1) == 0x000490, "Member 'ABP_Deployable_Magpie_Nest_C::MagpiePosition1' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, TriggerZone) == 0x000498, "Member 'ABP_Deployable_Magpie_Nest_C::TriggerZone' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, IsDebugging) == 0x0004A0, "Member 'ABP_Deployable_Magpie_Nest_C::IsDebugging' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, OwningTeamID) == 0x0004A1, "Member 'ABP_Deployable_Magpie_Nest_C::OwningTeamID' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, Killer) == 0x0004A8, "Member 'ABP_Deployable_Magpie_Nest_C::Killer' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, MagpieTargetPairList) == 0x000508, "Member 'ABP_Deployable_Magpie_Nest_C::MagpieTargetPairList' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, MaxBirdsAmount) == 0x000518, "Member 'ABP_Deployable_Magpie_Nest_C::MaxBirdsAmount' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, ValidTargets) == 0x000520, "Member 'ABP_Deployable_Magpie_Nest_C::ValidTargets' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, Damage) == 0x000530, "Member 'ABP_Deployable_Magpie_Nest_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_Magpie_Nest_C, StartPositions) == 0x000538, "Member 'ABP_Deployable_Magpie_Nest_C::StartPositions' has a wrong offset!");

}

