#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CR_JP_FootIK

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_classes.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass CR_JP_FootIK.CR_JP_FootIK_C
// 0x0078 (0x0B20 - 0x0AA8)
class UCR_JP_FootIK_C final : public UControlRig
{
public:
	double                                        ZOffset_L_Target;                                  // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZOffset_R_Target;                                  // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZOffset_L;                                         // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZOffset_R;                                         // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZOffset_Pelvis;                                    // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDoIKTrace;                                   // 0x0AD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD1[0x7];                                      // 0x0AD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        XOffset;                                           // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ExcludedBones;                                     // 0x0AE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Velocity;                                          // 0x0AF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZFootOffset;                                       // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Root;                                              // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZPelvisOffset;                                     // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CR_JP_FootIK_C">();
	}
	static class UCR_JP_FootIK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCR_JP_FootIK_C>();
	}
};
static_assert(alignof(UCR_JP_FootIK_C) == 0x000008, "Wrong alignment on UCR_JP_FootIK_C");
static_assert(sizeof(UCR_JP_FootIK_C) == 0x000B20, "Wrong size on UCR_JP_FootIK_C");
static_assert(offsetof(UCR_JP_FootIK_C, ZOffset_L_Target) == 0x000AA8, "Member 'UCR_JP_FootIK_C::ZOffset_L_Target' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, ZOffset_R_Target) == 0x000AB0, "Member 'UCR_JP_FootIK_C::ZOffset_R_Target' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, ZOffset_L) == 0x000AB8, "Member 'UCR_JP_FootIK_C::ZOffset_L' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, ZOffset_R) == 0x000AC0, "Member 'UCR_JP_FootIK_C::ZOffset_R' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, ZOffset_Pelvis) == 0x000AC8, "Member 'UCR_JP_FootIK_C::ZOffset_Pelvis' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, ShouldDoIKTrace) == 0x000AD0, "Member 'UCR_JP_FootIK_C::ShouldDoIKTrace' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, XOffset) == 0x000AD8, "Member 'UCR_JP_FootIK_C::XOffset' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, ExcludedBones) == 0x000AE0, "Member 'UCR_JP_FootIK_C::ExcludedBones' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, Velocity) == 0x000AF0, "Member 'UCR_JP_FootIK_C::Velocity' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, ZFootOffset) == 0x000B08, "Member 'UCR_JP_FootIK_C::ZFootOffset' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, Root) == 0x000B10, "Member 'UCR_JP_FootIK_C::Root' has a wrong offset!");
static_assert(offsetof(UCR_JP_FootIK_C, ZPelvisOffset) == 0x000B18, "Member 'UCR_JP_FootIK_C::ZPelvisOffset' has a wrong offset!");

}

