#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ResidentCharacter

#include "Basic.hpp"

#include "S_EliminationDataForPlayers_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JP_structs.hpp"
#include "BP_MovementCharacter_classes.hpp"
#include "E_ImpactEffect_structs.hpp"
#include "E_MaterialTypes_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "E_ServerWidgetType_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ResidentCharacter.BP_ResidentCharacter_C
// 0x0770 (0x1180 - 0x0A10)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_ResidentCharacter_C : public ABP_MovementCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ResidentCharacter_C;             // 0x0A10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       EmoteCameraFPP;                                    // 0x0A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  DeathPP;                                           // 0x0A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEquipmentManagerComponent*             EquipmentManager;                                  // 0x0A28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  InteractOutlinePP;                                 // 0x0A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PingableComponent_Character_C*      BP_PingableComponent_Character;                    // 0x0A38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  HealOutlinePP;                                     // 0x0A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  CharacterOutlinePP;                                // 0x0A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  BuildingPreviewOutlinePP;                          // 0x0A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  ReviveOutlinePP;                                   // 0x0A58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        OutlinesPostProcessMaterials;                      // 0x0A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharacterMaskComponent*                CharacterMask;                                     // 0x0A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DeathComponent_C*                   BP_DeathComponent;                                 // 0x0A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_CharacterSpecificFootstepLayer;              // 0x0A78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaminaComponent_C*                    StaminaComponent;                                  // 0x0A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThrowFrom;                                         // 0x0A88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAssisterTrackingComponent_C*           AssisterTrackingComponent;                         // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneTurretTarget;                                 // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_HitDirection_C*                     AC_HitDirection;                                   // 0x0AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HealthBarTraceLocation;                            // 0x0AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_CharacterNamePlate_C*               AC_CharacterNamePlate;                             // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LocationSlightlyInFrontOfCharacter;                // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   XRay_Post_Process;                                 // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharacterItemWheelComponent_C*         CharacterItemWheelComponent;                       // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FootstepTraceScene;                                // 0x0AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInventoryComponent*                    Inventory;                                         // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneListener;                                     // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ShootFrom;                                         // 0x0AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HeadLocation;                                      // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_WarmupComponent_C*                  BP_WarmupComponent;                                // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SimpleReplicatedRagdollSystem_Component_C* BP_SimpleReplicatedRagdollSystem_Component;        // 0x0B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       TPPCamera;                                         // 0x0B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    DeathSpringArm;                                    // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm_0;                                       // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneDropFrom;                                     // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandle;                                     // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHealthBarComponent_C*                  HealthBarComponent;                                // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UShopInteractionAC_C*                   ShopInteractionAC;                                 // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HitCosmeticTimeline_EffectIntensity_C51F7DA8421C009E136A0AAFE4D38224; // 0x0B48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HitCosmeticTimeline__Direction_C51F7DA8421C009E136A0AAFE4D38224; // 0x0B4C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4D[0x3];                                      // 0x0B4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HitCosmeticTimeline;                               // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         GripSpeedLerp_Percent_8D558D004A46B3178125009B376C2B42; // 0x0B58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            GripSpeedLerp__Direction_8D558D004A46B3178125009B376C2B42; // 0x0B5C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5D[0x3];                                      // 0x0B5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GripSpeedLerp;                                     // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         LerpGrippedObjectRotation_Percent_44BA072A43F1022B474DCDB554FC0052; // 0x0B68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LerpGrippedObjectRotation__Direction_44BA072A43F1022B474DCDB554FC0052; // 0x0B6C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B6D[0x3];                                      // 0x0B6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LerpGrippedObjectRotation;                         // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       InteractableInFocusData;                           // 0x0B78(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Dead;                                              // 0x0BA0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA1[0x7];                                      // 0x0BA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             On_Dead;                                           // 0x0BA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             On_InteractableInWorldSetToNull;                   // 0x0BB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 Name_0;                                            // 0x0BC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class UPrimitiveComponent*                    GrippedPhysicsComponent;                           // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               GrippedPhysicsObjectRotation;                      // 0x0BE0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PhysicsRotatingMode;                               // 0x0BF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF9[0x3];                                      // 0x0BF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InteractionTraceIntervalSeconds;                   // 0x0BFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClientsideInteractionCooldown;                     // 0x0C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C04[0x4];                                      // 0x0C04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InteractionRange;                                  // 0x0C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               GripTargetResetRotation;                           // 0x0C10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        PhysicsGripInterpolationSpeedStart;                // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PhysicsGripInterpolationSpeedNormal;               // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MovementCharacter_C*                Character_JP_BP;                                   // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UInteractButtonWI_C*                    InteractButtonWI;                                  // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerStartJP_C*                       PlayerStartToUse;                                  // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AtHomeDamageMultiplier;                            // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GrippedObjectDropDistance;                         // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PostProcessHitMaterial;                            // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FootstepTimestamp;                                 // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<uint8, class UMaterialInstance*>         TeamMaterials;                                     // 0x0C70(0x0050)(Edit, BlueprintVisible)
	struct FTimerHandle                           DeathTimerHandle;                                  // 0x0CC0(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultVolume;                                     // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealthThreshholdToDie;                             // 0x0CD0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DesiredMovementDirection;                          // 0x0CD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          TPPSkeletalMesh;                                   // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PostProcessTrappedMaterial;                        // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ThrowingCharge;                                    // 0x0D00(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D01[0x7];                                      // 0x0D01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PhysicsGripLocationNormal;                         // 0x0D08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PhysicsGripLocationThrowing;                       // 0x0D20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScreenEffectActive;                                // 0x0D38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D39[0x3];                                      // 0x0D39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            StopStaminaRegHandle;                              // 0x0D3C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D44[0x4];                                      // 0x0D44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TScriptInterface<class II_ActorWithHealth_HealthChangedReceiver_C>> OnHealthChangedListeners;                          // 0x0D48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TScriptInterface<class II_ActorWithChangeableTeam_TeamChangedReceiver_C>> OnTeamChangedListeners;                            // 0x0D58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_EliminationDataForPlayers           EliminationDataForAttacker;                        // 0x0D68(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             On_Footstep;                                       // 0x0DD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayEffectSpec                    LastAppliedGameplayEffect;                         // 0x0DE0(0x0298)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UPlayerMatchRecord*, double>       PlayerDamageTrackers;                              // 0x1078(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        InteractionTraceStartForwardOffset;                // 0x10C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InteractionMultiBoxTraceHalfSize;                  // 0x10D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugInteractionMultiBoxTrace;                     // 0x10E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InteractionSimpleTrace;                            // 0x10E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10EA[0x6];                                     // 0x10EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemInstance*                          LastEquippedItem;                                  // 0x10F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             On_DamageTaken;                                    // 0x10F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABp_ThrowableProp_Base_C*               CarriedThrowable;                                  // 0x1108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BecomeSpectatorTimer;                              // 0x1110(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FootstepAudio;                                     // 0x1118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FootstepCharacterLayerAudio;                       // 0x1120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CharacterSpecificFootstepLayerSound;               // 0x1128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         CachedTeamID;                                      // 0x1130(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1131[0x7];                                     // 0x1131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OutOfStaminaSound;                                 // 0x1138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedStealth;                                     // 0x1140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stealth_Active;                                    // 0x1141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTalking;                                         // 0x1142(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          ValidTurretTarget;                                 // 0x1143(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1144[0x4];                                     // 0x1144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonActivatableWidget*               KnockoutWidget;                                    // 0x1148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ASpectatorPawnStinna_C*                 SpectatorPawn;                                     // 0x1150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InteractionTraceOffset;                            // 0x1158(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InteractionTraceLength;                            // 0x1170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityFailedAttributeCost(class AActor* OwningActor);
	void ActivatePickUpAbility();
	void ActivateTrappedScreenEffect();
	void AddHomeRegenEffect();
	void AddOnHealthChangedListener(TScriptInterface<class II_ActorWithHealth_HealthChangedReceiver_C> Listener);
	void AddOnTeamChangedListener(TScriptInterface<class II_ActorWithChangeableTeam_TeamChangedReceiver_C> Listener);
	void ApplyCombatGameplayEffectToTargetAndInstigator(class AActor* Causer, double Damage);
	void ApplyInteractionAudioMultiplier(class UAudioComponent* Audio_Component);
	void ApplyKillEffect();
	void ApplyPassiveHealthRegenEffect();
	void ApplyPerkActionsOnPossessed();
	void ApplyPerkActionsOnRespawn();
	void ApplyVitalInstinctPerkEffects(double CurrentHealth, double MaxHealth);
	void AssignLocationTag();
	void AssignSocketParents();
	void Audio_Footstep(EGaitJP Gait);
	void Audio_Jump();
	void Auth_Grant_Starting_Item();
	void BeginGripRotationLerp();
	void Bind_on_Player_State(class APlayerState* PlayerState_0);
	void BndEvt__BP_ResidentCharacter_EquipmentManager_K2Node_ComponentBoundEvent_1_OnEquipmentChanged__DelegateSignature(class UEquipmentInstance* Instance);
	void BreakBarricadeCheck();
	void BreakBarricadeUnderCharacter();
	void BroadcastInventoryChange(const struct FItemInstanceArrayEntry& ItemInstanceArrayEntry);
	void BroadcastKillfeedGameplayMessage(const struct FKillInfo& KillInfo);
	void CacheTeamID(class AController* Controller_0);
	bool CanActivateTrap();
	void CancelAbilitiesOnDeath();
	void CanRestartPlayer(class AController* Controller_0, bool* Return_Value);
	void ChangeSpecialAbilityPerkOnPossesion();
	void Client_HealthAttributeChanged(double OldValue, double NewValue);
	void CreateDeathTimerDetails(struct FS_DeathTimerDetails* DeathTimerDetails);
	void CreateKillInfo(const struct FCombatParticipant& Killer, const struct FKillMethod& Method, struct FKillInfo* KillInfo);
	void DamageCosmetics();
	void DeactivateTrappedScreenEffect();
	void DeathChangeItemDurability();
	void DEBUGONLY_SERVER_Set_Is_Dead(bool Dead_0, const struct FVector& OptionalVelocity);
	void DestroyNameplate();
	void DropPhysicsObject();
	void DropResourceCrateCue();
	void Enable_High_Contrast();
	void EndAllOwnedAbilities();
	void EnterKillVolume(bool* Void);
	void EquipItemOverlay(class UBP_EquipmentInstance_C* NewParam);
	void Event_On_Apperance_Changed();
	void ExecuteUbergraph_BP_ResidentCharacter(int32 EntryPoint);
	void FindDropLocation(struct FVector* Location);
	void ForceEquipHands();
	void FullyRechargeRechargableItems(class UInventoryComponent* Inventory_0);
	void Get_Perk_Actions_for_Action_Type(class UClass* ActionType, TArray<class UPerkAction*>* PerkActions);
	void GetAppropriateSpawn(struct FTransform* Transform, class APlayerStartJP_C** NewParam);
	void GetCameraFOV(double* FOV);
	struct FCharacterRoleData GetCharacterRole(bool* IsValid);
	void GetCharacterTag(struct FGameplayTag* Return);
	void GetCharacterWI(class UWI_Character_C** CharacterWI);
	void GetComponentToAttachGameplayCueTo(class USceneComponent** SceneComponent);
	void GetCurrentHealth(double* Current_Health);
	void GetCurrentHealthFraction(double* Current_Health_Fraction);
	float GetCurrentHealthFromASC();
	double GetDeathLocationMultiplier();
	void GetDeathTimer(bool* HasPerkBonus, double* Duration, double* Details_ByDeath, double* Details_ByGameTime, double* Details_SubTotalPrePerkTime, double* Details_SubTotalPostPerkTime, double* Details_LocationMultiplier, double* Details_MatchConfigMultiplier);
	void GetDeathVelocity(const struct FCombatParticipant& CombatParticipant, class AActor* DamageCauser, struct FVector* Velocity);
	void GetExistingOrCreatePrintMessageWI(class UPrintMessageWI_C** PrintMessageWI);
	void GetGooseController(class AActor** ControllingActor);
	void GetGripPoint(class USceneComponent* ComponentToGrip, struct FVector* GripLocation, struct FRotator* GripRotation);
	void GetHomeDamageMultiplier(class AController* Instigator_0, double* AtHomeDamageMultiplier_0);
	void GetInCombatDuration(class AActor* Actor, double* Return);
	void GetInteractButtonWI(class UInteractButtonWI_C** PrintMessageWI);
	void GetInteractionTraceLength(double* Return);
	void GetInteractionTraceOffset(struct FVector* Return);
	void GetInteractSound();
	void GetItemWheelComponent(class UCharacterItemWheelComponent_C** Return);
	void GetLeloiTarget(class AActor** Return);
	void GetMaxHealth(double* Max_Health);
	float GetMaxHealthFromASC();
	void GetName(class FString* Name_0);
	void GetNewWidgetColor(struct FSlateColor* NewColor);
	void GetOptionalText(class FText* Return, class FText* Optional_Second_Line);
	void GetOutOfStaminaSound(class USoundBase** Return);
	void GetPlayerCamera(class UCameraComponent** Return);
	void GetPlayerStartTeamIdOrDefault(class APlayerStartJP_C* PlayerStartJP, uint8 DefaultTeamId, uint8* TeamId);
	void GetPriority(int32* Priority);
	double GetRespawnTimeByDeaths();
	double GetRespawnTimeByGameTime();
	void GetSoundFromSurfaceBelowCharacter(class USoundBase** Sound);
	void GetSoundVolumeMultiplier(double* Volume);
	void GetStealthActive(bool* Return);
	void GetTeamColor(struct FLinearColor* Color);
	void GetTraceFrom(struct FVector* Location, struct FRotator* Rotation);
	void GetTraceFromPosition(struct FVector* Location, struct FRotator* Rotation);
	void GetTurretTargetHighPriority(bool* Return);
	void GetTurretTargetSceneComponent(class USceneComponent** Return);
	void GetVisibilityComponentToTraceFor(class USceneComponent** Component);
	void GetWidgetLocation(struct FVector* Location);
	void GrabPhysicsObject(class UPrimitiveComponent* ComponentToGrab);
	void GrantCharacterSpecificGameplaySets();
	void GrantGameplaySetsOnPossessedFromPerk();
	void GripSpeedLerp__FinishedFunc();
	void GripSpeedLerp__UpdateFunc();
	void Handle_Game_State_Created();
	void HideInteractionWidget(bool* Return);
	void HighConstrastModeChanged(bool IsEnabled);
	void HitByDeliveryTruck(const struct FVector& LaunchVelocity);
	void HitCosmeticTimeline__FinishedFunc();
	void HitCosmeticTimeline__UpdateFunc();
	void HitInterface(const struct FVector& Direction);
	void Impact_Cosmetics(const struct FVector& Location, const struct FVector& HitImpulse, class FName BoneName, E_ImpactEffect ImpactEffect);
	void Init_Interaction();
	void InitializeAudioListener(class APlayerState* PlayerState_0);
	void InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Jump_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_10(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Move_K2Node_EnhancedInputActionEvent_11(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveBackwards_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveForward_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveHorizontal_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveHorizontal_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveLeft_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveRight_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveVertical_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveVertical_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_M_K2Node_InputDebugKeyEvent_3(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_NumPadOne_K2Node_InputDebugKeyEvent_2(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_NumPadThree_K2Node_InputDebugKeyEvent_0(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_NumPadTwo_K2Node_InputDebugKeyEvent_1(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_P_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InteractionTrace(class AActor** Actor, struct FGameplayAbilityTargetDataHandle* Target_Data);
	void InteractPressed(class AActor* InteractingActor);
	void InteractReleased(class AActor* InteractingActor);
	void InteruptGripRotationLerp();
	void IsActorDead(bool* Return);
	bool IsAlreadyDead();
	void IsAtHome(bool* AtHome);
	void IsGooseTargetAlive(bool* Return);
	void IsInFocus(class AActor* Focusing_Actor);
	void IsInteractable(bool* Interactable);
	void IsInteractionAllowedByTeam(class UObject* ActorIn, bool* Return);
	void IsPlayerHoldingResource(bool* IsPlayerHoldingResource_0);
	bool IsTrespassing();
	bool IsTrespassingAtNight(double* RemainingNight);
	void IsValidTurretTarget(bool* IsValid);
	void K2_FellOutOfWorld();
	void K2_HealthAttributeChanged(float OldValue, float NewValue);
	void K2_OnRep_PlayerState(const class APlayerStateJP_Match* PlayerStateJP_Match);
	void Knockback(const struct FVector& Velocity, bool XYOverride, bool ZOverride, double AirControlMultiplier, bool* Void);
	void LerpGrippedObjectRotation__FinishedFunc();
	void LerpGrippedObjectRotation__UpdateFunc();
	void LocalAddBuff(class UClass* Class_0);
	void MeleeHit(const class AActor*& AttackingActor);
	void MicrophoneStateChanged(bool IsMicrophoneOn);
	void Modify_Noise_from_Perk(double Outgoing_Volume, double* NewParam);
	void ModifyCritValuesFromPerk();
	void ModifyEquippedItemAbilities(class UEquipmentInstance* Instance);
	void ModifyRespawnTimeFromPerk(double RespawnTime, double* ModifiedRespawnTime, bool* HasPerkBonus);
	void ModifyScaleFromPerk(const struct FVector& Scale, struct FVector* ModifiedScale);
	void MSG_AVP_GetPlayerUsername(bool* Success_, class FText* Username);
	void MSG_AVP_GetVOIPComponent(class UBP_AntizeVOIPComponent_C** VOIPComponentRef);
	void MSG_AVP_GetWidgetVoice(class UWidgetComponent** WidgetVoiceRef);
	void Multi_CriticalHitSound(const struct FVector& Location);
	void Multi_Death_Cosmetics();
	void Multi_Impact_Cosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, class FName BoneName, E_ImpactEffect ImpactEffect);
	void Multi_PainFacialCosmetic();
	void Multi_Respawn_Cosmetics();
	void Notify_On_Health_Changed_Listeners(double CurrentHealth, double MaxHealth, double CurrentHealthFraction);
	void Notify_On_Team_Changed_Listeners(uint8 Team_ID, ETeamType Team_Type);
	void On_Death_Timer_Complete();
	void On_Team_Change(class APlayerStateJP* PlayerState_0, const struct FTeam& NewTeam);
	void On_DamageTaken__DelegateSignature();
	void On_Dead__DelegateSignature(class ACharacter* Character);
	void On_Footstep__DelegateSignature();
	void On_InteractableInWorldSetToNull__DelegateSignature();
	void OnDamaged(float Delta, class AActor* Causer, const struct FCombatParticipant& CombatParticipant, const struct FKillMethod& KillMethod, const struct FVector_NetQuantize& Location);
	void OnEnded_76DFBBD24F2A869D02CB218F3BC3C28E();
	void OnEnded_7AB6B7AC47E7205646C9FD9E2092DFC0();
	void OnEnded_85475DC04188D8FA0441B2B2FA1003E6();
	void OnEnded_944A4AE7448517EAE3D9E49D3166CF9B();
	void OnEnded_961F2AAA4B9843FE36B28FBCE9763DC4();
	void OnEnded_96FD18704E9AF75A109211AA841D5CEC();
	void OnEnded_DDDD2246453FB0A2A653C789D154DF7D();
	void OnHealthChanged(float Health, float MaxHealth);
	void OnInventoryChangedLocal(const struct FItemInstanceArrayEntry& ItemInstanceArrayEntry);
	void OnItemAdded(class UItemInstance* ItemInstance);
	void OnItemRemoved(TSoftObjectPtr<class UItemDefinition> ItemDefinition);
	void OnMessageReceived_647D55FB4EE325D5E5865AB127B12738(class UAsyncAction_ListenForGameplayMessage* ProxyObject, const struct FGameplayTag& ActualChannel);
	void OnMessageReceived_F9F199964147C7664F8C12A3C5FCA6B6(class UAsyncAction_ListenForGameplayMessage* ProxyObject, const struct FGameplayTag& ActualChannel);
	void OnNameChanged(class APlayerStateJP* PlayerState_0, const class FString& NewName);
	void OnRep_Dead();
	void OnRep_IsTalking();
	void OnRep_RoleData();
	void OnStaminaChanged(float Stamina, float MaxStamina);
	void OnStealthToggle(bool StealthActive, bool IsEnemyToLocalPlayer);
	void Owner_CreateKnockedOutWidget(double Deathtimer, bool TempEliminated, const struct FS_DeathTimerDetails& Death_Timer_Details, const struct FKillInfo& LatestKillInfo);
	void Owner_NoSee(class UMeshComponent* Mesh_0, bool NoSee);
	void Owner_Play_Camera_Shake(TSubclassOf<class UCameraShakeBase> ShakeClass, float Scale);
	void Owner_Play_Local_Sound(class USoundBase* Sound);
	void Owner_PlayTakeDamageSoundEffect();
	void Owner_RemoveHighlights();
	void Owner_RemoveKnockedOutWidget();
	void Owner_ResetCameraFOV(double Speed_0);
	void Owner_SendKillDataToAchievementComp(const struct FKillInfo& KillInfo, const struct FVector& Location);
	void Owner_Set_Camera_FOV(double Amount, double Speed_0, TSubclassOf<class UCameraShakeBase> ShakeClass, double ShakeScale);
	void Owner_Spawn_Widget(E_ServerWidgetType Class_0);
	void Owner_SpawnDamageValueAndHitMarkers(class APlayerController* OwningPlayer, double IncomingHealthDelta, const struct FVector& WorldLocation, bool CriticalHit);
	void Owner_Take_Damage_Screen_Effect();
	void PlayCameraShake(class UClass* CameraShake, double Scale);
	void PlayDamagedSoundEffect();
	void PlayDamageScreenEffect(double Delta);
	void PlayFootstepCharacterLayerSound(double VolumeMultiplier);
	void PlayFootstepSound(class USoundBase* Sound, double VolumeMultiplier, bool IgnoreSpeedModifier, float* Volume_Multiplier);
	void QueryInitializeHealthBar();
	void QueryInitializeStaminaBar();
	void RemoveEffectsOnDeath();
	void RemoveGameplayAbilitiesFromPerk();
	void RemoveOnHealthChangedListener(TScriptInterface<class II_ActorWithHealth_HealthChangedReceiver_C> Listener);
	void RemoveOnTeamChangedListener(TScriptInterface<class II_ActorWithChangeableTeam_TeamChangedReceiver_C> Listener);
	void RequestDeath();
	void RescaleCapsuleComponent();
	void ResetCameraFOV(double Speed_0);
	void ResetOnPossessedDoOnce();
	void RetrieveCustomization();
	void ReturnHighestPrioInter(TArray<struct FHitResult>& InteractableHits, class AActor** Actor, class UActorComponent** Component);
	void ReviveActor(const struct FVector& Location, bool* Void);
	void SelectCharacterById(TSoftObjectPtr<class UPawnDefinitionJP>* CharacterDefinition);
	void SendPickUpActionToClient(class ABp_ThrowableProp_Base_C* Throwable);
	void Server_Kill_Character(bool Dead_0, const struct FVector& OptionalImpulse, bool TempEliminated, const struct FKillInfo& KillInfo);
	void Server_Respawn_Character(class AController* Target, class APlayerStartJP_C* PlayerStartToUse_0);
	void Server_Struggle();
	void Server_Teleport_Emergency();
	void ServerSyncPhysicsGrabRotation(const struct FRotator& GrabbedPhysicsObjectRotation);
	void ServerSyncPhysicsGrabRotationReliable(const struct FRotator& GrabbedPhysicsObjectRotation);
	void SetCameraFOV(double Amount, double Speed_0, class UClass* OptionalCameraShake, double Scale);
	void SetCharacterStats();
	void SetDeathCamera(bool Dead_0);
	void SetForcedStealth(bool Enable);
	void SetHighContrastMode(bool Enabled);
	void SetHoveredComponent(class UInteractionComponent_C* HoveredComponent, bool* Void);
	void SetInteractable(bool Interactable);
	void SetIsValidTurretTarget(bool Valid, bool* Void);
	void SlowPlayerDownAfterDamage();
	void SpawnInstigatorHitMark();
	void SpawnReviveStatue();
	void StartGripLerpSpeed();
	void TakeDamage();
	void TargetingCompleted(const struct FTargetingRequestHandle& TargetingRequestHandle);
	bool TeamWasEliminated();
	void Trace_For_Interactable();
	void TransferAmmoOnDeath(class ABP_ResidentCharacter_C* NewCharacter);
	void Try_Disable_Camera_Look(bool Disabled);
	void TryDeactivateScreenEffect();
	void TryPlayFoliageRustle();
	void Update_Apperance();
	void Update_FPP_FOV();
	void Update_UI_and_Interaction();
	void UpdateDesiredMovementDirection(const struct FVector2D& InVector2D);
	void UpdateEquipmentManagerFromPerk();
	void UpdatePhysicsHandle();
	void UpdateShowLowHealth();
	void UpdateXRay();
	void VoiceActorSet(class ABP_PlayerVoiceChatActorJP_C* VoiceActor);
	void GetDurabilityCostWhenHit(double* Amount);
	void GetGuardDogTargetOffset(struct FVector* TargetOffset);
	void GetIsDead(bool* Dead_0);
	void GetJPPlayerController(class APlayerControllerJP** PlayerController);
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void ReceiveBeginPlay();
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void SetIsDead(bool Dead_0, const struct FVector& OptionalVelocity, const struct FKillInfo& KillInfo);
	void UserConstructionScript();

	void CalculateRagdollImpulse(const struct FVector& HitFromDirection, const class UDamageType* DamageType, struct FVector* Return) const;
	void GetControllerReference(class AController** OGPlayerController) const;
	double GetLevelScaling() const;
	void GetPlayerStateJP(class APlayerStateJP** AsPlayer_State_JP) const;
	struct FTeam GetTeam() const;
	void GetTeam_Internal(const struct FTeam* Return, bool* Valid) const;
	uint8 GetTeamID() const;
	bool HasInfiniteHealth() const;
	bool HasTeam() const;
	bool TakeDamageFromAllTeams() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ResidentCharacter_C">();
	}
	static class ABP_ResidentCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ResidentCharacter_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_ResidentCharacter_C) == 0x000010, "Wrong alignment on ABP_ResidentCharacter_C");
static_assert(sizeof(ABP_ResidentCharacter_C) == 0x001180, "Wrong size on ABP_ResidentCharacter_C");
static_assert(offsetof(ABP_ResidentCharacter_C, UberGraphFrame_BP_ResidentCharacter_C) == 0x000A10, "Member 'ABP_ResidentCharacter_C::UberGraphFrame_BP_ResidentCharacter_C' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, EmoteCameraFPP) == 0x000A18, "Member 'ABP_ResidentCharacter_C::EmoteCameraFPP' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, DeathPP) == 0x000A20, "Member 'ABP_ResidentCharacter_C::DeathPP' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, EquipmentManager) == 0x000A28, "Member 'ABP_ResidentCharacter_C::EquipmentManager' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, InteractOutlinePP) == 0x000A30, "Member 'ABP_ResidentCharacter_C::InteractOutlinePP' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, BP_PingableComponent_Character) == 0x000A38, "Member 'ABP_ResidentCharacter_C::BP_PingableComponent_Character' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, HealOutlinePP) == 0x000A40, "Member 'ABP_ResidentCharacter_C::HealOutlinePP' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, CharacterOutlinePP) == 0x000A48, "Member 'ABP_ResidentCharacter_C::CharacterOutlinePP' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, BuildingPreviewOutlinePP) == 0x000A50, "Member 'ABP_ResidentCharacter_C::BuildingPreviewOutlinePP' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, ReviveOutlinePP) == 0x000A58, "Member 'ABP_ResidentCharacter_C::ReviveOutlinePP' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, OutlinesPostProcessMaterials) == 0x000A60, "Member 'ABP_ResidentCharacter_C::OutlinesPostProcessMaterials' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, CharacterMask) == 0x000A68, "Member 'ABP_ResidentCharacter_C::CharacterMask' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, BP_DeathComponent) == 0x000A70, "Member 'ABP_ResidentCharacter_C::BP_DeathComponent' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, Audio_CharacterSpecificFootstepLayer) == 0x000A78, "Member 'ABP_ResidentCharacter_C::Audio_CharacterSpecificFootstepLayer' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, StaminaComponent) == 0x000A80, "Member 'ABP_ResidentCharacter_C::StaminaComponent' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, ThrowFrom) == 0x000A88, "Member 'ABP_ResidentCharacter_C::ThrowFrom' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, AssisterTrackingComponent) == 0x000A90, "Member 'ABP_ResidentCharacter_C::AssisterTrackingComponent' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, SceneTurretTarget) == 0x000A98, "Member 'ABP_ResidentCharacter_C::SceneTurretTarget' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, AC_HitDirection) == 0x000AA0, "Member 'ABP_ResidentCharacter_C::AC_HitDirection' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, HealthBarTraceLocation) == 0x000AA8, "Member 'ABP_ResidentCharacter_C::HealthBarTraceLocation' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, AC_CharacterNamePlate) == 0x000AB0, "Member 'ABP_ResidentCharacter_C::AC_CharacterNamePlate' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, LocationSlightlyInFrontOfCharacter) == 0x000AB8, "Member 'ABP_ResidentCharacter_C::LocationSlightlyInFrontOfCharacter' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, XRay_Post_Process) == 0x000AC0, "Member 'ABP_ResidentCharacter_C::XRay_Post_Process' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, AIPerceptionStimuliSource) == 0x000AC8, "Member 'ABP_ResidentCharacter_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, CharacterItemWheelComponent) == 0x000AD0, "Member 'ABP_ResidentCharacter_C::CharacterItemWheelComponent' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, FootstepTraceScene) == 0x000AD8, "Member 'ABP_ResidentCharacter_C::FootstepTraceScene' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, Inventory) == 0x000AE0, "Member 'ABP_ResidentCharacter_C::Inventory' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, SceneListener) == 0x000AE8, "Member 'ABP_ResidentCharacter_C::SceneListener' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, ShootFrom) == 0x000AF0, "Member 'ABP_ResidentCharacter_C::ShootFrom' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, HeadLocation) == 0x000AF8, "Member 'ABP_ResidentCharacter_C::HeadLocation' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, BP_WarmupComponent) == 0x000B00, "Member 'ABP_ResidentCharacter_C::BP_WarmupComponent' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, BP_SimpleReplicatedRagdollSystem_Component) == 0x000B08, "Member 'ABP_ResidentCharacter_C::BP_SimpleReplicatedRagdollSystem_Component' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, TPPCamera) == 0x000B10, "Member 'ABP_ResidentCharacter_C::TPPCamera' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, DeathSpringArm) == 0x000B18, "Member 'ABP_ResidentCharacter_C::DeathSpringArm' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, SpringArm_0) == 0x000B20, "Member 'ABP_ResidentCharacter_C::SpringArm_0' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, SceneDropFrom) == 0x000B28, "Member 'ABP_ResidentCharacter_C::SceneDropFrom' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, PhysicsHandle) == 0x000B30, "Member 'ABP_ResidentCharacter_C::PhysicsHandle' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, HealthBarComponent) == 0x000B38, "Member 'ABP_ResidentCharacter_C::HealthBarComponent' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, ShopInteractionAC) == 0x000B40, "Member 'ABP_ResidentCharacter_C::ShopInteractionAC' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, HitCosmeticTimeline_EffectIntensity_C51F7DA8421C009E136A0AAFE4D38224) == 0x000B48, "Member 'ABP_ResidentCharacter_C::HitCosmeticTimeline_EffectIntensity_C51F7DA8421C009E136A0AAFE4D38224' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, HitCosmeticTimeline__Direction_C51F7DA8421C009E136A0AAFE4D38224) == 0x000B4C, "Member 'ABP_ResidentCharacter_C::HitCosmeticTimeline__Direction_C51F7DA8421C009E136A0AAFE4D38224' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, HitCosmeticTimeline) == 0x000B50, "Member 'ABP_ResidentCharacter_C::HitCosmeticTimeline' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, GripSpeedLerp_Percent_8D558D004A46B3178125009B376C2B42) == 0x000B58, "Member 'ABP_ResidentCharacter_C::GripSpeedLerp_Percent_8D558D004A46B3178125009B376C2B42' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, GripSpeedLerp__Direction_8D558D004A46B3178125009B376C2B42) == 0x000B5C, "Member 'ABP_ResidentCharacter_C::GripSpeedLerp__Direction_8D558D004A46B3178125009B376C2B42' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, GripSpeedLerp) == 0x000B60, "Member 'ABP_ResidentCharacter_C::GripSpeedLerp' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, LerpGrippedObjectRotation_Percent_44BA072A43F1022B474DCDB554FC0052) == 0x000B68, "Member 'ABP_ResidentCharacter_C::LerpGrippedObjectRotation_Percent_44BA072A43F1022B474DCDB554FC0052' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, LerpGrippedObjectRotation__Direction_44BA072A43F1022B474DCDB554FC0052) == 0x000B6C, "Member 'ABP_ResidentCharacter_C::LerpGrippedObjectRotation__Direction_44BA072A43F1022B474DCDB554FC0052' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, LerpGrippedObjectRotation) == 0x000B70, "Member 'ABP_ResidentCharacter_C::LerpGrippedObjectRotation' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, InteractableInFocusData) == 0x000B78, "Member 'ABP_ResidentCharacter_C::InteractableInFocusData' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, Dead) == 0x000BA0, "Member 'ABP_ResidentCharacter_C::Dead' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, On_Dead) == 0x000BA8, "Member 'ABP_ResidentCharacter_C::On_Dead' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, On_InteractableInWorldSetToNull) == 0x000BB8, "Member 'ABP_ResidentCharacter_C::On_InteractableInWorldSetToNull' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, Name_0) == 0x000BC8, "Member 'ABP_ResidentCharacter_C::Name_0' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, GrippedPhysicsComponent) == 0x000BD8, "Member 'ABP_ResidentCharacter_C::GrippedPhysicsComponent' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, GrippedPhysicsObjectRotation) == 0x000BE0, "Member 'ABP_ResidentCharacter_C::GrippedPhysicsObjectRotation' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, PhysicsRotatingMode) == 0x000BF8, "Member 'ABP_ResidentCharacter_C::PhysicsRotatingMode' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, InteractionTraceIntervalSeconds) == 0x000BFC, "Member 'ABP_ResidentCharacter_C::InteractionTraceIntervalSeconds' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, ClientsideInteractionCooldown) == 0x000C00, "Member 'ABP_ResidentCharacter_C::ClientsideInteractionCooldown' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, InteractionRange) == 0x000C08, "Member 'ABP_ResidentCharacter_C::InteractionRange' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, GripTargetResetRotation) == 0x000C10, "Member 'ABP_ResidentCharacter_C::GripTargetResetRotation' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, PhysicsGripInterpolationSpeedStart) == 0x000C28, "Member 'ABP_ResidentCharacter_C::PhysicsGripInterpolationSpeedStart' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, PhysicsGripInterpolationSpeedNormal) == 0x000C30, "Member 'ABP_ResidentCharacter_C::PhysicsGripInterpolationSpeedNormal' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, Character_JP_BP) == 0x000C38, "Member 'ABP_ResidentCharacter_C::Character_JP_BP' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, InteractButtonWI) == 0x000C40, "Member 'ABP_ResidentCharacter_C::InteractButtonWI' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, PlayerStartToUse) == 0x000C48, "Member 'ABP_ResidentCharacter_C::PlayerStartToUse' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, AtHomeDamageMultiplier) == 0x000C50, "Member 'ABP_ResidentCharacter_C::AtHomeDamageMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, GrippedObjectDropDistance) == 0x000C58, "Member 'ABP_ResidentCharacter_C::GrippedObjectDropDistance' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, PostProcessHitMaterial) == 0x000C60, "Member 'ABP_ResidentCharacter_C::PostProcessHitMaterial' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, FootstepTimestamp) == 0x000C68, "Member 'ABP_ResidentCharacter_C::FootstepTimestamp' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, TeamMaterials) == 0x000C70, "Member 'ABP_ResidentCharacter_C::TeamMaterials' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, DeathTimerHandle) == 0x000CC0, "Member 'ABP_ResidentCharacter_C::DeathTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, DefaultVolume) == 0x000CC8, "Member 'ABP_ResidentCharacter_C::DefaultVolume' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, HealthThreshholdToDie) == 0x000CD0, "Member 'ABP_ResidentCharacter_C::HealthThreshholdToDie' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, DesiredMovementDirection) == 0x000CD8, "Member 'ABP_ResidentCharacter_C::DesiredMovementDirection' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, TPPSkeletalMesh) == 0x000CF0, "Member 'ABP_ResidentCharacter_C::TPPSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, PostProcessTrappedMaterial) == 0x000CF8, "Member 'ABP_ResidentCharacter_C::PostProcessTrappedMaterial' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, ThrowingCharge) == 0x000D00, "Member 'ABP_ResidentCharacter_C::ThrowingCharge' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, PhysicsGripLocationNormal) == 0x000D08, "Member 'ABP_ResidentCharacter_C::PhysicsGripLocationNormal' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, PhysicsGripLocationThrowing) == 0x000D20, "Member 'ABP_ResidentCharacter_C::PhysicsGripLocationThrowing' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, ScreenEffectActive) == 0x000D38, "Member 'ABP_ResidentCharacter_C::ScreenEffectActive' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, StopStaminaRegHandle) == 0x000D3C, "Member 'ABP_ResidentCharacter_C::StopStaminaRegHandle' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, OnHealthChangedListeners) == 0x000D48, "Member 'ABP_ResidentCharacter_C::OnHealthChangedListeners' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, OnTeamChangedListeners) == 0x000D58, "Member 'ABP_ResidentCharacter_C::OnTeamChangedListeners' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, EliminationDataForAttacker) == 0x000D68, "Member 'ABP_ResidentCharacter_C::EliminationDataForAttacker' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, On_Footstep) == 0x000DD0, "Member 'ABP_ResidentCharacter_C::On_Footstep' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, LastAppliedGameplayEffect) == 0x000DE0, "Member 'ABP_ResidentCharacter_C::LastAppliedGameplayEffect' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, PlayerDamageTrackers) == 0x001078, "Member 'ABP_ResidentCharacter_C::PlayerDamageTrackers' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, InteractionTraceStartForwardOffset) == 0x0010C8, "Member 'ABP_ResidentCharacter_C::InteractionTraceStartForwardOffset' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, InteractionMultiBoxTraceHalfSize) == 0x0010D0, "Member 'ABP_ResidentCharacter_C::InteractionMultiBoxTraceHalfSize' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, DebugInteractionMultiBoxTrace) == 0x0010E8, "Member 'ABP_ResidentCharacter_C::DebugInteractionMultiBoxTrace' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, InteractionSimpleTrace) == 0x0010E9, "Member 'ABP_ResidentCharacter_C::InteractionSimpleTrace' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, LastEquippedItem) == 0x0010F0, "Member 'ABP_ResidentCharacter_C::LastEquippedItem' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, On_DamageTaken) == 0x0010F8, "Member 'ABP_ResidentCharacter_C::On_DamageTaken' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, CarriedThrowable) == 0x001108, "Member 'ABP_ResidentCharacter_C::CarriedThrowable' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, BecomeSpectatorTimer) == 0x001110, "Member 'ABP_ResidentCharacter_C::BecomeSpectatorTimer' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, FootstepAudio) == 0x001118, "Member 'ABP_ResidentCharacter_C::FootstepAudio' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, FootstepCharacterLayerAudio) == 0x001120, "Member 'ABP_ResidentCharacter_C::FootstepCharacterLayerAudio' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, CharacterSpecificFootstepLayerSound) == 0x001128, "Member 'ABP_ResidentCharacter_C::CharacterSpecificFootstepLayerSound' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, CachedTeamID) == 0x001130, "Member 'ABP_ResidentCharacter_C::CachedTeamID' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, OutOfStaminaSound) == 0x001138, "Member 'ABP_ResidentCharacter_C::OutOfStaminaSound' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, ForcedStealth) == 0x001140, "Member 'ABP_ResidentCharacter_C::ForcedStealth' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, Stealth_Active) == 0x001141, "Member 'ABP_ResidentCharacter_C::Stealth_Active' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, IsTalking) == 0x001142, "Member 'ABP_ResidentCharacter_C::IsTalking' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, ValidTurretTarget) == 0x001143, "Member 'ABP_ResidentCharacter_C::ValidTurretTarget' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, KnockoutWidget) == 0x001148, "Member 'ABP_ResidentCharacter_C::KnockoutWidget' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, SpectatorPawn) == 0x001150, "Member 'ABP_ResidentCharacter_C::SpectatorPawn' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, InteractionTraceOffset) == 0x001158, "Member 'ABP_ResidentCharacter_C::InteractionTraceOffset' has a wrong offset!");
static_assert(offsetof(ABP_ResidentCharacter_C, InteractionTraceLength) == 0x001170, "Member 'ABP_ResidentCharacter_C::InteractionTraceLength' has a wrong offset!");

}

