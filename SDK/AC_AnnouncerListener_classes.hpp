#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_AnnouncerListener

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_AnnouncementTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_AnnouncerListener.AC_AnnouncerListener_C
// 0x0030 (0x00D0 - 0x00A0)
class UAC_AnnouncerListener_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FString                                 OwnerPlayerName;                                   // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         MultiKnockoutCount;                                // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LastKnockoutTimeStamp;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AnnouncerSpeaker_C*                 AnnouncerSpeaker;                                  // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AC_AnnouncerListener(int32 EntryPoint);
	void HandlePlayerAnnouncements(const struct FCombatParticipant& CombatParticipant, uint8 TeamId);
	void MultiKnockoutCounter(double ResetCoolDown, int32* SuccessiveKnockouts);
	void OnMessageReceived_0DE170E34496543FE6F91E82ACCF2D46(class UAsyncAction_ListenForGameplayMessage* ProxyObject, const struct FGameplayTag& ActualChannel);
	void ReceiveBeginPlay();
	void Server_Play_Sound_From_Announcer(E_AnnouncementTypes AnnouncementType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_AnnouncerListener_C">();
	}
	static class UAC_AnnouncerListener_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_AnnouncerListener_C>();
	}
};
static_assert(alignof(UAC_AnnouncerListener_C) == 0x000008, "Wrong alignment on UAC_AnnouncerListener_C");
static_assert(sizeof(UAC_AnnouncerListener_C) == 0x0000D0, "Wrong size on UAC_AnnouncerListener_C");
static_assert(offsetof(UAC_AnnouncerListener_C, UberGraphFrame) == 0x0000A0, "Member 'UAC_AnnouncerListener_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAC_AnnouncerListener_C, OwnerPlayerName) == 0x0000A8, "Member 'UAC_AnnouncerListener_C::OwnerPlayerName' has a wrong offset!");
static_assert(offsetof(UAC_AnnouncerListener_C, MultiKnockoutCount) == 0x0000B8, "Member 'UAC_AnnouncerListener_C::MultiKnockoutCount' has a wrong offset!");
static_assert(offsetof(UAC_AnnouncerListener_C, LastKnockoutTimeStamp) == 0x0000C0, "Member 'UAC_AnnouncerListener_C::LastKnockoutTimeStamp' has a wrong offset!");
static_assert(offsetof(UAC_AnnouncerListener_C, AnnouncerSpeaker) == 0x0000C8, "Member 'UAC_AnnouncerListener_C::AnnouncerSpeaker' has a wrong offset!");

}

