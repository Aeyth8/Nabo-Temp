#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VolumetricAudioEmitter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VolumetricAudioEmitter.BP_VolumetricAudioEmitter_C
// 0x0030 (0x02C0 - 0x0290)
class ABP_VolumetricAudioEmitter_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound;                                             // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoPlay;                                          // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VolumetricAudioEmitter(int32 EntryPoint);
	void Play_With_Fade_In();
	void ReceiveBeginPlay();
	void Stop_With_Fade_Out();
	void Update_Location();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VolumetricAudioEmitter_C">();
	}
	static class ABP_VolumetricAudioEmitter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VolumetricAudioEmitter_C>();
	}
};
static_assert(alignof(ABP_VolumetricAudioEmitter_C) == 0x000008, "Wrong alignment on ABP_VolumetricAudioEmitter_C");
static_assert(sizeof(ABP_VolumetricAudioEmitter_C) == 0x0002C0, "Wrong size on ABP_VolumetricAudioEmitter_C");
static_assert(offsetof(ABP_VolumetricAudioEmitter_C, UberGraphFrame) == 0x000290, "Member 'ABP_VolumetricAudioEmitter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricAudioEmitter_C, Audio) == 0x000298, "Member 'ABP_VolumetricAudioEmitter_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricAudioEmitter_C, Cube) == 0x0002A0, "Member 'ABP_VolumetricAudioEmitter_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricAudioEmitter_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_VolumetricAudioEmitter_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricAudioEmitter_C, Sound) == 0x0002B0, "Member 'ABP_VolumetricAudioEmitter_C::Sound' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricAudioEmitter_C, AutoPlay) == 0x0002B8, "Member 'ABP_VolumetricAudioEmitter_C::AutoPlay' has a wrong offset!");

}

