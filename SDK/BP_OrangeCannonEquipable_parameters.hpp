#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OrangeCannonEquipable

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GASIW_structs.hpp"


namespace SDK::Params
{

// Function BP_OrangeCannonEquipable.BP_OrangeCannonEquipable_C.Ammo Changed
// 0x0004 (0x0004 - 0x0000)
struct BP_OrangeCannonEquipable_C_Ammo_Changed final
{
public:
	int32                                         AmmoCount;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeCannonEquipable_C_Ammo_Changed) == 0x000004, "Wrong alignment on BP_OrangeCannonEquipable_C_Ammo_Changed");
static_assert(sizeof(BP_OrangeCannonEquipable_C_Ammo_Changed) == 0x000004, "Wrong size on BP_OrangeCannonEquipable_C_Ammo_Changed");
static_assert(offsetof(BP_OrangeCannonEquipable_C_Ammo_Changed, AmmoCount) == 0x000000, "Member 'BP_OrangeCannonEquipable_C_Ammo_Changed::AmmoCount' has a wrong offset!");

// Function BP_OrangeCannonEquipable.BP_OrangeCannonEquipable_C.CalcSightTransforms
// 0x00D0 (0x00D0 - 0x0000)
struct BP_OrangeCannonEquipable_C_CalcSightTransforms final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeCannonEquipable_C_CalcSightTransforms) == 0x000010, "Wrong alignment on BP_OrangeCannonEquipable_C_CalcSightTransforms");
static_assert(sizeof(BP_OrangeCannonEquipable_C_CalcSightTransforms) == 0x0000D0, "Wrong size on BP_OrangeCannonEquipable_C_CalcSightTransforms");
static_assert(offsetof(BP_OrangeCannonEquipable_C_CalcSightTransforms, ReturnValue) == 0x000000, "Member 'BP_OrangeCannonEquipable_C_CalcSightTransforms::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_CalcSightTransforms, CallFunc_DoesSocketExist_ReturnValue) == 0x000060, "Member 'BP_OrangeCannonEquipable_C_CalcSightTransforms::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_CalcSightTransforms, CallFunc_GetSocketTransform_ReturnValue) == 0x000070, "Member 'BP_OrangeCannonEquipable_C_CalcSightTransforms::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");

// Function BP_OrangeCannonEquipable.BP_OrangeCannonEquipable_C.ChargesChanged
// 0x0004 (0x0004 - 0x0000)
struct BP_OrangeCannonEquipable_C_ChargesChanged final
{
public:
	int32                                         Charges;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeCannonEquipable_C_ChargesChanged) == 0x000004, "Wrong alignment on BP_OrangeCannonEquipable_C_ChargesChanged");
static_assert(sizeof(BP_OrangeCannonEquipable_C_ChargesChanged) == 0x000004, "Wrong size on BP_OrangeCannonEquipable_C_ChargesChanged");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ChargesChanged, Charges) == 0x000000, "Member 'BP_OrangeCannonEquipable_C_ChargesChanged::Charges' has a wrong offset!");

// Function BP_OrangeCannonEquipable.BP_OrangeCannonEquipable_C.ExecuteUbergraph_BP_OrangeCannonEquipable
// 0x0060 (0x0060 - 0x0000)
struct BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEquipmentViewMode                            Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable;                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_1;                             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_2;                             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AmmoCount;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Charges_1;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Charges;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_PercentCharged;                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              K2Node_Event_Sound;                                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEquipmentViewMode                            K2Node_Event_ViewMode;                             // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Select_Default;                             // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable) == 0x000008, "Wrong alignment on BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable");
static_assert(sizeof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable) == 0x000060, "Wrong size on BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, EntryPoint) == 0x000000, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, Temp_byte_Variable) == 0x000004, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, Temp_class_Variable) == 0x000008, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, Temp_class_Variable_1) == 0x000010, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, Temp_class_Variable_2) == 0x000018, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::Temp_class_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, K2Node_Event_AmmoCount) == 0x000020, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::K2Node_Event_AmmoCount' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, K2Node_Event_Charges_1) == 0x000024, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::K2Node_Event_Charges_1' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, K2Node_Event_Charges) == 0x000028, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::K2Node_Event_Charges' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, K2Node_Event_PercentCharged) == 0x000030, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::K2Node_Event_PercentCharged' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, K2Node_Event_Sound) == 0x000038, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::K2Node_Event_Sound' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, CallFunc_GetOwner_ReturnValue) == 0x000040, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000048, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, CallFunc_IsValid_ReturnValue) == 0x000051, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, K2Node_Event_ViewMode) == 0x000052, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::K2Node_Event_ViewMode' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable, K2Node_Select_Default) == 0x000058, "Member 'BP_OrangeCannonEquipable_C_ExecuteUbergraph_BP_OrangeCannonEquipable::K2Node_Select_Default' has a wrong offset!");

// Function BP_OrangeCannonEquipable.BP_OrangeCannonEquipable_C.FireCharge
// 0x0010 (0x0010 - 0x0000)
struct BP_OrangeCannonEquipable_C_FireCharge final
{
public:
	int32                                         Charges;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PercentCharged;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeCannonEquipable_C_FireCharge) == 0x000008, "Wrong alignment on BP_OrangeCannonEquipable_C_FireCharge");
static_assert(sizeof(BP_OrangeCannonEquipable_C_FireCharge) == 0x000010, "Wrong size on BP_OrangeCannonEquipable_C_FireCharge");
static_assert(offsetof(BP_OrangeCannonEquipable_C_FireCharge, Charges) == 0x000000, "Member 'BP_OrangeCannonEquipable_C_FireCharge::Charges' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_FireCharge, PercentCharged) == 0x000008, "Member 'BP_OrangeCannonEquipable_C_FireCharge::PercentCharged' has a wrong offset!");

// Function BP_OrangeCannonEquipable.BP_OrangeCannonEquipable_C.GetAudioComponent
// 0x0010 (0x0010 - 0x0000)
struct BP_OrangeCannonEquipable_C_GetAudioComponent final
{
public:
	TArray<class UAudioComponent*>                AudioComponents;                                   // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BP_OrangeCannonEquipable_C_GetAudioComponent) == 0x000008, "Wrong alignment on BP_OrangeCannonEquipable_C_GetAudioComponent");
static_assert(sizeof(BP_OrangeCannonEquipable_C_GetAudioComponent) == 0x000010, "Wrong size on BP_OrangeCannonEquipable_C_GetAudioComponent");
static_assert(offsetof(BP_OrangeCannonEquipable_C_GetAudioComponent, AudioComponents) == 0x000000, "Member 'BP_OrangeCannonEquipable_C_GetAudioComponent::AudioComponents' has a wrong offset!");

// Function BP_OrangeCannonEquipable.BP_OrangeCannonEquipable_C.ShowFirstPersonMesh
// 0x0001 (0x0001 - 0x0000)
struct BP_OrangeCannonEquipable_C_ShowFirstPersonMesh final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeCannonEquipable_C_ShowFirstPersonMesh) == 0x000001, "Wrong alignment on BP_OrangeCannonEquipable_C_ShowFirstPersonMesh");
static_assert(sizeof(BP_OrangeCannonEquipable_C_ShowFirstPersonMesh) == 0x000001, "Wrong size on BP_OrangeCannonEquipable_C_ShowFirstPersonMesh");
static_assert(offsetof(BP_OrangeCannonEquipable_C_ShowFirstPersonMesh, Visible) == 0x000000, "Member 'BP_OrangeCannonEquipable_C_ShowFirstPersonMesh::Visible' has a wrong offset!");

// Function BP_OrangeCannonEquipable.BP_OrangeCannonEquipable_C.UpdateText
// 0x0040 (0x0040 - 0x0000)
struct BP_OrangeCannonEquipable_C_UpdateText final
{
public:
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0000(0x0010)()
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UInventoryComponent*                    CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UItemInstance*                          CallFunc_GetFirstItemOfType_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTagStackCount_ReturnValue;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0030(0x0010)()
};
static_assert(alignof(BP_OrangeCannonEquipable_C_UpdateText) == 0x000008, "Wrong alignment on BP_OrangeCannonEquipable_C_UpdateText");
static_assert(sizeof(BP_OrangeCannonEquipable_C_UpdateText) == 0x000040, "Wrong size on BP_OrangeCannonEquipable_C_UpdateText");
static_assert(offsetof(BP_OrangeCannonEquipable_C_UpdateText, CallFunc_MakeLiteralText_ReturnValue) == 0x000000, "Member 'BP_OrangeCannonEquipable_C_UpdateText::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_UpdateText, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_OrangeCannonEquipable_C_UpdateText::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_UpdateText, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'BP_OrangeCannonEquipable_C_UpdateText::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_UpdateText, CallFunc_GetFirstItemOfType_ReturnValue) == 0x000020, "Member 'BP_OrangeCannonEquipable_C_UpdateText::CallFunc_GetFirstItemOfType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_UpdateText, CallFunc_GetTagStackCount_ReturnValue) == 0x000028, "Member 'BP_OrangeCannonEquipable_C_UpdateText::CallFunc_GetTagStackCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_OrangeCannonEquipable_C_UpdateText, CallFunc_Conv_IntToText_ReturnValue) == 0x000030, "Member 'BP_OrangeCannonEquipable_C_UpdateText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function BP_OrangeCannonEquipable.BP_OrangeCannonEquipable_C.OnHandleViewMode
// 0x0001 (0x0001 - 0x0000)
struct BP_OrangeCannonEquipable_C_OnHandleViewMode final
{
public:
	EEquipmentViewMode                            ViewMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeCannonEquipable_C_OnHandleViewMode) == 0x000001, "Wrong alignment on BP_OrangeCannonEquipable_C_OnHandleViewMode");
static_assert(sizeof(BP_OrangeCannonEquipable_C_OnHandleViewMode) == 0x000001, "Wrong size on BP_OrangeCannonEquipable_C_OnHandleViewMode");
static_assert(offsetof(BP_OrangeCannonEquipable_C_OnHandleViewMode, ViewMode) == 0x000000, "Member 'BP_OrangeCannonEquipable_C_OnHandleViewMode::ViewMode' has a wrong offset!");

// Function BP_OrangeCannonEquipable.BP_OrangeCannonEquipable_C.PlaySound
// 0x0008 (0x0008 - 0x0000)
struct BP_OrangeCannonEquipable_C_PlaySound final
{
public:
	class USoundCue*                              Sound;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_OrangeCannonEquipable_C_PlaySound) == 0x000008, "Wrong alignment on BP_OrangeCannonEquipable_C_PlaySound");
static_assert(sizeof(BP_OrangeCannonEquipable_C_PlaySound) == 0x000008, "Wrong size on BP_OrangeCannonEquipable_C_PlaySound");
static_assert(offsetof(BP_OrangeCannonEquipable_C_PlaySound, Sound) == 0x000000, "Member 'BP_OrangeCannonEquipable_C_PlaySound::Sound' has a wrong offset!");

}

