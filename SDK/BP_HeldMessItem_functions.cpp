#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HeldMessItem

#include "Basic.hpp"

#include "BP_HeldMessItem_classes.hpp"
#include "BP_HeldMessItem_parameters.hpp"


namespace SDK
{

// Function BP_HeldMessItem.BP_HeldMessItem_C.DisableCollisionAndHide
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HeldMessItem_C::DisableCollisionAndHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeldMessItem_C", "DisableCollisionAndHide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HeldMessItem.BP_HeldMessItem_C.EnableCollisionAndShow
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HeldMessItem_C::EnableCollisionAndShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeldMessItem_C", "EnableCollisionAndShow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HeldMessItem.BP_HeldMessItem_C.ExecuteUbergraph_BP_HeldMessItem
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HeldMessItem_C::ExecuteUbergraph_BP_HeldMessItem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeldMessItem_C", "ExecuteUbergraph_BP_HeldMessItem");

	Params::BP_HeldMessItem_C_ExecuteUbergraph_BP_HeldMessItem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeldMessItem.BP_HeldMessItem_C.Multi_Throw
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HeldMessItem_C::Multi_Throw(const struct FVector& Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeldMessItem_C", "Multi_Throw");

	Params::BP_HeldMessItem_C_Multi_Throw Parms{};

	Parms.Velocity = std::move(Velocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeldMessItem.BP_HeldMessItem_C.OnEnded_64D7C2314E1A6899D4B9D2B10D882FDB
// (BlueprintCallable, BlueprintEvent)

void ABP_HeldMessItem_C::OnEnded_64D7C2314E1A6899D4B9D2B10D882FDB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeldMessItem_C", "OnEnded_64D7C2314E1A6899D4B9D2B10D882FDB");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HeldMessItem.BP_HeldMessItem_C.ReleaseFromInventory
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HeldMessItem_C::ReleaseFromInventory(const struct FVector& Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeldMessItem_C", "ReleaseFromInventory");

	Params::BP_HeldMessItem_C_ReleaseFromInventory Parms{};

	Parms.Velocity = std::move(Velocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HeldMessItem.BP_HeldMessItem_C.ShowAfterThrowDelay
// (BlueprintCallable, BlueprintEvent)

void ABP_HeldMessItem_C::ShowAfterThrowDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeldMessItem_C", "ShowAfterThrowDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HeldMessItem.BP_HeldMessItem_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_HeldMessItem_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HeldMessItem_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

