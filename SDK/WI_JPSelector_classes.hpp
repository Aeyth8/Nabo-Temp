#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_JPSelector

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WI_JPSelector.WI_JPSelector_C
// 0x00B0 (0x03B8 - 0x0308)
class UWI_JPSelector_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWI_JPArrowButton_C*                    LeftArrowButton;                                   // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             NamedSlot_AdditionalSelectedGraphics;              // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_JPArrowButton_C*                    RightArrowButton;                                  // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_JPRotator_C*                        Rotator;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_0;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EVerticalAlignment                            Rotator_Label_Vertical_Alignment;                  // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           InitialOptions;                                    // 0x0340(0x0010)(Edit, BlueprintVisible)
	FMulticastInlineDelegateProperty_             OnSelectedIndexChanged;                            // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSlateColor                            ArrowColor;                                        // 0x0360(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            ArrowColorHovered;                                 // 0x0374(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            ArrowColorPressed;                                 // 0x0388(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            TextColor;                                         // 0x039C(0x0014)(Edit, BlueprintVisible)
	bool                                          AllowAdditionalGraphics;                           // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__WI_JPSelector_LeftArrowButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__WI_JPSelector_RightArrowButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void ExecuteUbergraph_WI_JPSelector(int32 EntryPoint);
	int32 GetSelectedIndex();
	void HandleRotated(int32 Value);
	void OnInitialized();
	void OnSelectedIndexChanged__DelegateSignature(int32 SelectedIndex);
	void PopulateTextLabels(TArray<class FText>& TextLabels);
	void PreConstruct(bool IsDesignTime);
	void SetSelectedIndex(int32 Index_0);
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WI_JPSelector_C">();
	}
	static class UWI_JPSelector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWI_JPSelector_C>();
	}
};
static_assert(alignof(UWI_JPSelector_C) == 0x000008, "Wrong alignment on UWI_JPSelector_C");
static_assert(sizeof(UWI_JPSelector_C) == 0x0003B8, "Wrong size on UWI_JPSelector_C");
static_assert(offsetof(UWI_JPSelector_C, UberGraphFrame) == 0x000308, "Member 'UWI_JPSelector_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, LeftArrowButton) == 0x000310, "Member 'UWI_JPSelector_C::LeftArrowButton' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, NamedSlot_AdditionalSelectedGraphics) == 0x000318, "Member 'UWI_JPSelector_C::NamedSlot_AdditionalSelectedGraphics' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, RightArrowButton) == 0x000320, "Member 'UWI_JPSelector_C::RightArrowButton' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, Rotator) == 0x000328, "Member 'UWI_JPSelector_C::Rotator' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, ScaleBox_0) == 0x000330, "Member 'UWI_JPSelector_C::ScaleBox_0' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, Rotator_Label_Vertical_Alignment) == 0x000338, "Member 'UWI_JPSelector_C::Rotator_Label_Vertical_Alignment' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, InitialOptions) == 0x000340, "Member 'UWI_JPSelector_C::InitialOptions' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, OnSelectedIndexChanged) == 0x000350, "Member 'UWI_JPSelector_C::OnSelectedIndexChanged' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, ArrowColor) == 0x000360, "Member 'UWI_JPSelector_C::ArrowColor' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, ArrowColorHovered) == 0x000374, "Member 'UWI_JPSelector_C::ArrowColorHovered' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, ArrowColorPressed) == 0x000388, "Member 'UWI_JPSelector_C::ArrowColorPressed' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, TextColor) == 0x00039C, "Member 'UWI_JPSelector_C::TextColor' has a wrong offset!");
static_assert(offsetof(UWI_JPSelector_C, AllowAdditionalGraphics) == 0x0003B0, "Member 'UWI_JPSelector_C::AllowAdditionalGraphics' has a wrong offset!");

}

