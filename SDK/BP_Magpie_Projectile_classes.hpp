#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Magpie_Projectile

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_MagpieState_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_MagpieAttackPatternState_structs.hpp"
#include "JP_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Magpie_Projectile.BP_Magpie_Projectile_C
// 0x0138 (0x03C8 - 0x0290)
class ABP_Magpie_Projectile_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        WindAudio;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           ProjectileMovement;                                // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      TrailParticles;                                    // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioAttackDive;                                   // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HomingTarget;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsDebugging;                                       // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawningActor;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_MagpieState                                 MagpieState;                                       // 0x02E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MagpieAttackPatternState                    AttackingState;                                    // 0x02E1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        AttackTarget;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        DistanceAboveHead;                                 // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TemporaryTargetActor;                              // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        StartPosition;                                     // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_Deployable_Magpie_Nest_C*           Nest;                                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class USoundBase*                             ReturnSound;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MinDamage;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        MaxDamage;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        ChargePercent;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCombatParticipant                     Killer;                                            // 0x0330(0x0060)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FGameplayTagContainer                  VulnerabilityTagsToLookFor;                        // 0x0390(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 DamageGE;                                          // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DamageMultiplierToStructures;                      // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueTag                        ProjectileDamageCue;                               // 0x03C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ApplyKillAssistedEffect(class UAbilitySystemComponent* TargetASC);
	void CheckImpactAbilitySystemComponents(const struct FHitResult& Hit, const class FString& Reason, bool* Is_Valid, class UAbilitySystemComponent** Instigator_ASC, class UAbilitySystemComponent** Target_ASC);
	void DamageAppliedCue();
	void DamageTarget(const struct FHitResult& Hit, class UAbilitySystemComponent* Instigator_Ability_System_Component, class UAbilitySystemComponent* Hit_Actor_Ability_System_Component);
	void DealDamageToTarget(class UAbilitySystemComponent* InstigatorASC, class UAbilitySystemComponent* TargetASC);
	void ExecuteUbergraph_BP_Magpie_Projectile(int32 EntryPoint);
	void FlyBackToNest(class USceneComponent* StartPosition_0);
	void FlyBackUp();
	void Get_Distance_To_Homing_Target_Bellow(double Threshold, double* Distance, bool* IsBellowThreshold);
	double GetDamage();
	void HasValidAbilitySystemComponent(class AActor* Validation_Target, bool LogReason, const class FString& Reason, const class FString& Target_ASC, bool* Is_Valid, class UAbilitySystemComponent** Target_Ability_System_Component);
	void IsSameTeam(class UObject* HitActor, bool* Return);
	void LogMessage(const class FText& Text);
	void OnRep_AttackingState();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void RunBehaviour();
	void SetNewFollowingTarget(class USceneComponent* Target_Scene_Component);
	void SpawnWingParticles();
	void StartAttackPattern(class UAbilitySystemComponent* InstigatorASC, class UAbilitySystemComponent* TargetASC);
	void StartFollowing(class USceneComponent* AttackTarget_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Magpie_Projectile_C">();
	}
	static class ABP_Magpie_Projectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Magpie_Projectile_C>();
	}
};
static_assert(alignof(ABP_Magpie_Projectile_C) == 0x000008, "Wrong alignment on ABP_Magpie_Projectile_C");
static_assert(sizeof(ABP_Magpie_Projectile_C) == 0x0003C8, "Wrong size on ABP_Magpie_Projectile_C");
static_assert(offsetof(ABP_Magpie_Projectile_C, UberGraphFrame) == 0x000290, "Member 'ABP_Magpie_Projectile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, WindAudio) == 0x000298, "Member 'ABP_Magpie_Projectile_C::WindAudio' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, ProjectileMovement) == 0x0002A0, "Member 'ABP_Magpie_Projectile_C::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, TrailParticles) == 0x0002A8, "Member 'ABP_Magpie_Projectile_C::TrailParticles' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, SkeletalMesh) == 0x0002B0, "Member 'ABP_Magpie_Projectile_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, Sphere) == 0x0002B8, "Member 'ABP_Magpie_Projectile_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, AudioAttackDive) == 0x0002C0, "Member 'ABP_Magpie_Projectile_C::AudioAttackDive' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, HomingTarget) == 0x0002C8, "Member 'ABP_Magpie_Projectile_C::HomingTarget' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, IsDebugging) == 0x0002D0, "Member 'ABP_Magpie_Projectile_C::IsDebugging' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, SpawningActor) == 0x0002D8, "Member 'ABP_Magpie_Projectile_C::SpawningActor' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, MagpieState) == 0x0002E0, "Member 'ABP_Magpie_Projectile_C::MagpieState' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, AttackingState) == 0x0002E1, "Member 'ABP_Magpie_Projectile_C::AttackingState' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, AttackTarget) == 0x0002E8, "Member 'ABP_Magpie_Projectile_C::AttackTarget' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, DistanceAboveHead) == 0x0002F0, "Member 'ABP_Magpie_Projectile_C::DistanceAboveHead' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, TemporaryTargetActor) == 0x0002F8, "Member 'ABP_Magpie_Projectile_C::TemporaryTargetActor' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, StartPosition) == 0x000300, "Member 'ABP_Magpie_Projectile_C::StartPosition' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, Nest) == 0x000308, "Member 'ABP_Magpie_Projectile_C::Nest' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, ReturnSound) == 0x000310, "Member 'ABP_Magpie_Projectile_C::ReturnSound' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, MinDamage) == 0x000318, "Member 'ABP_Magpie_Projectile_C::MinDamage' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, MaxDamage) == 0x000320, "Member 'ABP_Magpie_Projectile_C::MaxDamage' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, ChargePercent) == 0x000328, "Member 'ABP_Magpie_Projectile_C::ChargePercent' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, Killer) == 0x000330, "Member 'ABP_Magpie_Projectile_C::Killer' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, VulnerabilityTagsToLookFor) == 0x000390, "Member 'ABP_Magpie_Projectile_C::VulnerabilityTagsToLookFor' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, DamageGE) == 0x0003B0, "Member 'ABP_Magpie_Projectile_C::DamageGE' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, DamageMultiplierToStructures) == 0x0003B8, "Member 'ABP_Magpie_Projectile_C::DamageMultiplierToStructures' has a wrong offset!");
static_assert(offsetof(ABP_Magpie_Projectile_C, ProjectileDamageCue) == 0x0003C0, "Member 'ABP_Magpie_Projectile_C::ProjectileDamageCue' has a wrong offset!");

}

