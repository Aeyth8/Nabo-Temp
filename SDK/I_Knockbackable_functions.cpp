#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Knockbackable

#include "Basic.hpp"

#include "I_Knockbackable_classes.hpp"
#include "I_Knockbackable_parameters.hpp"


namespace SDK
{

// Function I_Knockbackable.I_Knockbackable_C.Knockback
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    XYOverride                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ZOverride                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AirControlMultiplier                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Void                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Knockbackable_C::Knockback(const struct FVector& Velocity, bool XYOverride, bool ZOverride, double AirControlMultiplier, bool* Void)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Knockbackable_C", "Knockback");

	Params::I_Knockbackable_C_Knockback Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.XYOverride = XYOverride;
	Parms.ZOverride = ZOverride;
	Parms.AirControlMultiplier = AirControlMultiplier;

	UObject::ProcessEvent(Func, &Parms);

	if (Void != nullptr)
		*Void = Parms.Void;
}

}

