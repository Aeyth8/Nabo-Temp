#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OrangeTree

#include "Basic.hpp"

#include "InteractableBase_classes.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "EAmmoState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_OrangeTree.BP_OrangeTree_C
// 0x00E8 (0x03C8 - 0x02E0)
class ABP_OrangeTree_C final : public AInteractableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_OrangeTree_C;                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        InteractAudio;                                     // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CosmeticSpawnLocation;                             // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       ContextWidget;                                     // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_AmmoGranter_C*                      AC_AmmoGranter;                                    // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMeshBounceComponent_C*                 MeshBounceComponent;                               // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CollectSound;                                      // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            FreeInventoryColor;                                // 0x0328(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            FullInventoryColor;                                // 0x033C(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            WidgetColor;                                       // 0x0350(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemText;                                          // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   InventoryStatus;                                   // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UItemDefinition*                        ItemToGrant;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UItemInstance*                          ItemInInventory;                                   // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UInventoryComponent*                    Inventory;                                         // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         CollectParticles;                                  // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   NoAmmoText;                                        // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   AmmoCapacityFullText;                              // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CheckIfItemInInventory(class AActor* InteractingActor_0, bool* ItemAlreadyInInventory);
	void DisplayInventoryWidget(class AActor* InteractingActor_0);
	void ExecuteUbergraph_BP_OrangeTree(int32 EntryPoint);
	void GetNewWidgetColor(struct FSlateColor* NewColor);
	void GetOptionalText(class FText* Return, class FText* Optional_Second_Line);
	void IsInFocus(class AActor* Focusing_Actor);
	void MultiPlayCosmetics();
	void PlayCosmetics();
	void PlayErrorSound();
	void PostInteract(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent);
	void ReceiveBeginPlay();
	void ReloadAfterHousesLoaded(bool* Return);
	void SetWidgetTextAndColor(bool AmmoFull, const class FText& OptionalSecondText);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_OrangeTree_C">();
	}
	static class ABP_OrangeTree_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_OrangeTree_C>();
	}
};
static_assert(alignof(ABP_OrangeTree_C) == 0x000008, "Wrong alignment on ABP_OrangeTree_C");
static_assert(sizeof(ABP_OrangeTree_C) == 0x0003C8, "Wrong size on ABP_OrangeTree_C");
static_assert(offsetof(ABP_OrangeTree_C, UberGraphFrame_BP_OrangeTree_C) == 0x0002E0, "Member 'ABP_OrangeTree_C::UberGraphFrame_BP_OrangeTree_C' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, InteractAudio) == 0x0002E8, "Member 'ABP_OrangeTree_C::InteractAudio' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, CosmeticSpawnLocation) == 0x0002F0, "Member 'ABP_OrangeTree_C::CosmeticSpawnLocation' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, Box) == 0x0002F8, "Member 'ABP_OrangeTree_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, ContextWidget) == 0x000300, "Member 'ABP_OrangeTree_C::ContextWidget' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, StaticMesh) == 0x000308, "Member 'ABP_OrangeTree_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, AC_AmmoGranter) == 0x000310, "Member 'ABP_OrangeTree_C::AC_AmmoGranter' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, MeshBounceComponent) == 0x000318, "Member 'ABP_OrangeTree_C::MeshBounceComponent' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, CollectSound) == 0x000320, "Member 'ABP_OrangeTree_C::CollectSound' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, FreeInventoryColor) == 0x000328, "Member 'ABP_OrangeTree_C::FreeInventoryColor' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, FullInventoryColor) == 0x00033C, "Member 'ABP_OrangeTree_C::FullInventoryColor' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, WidgetColor) == 0x000350, "Member 'ABP_OrangeTree_C::WidgetColor' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, ItemText) == 0x000368, "Member 'ABP_OrangeTree_C::ItemText' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, InventoryStatus) == 0x000378, "Member 'ABP_OrangeTree_C::InventoryStatus' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, ItemToGrant) == 0x000388, "Member 'ABP_OrangeTree_C::ItemToGrant' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, ItemInInventory) == 0x000390, "Member 'ABP_OrangeTree_C::ItemInInventory' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, Inventory) == 0x000398, "Member 'ABP_OrangeTree_C::Inventory' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, CollectParticles) == 0x0003A0, "Member 'ABP_OrangeTree_C::CollectParticles' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, NoAmmoText) == 0x0003A8, "Member 'ABP_OrangeTree_C::NoAmmoText' has a wrong offset!");
static_assert(offsetof(ABP_OrangeTree_C, AmmoCapacityFullText) == 0x0003B8, "Member 'ABP_OrangeTree_C::AmmoCapacityFullText' has a wrong offset!");

}

