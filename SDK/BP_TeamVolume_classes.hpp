#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TeamVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JP_classes.hpp"
#include "E_TimeOfDay_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TeamVolume.BP_TeamVolume_C
// 0x0040 (0x0378 - 0x0338)
class ABP_TeamVolume_C final : public ATeamVolume
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	FMulticastInlineDelegateProperty_             On_CharacterEntered;                               // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             On_CharacterLeft;                                  // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ABP_ResidentCharacter_C*>        TrespassingCharacters;                             // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           DeathMarkTimer;                                    // 0x0370(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddCharacterToTresspassingList(const class ABP_ResidentCharacter_C*& NewItem);
	void ApplyMarkOfDeathToTrespassers();
	void DebugPrint(uint8 CharacterId, uint8 TeamVolumeID);
	void ExecuteUbergraph_BP_TeamVolume(int32 EntryPoint);
	void GetTeamID(uint8* Return);
	bool IsNight();
	void On_CharacterEntered__DelegateSignature(class ABP_ResidentCharacter_C* Character);
	void On_CharacterLeft__DelegateSignature(class ABP_ResidentCharacter_C* Character);
	void On_Dead_Event(class ACharacter* Character);
	void On_TimeOfDayChange_Event(E_TimeOfDay TimeOfDay);
	void OnEnded_FE0E2DCF41BC7E2A58B17785731894C5();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TeamVolume_C">();
	}
	static class ABP_TeamVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TeamVolume_C>();
	}
};
static_assert(alignof(ABP_TeamVolume_C) == 0x000008, "Wrong alignment on ABP_TeamVolume_C");
static_assert(sizeof(ABP_TeamVolume_C) == 0x000378, "Wrong size on ABP_TeamVolume_C");
static_assert(offsetof(ABP_TeamVolume_C, UberGraphFrame) == 0x000338, "Member 'ABP_TeamVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TeamVolume_C, On_CharacterEntered) == 0x000340, "Member 'ABP_TeamVolume_C::On_CharacterEntered' has a wrong offset!");
static_assert(offsetof(ABP_TeamVolume_C, On_CharacterLeft) == 0x000350, "Member 'ABP_TeamVolume_C::On_CharacterLeft' has a wrong offset!");
static_assert(offsetof(ABP_TeamVolume_C, TrespassingCharacters) == 0x000360, "Member 'ABP_TeamVolume_C::TrespassingCharacters' has a wrong offset!");
static_assert(offsetof(ABP_TeamVolume_C, DeathMarkTimer) == 0x000370, "Member 'ABP_TeamVolume_C::DeathMarkTimer' has a wrong offset!");

}

