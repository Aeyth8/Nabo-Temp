#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JPUIControllerBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JP_classes.hpp"
#include "CommonGame_structs.hpp"
#include "IWOnlineServices_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_JPUIControllerBase.BP_JPUIControllerBase_C
// 0x0038 (0x02F0 - 0x02B8)
class ABP_JPUIControllerBase_C : public AJPUIControllerBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCommonActivatableWidget*               PrimaryWidget;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCommonActivatableWidget*               PressStartScreenWidget;                            // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PrimaryWidgetClass;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 PressStartScreenWidgetClass;                       // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShouldPlayMainMenuIntroSequence;                   // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void EnsureInParty();
	void ExecuteUbergraph_BP_JPUIControllerBase(int32 EntryPoint);
	void HandleInitializationFailed(const class FString& Messaging);
	void HandleLocalPlayerReadyToPlay();
	void HandlePressStartWidgetDismissed();
	void HandleReadyToInitializeUI();
	void IsFirstPlayerLoggedIn(bool* IsFirstPlayerLoggedIn_0);
	void IWLogoDone();
	void OnClientAuthenticationInitialized_F9BA48E845C9C93D34D472BE70EEB19A();
	void OnError_DE92C3084071DF154BE5D6954DD0000F(const class FString& ErrorMessage, const class FString& ErrorCode);
	void OnEulaAccepted();
	void OnEulaError(const class FString& Message);
	void OnFailed_1D8DE6434084EC2678B5CFB5325E136F(const class FText& Message);
	void OnFinished_1D8DE6434084EC2678B5CFB5325E136F(const class FText& Message);
	void OnFoundParty_DE92C3084071DF154BE5D6954DD0000F(const class FString& ErrorMessage, const class FString& ErrorCode);
	void OnLoadingScreenHidden_BEE3B2E94D1865A2682D94868405127D();
	void OnLoggedIn_8ABB80EA418681D850E40A8D46014895();
	void OnNoParty_DE92C3084071DF154BE5D6954DD0000F(const class FString& ErrorMessage, const class FString& ErrorCode);
	void OnPrivacyPolicyAccepted();
	void OnResult_292EF5DE4C6D1336F2B8BF9D8A1CC772(ECommonMessagingResult Result);
	void OnResult_AD2F26B34712637F5E9155B6299981CC(ECommonMessagingResult Result);
	void OnStepUpdate_1D8DE6434084EC2678B5CFB5325E136F(const class FText& Message);
	void OtherLogosDone();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ShowIWLogoWidget(const TDelegate<void()>& Delegate);
	void ShowMainMenu();
	void ShowOtherLogoWidget(const TDelegate<void()>& Delegate);
	void ShowPressStartScreen();

	void ShouldUpdateGameData(bool* Return_Value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_JPUIControllerBase_C">();
	}
	static class ABP_JPUIControllerBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_JPUIControllerBase_C>();
	}
};
static_assert(alignof(ABP_JPUIControllerBase_C) == 0x000008, "Wrong alignment on ABP_JPUIControllerBase_C");
static_assert(sizeof(ABP_JPUIControllerBase_C) == 0x0002F0, "Wrong size on ABP_JPUIControllerBase_C");
static_assert(offsetof(ABP_JPUIControllerBase_C, UberGraphFrame) == 0x0002B8, "Member 'ABP_JPUIControllerBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_JPUIControllerBase_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_JPUIControllerBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_JPUIControllerBase_C, PrimaryWidget) == 0x0002C8, "Member 'ABP_JPUIControllerBase_C::PrimaryWidget' has a wrong offset!");
static_assert(offsetof(ABP_JPUIControllerBase_C, PressStartScreenWidget) == 0x0002D0, "Member 'ABP_JPUIControllerBase_C::PressStartScreenWidget' has a wrong offset!");
static_assert(offsetof(ABP_JPUIControllerBase_C, PrimaryWidgetClass) == 0x0002D8, "Member 'ABP_JPUIControllerBase_C::PrimaryWidgetClass' has a wrong offset!");
static_assert(offsetof(ABP_JPUIControllerBase_C, PressStartScreenWidgetClass) == 0x0002E0, "Member 'ABP_JPUIControllerBase_C::PressStartScreenWidgetClass' has a wrong offset!");
static_assert(offsetof(ABP_JPUIControllerBase_C, ShouldPlayMainMenuIntroSequence) == 0x0002E8, "Member 'ABP_JPUIControllerBase_C::ShouldPlayMainMenuIntroSequence' has a wrong offset!");

}

