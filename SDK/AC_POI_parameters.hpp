#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_POI

#include "Basic.hpp"

#include "JP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AC_POI.AC_POI_C.Check LOS and Range
// 0x0180 (0x0180 - 0x0000)
struct AC_POI_C_Check_LOS_and_Range final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SetVisibile;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0068(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0080(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_POI_C_Check_LOS_and_Range) == 0x000008, "Wrong alignment on AC_POI_C_Check_LOS_and_Range");
static_assert(sizeof(AC_POI_C_Check_LOS_and_Range) == 0x000180, "Wrong size on AC_POI_C_Check_LOS_and_Range");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, Controller) == 0x000000, "Member 'AC_POI_C_Check_LOS_and_Range::Controller' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, SetVisibile) == 0x000008, "Member 'AC_POI_C_Check_LOS_and_Range::SetVisibile' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000028, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, K2Node_MakeArray_Array) == 0x000040, "Member 'AC_POI_C_Check_LOS_and_Range::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_Vector_Distance_ReturnValue) == 0x000050, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_GetOwner_ReturnValue) == 0x000058, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000060, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, K2Node_MakeArray_Array_1) == 0x000068, "Member 'AC_POI_C_Check_LOS_and_Range::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000078, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000080, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000178, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_BooleanOR_ReturnValue) == 0x000179, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range, CallFunc_BooleanOR_ReturnValue_1) == 0x00017A, "Member 'AC_POI_C_Check_LOS_and_Range::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function AC_POI.AC_POI_C.Check LOS and Range Team
// 0x0060 (0x0060 - 0x0000)
struct AC_POI_C_Check_LOS_and_Range_Team final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hide;                                              // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_POI_C_Check_LOS_and_Range_Team) == 0x000008, "Wrong alignment on AC_POI_C_Check_LOS_and_Range_Team");
static_assert(sizeof(AC_POI_C_Check_LOS_and_Range_Team) == 0x000060, "Wrong size on AC_POI_C_Check_LOS_and_Range_Team");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range_Team, Location) == 0x000000, "Member 'AC_POI_C_Check_LOS_and_Range_Team::Location' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range_Team, Hide) == 0x000018, "Member 'AC_POI_C_Check_LOS_and_Range_Team::Hide' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range_Team, CallFunc_GetPlayerPawn_ReturnValue) == 0x000020, "Member 'AC_POI_C_Check_LOS_and_Range_Team::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range_Team, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000028, "Member 'AC_POI_C_Check_LOS_and_Range_Team::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range_Team, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'AC_POI_C_Check_LOS_and_Range_Team::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range_Team, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'AC_POI_C_Check_LOS_and_Range_Team::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range_Team, CallFunc_Vector_Distance_ReturnValue) == 0x000050, "Member 'AC_POI_C_Check_LOS_and_Range_Team::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range_Team, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000058, "Member 'AC_POI_C_Check_LOS_and_Range_Team::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range_Team, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000059, "Member 'AC_POI_C_Check_LOS_and_Range_Team::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Check_LOS_and_Range_Team, CallFunc_BooleanOR_ReturnValue) == 0x00005A, "Member 'AC_POI_C_Check_LOS_and_Range_Team::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AC_POI.AC_POI_C.ExecuteUbergraph_AC_POI
// 0x0028 (0x0028 - 0x0000)
struct AC_POI_C_ExecuteUbergraph_AC_POI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSpectatorPawn_ReturnValue;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_POI_C_ExecuteUbergraph_AC_POI) == 0x000008, "Wrong alignment on AC_POI_C_ExecuteUbergraph_AC_POI");
static_assert(sizeof(AC_POI_C_ExecuteUbergraph_AC_POI) == 0x000028, "Wrong size on AC_POI_C_ExecuteUbergraph_AC_POI");
static_assert(offsetof(AC_POI_C_ExecuteUbergraph_AC_POI, EntryPoint) == 0x000000, "Member 'AC_POI_C_ExecuteUbergraph_AC_POI::EntryPoint' has a wrong offset!");
static_assert(offsetof(AC_POI_C_ExecuteUbergraph_AC_POI, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'AC_POI_C_ExecuteUbergraph_AC_POI::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_ExecuteUbergraph_AC_POI, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'AC_POI_C_ExecuteUbergraph_AC_POI::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AC_POI_C_ExecuteUbergraph_AC_POI, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'AC_POI_C_ExecuteUbergraph_AC_POI::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_ExecuteUbergraph_AC_POI, CallFunc_BooleanOR_ReturnValue) == 0x000020, "Member 'AC_POI_C_ExecuteUbergraph_AC_POI::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_ExecuteUbergraph_AC_POI, CallFunc_IsSpectatorPawn_ReturnValue) == 0x000021, "Member 'AC_POI_C_ExecuteUbergraph_AC_POI::CallFunc_IsSpectatorPawn_ReturnValue' has a wrong offset!");

// Function AC_POI.AC_POI_C.GetTeamFromOwningPlayer
// 0x0098 (0x0098 - 0x0000)
struct AC_POI_C_GetTeamFromOwningPlayer final
{
public:
	TArray<class APlayerStateJP*>                 PlayerStates;                                      // 0x0000(0x0010)(Parm, OutParm)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_CaptureTheFlagDeedSafe_C*           K2Node_DynamicCast_AsBP_Capture_the_Flag_Deed_Safe; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeam_ReturnValue;                      // 0x0040(0x0038)(NoDestructor)
	TArray<class APlayerStateJP*>                 CallFunc_GetPlayersOfTeam_ReturnValue;             // 0x0078(0x0010)(ReferenceParm)
	TArray<class APlayerStateJP*>                 CallFunc_GetPlayersOfTeam_ReturnValue_1;           // 0x0088(0x0010)(ReferenceParm)
};
static_assert(alignof(AC_POI_C_GetTeamFromOwningPlayer) == 0x000008, "Wrong alignment on AC_POI_C_GetTeamFromOwningPlayer");
static_assert(sizeof(AC_POI_C_GetTeamFromOwningPlayer) == 0x000098, "Wrong size on AC_POI_C_GetTeamFromOwningPlayer");
static_assert(offsetof(AC_POI_C_GetTeamFromOwningPlayer, PlayerStates) == 0x000000, "Member 'AC_POI_C_GetTeamFromOwningPlayer::PlayerStates' has a wrong offset!");
static_assert(offsetof(AC_POI_C_GetTeamFromOwningPlayer, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'AC_POI_C_GetTeamFromOwningPlayer::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_GetTeamFromOwningPlayer, CallFunc_GetOwner_ReturnValue_1) == 0x000018, "Member 'AC_POI_C_GetTeamFromOwningPlayer::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_GetTeamFromOwningPlayer, K2Node_DynamicCast_AsBP_Capture_the_Flag_Deed_Safe) == 0x000020, "Member 'AC_POI_C_GetTeamFromOwningPlayer::K2Node_DynamicCast_AsBP_Capture_the_Flag_Deed_Safe' has a wrong offset!");
static_assert(offsetof(AC_POI_C_GetTeamFromOwningPlayer, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'AC_POI_C_GetTeamFromOwningPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_POI_C_GetTeamFromOwningPlayer, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000030, "Member 'AC_POI_C_GetTeamFromOwningPlayer::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(AC_POI_C_GetTeamFromOwningPlayer, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'AC_POI_C_GetTeamFromOwningPlayer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_GetTeamFromOwningPlayer, CallFunc_GetTeam_ReturnValue) == 0x000040, "Member 'AC_POI_C_GetTeamFromOwningPlayer::CallFunc_GetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_GetTeamFromOwningPlayer, CallFunc_GetPlayersOfTeam_ReturnValue) == 0x000078, "Member 'AC_POI_C_GetTeamFromOwningPlayer::CallFunc_GetPlayersOfTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_GetTeamFromOwningPlayer, CallFunc_GetPlayersOfTeam_ReturnValue_1) == 0x000088, "Member 'AC_POI_C_GetTeamFromOwningPlayer::CallFunc_GetPlayersOfTeam_ReturnValue_1' has a wrong offset!");

// Function AC_POI.AC_POI_C.IsOwnerSameAsCurrentPlayer
// 0x00A0 (0x00A0 - 0x0000)
struct AC_POI_C_IsOwnerSameAsCurrentPlayer final
{
public:
	bool                                          SameOwner;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamIDFromPawn_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CaptureTheFlagDeedSafe_C*           K2Node_DynamicCast_AsBP_Capture_the_Flag_Deed_Safe; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamIDFromPawn_ReturnValue_1;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  CallFunc_GetTeam_ReturnValue;                      // 0x0060(0x0038)(NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_POI_C_IsOwnerSameAsCurrentPlayer) == 0x000008, "Wrong alignment on AC_POI_C_IsOwnerSameAsCurrentPlayer");
static_assert(sizeof(AC_POI_C_IsOwnerSameAsCurrentPlayer) == 0x0000A0, "Wrong size on AC_POI_C_IsOwnerSameAsCurrentPlayer");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, SameOwner) == 0x000000, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::SameOwner' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_Not_PreBool_ReturnValue_1) == 0x000002, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_GetTeamIDFromPawn_ReturnValue) == 0x000018, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_GetTeamIDFromPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, K2Node_DynamicCast_AsBP_Capture_the_Flag_Deed_Safe) == 0x000020, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::K2Node_DynamicCast_AsBP_Capture_the_Flag_Deed_Safe' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000030, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_GetTeamIDFromPawn_ReturnValue_1) == 0x000039, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_GetTeamIDFromPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_BooleanAND_ReturnValue) == 0x00003A, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_GetOwner_ReturnValue_1) == 0x000040, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000050, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_GetTeam_ReturnValue) == 0x000060, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_GetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000098, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsOwnerSameAsCurrentPlayer, CallFunc_BooleanAND_ReturnValue_1) == 0x000099, "Member 'AC_POI_C_IsOwnerSameAsCurrentPlayer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function AC_POI.AC_POI_C.IsSpectatorPawn
// 0x0030 (0x0030 - 0x0000)
struct AC_POI_C_IsSpectatorPawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_POI_C_IsSpectatorPawn) == 0x000008, "Wrong alignment on AC_POI_C_IsSpectatorPawn");
static_assert(sizeof(AC_POI_C_IsSpectatorPawn) == 0x000030, "Wrong size on AC_POI_C_IsSpectatorPawn");
static_assert(offsetof(AC_POI_C_IsSpectatorPawn, ReturnValue) == 0x000000, "Member 'AC_POI_C_IsSpectatorPawn::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsSpectatorPawn, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'AC_POI_C_IsSpectatorPawn::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsSpectatorPawn, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'AC_POI_C_IsSpectatorPawn::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsSpectatorPawn, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'AC_POI_C_IsSpectatorPawn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsSpectatorPawn, CallFunc_GetObjectClass_ReturnValue) == 0x000020, "Member 'AC_POI_C_IsSpectatorPawn::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_IsSpectatorPawn, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000028, "Member 'AC_POI_C_IsSpectatorPawn::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");

// Function AC_POI.AC_POI_C.Set Visibility Based on LOS All
// 0x0010 (0x0010 - 0x0000)
struct AC_POI_C_Set_Visibility_Based_on_LOS_All final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_LOS_and_Range_SetVisibile;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_POI_C_Set_Visibility_Based_on_LOS_All) == 0x000008, "Wrong alignment on AC_POI_C_Set_Visibility_Based_on_LOS_All");
static_assert(sizeof(AC_POI_C_Set_Visibility_Based_on_LOS_All) == 0x000010, "Wrong size on AC_POI_C_Set_Visibility_Based_on_LOS_All");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_All, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_All::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_All, CallFunc_Check_LOS_and_Range_SetVisibile) == 0x000008, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_All::CallFunc_Check_LOS_and_Range_SetVisibile' has a wrong offset!");

// Function AC_POI.AC_POI_C.Set Visibility Based on LOS Team
// 0x0060 (0x0060 - 0x0000)
struct AC_POI_C_Set_Visibility_Based_on_LOS_Team final
{
public:
	bool                                          IsPlayerMarker;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_LOS_and_Range_Team_Hide;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOwnerSameAsCurrentPlayer_SameOwner;     // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_MatchBP_C*          K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerControllerJP_Match*              CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_MatchBP_C*          K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP_1; // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_POI_C_Set_Visibility_Based_on_LOS_Team) == 0x000008, "Wrong alignment on AC_POI_C_Set_Visibility_Based_on_LOS_Team");
static_assert(sizeof(AC_POI_C_Set_Visibility_Based_on_LOS_Team) == 0x000060, "Wrong size on AC_POI_C_Set_Visibility_Based_on_LOS_Team");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, IsPlayerMarker) == 0x000000, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::IsPlayerMarker' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, CallFunc_Check_LOS_and_Range_Team_Hide) == 0x000029, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::CallFunc_Check_LOS_and_Range_Team_Hide' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, CallFunc_IsOwnerSameAsCurrentPlayer_SameOwner) == 0x00002A, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::CallFunc_IsOwnerSameAsCurrentPlayer_SameOwner' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, CallFunc_IsValid_ReturnValue_1) == 0x00002B, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue) == 0x000030, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP) == 0x000038, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1) == 0x000048, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::CallFunc_GetLocalPlayerControllerJP_Match_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP_1) == 0x000050, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP_1' has a wrong offset!");
static_assert(offsetof(AC_POI_C_Set_Visibility_Based_on_LOS_Team, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'AC_POI_C_Set_Visibility_Based_on_LOS_Team::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function AC_POI.AC_POI_C.UpdateValues
// 0x0050 (0x0050 - 0x0000)
struct AC_POI_C_UpdateValues final
{
public:
	class UTexture2D*                             Image_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   Description_0;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FLinearColor                           ColorImage_0;                                      // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColorText_0;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_POI_C*                              K2Node_DynamicCast_AsWI_POI;                       // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_POI_C_UpdateValues) == 0x000008, "Wrong alignment on AC_POI_C_UpdateValues");
static_assert(sizeof(AC_POI_C_UpdateValues) == 0x000050, "Wrong size on AC_POI_C_UpdateValues");
static_assert(offsetof(AC_POI_C_UpdateValues, Image_0) == 0x000000, "Member 'AC_POI_C_UpdateValues::Image_0' has a wrong offset!");
static_assert(offsetof(AC_POI_C_UpdateValues, Description_0) == 0x000008, "Member 'AC_POI_C_UpdateValues::Description_0' has a wrong offset!");
static_assert(offsetof(AC_POI_C_UpdateValues, ColorImage_0) == 0x000018, "Member 'AC_POI_C_UpdateValues::ColorImage_0' has a wrong offset!");
static_assert(offsetof(AC_POI_C_UpdateValues, ColorText_0) == 0x000028, "Member 'AC_POI_C_UpdateValues::ColorText_0' has a wrong offset!");
static_assert(offsetof(AC_POI_C_UpdateValues, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000038, "Member 'AC_POI_C_UpdateValues::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_POI_C_UpdateValues, K2Node_DynamicCast_AsWI_POI) == 0x000040, "Member 'AC_POI_C_UpdateValues::K2Node_DynamicCast_AsWI_POI' has a wrong offset!");
static_assert(offsetof(AC_POI_C_UpdateValues, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'AC_POI_C_UpdateValues::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

