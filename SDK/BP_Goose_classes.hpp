#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Goose

#include "Basic.hpp"

#include "E_GooseStates_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Goose.BP_Goose_C
// 0x0080 (0x06F0 - 0x0670)
class ABP_Goose_C final : public ACharacter
{
public:
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0670(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDistanceScalingWidgetComponent*        DistanceScalingWidget;                             // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NiagaraFeatherTrailFollowing;                      // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AggroSpherre;                                      // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCableComponent*                        CableLeash;                                        // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereInteract;                                    // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UItemInstance*                          TempLastEquippedItem;                              // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ControllingActor;                                  // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Interactable;                                      // 0x06B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GooseStates                                 GooseState;                                        // 0x06B9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BA[0x6];                                      // 0x06BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIC_Goose_C*                           As_AIC_Goose;                                      // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TargetTraceTimer;                                  // 0x06C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentTarget;                                     // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             On_AttackFinished;                                 // 0x06D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ApplyDamage();
	void Attack_Target();
	void Auth_Teleport_To_Controlling_Actor(const struct FVector& DestLocation);
	void CancelInteraction(class UPrimitiveComponent* InteractionComponent);
	void ExecuteUbergraph_BP_Goose(int32 EntryPoint);
	void GetClosestOverlappingActorWithInterface(class AActor** Return);
	class UEquipmentManagerComponent* GetEquipmentManager();
	void GetGooseController(class AActor** ControllingActor_0);
	void GetInteractSound();
	void GetNewWidgetColor(struct FSlateColor* NewColor);
	void GetOptionalText(class FText* Return, class FText* Optional_Second_Line);
	void GetOwnerAbilitySystemComponent(class UAbilitySystemComponent** Return);
	void GetPriority(int32* Priority);
	void GetWidgetLocation(struct FVector* Location);
	void GrantGoose(class AActor* InteractingActor);
	void HideInteractionWidget(bool* Return);
	void InteractableCancelInteraction(class UPrimitiveComponent* InteractionComponent);
	void InteractPressed(class AActor* InteractingActor);
	void InteractReleased(class AActor* InteractingActor);
	void IsInFocus(class AActor* Focusing_Actor);
	void IsInteractable(bool* Interactable_0);
	void Multi_Attack_Cosmetics();
	void On_Owner_Dead_Event(class ACharacter* Character);
	void On_Unequipped_Item(class UEquipmentInstance* Instance);
	void On_AttackFinished__DelegateSignature();
	void OnRep_GooseState();
	void PostInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void PreInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void ReceiveBeginPlay();
	void ReceivePossessed(class AController* NewController);
	void RegisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor);
	void SendMessageToAllPlayers();
	void SetBBControllingActor(class UObject* ObjectValue, bool Clear);
	void SetBBGooseState(E_GooseStates GooseState_0);
	void SetGooseControlled(class AActor* ControllingActor_0);
	void SetGooseNonControlled();
	void SetGooseTargetActor(class UObject* ObjectValue, bool Clear);
	void SetHoveredComponent(class UInteractionComponent_C* HoveredComponent, bool* Void);
	void SetInteractable(bool Interactable_0);
	void SetKillData(const struct FGameplayEffectSpecHandle& Spec);
	void Trace_For_Target();
	void Trace_For_Targets(bool Enable);
	void UnregisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor);
	void UpdateMoveSpeedbasedOnState();

	float GetInteractionDuration(class UPrimitiveComponent* InteractionComponent) const;
	void GetPostInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	void GetPreInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForEnemyTeam(class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForInteraction(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Goose_C">();
	}
	static class ABP_Goose_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Goose_C>();
	}
};
static_assert(alignof(ABP_Goose_C) == 0x000010, "Wrong alignment on ABP_Goose_C");
static_assert(sizeof(ABP_Goose_C) == 0x0006F0, "Wrong size on ABP_Goose_C");
static_assert(offsetof(ABP_Goose_C, UberGraphFrame) == 0x000670, "Member 'ABP_Goose_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, DistanceScalingWidget) == 0x000678, "Member 'ABP_Goose_C::DistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, Audio) == 0x000680, "Member 'ABP_Goose_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, NiagaraFeatherTrailFollowing) == 0x000688, "Member 'ABP_Goose_C::NiagaraFeatherTrailFollowing' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, AggroSpherre) == 0x000690, "Member 'ABP_Goose_C::AggroSpherre' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, CableLeash) == 0x000698, "Member 'ABP_Goose_C::CableLeash' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, SphereInteract) == 0x0006A0, "Member 'ABP_Goose_C::SphereInteract' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, TempLastEquippedItem) == 0x0006A8, "Member 'ABP_Goose_C::TempLastEquippedItem' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, ControllingActor) == 0x0006B0, "Member 'ABP_Goose_C::ControllingActor' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, Interactable) == 0x0006B8, "Member 'ABP_Goose_C::Interactable' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, GooseState) == 0x0006B9, "Member 'ABP_Goose_C::GooseState' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, As_AIC_Goose) == 0x0006C0, "Member 'ABP_Goose_C::As_AIC_Goose' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, TargetTraceTimer) == 0x0006C8, "Member 'ABP_Goose_C::TargetTraceTimer' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, CurrentTarget) == 0x0006D0, "Member 'ABP_Goose_C::CurrentTarget' has a wrong offset!");
static_assert(offsetof(ABP_Goose_C, On_AttackFinished) == 0x0006D8, "Member 'ABP_Goose_C::On_AttackFinished' has a wrong offset!");

}

