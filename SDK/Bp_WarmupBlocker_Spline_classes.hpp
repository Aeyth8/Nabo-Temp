#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bp_WarmupBlocker_Spline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Bp_WarmupBlocker_Spline.Bp_WarmupBlocker_Spline_C
// 0x0100 (0x0390 - 0x0290)
class ABp_WarmupBlocker_Spline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TL_Hide_Color_8E49DB6A4288DE7444684AB373357439;    // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TL_Hide_Alpha_8E49DB6A4288DE7444684AB373357439;    // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_Hide__Direction_8E49DB6A4288DE7444684AB373357439; // 0x02B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_Hide;                                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        PolygonSize;                                       // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Height;                                            // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightCoveragePercent;                             // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x02D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               BaseTexture;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BaseColorForeground;                               // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BaseColorBackground;                               // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseTiling;                                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BaseSpeed;                                         // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ProximityTexture;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProximityColorForeground;                          // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProximityColorBackground;                          // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProximityTiling;                                   // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProximityRadius;                                   // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProximityEdgeFadeDistance;                         // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           IntersectionColor;                                 // 0x035C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntersectionWidth;                                 // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           SplineMeshes;                                      // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UMaterialInstanceDynamic*               DynamicMaterialInstance;                           // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Preview;                                           // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ConstructSplineMesh();
	void ExecuteUbergraph_Bp_WarmupBlocker_Spline(int32 EntryPoint);
	double GetDistanceFromIndex(int32 Index_0, int32 Max);
	void Hide_Bound_Spline_Cosmetics();
	void Play_Remove_Sounds();
	void ReceiveBeginPlay();
	void Show_Bound_Spline_Cosmetics();
	void TL_Hide__FinishedFunc();
	void TL_Hide__UpdateFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Bp_WarmupBlocker_Spline_C">();
	}
	static class ABp_WarmupBlocker_Spline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABp_WarmupBlocker_Spline_C>();
	}
};
static_assert(alignof(ABp_WarmupBlocker_Spline_C) == 0x000008, "Wrong alignment on ABp_WarmupBlocker_Spline_C");
static_assert(sizeof(ABp_WarmupBlocker_Spline_C) == 0x000390, "Wrong size on ABp_WarmupBlocker_Spline_C");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, UberGraphFrame) == 0x000290, "Member 'ABp_WarmupBlocker_Spline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, Spline) == 0x000298, "Member 'ABp_WarmupBlocker_Spline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, TL_Hide_Color_8E49DB6A4288DE7444684AB373357439) == 0x0002A0, "Member 'ABp_WarmupBlocker_Spline_C::TL_Hide_Color_8E49DB6A4288DE7444684AB373357439' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, TL_Hide_Alpha_8E49DB6A4288DE7444684AB373357439) == 0x0002B0, "Member 'ABp_WarmupBlocker_Spline_C::TL_Hide_Alpha_8E49DB6A4288DE7444684AB373357439' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, TL_Hide__Direction_8E49DB6A4288DE7444684AB373357439) == 0x0002B4, "Member 'ABp_WarmupBlocker_Spline_C::TL_Hide__Direction_8E49DB6A4288DE7444684AB373357439' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, TL_Hide) == 0x0002B8, "Member 'ABp_WarmupBlocker_Spline_C::TL_Hide' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, PolygonSize) == 0x0002C0, "Member 'ABp_WarmupBlocker_Spline_C::PolygonSize' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, Height) == 0x0002C8, "Member 'ABp_WarmupBlocker_Spline_C::Height' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, HeightCoveragePercent) == 0x0002D0, "Member 'ABp_WarmupBlocker_Spline_C::HeightCoveragePercent' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, Color) == 0x0002D4, "Member 'ABp_WarmupBlocker_Spline_C::Color' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, BaseTexture) == 0x0002E8, "Member 'ABp_WarmupBlocker_Spline_C::BaseTexture' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, BaseColorForeground) == 0x0002F0, "Member 'ABp_WarmupBlocker_Spline_C::BaseColorForeground' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, BaseColorBackground) == 0x000300, "Member 'ABp_WarmupBlocker_Spline_C::BaseColorBackground' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, BaseTiling) == 0x000310, "Member 'ABp_WarmupBlocker_Spline_C::BaseTiling' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, BaseSpeed) == 0x000318, "Member 'ABp_WarmupBlocker_Spline_C::BaseSpeed' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, ProximityTexture) == 0x000328, "Member 'ABp_WarmupBlocker_Spline_C::ProximityTexture' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, ProximityColorForeground) == 0x000330, "Member 'ABp_WarmupBlocker_Spline_C::ProximityColorForeground' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, ProximityColorBackground) == 0x000340, "Member 'ABp_WarmupBlocker_Spline_C::ProximityColorBackground' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, ProximityTiling) == 0x000350, "Member 'ABp_WarmupBlocker_Spline_C::ProximityTiling' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, ProximityRadius) == 0x000354, "Member 'ABp_WarmupBlocker_Spline_C::ProximityRadius' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, ProximityEdgeFadeDistance) == 0x000358, "Member 'ABp_WarmupBlocker_Spline_C::ProximityEdgeFadeDistance' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, IntersectionColor) == 0x00035C, "Member 'ABp_WarmupBlocker_Spline_C::IntersectionColor' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, IntersectionWidth) == 0x00036C, "Member 'ABp_WarmupBlocker_Spline_C::IntersectionWidth' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, SplineMeshes) == 0x000370, "Member 'ABp_WarmupBlocker_Spline_C::SplineMeshes' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, DynamicMaterialInstance) == 0x000380, "Member 'ABp_WarmupBlocker_Spline_C::DynamicMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABp_WarmupBlocker_Spline_C, Preview) == 0x000388, "Member 'ABp_WarmupBlocker_Spline_C::Preview' has a wrong offset!");

}

