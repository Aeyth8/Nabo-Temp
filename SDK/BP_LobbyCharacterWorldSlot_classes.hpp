#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LobbyCharacterWorldSlot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "JP_structs.hpp"
#include "S_LobbyCharacterWorldSlotInfo_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LobbyCharacterWorldSlot.BP_LobbyCharacterWorldSlot_C
// 0x0098 (0x0328 - 0x0290)
class ABP_LobbyCharacterWorldSlot_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   GlowMesh;                                          // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PreviewStaticMesh;                                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Cosmetics;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             CharacterDataTable;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   CharacterId;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     TeamType;                                          // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPawnDefinitionJP*>              PawnDefinitions;                                   // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USkeletalMesh*                          CurrentSkeletalMeshInSlot;                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               GlowMeshMaterialInstance;                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_PreviewPawn_C*                      PreviewPawn_Deprecated;                            // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, Deprecated, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowCosmeticEffects;                               // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NeighborPreviewActor_C*             NeighborPreviewActor;                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_LobbyCharacterWorldSlotInfo         Slot_Info;                                         // 0x0310(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ClearCharacter();
	void ExecuteUbergraph_BP_LobbyCharacterWorldSlot(int32 EntryPoint);
	void GetResidentCharacterFromCharacterName(ECharacterName CharacterName, class UClass** ResidentCharacter);
	void InitializePreviewCharacter(class ABP_NeighborPreviewActor_C* PreviewActor);
	void OffsetCharacterLocation(class ACharacter* Character);
	void PlayAnimation(const struct FGameplayTag& Animation_Context);
	void ReceiveBeginPlay();
	void Set_Character(ETeamType InTeamType, const struct FS_LobbyCharacterWorldSlotInfo& SlotInfo);
	void Set_Skeletal_Mesh_in_Preview(ECharacterName CharacterName, const struct FGameplayTag& SkinIdentifier, class USkeletalMesh** TPPSkeletal_Mesh);
	void SetMaterialValues(class FName ParameterName, ETeamType Index_0, const struct FLinearColor& Blue_Team, const struct FLinearColor& Red_Team, const struct FLinearColor& Yellow_Team);
	void ShowOccupiedCosmetics(bool bNewVisibility, ETeamType Team);
	void SpawnNeighborPreview(class ABP_NeighborPreviewActor_C** SpawnedActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LobbyCharacterWorldSlot_C">();
	}
	static class ABP_LobbyCharacterWorldSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LobbyCharacterWorldSlot_C>();
	}
};
static_assert(alignof(ABP_LobbyCharacterWorldSlot_C) == 0x000008, "Wrong alignment on ABP_LobbyCharacterWorldSlot_C");
static_assert(sizeof(ABP_LobbyCharacterWorldSlot_C) == 0x000328, "Wrong size on ABP_LobbyCharacterWorldSlot_C");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, UberGraphFrame) == 0x000290, "Member 'ABP_LobbyCharacterWorldSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, GlowMesh) == 0x000298, "Member 'ABP_LobbyCharacterWorldSlot_C::GlowMesh' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, PreviewStaticMesh) == 0x0002A0, "Member 'ABP_LobbyCharacterWorldSlot_C::PreviewStaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, ParticleSystem) == 0x0002A8, "Member 'ABP_LobbyCharacterWorldSlot_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, Cosmetics) == 0x0002B0, "Member 'ABP_LobbyCharacterWorldSlot_C::Cosmetics' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_LobbyCharacterWorldSlot_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, CharacterDataTable) == 0x0002C0, "Member 'ABP_LobbyCharacterWorldSlot_C::CharacterDataTable' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, CharacterId) == 0x0002C8, "Member 'ABP_LobbyCharacterWorldSlot_C::CharacterId' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, TeamType) == 0x0002D0, "Member 'ABP_LobbyCharacterWorldSlot_C::TeamType' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, PawnDefinitions) == 0x0002D8, "Member 'ABP_LobbyCharacterWorldSlot_C::PawnDefinitions' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, CurrentSkeletalMeshInSlot) == 0x0002E8, "Member 'ABP_LobbyCharacterWorldSlot_C::CurrentSkeletalMeshInSlot' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, GlowMeshMaterialInstance) == 0x0002F0, "Member 'ABP_LobbyCharacterWorldSlot_C::GlowMeshMaterialInstance' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, PreviewPawn_Deprecated) == 0x0002F8, "Member 'ABP_LobbyCharacterWorldSlot_C::PreviewPawn_Deprecated' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, ShowCosmeticEffects) == 0x000300, "Member 'ABP_LobbyCharacterWorldSlot_C::ShowCosmeticEffects' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, NeighborPreviewActor) == 0x000308, "Member 'ABP_LobbyCharacterWorldSlot_C::NeighborPreviewActor' has a wrong offset!");
static_assert(offsetof(ABP_LobbyCharacterWorldSlot_C, Slot_Info) == 0x000310, "Member 'ABP_LobbyCharacterWorldSlot_C::Slot_Info' has a wrong offset!");

}

