#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UniversalVoiceChatPro

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "UniversalVoiceChatPro_structs.hpp"


namespace SDK::Params
{

// Function UniversalVoiceChatPro.AudioCaptureAndroid.AndroidHasPermission
// 0x0001 (0x0001 - 0x0000)
struct AudioCaptureAndroid_AndroidHasPermission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioCaptureAndroid_AndroidHasPermission) == 0x000001, "Wrong alignment on AudioCaptureAndroid_AndroidHasPermission");
static_assert(sizeof(AudioCaptureAndroid_AndroidHasPermission) == 0x000001, "Wrong size on AudioCaptureAndroid_AndroidHasPermission");
static_assert(offsetof(AudioCaptureAndroid_AndroidHasPermission, ReturnValue) == 0x000000, "Member 'AudioCaptureAndroid_AndroidHasPermission::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.AudioCaptureAndroid.AndroidMicrophoneStart
// 0x0010 (0x0010 - 0x0000)
struct AudioCaptureAndroid_AndroidMicrophoneStart final
{
public:
	class UMicrophoneSpeakComponent*              CallbackComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRateToUse;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioCaptureAndroid_AndroidMicrophoneStart) == 0x000008, "Wrong alignment on AudioCaptureAndroid_AndroidMicrophoneStart");
static_assert(sizeof(AudioCaptureAndroid_AndroidMicrophoneStart) == 0x000010, "Wrong size on AudioCaptureAndroid_AndroidMicrophoneStart");
static_assert(offsetof(AudioCaptureAndroid_AndroidMicrophoneStart, CallbackComp) == 0x000000, "Member 'AudioCaptureAndroid_AndroidMicrophoneStart::CallbackComp' has a wrong offset!");
static_assert(offsetof(AudioCaptureAndroid_AndroidMicrophoneStart, SampleRateToUse) == 0x000008, "Member 'AudioCaptureAndroid_AndroidMicrophoneStart::SampleRateToUse' has a wrong offset!");
static_assert(offsetof(AudioCaptureAndroid_AndroidMicrophoneStart, ReturnValue) == 0x00000C, "Member 'AudioCaptureAndroid_AndroidMicrophoneStart::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.AudioCaptureAndroid.AndroidMicrophoneStop
// 0x0008 (0x0008 - 0x0000)
struct AudioCaptureAndroid_AndroidMicrophoneStop final
{
public:
	class UMicrophoneSpeakComponent*              CallbackComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioCaptureAndroid_AndroidMicrophoneStop) == 0x000008, "Wrong alignment on AudioCaptureAndroid_AndroidMicrophoneStop");
static_assert(sizeof(AudioCaptureAndroid_AndroidMicrophoneStop) == 0x000008, "Wrong size on AudioCaptureAndroid_AndroidMicrophoneStop");
static_assert(offsetof(AudioCaptureAndroid_AndroidMicrophoneStop, CallbackComp) == 0x000000, "Member 'AudioCaptureAndroid_AndroidMicrophoneStop::CallbackComp' has a wrong offset!");

// DelegateFunction UniversalVoiceChatPro.MicrophoneSpeakComponent.DataMicrophoneReceived__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct MicrophoneSpeakComponent_DataMicrophoneReceived__DelegateSignature final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_DataMicrophoneReceived__DelegateSignature) == 0x000008, "Wrong alignment on MicrophoneSpeakComponent_DataMicrophoneReceived__DelegateSignature");
static_assert(sizeof(MicrophoneSpeakComponent_DataMicrophoneReceived__DelegateSignature) == 0x000010, "Wrong size on MicrophoneSpeakComponent_DataMicrophoneReceived__DelegateSignature");
static_assert(offsetof(MicrophoneSpeakComponent_DataMicrophoneReceived__DelegateSignature, Data) == 0x000000, "Member 'MicrophoneSpeakComponent_DataMicrophoneReceived__DelegateSignature::Data' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.getLocallyMultiplierVolume
// 0x0004 (0x0004 - 0x0000)
struct MicrophoneSpeakComponent_GetLocallyMultiplierVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_GetLocallyMultiplierVolume) == 0x000004, "Wrong alignment on MicrophoneSpeakComponent_GetLocallyMultiplierVolume");
static_assert(sizeof(MicrophoneSpeakComponent_GetLocallyMultiplierVolume) == 0x000004, "Wrong size on MicrophoneSpeakComponent_GetLocallyMultiplierVolume");
static_assert(offsetof(MicrophoneSpeakComponent_GetLocallyMultiplierVolume, ReturnValue) == 0x000000, "Member 'MicrophoneSpeakComponent_GetLocallyMultiplierVolume::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.initAudioResources
// 0x000C (0x000C - 0x0000)
struct MicrophoneSpeakComponent_InitAudioResources final
{
public:
	int32                                         VoiceSampleRate;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpusFramesPerSec;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MicrophoneSpeakComponent_InitAudioResources) == 0x000004, "Wrong alignment on MicrophoneSpeakComponent_InitAudioResources");
static_assert(sizeof(MicrophoneSpeakComponent_InitAudioResources) == 0x00000C, "Wrong size on MicrophoneSpeakComponent_InitAudioResources");
static_assert(offsetof(MicrophoneSpeakComponent_InitAudioResources, VoiceSampleRate) == 0x000000, "Member 'MicrophoneSpeakComponent_InitAudioResources::VoiceSampleRate' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_InitAudioResources, OpusFramesPerSec) == 0x000004, "Member 'MicrophoneSpeakComponent_InitAudioResources::OpusFramesPerSec' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_InitAudioResources, ReturnValue) == 0x000008, "Member 'MicrophoneSpeakComponent_InitAudioResources::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.isPlayingAudioVoice
// 0x0001 (0x0001 - 0x0000)
struct MicrophoneSpeakComponent_IsPlayingAudioVoice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_IsPlayingAudioVoice) == 0x000001, "Wrong alignment on MicrophoneSpeakComponent_IsPlayingAudioVoice");
static_assert(sizeof(MicrophoneSpeakComponent_IsPlayingAudioVoice) == 0x000001, "Wrong size on MicrophoneSpeakComponent_IsPlayingAudioVoice");
static_assert(offsetof(MicrophoneSpeakComponent_IsPlayingAudioVoice, ReturnValue) == 0x000000, "Member 'MicrophoneSpeakComponent_IsPlayingAudioVoice::ReturnValue' has a wrong offset!");

// DelegateFunction UniversalVoiceChatPro.MicrophoneSpeakComponent.MicrophoneVolumeReceived__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct MicrophoneSpeakComponent_MicrophoneVolumeReceived__DelegateSignature final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_MicrophoneVolumeReceived__DelegateSignature) == 0x000004, "Wrong alignment on MicrophoneSpeakComponent_MicrophoneVolumeReceived__DelegateSignature");
static_assert(sizeof(MicrophoneSpeakComponent_MicrophoneVolumeReceived__DelegateSignature) == 0x000004, "Wrong size on MicrophoneSpeakComponent_MicrophoneVolumeReceived__DelegateSignature");
static_assert(offsetof(MicrophoneSpeakComponent_MicrophoneVolumeReceived__DelegateSignature, Volume) == 0x000000, "Member 'MicrophoneSpeakComponent_MicrophoneVolumeReceived__DelegateSignature::Volume' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.muteAudio
// 0x0001 (0x0001 - 0x0000)
struct MicrophoneSpeakComponent_MuteAudio final
{
public:
	bool                                          _isMuted;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_MuteAudio) == 0x000001, "Wrong alignment on MicrophoneSpeakComponent_MuteAudio");
static_assert(sizeof(MicrophoneSpeakComponent_MuteAudio) == 0x000001, "Wrong size on MicrophoneSpeakComponent_MuteAudio");
static_assert(offsetof(MicrophoneSpeakComponent_MuteAudio, _isMuted) == 0x000000, "Member 'MicrophoneSpeakComponent_MuteAudio::_isMuted' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.payloadReceivedVoiceData
// 0x0030 (0x0030 - 0x0000)
struct MicrophoneSpeakComponent_PayloadReceivedVoiceData final
{
public:
	TArray<uint8>                                 DataEncoded;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCMSize;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpusFramePerSec;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 _radioChannel;                                     // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_PayloadReceivedVoiceData) == 0x000008, "Wrong alignment on MicrophoneSpeakComponent_PayloadReceivedVoiceData");
static_assert(sizeof(MicrophoneSpeakComponent_PayloadReceivedVoiceData) == 0x000030, "Wrong size on MicrophoneSpeakComponent_PayloadReceivedVoiceData");
static_assert(offsetof(MicrophoneSpeakComponent_PayloadReceivedVoiceData, DataEncoded) == 0x000000, "Member 'MicrophoneSpeakComponent_PayloadReceivedVoiceData::DataEncoded' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_PayloadReceivedVoiceData, SampleRate) == 0x000010, "Member 'MicrophoneSpeakComponent_PayloadReceivedVoiceData::SampleRate' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_PayloadReceivedVoiceData, PCMSize) == 0x000014, "Member 'MicrophoneSpeakComponent_PayloadReceivedVoiceData::PCMSize' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_PayloadReceivedVoiceData, OpusFramePerSec) == 0x000018, "Member 'MicrophoneSpeakComponent_PayloadReceivedVoiceData::OpusFramePerSec' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_PayloadReceivedVoiceData, _radioChannel) == 0x000020, "Member 'MicrophoneSpeakComponent_PayloadReceivedVoiceData::_radioChannel' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.RPCClientTransmitVoiceData
// 0x0038 (0x0038 - 0x0000)
struct MicrophoneSpeakComponent_RPCClientTransmitVoiceData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCMSize;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpusFramePerSec;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _isGlobal;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 _radioChannel;                                     // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          _useRange;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _maxRange;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_RPCClientTransmitVoiceData) == 0x000008, "Wrong alignment on MicrophoneSpeakComponent_RPCClientTransmitVoiceData");
static_assert(sizeof(MicrophoneSpeakComponent_RPCClientTransmitVoiceData) == 0x000038, "Wrong size on MicrophoneSpeakComponent_RPCClientTransmitVoiceData");
static_assert(offsetof(MicrophoneSpeakComponent_RPCClientTransmitVoiceData, Data) == 0x000000, "Member 'MicrophoneSpeakComponent_RPCClientTransmitVoiceData::Data' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCClientTransmitVoiceData, SampleRate) == 0x000010, "Member 'MicrophoneSpeakComponent_RPCClientTransmitVoiceData::SampleRate' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCClientTransmitVoiceData, PCMSize) == 0x000014, "Member 'MicrophoneSpeakComponent_RPCClientTransmitVoiceData::PCMSize' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCClientTransmitVoiceData, OpusFramePerSec) == 0x000018, "Member 'MicrophoneSpeakComponent_RPCClientTransmitVoiceData::OpusFramePerSec' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCClientTransmitVoiceData, _isGlobal) == 0x00001C, "Member 'MicrophoneSpeakComponent_RPCClientTransmitVoiceData::_isGlobal' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCClientTransmitVoiceData, _radioChannel) == 0x000020, "Member 'MicrophoneSpeakComponent_RPCClientTransmitVoiceData::_radioChannel' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCClientTransmitVoiceData, _useRange) == 0x000030, "Member 'MicrophoneSpeakComponent_RPCClientTransmitVoiceData::_useRange' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCClientTransmitVoiceData, _maxRange) == 0x000034, "Member 'MicrophoneSpeakComponent_RPCClientTransmitVoiceData::_maxRange' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.RPCReceiveVoiceFromServer
// 0x0038 (0x0038 - 0x0000)
struct MicrophoneSpeakComponent_RPCReceiveVoiceFromServer final
{
public:
	class UMicrophoneSpeakComponent*              CompToOutputVoice;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 DataEncoded;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCMSize;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpusFramePerSec;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 _radioChannel;                                     // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_RPCReceiveVoiceFromServer) == 0x000008, "Wrong alignment on MicrophoneSpeakComponent_RPCReceiveVoiceFromServer");
static_assert(sizeof(MicrophoneSpeakComponent_RPCReceiveVoiceFromServer) == 0x000038, "Wrong size on MicrophoneSpeakComponent_RPCReceiveVoiceFromServer");
static_assert(offsetof(MicrophoneSpeakComponent_RPCReceiveVoiceFromServer, CompToOutputVoice) == 0x000000, "Member 'MicrophoneSpeakComponent_RPCReceiveVoiceFromServer::CompToOutputVoice' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCReceiveVoiceFromServer, DataEncoded) == 0x000008, "Member 'MicrophoneSpeakComponent_RPCReceiveVoiceFromServer::DataEncoded' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCReceiveVoiceFromServer, SampleRate) == 0x000018, "Member 'MicrophoneSpeakComponent_RPCReceiveVoiceFromServer::SampleRate' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCReceiveVoiceFromServer, PCMSize) == 0x00001C, "Member 'MicrophoneSpeakComponent_RPCReceiveVoiceFromServer::PCMSize' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCReceiveVoiceFromServer, OpusFramePerSec) == 0x000020, "Member 'MicrophoneSpeakComponent_RPCReceiveVoiceFromServer::OpusFramePerSec' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCReceiveVoiceFromServer, _radioChannel) == 0x000028, "Member 'MicrophoneSpeakComponent_RPCReceiveVoiceFromServer::_radioChannel' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.RPCServerBroadcastVoiceData
// 0x0030 (0x0030 - 0x0000)
struct MicrophoneSpeakComponent_RPCServerBroadcastVoiceData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCMSize;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpusFramePerSec;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 _radioChannel;                                     // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_RPCServerBroadcastVoiceData) == 0x000008, "Wrong alignment on MicrophoneSpeakComponent_RPCServerBroadcastVoiceData");
static_assert(sizeof(MicrophoneSpeakComponent_RPCServerBroadcastVoiceData) == 0x000030, "Wrong size on MicrophoneSpeakComponent_RPCServerBroadcastVoiceData");
static_assert(offsetof(MicrophoneSpeakComponent_RPCServerBroadcastVoiceData, Data) == 0x000000, "Member 'MicrophoneSpeakComponent_RPCServerBroadcastVoiceData::Data' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCServerBroadcastVoiceData, SampleRate) == 0x000010, "Member 'MicrophoneSpeakComponent_RPCServerBroadcastVoiceData::SampleRate' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCServerBroadcastVoiceData, PCMSize) == 0x000014, "Member 'MicrophoneSpeakComponent_RPCServerBroadcastVoiceData::PCMSize' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCServerBroadcastVoiceData, OpusFramePerSec) == 0x000018, "Member 'MicrophoneSpeakComponent_RPCServerBroadcastVoiceData::OpusFramePerSec' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_RPCServerBroadcastVoiceData, _radioChannel) == 0x000020, "Member 'MicrophoneSpeakComponent_RPCServerBroadcastVoiceData::_radioChannel' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.setAttenuationAssetPath
// 0x0018 (0x0018 - 0x0000)
struct MicrophoneSpeakComponent_SetAttenuationAssetPath final
{
public:
	bool                                          EnableAttenuation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToAttenuationAsset;                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_SetAttenuationAssetPath) == 0x000008, "Wrong alignment on MicrophoneSpeakComponent_SetAttenuationAssetPath");
static_assert(sizeof(MicrophoneSpeakComponent_SetAttenuationAssetPath) == 0x000018, "Wrong size on MicrophoneSpeakComponent_SetAttenuationAssetPath");
static_assert(offsetof(MicrophoneSpeakComponent_SetAttenuationAssetPath, EnableAttenuation) == 0x000000, "Member 'MicrophoneSpeakComponent_SetAttenuationAssetPath::EnableAttenuation' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_SetAttenuationAssetPath, _pathToAttenuationAsset) == 0x000008, "Member 'MicrophoneSpeakComponent_SetAttenuationAssetPath::_pathToAttenuationAsset' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.setLocallyMultiplierVolume
// 0x0004 (0x0004 - 0x0000)
struct MicrophoneSpeakComponent_SetLocallyMultiplierVolume final
{
public:
	float                                         MultiplierVolume;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_SetLocallyMultiplierVolume) == 0x000004, "Wrong alignment on MicrophoneSpeakComponent_SetLocallyMultiplierVolume");
static_assert(sizeof(MicrophoneSpeakComponent_SetLocallyMultiplierVolume) == 0x000004, "Wrong size on MicrophoneSpeakComponent_SetLocallyMultiplierVolume");
static_assert(offsetof(MicrophoneSpeakComponent_SetLocallyMultiplierVolume, MultiplierVolume) == 0x000000, "Member 'MicrophoneSpeakComponent_SetLocallyMultiplierVolume::MultiplierVolume' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.setOverrideLocallyAttenuationPath
// 0x0018 (0x0018 - 0x0000)
struct MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath final
{
public:
	bool                                          EnableAttenuation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideLocally;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToAttenuationAsset;                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath) == 0x000008, "Wrong alignment on MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath");
static_assert(sizeof(MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath) == 0x000018, "Wrong size on MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath");
static_assert(offsetof(MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath, EnableAttenuation) == 0x000000, "Member 'MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath::EnableAttenuation' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath, OverrideLocally) == 0x000001, "Member 'MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath::OverrideLocally' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath, _pathToAttenuationAsset) == 0x000008, "Member 'MicrophoneSpeakComponent_SetOverrideLocallyAttenuationPath::_pathToAttenuationAsset' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.setOverrideLocallySourceEffectPath
// 0x0018 (0x0018 - 0x0000)
struct MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath final
{
public:
	bool                                          EnableSourceEffect;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideLocally;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToSourceEffectAsset;                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath) == 0x000008, "Wrong alignment on MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath");
static_assert(sizeof(MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath) == 0x000018, "Wrong size on MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath");
static_assert(offsetof(MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath, EnableSourceEffect) == 0x000000, "Member 'MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath::EnableSourceEffect' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath, OverrideLocally) == 0x000001, "Member 'MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath::OverrideLocally' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath, _pathToSourceEffectAsset) == 0x000008, "Member 'MicrophoneSpeakComponent_SetOverrideLocallySourceEffectPath::_pathToSourceEffectAsset' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.setSourceChainEffectAssetPath
// 0x0018 (0x0018 - 0x0000)
struct MicrophoneSpeakComponent_SetSourceChainEffectAssetPath final
{
public:
	bool                                          EnableSourceChainEffect;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToSourceChainEffect;                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_SetSourceChainEffectAssetPath) == 0x000008, "Wrong alignment on MicrophoneSpeakComponent_SetSourceChainEffectAssetPath");
static_assert(sizeof(MicrophoneSpeakComponent_SetSourceChainEffectAssetPath) == 0x000018, "Wrong size on MicrophoneSpeakComponent_SetSourceChainEffectAssetPath");
static_assert(offsetof(MicrophoneSpeakComponent_SetSourceChainEffectAssetPath, EnableSourceChainEffect) == 0x000000, "Member 'MicrophoneSpeakComponent_SetSourceChainEffectAssetPath::EnableSourceChainEffect' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_SetSourceChainEffectAssetPath, _pathToSourceChainEffect) == 0x000008, "Member 'MicrophoneSpeakComponent_SetSourceChainEffectAssetPath::_pathToSourceChainEffect' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.SetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct MicrophoneSpeakComponent_SetVoiceVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MicrophoneSpeakComponent_SetVoiceVolume) == 0x000004, "Wrong alignment on MicrophoneSpeakComponent_SetVoiceVolume");
static_assert(sizeof(MicrophoneSpeakComponent_SetVoiceVolume) == 0x000004, "Wrong size on MicrophoneSpeakComponent_SetVoiceVolume");
static_assert(offsetof(MicrophoneSpeakComponent_SetVoiceVolume, Volume) == 0x000000, "Member 'MicrophoneSpeakComponent_SetVoiceVolume::Volume' has a wrong offset!");

// Function UniversalVoiceChatPro.MicrophoneSpeakComponent.startSpeaking
// 0x0028 (0x0028 - 0x0000)
struct MicrophoneSpeakComponent_StartSpeaking final
{
public:
	bool                                          _shouldHearMyOwnVoice;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGlobal;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 RadioChannel;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseRange;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxRange;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MicrophoneSpeakComponent_StartSpeaking) == 0x000008, "Wrong alignment on MicrophoneSpeakComponent_StartSpeaking");
static_assert(sizeof(MicrophoneSpeakComponent_StartSpeaking) == 0x000028, "Wrong size on MicrophoneSpeakComponent_StartSpeaking");
static_assert(offsetof(MicrophoneSpeakComponent_StartSpeaking, _shouldHearMyOwnVoice) == 0x000000, "Member 'MicrophoneSpeakComponent_StartSpeaking::_shouldHearMyOwnVoice' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_StartSpeaking, IsGlobal) == 0x000001, "Member 'MicrophoneSpeakComponent_StartSpeaking::IsGlobal' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_StartSpeaking, RadioChannel) == 0x000008, "Member 'MicrophoneSpeakComponent_StartSpeaking::RadioChannel' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_StartSpeaking, UseRange) == 0x000018, "Member 'MicrophoneSpeakComponent_StartSpeaking::UseRange' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_StartSpeaking, MaxRange) == 0x00001C, "Member 'MicrophoneSpeakComponent_StartSpeaking::MaxRange' has a wrong offset!");
static_assert(offsetof(MicrophoneSpeakComponent_StartSpeaking, ReturnValue) == 0x000020, "Member 'MicrophoneSpeakComponent_StartSpeaking::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.DelegateEndPlayOwner
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatActor_DelegateEndPlayOwner final
{
public:
	class AActor*                                 Act;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerVoiceChatActor_DelegateEndPlayOwner) == 0x000008, "Wrong alignment on PlayerVoiceChatActor_DelegateEndPlayOwner");
static_assert(sizeof(PlayerVoiceChatActor_DelegateEndPlayOwner) == 0x000010, "Wrong size on PlayerVoiceChatActor_DelegateEndPlayOwner");
static_assert(offsetof(PlayerVoiceChatActor_DelegateEndPlayOwner, Act) == 0x000000, "Member 'PlayerVoiceChatActor_DelegateEndPlayOwner::Act' has a wrong offset!");
static_assert(offsetof(PlayerVoiceChatActor_DelegateEndPlayOwner, EndPlayReason) == 0x000008, "Member 'PlayerVoiceChatActor_DelegateEndPlayOwner::EndPlayReason' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.getLocallyMultiplierVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoiceChatActor_GetLocallyMultiplierVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_GetLocallyMultiplierVolume) == 0x000004, "Wrong alignment on PlayerVoiceChatActor_GetLocallyMultiplierVolume");
static_assert(sizeof(PlayerVoiceChatActor_GetLocallyMultiplierVolume) == 0x000004, "Wrong size on PlayerVoiceChatActor_GetLocallyMultiplierVolume");
static_assert(offsetof(PlayerVoiceChatActor_GetLocallyMultiplierVolume, ReturnValue) == 0x000000, "Member 'PlayerVoiceChatActor_GetLocallyMultiplierVolume::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.IsMicrophoneComponentValid
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoiceChatActor_IsMicrophoneComponentValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_IsMicrophoneComponentValid) == 0x000001, "Wrong alignment on PlayerVoiceChatActor_IsMicrophoneComponentValid");
static_assert(sizeof(PlayerVoiceChatActor_IsMicrophoneComponentValid) == 0x000001, "Wrong size on PlayerVoiceChatActor_IsMicrophoneComponentValid");
static_assert(offsetof(PlayerVoiceChatActor_IsMicrophoneComponentValid, ReturnValue) == 0x000000, "Member 'PlayerVoiceChatActor_IsMicrophoneComponentValid::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.muteAudio
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoiceChatActor_MuteAudio final
{
public:
	bool                                          IsMute;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_MuteAudio) == 0x000001, "Wrong alignment on PlayerVoiceChatActor_MuteAudio");
static_assert(sizeof(PlayerVoiceChatActor_MuteAudio) == 0x000001, "Wrong size on PlayerVoiceChatActor_MuteAudio");
static_assert(offsetof(PlayerVoiceChatActor_MuteAudio, IsMute) == 0x000000, "Member 'PlayerVoiceChatActor_MuteAudio::IsMute' has a wrong offset!");

// DelegateFunction UniversalVoiceChatPro.PlayerVoiceChatActor.PlayerMicrophoneOnReceived__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoiceChatActor_PlayerMicrophoneOnReceived__DelegateSignature final
{
public:
	bool                                          IsMicrophoneOn_0;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_PlayerMicrophoneOnReceived__DelegateSignature) == 0x000001, "Wrong alignment on PlayerVoiceChatActor_PlayerMicrophoneOnReceived__DelegateSignature");
static_assert(sizeof(PlayerVoiceChatActor_PlayerMicrophoneOnReceived__DelegateSignature) == 0x000001, "Wrong size on PlayerVoiceChatActor_PlayerMicrophoneOnReceived__DelegateSignature");
static_assert(offsetof(PlayerVoiceChatActor_PlayerMicrophoneOnReceived__DelegateSignature, IsMicrophoneOn_0) == 0x000000, "Member 'PlayerVoiceChatActor_PlayerMicrophoneOnReceived__DelegateSignature::IsMicrophoneOn_0' has a wrong offset!");

// DelegateFunction UniversalVoiceChatPro.PlayerVoiceChatActor.PlayerNameReceived__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatActor_PlayerNameReceived__DelegateSignature final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_PlayerNameReceived__DelegateSignature) == 0x000008, "Wrong alignment on PlayerVoiceChatActor_PlayerNameReceived__DelegateSignature");
static_assert(sizeof(PlayerVoiceChatActor_PlayerNameReceived__DelegateSignature) == 0x000010, "Wrong size on PlayerVoiceChatActor_PlayerNameReceived__DelegateSignature");
static_assert(offsetof(PlayerVoiceChatActor_PlayerNameReceived__DelegateSignature, Name_0) == 0x000000, "Member 'PlayerVoiceChatActor_PlayerNameReceived__DelegateSignature::Name_0' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.RPCClientAskAddChannel
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoiceChatActor_RPCClientAskAddChannel final
{
public:
	uint8                                         ChannelToAdd;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_RPCClientAskAddChannel) == 0x000001, "Wrong alignment on PlayerVoiceChatActor_RPCClientAskAddChannel");
static_assert(sizeof(PlayerVoiceChatActor_RPCClientAskAddChannel) == 0x000001, "Wrong size on PlayerVoiceChatActor_RPCClientAskAddChannel");
static_assert(offsetof(PlayerVoiceChatActor_RPCClientAskAddChannel, ChannelToAdd) == 0x000000, "Member 'PlayerVoiceChatActor_RPCClientAskAddChannel::ChannelToAdd' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.RPCClientAskRemoveChannel
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoiceChatActor_RPCClientAskRemoveChannel final
{
public:
	uint8                                         ChannelToRemove;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_RPCClientAskRemoveChannel) == 0x000001, "Wrong alignment on PlayerVoiceChatActor_RPCClientAskRemoveChannel");
static_assert(sizeof(PlayerVoiceChatActor_RPCClientAskRemoveChannel) == 0x000001, "Wrong size on PlayerVoiceChatActor_RPCClientAskRemoveChannel");
static_assert(offsetof(PlayerVoiceChatActor_RPCClientAskRemoveChannel, ChannelToRemove) == 0x000000, "Member 'PlayerVoiceChatActor_RPCClientAskRemoveChannel::ChannelToRemove' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.RPCClientSetAttenuationPath
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatActor_RPCClientSetAttenuationPath final
{
public:
	class FString                                 _attenuationPath;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_RPCClientSetAttenuationPath) == 0x000008, "Wrong alignment on PlayerVoiceChatActor_RPCClientSetAttenuationPath");
static_assert(sizeof(PlayerVoiceChatActor_RPCClientSetAttenuationPath) == 0x000010, "Wrong size on PlayerVoiceChatActor_RPCClientSetAttenuationPath");
static_assert(offsetof(PlayerVoiceChatActor_RPCClientSetAttenuationPath, _attenuationPath) == 0x000000, "Member 'PlayerVoiceChatActor_RPCClientSetAttenuationPath::_attenuationPath' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.RPCClientSetIsMicrophoneOn
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoiceChatActor_RPCClientSetIsMicrophoneOn final
{
public:
	bool                                          _isMicrophoneOn;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_RPCClientSetIsMicrophoneOn) == 0x000001, "Wrong alignment on PlayerVoiceChatActor_RPCClientSetIsMicrophoneOn");
static_assert(sizeof(PlayerVoiceChatActor_RPCClientSetIsMicrophoneOn) == 0x000001, "Wrong size on PlayerVoiceChatActor_RPCClientSetIsMicrophoneOn");
static_assert(offsetof(PlayerVoiceChatActor_RPCClientSetIsMicrophoneOn, _isMicrophoneOn) == 0x000000, "Member 'PlayerVoiceChatActor_RPCClientSetIsMicrophoneOn::_isMicrophoneOn' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.RPCClientSetMicrophoneVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoiceChatActor_RPCClientSetMicrophoneVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_RPCClientSetMicrophoneVolume) == 0x000004, "Wrong alignment on PlayerVoiceChatActor_RPCClientSetMicrophoneVolume");
static_assert(sizeof(PlayerVoiceChatActor_RPCClientSetMicrophoneVolume) == 0x000004, "Wrong size on PlayerVoiceChatActor_RPCClientSetMicrophoneVolume");
static_assert(offsetof(PlayerVoiceChatActor_RPCClientSetMicrophoneVolume, Volume) == 0x000000, "Member 'PlayerVoiceChatActor_RPCClientSetMicrophoneVolume::Volume' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.RPCClientSetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatActor_RPCClientSetPlayerName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_RPCClientSetPlayerName) == 0x000008, "Wrong alignment on PlayerVoiceChatActor_RPCClientSetPlayerName");
static_assert(sizeof(PlayerVoiceChatActor_RPCClientSetPlayerName) == 0x000010, "Wrong size on PlayerVoiceChatActor_RPCClientSetPlayerName");
static_assert(offsetof(PlayerVoiceChatActor_RPCClientSetPlayerName, Name_0) == 0x000000, "Member 'PlayerVoiceChatActor_RPCClientSetPlayerName::Name_0' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.RPCClientSetSourceChainEffectPath
// 0x0010 (0x0010 - 0x0000)
struct PlayerVoiceChatActor_RPCClientSetSourceChainEffectPath final
{
public:
	class FString                                 _pathToSourceChainEffectAsset;                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_RPCClientSetSourceChainEffectPath) == 0x000008, "Wrong alignment on PlayerVoiceChatActor_RPCClientSetSourceChainEffectPath");
static_assert(sizeof(PlayerVoiceChatActor_RPCClientSetSourceChainEffectPath) == 0x000010, "Wrong size on PlayerVoiceChatActor_RPCClientSetSourceChainEffectPath");
static_assert(offsetof(PlayerVoiceChatActor_RPCClientSetSourceChainEffectPath, _pathToSourceChainEffectAsset) == 0x000000, "Member 'PlayerVoiceChatActor_RPCClientSetSourceChainEffectPath::_pathToSourceChainEffectAsset' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.RPCServerUpdatePosAudioComp
// 0x0030 (0x0030 - 0x0000)
struct PlayerVoiceChatActor_RPCServerUpdatePosAudioComp final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WorldRotation;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_RPCServerUpdatePosAudioComp) == 0x000008, "Wrong alignment on PlayerVoiceChatActor_RPCServerUpdatePosAudioComp");
static_assert(sizeof(PlayerVoiceChatActor_RPCServerUpdatePosAudioComp) == 0x000030, "Wrong size on PlayerVoiceChatActor_RPCServerUpdatePosAudioComp");
static_assert(offsetof(PlayerVoiceChatActor_RPCServerUpdatePosAudioComp, WorldPos) == 0x000000, "Member 'PlayerVoiceChatActor_RPCServerUpdatePosAudioComp::WorldPos' has a wrong offset!");
static_assert(offsetof(PlayerVoiceChatActor_RPCServerUpdatePosAudioComp, WorldRotation) == 0x000018, "Member 'PlayerVoiceChatActor_RPCServerUpdatePosAudioComp::WorldRotation' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.ServerAddChannel
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoiceChatActor_ServerAddChannel final
{
public:
	uint8                                         ChannelToAdd;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_ServerAddChannel) == 0x000001, "Wrong alignment on PlayerVoiceChatActor_ServerAddChannel");
static_assert(sizeof(PlayerVoiceChatActor_ServerAddChannel) == 0x000001, "Wrong size on PlayerVoiceChatActor_ServerAddChannel");
static_assert(offsetof(PlayerVoiceChatActor_ServerAddChannel, ChannelToAdd) == 0x000000, "Member 'PlayerVoiceChatActor_ServerAddChannel::ChannelToAdd' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.ServerRemoveChannel
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoiceChatActor_ServerRemoveChannel final
{
public:
	uint8                                         ChannelToRemove;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_ServerRemoveChannel) == 0x000001, "Wrong alignment on PlayerVoiceChatActor_ServerRemoveChannel");
static_assert(sizeof(PlayerVoiceChatActor_ServerRemoveChannel) == 0x000001, "Wrong size on PlayerVoiceChatActor_ServerRemoveChannel");
static_assert(offsetof(PlayerVoiceChatActor_ServerRemoveChannel, ChannelToRemove) == 0x000000, "Member 'PlayerVoiceChatActor_ServerRemoveChannel::ChannelToRemove' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.ServerSetAllowUseGlobal
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoiceChatActor_ServerSetAllowUseGlobal final
{
public:
	bool                                          _allowUseGlobal;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_ServerSetAllowUseGlobal) == 0x000001, "Wrong alignment on PlayerVoiceChatActor_ServerSetAllowUseGlobal");
static_assert(sizeof(PlayerVoiceChatActor_ServerSetAllowUseGlobal) == 0x000001, "Wrong size on PlayerVoiceChatActor_ServerSetAllowUseGlobal");
static_assert(offsetof(PlayerVoiceChatActor_ServerSetAllowUseGlobal, _allowUseGlobal) == 0x000000, "Member 'PlayerVoiceChatActor_ServerSetAllowUseGlobal::_allowUseGlobal' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.ServerSetAllowUseProximity
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoiceChatActor_ServerSetAllowUseProximity final
{
public:
	bool                                          _allowUseRange;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_ServerSetAllowUseProximity) == 0x000001, "Wrong alignment on PlayerVoiceChatActor_ServerSetAllowUseProximity");
static_assert(sizeof(PlayerVoiceChatActor_ServerSetAllowUseProximity) == 0x000001, "Wrong size on PlayerVoiceChatActor_ServerSetAllowUseProximity");
static_assert(offsetof(PlayerVoiceChatActor_ServerSetAllowUseProximity, _allowUseRange) == 0x000000, "Member 'PlayerVoiceChatActor_ServerSetAllowUseProximity::_allowUseRange' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.ServerSetAttenuation
// 0x0018 (0x0018 - 0x0000)
struct PlayerVoiceChatActor_ServerSetAttenuation final
{
public:
	bool                                          EnableAttenuation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToAttenuationAsset;                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_ServerSetAttenuation) == 0x000008, "Wrong alignment on PlayerVoiceChatActor_ServerSetAttenuation");
static_assert(sizeof(PlayerVoiceChatActor_ServerSetAttenuation) == 0x000018, "Wrong size on PlayerVoiceChatActor_ServerSetAttenuation");
static_assert(offsetof(PlayerVoiceChatActor_ServerSetAttenuation, EnableAttenuation) == 0x000000, "Member 'PlayerVoiceChatActor_ServerSetAttenuation::EnableAttenuation' has a wrong offset!");
static_assert(offsetof(PlayerVoiceChatActor_ServerSetAttenuation, _pathToAttenuationAsset) == 0x000008, "Member 'PlayerVoiceChatActor_ServerSetAttenuation::_pathToAttenuationAsset' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.ServerSetMaxProximityRange
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoiceChatActor_ServerSetMaxProximityRange final
{
public:
	float                                         _maxProximityRange;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_ServerSetMaxProximityRange) == 0x000004, "Wrong alignment on PlayerVoiceChatActor_ServerSetMaxProximityRange");
static_assert(sizeof(PlayerVoiceChatActor_ServerSetMaxProximityRange) == 0x000004, "Wrong size on PlayerVoiceChatActor_ServerSetMaxProximityRange");
static_assert(offsetof(PlayerVoiceChatActor_ServerSetMaxProximityRange, _maxProximityRange) == 0x000000, "Member 'PlayerVoiceChatActor_ServerSetMaxProximityRange::_maxProximityRange' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.ServerSetSourceChainEffect
// 0x0018 (0x0018 - 0x0000)
struct PlayerVoiceChatActor_ServerSetSourceChainEffect final
{
public:
	bool                                          EnableSourceChainEffect;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToSourceChainEffect;                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_ServerSetSourceChainEffect) == 0x000008, "Wrong alignment on PlayerVoiceChatActor_ServerSetSourceChainEffect");
static_assert(sizeof(PlayerVoiceChatActor_ServerSetSourceChainEffect) == 0x000018, "Wrong size on PlayerVoiceChatActor_ServerSetSourceChainEffect");
static_assert(offsetof(PlayerVoiceChatActor_ServerSetSourceChainEffect, EnableSourceChainEffect) == 0x000000, "Member 'PlayerVoiceChatActor_ServerSetSourceChainEffect::EnableSourceChainEffect' has a wrong offset!");
static_assert(offsetof(PlayerVoiceChatActor_ServerSetSourceChainEffect, _pathToSourceChainEffect) == 0x000008, "Member 'PlayerVoiceChatActor_ServerSetSourceChainEffect::_pathToSourceChainEffect' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.setLocallyMultiplierVolume
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoiceChatActor_SetLocallyMultiplierVolume final
{
public:
	float                                         MultiplierVolume;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_SetLocallyMultiplierVolume) == 0x000004, "Wrong alignment on PlayerVoiceChatActor_SetLocallyMultiplierVolume");
static_assert(sizeof(PlayerVoiceChatActor_SetLocallyMultiplierVolume) == 0x000004, "Wrong size on PlayerVoiceChatActor_SetLocallyMultiplierVolume");
static_assert(offsetof(PlayerVoiceChatActor_SetLocallyMultiplierVolume, MultiplierVolume) == 0x000000, "Member 'PlayerVoiceChatActor_SetLocallyMultiplierVolume::MultiplierVolume' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.setOverrideLocallyAttenuationPath
// 0x0018 (0x0018 - 0x0000)
struct PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath final
{
public:
	bool                                          EnableAttenuation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideLocally;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToAttenuationAsset;                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath) == 0x000008, "Wrong alignment on PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath");
static_assert(sizeof(PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath) == 0x000018, "Wrong size on PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath");
static_assert(offsetof(PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath, EnableAttenuation) == 0x000000, "Member 'PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath::EnableAttenuation' has a wrong offset!");
static_assert(offsetof(PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath, OverrideLocally) == 0x000001, "Member 'PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath::OverrideLocally' has a wrong offset!");
static_assert(offsetof(PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath, _pathToAttenuationAsset) == 0x000008, "Member 'PlayerVoiceChatActor_SetOverrideLocallyAttenuationPath::_pathToAttenuationAsset' has a wrong offset!");

// Function UniversalVoiceChatPro.PlayerVoiceChatActor.setOverrideLocallySourceEffectPath
// 0x0018 (0x0018 - 0x0000)
struct PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath final
{
public:
	bool                                          EnableSourceEffect;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideLocally;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToSourceEffectAsset;                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath) == 0x000008, "Wrong alignment on PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath");
static_assert(sizeof(PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath) == 0x000018, "Wrong size on PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath");
static_assert(offsetof(PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath, EnableSourceEffect) == 0x000000, "Member 'PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath::EnableSourceEffect' has a wrong offset!");
static_assert(offsetof(PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath, OverrideLocally) == 0x000001, "Member 'PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath::OverrideLocally' has a wrong offset!");
static_assert(offsetof(PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath, _pathToSourceEffectAsset) == 0x000008, "Member 'PlayerVoiceChatActor_SetOverrideLocallySourceEffectPath::_pathToSourceEffectAsset' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.IsMyPlayerVoiceChatActorReady
// 0x0001 (0x0001 - 0x0000)
struct UniversalVoiceChat_IsMyPlayerVoiceChatActorReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_IsMyPlayerVoiceChatActorReady) == 0x000001, "Wrong alignment on UniversalVoiceChat_IsMyPlayerVoiceChatActorReady");
static_assert(sizeof(UniversalVoiceChat_IsMyPlayerVoiceChatActorReady) == 0x000001, "Wrong size on UniversalVoiceChat_IsMyPlayerVoiceChatActorReady");
static_assert(offsetof(UniversalVoiceChat_IsMyPlayerVoiceChatActorReady, ReturnValue) == 0x000000, "Member 'UniversalVoiceChat_IsMyPlayerVoiceChatActorReady::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.RegisterCallbackDeleteVoiceChatActor
// 0x0010 (0x0010 - 0x0000)
struct UniversalVoiceChat_RegisterCallbackDeleteVoiceChatActor final
{
public:
	TDelegate<void(class APlayerVoiceChatActor* VoiceChatActor)> Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_RegisterCallbackDeleteVoiceChatActor) == 0x000004, "Wrong alignment on UniversalVoiceChat_RegisterCallbackDeleteVoiceChatActor");
static_assert(sizeof(UniversalVoiceChat_RegisterCallbackDeleteVoiceChatActor) == 0x000010, "Wrong size on UniversalVoiceChat_RegisterCallbackDeleteVoiceChatActor");
static_assert(offsetof(UniversalVoiceChat_RegisterCallbackDeleteVoiceChatActor, Delegate) == 0x000000, "Member 'UniversalVoiceChat_RegisterCallbackDeleteVoiceChatActor::Delegate' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.RegisterCallbackMyVoiceChatActorReady
// 0x0010 (0x0010 - 0x0000)
struct UniversalVoiceChat_RegisterCallbackMyVoiceChatActorReady final
{
public:
	TDelegate<void(class APlayerVoiceChatActor* VoiceChatActor)> Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_RegisterCallbackMyVoiceChatActorReady) == 0x000004, "Wrong alignment on UniversalVoiceChat_RegisterCallbackMyVoiceChatActorReady");
static_assert(sizeof(UniversalVoiceChat_RegisterCallbackMyVoiceChatActorReady) == 0x000010, "Wrong size on UniversalVoiceChat_RegisterCallbackMyVoiceChatActorReady");
static_assert(offsetof(UniversalVoiceChat_RegisterCallbackMyVoiceChatActorReady, Delegate) == 0x000000, "Member 'UniversalVoiceChat_RegisterCallbackMyVoiceChatActorReady::Delegate' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.RegisterCallbackNewVoiceChatActor
// 0x0010 (0x0010 - 0x0000)
struct UniversalVoiceChat_RegisterCallbackNewVoiceChatActor final
{
public:
	TDelegate<void(class APlayerVoiceChatActor* VoiceChatActor)> Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_RegisterCallbackNewVoiceChatActor) == 0x000004, "Wrong alignment on UniversalVoiceChat_RegisterCallbackNewVoiceChatActor");
static_assert(sizeof(UniversalVoiceChat_RegisterCallbackNewVoiceChatActor) == 0x000010, "Wrong size on UniversalVoiceChat_RegisterCallbackNewVoiceChatActor");
static_assert(offsetof(UniversalVoiceChat_RegisterCallbackNewVoiceChatActor, Delegate) == 0x000000, "Member 'UniversalVoiceChat_RegisterCallbackNewVoiceChatActor::Delegate' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatAddChannel
// 0x0002 (0x0002 - 0x0000)
struct UniversalVoiceChat_VoiceChatAddChannel final
{
public:
	uint8                                         ChannelToAdd;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatAddChannel) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatAddChannel");
static_assert(sizeof(UniversalVoiceChat_VoiceChatAddChannel) == 0x000002, "Wrong size on UniversalVoiceChat_VoiceChatAddChannel");
static_assert(offsetof(UniversalVoiceChat_VoiceChatAddChannel, ChannelToAdd) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatAddChannel::ChannelToAdd' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatAddChannel, ReturnValue) == 0x000001, "Member 'UniversalVoiceChat_VoiceChatAddChannel::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatCheckRegisteredToChannel
// 0x0002 (0x0002 - 0x0000)
struct UniversalVoiceChat_VoiceChatCheckRegisteredToChannel final
{
public:
	uint8                                         ChannelToCheck;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatCheckRegisteredToChannel) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatCheckRegisteredToChannel");
static_assert(sizeof(UniversalVoiceChat_VoiceChatCheckRegisteredToChannel) == 0x000002, "Wrong size on UniversalVoiceChat_VoiceChatCheckRegisteredToChannel");
static_assert(offsetof(UniversalVoiceChat_VoiceChatCheckRegisteredToChannel, ChannelToCheck) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatCheckRegisteredToChannel::ChannelToCheck' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatCheckRegisteredToChannel, ReturnValue) == 0x000001, "Member 'UniversalVoiceChat_VoiceChatCheckRegisteredToChannel::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatEnableShouldHearMyOwnVoice
// 0x0002 (0x0002 - 0x0000)
struct UniversalVoiceChat_VoiceChatEnableShouldHearMyOwnVoice final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatEnableShouldHearMyOwnVoice) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatEnableShouldHearMyOwnVoice");
static_assert(sizeof(UniversalVoiceChat_VoiceChatEnableShouldHearMyOwnVoice) == 0x000002, "Wrong size on UniversalVoiceChat_VoiceChatEnableShouldHearMyOwnVoice");
static_assert(offsetof(UniversalVoiceChat_VoiceChatEnableShouldHearMyOwnVoice, Enable) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatEnableShouldHearMyOwnVoice::Enable' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatEnableShouldHearMyOwnVoice, ReturnValue) == 0x000001, "Member 'UniversalVoiceChat_VoiceChatEnableShouldHearMyOwnVoice::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatGetActorFromPlayerState
// 0x0018 (0x0018 - 0x0000)
struct UniversalVoiceChat_VoiceChatGetActorFromPlayerState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           FromPlayerState;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerVoiceChatActor*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatGetActorFromPlayerState) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatGetActorFromPlayerState");
static_assert(sizeof(UniversalVoiceChat_VoiceChatGetActorFromPlayerState) == 0x000018, "Wrong size on UniversalVoiceChat_VoiceChatGetActorFromPlayerState");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetActorFromPlayerState, WorldContextObject) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatGetActorFromPlayerState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetActorFromPlayerState, FromPlayerState) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatGetActorFromPlayerState::FromPlayerState' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetActorFromPlayerState, ReturnValue) == 0x000010, "Member 'UniversalVoiceChat_VoiceChatGetActorFromPlayerState::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatGetAudioDevicesList
// 0x0010 (0x0010 - 0x0000)
struct UniversalVoiceChat_VoiceChatGetAudioDevicesList final
{
public:
	TArray<class FString>                         OutDevices;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatGetAudioDevicesList) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatGetAudioDevicesList");
static_assert(sizeof(UniversalVoiceChat_VoiceChatGetAudioDevicesList) == 0x000010, "Wrong size on UniversalVoiceChat_VoiceChatGetAudioDevicesList");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetAudioDevicesList, OutDevices) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatGetAudioDevicesList::OutDevices' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState
// 0x0018 (0x0018 - 0x0000)
struct UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           FromPlayerState;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState");
static_assert(sizeof(UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState) == 0x000018, "Wrong size on UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState, WorldContextObject) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState, FromPlayerState) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState::FromPlayerState' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState, ReturnValue) == 0x000010, "Member 'UniversalVoiceChat_VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatGetMuteAllPlayers
// 0x0001 (0x0001 - 0x0000)
struct UniversalVoiceChat_VoiceChatGetMuteAllPlayers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatGetMuteAllPlayers) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatGetMuteAllPlayers");
static_assert(sizeof(UniversalVoiceChat_VoiceChatGetMuteAllPlayers) == 0x000001, "Wrong size on UniversalVoiceChat_VoiceChatGetMuteAllPlayers");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetMuteAllPlayers, ReturnValue) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatGetMuteAllPlayers::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatGetMyLocalPlayerVoiceChat
// 0x0008 (0x0008 - 0x0000)
struct UniversalVoiceChat_VoiceChatGetMyLocalPlayerVoiceChat final
{
public:
	class APlayerVoiceChatActor*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatGetMyLocalPlayerVoiceChat) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatGetMyLocalPlayerVoiceChat");
static_assert(sizeof(UniversalVoiceChat_VoiceChatGetMyLocalPlayerVoiceChat) == 0x000008, "Wrong size on UniversalVoiceChat_VoiceChatGetMyLocalPlayerVoiceChat");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetMyLocalPlayerVoiceChat, ReturnValue) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatGetMyLocalPlayerVoiceChat::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatHasMicrophonePermission
// 0x0001 (0x0001 - 0x0000)
struct UniversalVoiceChat_VoiceChatHasMicrophonePermission final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatHasMicrophonePermission) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatHasMicrophonePermission");
static_assert(sizeof(UniversalVoiceChat_VoiceChatHasMicrophonePermission) == 0x000001, "Wrong size on UniversalVoiceChat_VoiceChatHasMicrophonePermission");
static_assert(offsetof(UniversalVoiceChat_VoiceChatHasMicrophonePermission, ReturnValue) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatHasMicrophonePermission::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatInitAudioVoiceChatQuality
// 0x0008 (0x0008 - 0x0000)
struct UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality final
{
public:
	int32                                         _sampleRate;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpusFramePerSec                              _opusFramePerSec;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality) == 0x000004, "Wrong alignment on UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality");
static_assert(sizeof(UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality) == 0x000008, "Wrong size on UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality");
static_assert(offsetof(UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality, _sampleRate) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality::_sampleRate' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality, _opusFramePerSec) == 0x000004, "Member 'UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality::_opusFramePerSec' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality, ReturnValue) == 0x000005, "Member 'UniversalVoiceChat_VoiceChatInitAudioVoiceChatQuality::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatIsSpeaking
// 0x0001 (0x0001 - 0x0000)
struct UniversalVoiceChat_VoiceChatIsSpeaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatIsSpeaking) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatIsSpeaking");
static_assert(sizeof(UniversalVoiceChat_VoiceChatIsSpeaking) == 0x000001, "Wrong size on UniversalVoiceChat_VoiceChatIsSpeaking");
static_assert(offsetof(UniversalVoiceChat_VoiceChatIsSpeaking, ReturnValue) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatIsSpeaking::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatLocalIsMutedSomeone
// 0x0018 (0x0018 - 0x0000)
struct UniversalVoiceChat_VoiceChatLocalIsMutedSomeone final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerToCheckMute;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatLocalIsMutedSomeone) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatLocalIsMutedSomeone");
static_assert(sizeof(UniversalVoiceChat_VoiceChatLocalIsMutedSomeone) == 0x000018, "Wrong size on UniversalVoiceChat_VoiceChatLocalIsMutedSomeone");
static_assert(offsetof(UniversalVoiceChat_VoiceChatLocalIsMutedSomeone, WorldContextObject) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatLocalIsMutedSomeone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatLocalIsMutedSomeone, PlayerToCheckMute) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatLocalIsMutedSomeone::PlayerToCheckMute' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatLocalIsMutedSomeone, ReturnValue) == 0x000010, "Member 'UniversalVoiceChat_VoiceChatLocalIsMutedSomeone::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatLocalMuteSomeone
// 0x0018 (0x0018 - 0x0000)
struct UniversalVoiceChat_VoiceChatLocalMuteSomeone final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerToMute;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldMute;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatLocalMuteSomeone) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatLocalMuteSomeone");
static_assert(sizeof(UniversalVoiceChat_VoiceChatLocalMuteSomeone) == 0x000018, "Wrong size on UniversalVoiceChat_VoiceChatLocalMuteSomeone");
static_assert(offsetof(UniversalVoiceChat_VoiceChatLocalMuteSomeone, WorldContextObject) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatLocalMuteSomeone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatLocalMuteSomeone, PlayerToMute) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatLocalMuteSomeone::PlayerToMute' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatLocalMuteSomeone, ShouldMute) == 0x000010, "Member 'UniversalVoiceChat_VoiceChatLocalMuteSomeone::ShouldMute' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatRemoveChannel
// 0x0002 (0x0002 - 0x0000)
struct UniversalVoiceChat_VoiceChatRemoveChannel final
{
public:
	uint8                                         ChannelToRemove;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatRemoveChannel) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatRemoveChannel");
static_assert(sizeof(UniversalVoiceChat_VoiceChatRemoveChannel) == 0x000002, "Wrong size on UniversalVoiceChat_VoiceChatRemoveChannel");
static_assert(offsetof(UniversalVoiceChat_VoiceChatRemoveChannel, ChannelToRemove) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatRemoveChannel::ChannelToRemove' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatRemoveChannel, ReturnValue) == 0x000001, "Member 'UniversalVoiceChat_VoiceChatRemoveChannel::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetAttenuationPath
// 0x0020 (0x0020 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetAttenuationPath final
{
public:
	bool                                          EnableAttenuation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _attenuationPath;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetAttenuationPath) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatSetAttenuationPath");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetAttenuationPath) == 0x000020, "Wrong size on UniversalVoiceChat_VoiceChatSetAttenuationPath");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetAttenuationPath, EnableAttenuation) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetAttenuationPath::EnableAttenuation' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetAttenuationPath, _attenuationPath) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatSetAttenuationPath::_attenuationPath' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetAttenuationPath, ReturnValue) == 0x000018, "Member 'UniversalVoiceChat_VoiceChatSetAttenuationPath::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetDefaultTickRateUpdateLocation
// 0x0004 (0x0004 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetDefaultTickRateUpdateLocation final
{
public:
	float                                         TickRate;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetDefaultTickRateUpdateLocation) == 0x000004, "Wrong alignment on UniversalVoiceChat_VoiceChatSetDefaultTickRateUpdateLocation");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetDefaultTickRateUpdateLocation) == 0x000004, "Wrong size on UniversalVoiceChat_VoiceChatSetDefaultTickRateUpdateLocation");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetDefaultTickRateUpdateLocation, TickRate) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetDefaultTickRateUpdateLocation::TickRate' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetGlobalVolume
// 0x0004 (0x0004 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetGlobalVolume final
{
public:
	float                                         GlobalVolume;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetGlobalVolume) == 0x000004, "Wrong alignment on UniversalVoiceChat_VoiceChatSetGlobalVolume");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetGlobalVolume) == 0x000004, "Wrong size on UniversalVoiceChat_VoiceChatSetGlobalVolume");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetGlobalVolume, GlobalVolume) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetGlobalVolume::GlobalVolume' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetHardwareAudioInput
// 0x0010 (0x0010 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetHardwareAudioInput final
{
public:
	class FString                                 AudioInputDeviceName;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetHardwareAudioInput) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatSetHardwareAudioInput");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetHardwareAudioInput) == 0x000010, "Wrong size on UniversalVoiceChat_VoiceChatSetHardwareAudioInput");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetHardwareAudioInput, AudioInputDeviceName) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetHardwareAudioInput::AudioInputDeviceName' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetMicrophoneVolume
// 0x0008 (0x0008 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetMicrophoneVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetMicrophoneVolume) == 0x000004, "Wrong alignment on UniversalVoiceChat_VoiceChatSetMicrophoneVolume");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetMicrophoneVolume) == 0x000008, "Wrong size on UniversalVoiceChat_VoiceChatSetMicrophoneVolume");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetMicrophoneVolume, Volume) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetMicrophoneVolume::Volume' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetMicrophoneVolume, ReturnValue) == 0x000004, "Member 'UniversalVoiceChat_VoiceChatSetMicrophoneVolume::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetMuteAllPlayers
// 0x0001 (0x0001 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetMuteAllPlayers final
{
public:
	bool                                          _muteAll;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetMuteAllPlayers) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatSetMuteAllPlayers");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetMuteAllPlayers) == 0x000001, "Wrong size on UniversalVoiceChat_VoiceChatSetMuteAllPlayers");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetMuteAllPlayers, _muteAll) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetMuteAllPlayers::_muteAll' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetPlayerName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetPlayerName) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatSetPlayerName");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetPlayerName) == 0x000018, "Wrong size on UniversalVoiceChat_VoiceChatSetPlayerName");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetPlayerName, Name_0) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetPlayerName::Name_0' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetPlayerName, ReturnValue) == 0x000010, "Member 'UniversalVoiceChat_VoiceChatSetPlayerName::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetRawMicrophoneGain
// 0x0004 (0x0004 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetRawMicrophoneGain final
{
public:
	float                                         Gain;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetRawMicrophoneGain) == 0x000004, "Wrong alignment on UniversalVoiceChat_VoiceChatSetRawMicrophoneGain");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetRawMicrophoneGain) == 0x000004, "Wrong size on UniversalVoiceChat_VoiceChatSetRawMicrophoneGain");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetRawMicrophoneGain, Gain) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetRawMicrophoneGain::Gain' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetSourceChainEffectPath
// 0x0020 (0x0020 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetSourceChainEffectPath final
{
public:
	bool                                          EnableSourceChainEffect;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToSourceChainEffectAsset;                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetSourceChainEffectPath) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatSetSourceChainEffectPath");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetSourceChainEffectPath) == 0x000020, "Wrong size on UniversalVoiceChat_VoiceChatSetSourceChainEffectPath");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSourceChainEffectPath, EnableSourceChainEffect) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetSourceChainEffectPath::EnableSourceChainEffect' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSourceChainEffectPath, _pathToSourceChainEffectAsset) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatSetSourceChainEffectPath::_pathToSourceChainEffectAsset' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSourceChainEffectPath, ReturnValue) == 0x000018, "Member 'UniversalVoiceChat_VoiceChatSetSourceChainEffectPath::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetThresholdSendData
// 0x0004 (0x0004 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetThresholdSendData final
{
public:
	float                                         ThresholdSendData;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetThresholdSendData) == 0x000004, "Wrong alignment on UniversalVoiceChat_VoiceChatSetThresholdSendData");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetThresholdSendData) == 0x000004, "Wrong size on UniversalVoiceChat_VoiceChatSetThresholdSendData");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetThresholdSendData, ThresholdSendData) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetThresholdSendData::ThresholdSendData' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatStartSpeak
// 0x000C (0x000C - 0x0000)
struct UniversalVoiceChat_VoiceChatStartSpeak final
{
public:
	bool                                          _shouldHearMyOwnVoice;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGlobal;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RadioChannel;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseProximity;                                      // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxProximityRange;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatStartSpeak) == 0x000004, "Wrong alignment on UniversalVoiceChat_VoiceChatStartSpeak");
static_assert(sizeof(UniversalVoiceChat_VoiceChatStartSpeak) == 0x00000C, "Wrong size on UniversalVoiceChat_VoiceChatStartSpeak");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeak, _shouldHearMyOwnVoice) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatStartSpeak::_shouldHearMyOwnVoice' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeak, IsGlobal) == 0x000001, "Member 'UniversalVoiceChat_VoiceChatStartSpeak::IsGlobal' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeak, RadioChannel) == 0x000002, "Member 'UniversalVoiceChat_VoiceChatStartSpeak::RadioChannel' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeak, UseProximity) == 0x000003, "Member 'UniversalVoiceChat_VoiceChatStartSpeak::UseProximity' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeak, MaxProximityRange) == 0x000004, "Member 'UniversalVoiceChat_VoiceChatStartSpeak::MaxProximityRange' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeak, ReturnValue) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatStartSpeak::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatStartSpeakTeamArray
// 0x0028 (0x0028 - 0x0000)
struct UniversalVoiceChat_VoiceChatStartSpeakTeamArray final
{
public:
	bool                                          _shouldHearMyOwnVoice;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGlobal;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 RadioChannel;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseProximity;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxProximityRange;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatStartSpeakTeamArray) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatStartSpeakTeamArray");
static_assert(sizeof(UniversalVoiceChat_VoiceChatStartSpeakTeamArray) == 0x000028, "Wrong size on UniversalVoiceChat_VoiceChatStartSpeakTeamArray");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeakTeamArray, _shouldHearMyOwnVoice) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatStartSpeakTeamArray::_shouldHearMyOwnVoice' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeakTeamArray, IsGlobal) == 0x000001, "Member 'UniversalVoiceChat_VoiceChatStartSpeakTeamArray::IsGlobal' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeakTeamArray, RadioChannel) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatStartSpeakTeamArray::RadioChannel' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeakTeamArray, UseProximity) == 0x000018, "Member 'UniversalVoiceChat_VoiceChatStartSpeakTeamArray::UseProximity' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeakTeamArray, MaxProximityRange) == 0x00001C, "Member 'UniversalVoiceChat_VoiceChatStartSpeakTeamArray::MaxProximityRange' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStartSpeakTeamArray, ReturnValue) == 0x000020, "Member 'UniversalVoiceChat_VoiceChatStartSpeakTeamArray::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatStopSpeak
// 0x0001 (0x0001 - 0x0000)
struct UniversalVoiceChat_VoiceChatStopSpeak final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatStopSpeak) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatStopSpeak");
static_assert(sizeof(UniversalVoiceChat_VoiceChatStopSpeak) == 0x000001, "Wrong size on UniversalVoiceChat_VoiceChatStopSpeak");
static_assert(offsetof(UniversalVoiceChat_VoiceChatStopSpeak, ReturnValue) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatStopSpeak::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatUseAndroidCommunicationMode
// 0x0001 (0x0001 - 0x0000)
struct UniversalVoiceChat_VoiceChatUseAndroidCommunicationMode final
{
public:
	bool                                          Use;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatUseAndroidCommunicationMode) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatUseAndroidCommunicationMode");
static_assert(sizeof(UniversalVoiceChat_VoiceChatUseAndroidCommunicationMode) == 0x000001, "Wrong size on UniversalVoiceChat_VoiceChatUseAndroidCommunicationMode");
static_assert(offsetof(UniversalVoiceChat_VoiceChatUseAndroidCommunicationMode, Use) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatUseAndroidCommunicationMode::Use' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatWasInitAudioVoiceChatQuality
// 0x0001 (0x0001 - 0x0000)
struct UniversalVoiceChat_VoiceChatWasInitAudioVoiceChatQuality final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatWasInitAudioVoiceChatQuality) == 0x000001, "Wrong alignment on UniversalVoiceChat_VoiceChatWasInitAudioVoiceChatQuality");
static_assert(sizeof(UniversalVoiceChat_VoiceChatWasInitAudioVoiceChatQuality) == 0x000001, "Wrong size on UniversalVoiceChat_VoiceChatWasInitAudioVoiceChatQuality");
static_assert(offsetof(UniversalVoiceChat_VoiceChatWasInitAudioVoiceChatQuality, ReturnValue) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatWasInitAudioVoiceChatQuality::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatGetSomeoneLocallyMultiplierVolume
// 0x0018 (0x0018 - 0x0000)
struct UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerToOverride;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume");
static_assert(sizeof(UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume) == 0x000018, "Wrong size on UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume, WorldContextObject) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume, PlayerToOverride) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume::PlayerToOverride' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume, ReturnValue) == 0x000010, "Member 'UniversalVoiceChat_VoiceChatGetSomeoneLocallyMultiplierVolume::ReturnValue' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetSomeoneLocallyMultiplierVolume
// 0x0018 (0x0018 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplierVolume;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           PlayerToOverride;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume) == 0x000018, "Wrong size on UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume, WorldContextObject) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume, MultiplierVolume) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume::MultiplierVolume' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume, PlayerToOverride) == 0x000010, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneLocallyMultiplierVolume::PlayerToOverride' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetSomeoneOverrideLocallyAttenuationPath
// 0x0028 (0x0028 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAttenuation;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideLocally;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToAttenuationAsset;                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerToOverride;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath) == 0x000028, "Wrong size on UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath, WorldContextObject) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath, EnableAttenuation) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath::EnableAttenuation' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath, OverrideLocally) == 0x000009, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath::OverrideLocally' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath, _pathToAttenuationAsset) == 0x000010, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath::_pathToAttenuationAsset' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath, PlayerToOverride) == 0x000020, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallyAttenuationPath::PlayerToOverride' has a wrong offset!");

// Function UniversalVoiceChatPro.UniversalVoiceChat.VoiceChatSetSomeoneOverrideLocallySourceEffectPath
// 0x0028 (0x0028 - 0x0000)
struct UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSourceEffect;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideLocally;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _pathToSourceEffectAsset;                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerToOverride;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath) == 0x000008, "Wrong alignment on UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath");
static_assert(sizeof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath) == 0x000028, "Wrong size on UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath, WorldContextObject) == 0x000000, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath, EnableSourceEffect) == 0x000008, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath::EnableSourceEffect' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath, OverrideLocally) == 0x000009, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath::OverrideLocally' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath, _pathToSourceEffectAsset) == 0x000010, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath::_pathToSourceEffectAsset' has a wrong offset!");
static_assert(offsetof(UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath, PlayerToOverride) == 0x000020, "Member 'UniversalVoiceChat_VoiceChatSetSomeoneOverrideLocallySourceEffectPath::PlayerToOverride' has a wrong offset!");

}

