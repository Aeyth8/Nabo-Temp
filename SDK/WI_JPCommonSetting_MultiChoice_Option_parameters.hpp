#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_JPCommonSetting_MultiChoice_Option

#include "Basic.hpp"


namespace SDK::Params
{

// Function WI_JPCommonSetting_MultiChoice_Option.WI_JPCommonSetting_MultiChoice_Option_C.ExecuteUbergraph_WI_JPCommonSetting_MultiChoice_Option
// 0x0008 (0x0008 - 0x0000)
struct WI_JPCommonSetting_MultiChoice_Option_C_ExecuteUbergraph_WI_JPCommonSetting_MultiChoice_Option final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_JPCommonSetting_MultiChoice_Option_C_ExecuteUbergraph_WI_JPCommonSetting_MultiChoice_Option) == 0x000004, "Wrong alignment on WI_JPCommonSetting_MultiChoice_Option_C_ExecuteUbergraph_WI_JPCommonSetting_MultiChoice_Option");
static_assert(sizeof(WI_JPCommonSetting_MultiChoice_Option_C_ExecuteUbergraph_WI_JPCommonSetting_MultiChoice_Option) == 0x000008, "Wrong size on WI_JPCommonSetting_MultiChoice_Option_C_ExecuteUbergraph_WI_JPCommonSetting_MultiChoice_Option");
static_assert(offsetof(WI_JPCommonSetting_MultiChoice_Option_C_ExecuteUbergraph_WI_JPCommonSetting_MultiChoice_Option, EntryPoint) == 0x000000, "Member 'WI_JPCommonSetting_MultiChoice_Option_C_ExecuteUbergraph_WI_JPCommonSetting_MultiChoice_Option::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_JPCommonSetting_MultiChoice_Option_C_ExecuteUbergraph_WI_JPCommonSetting_MultiChoice_Option, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WI_JPCommonSetting_MultiChoice_Option_C_ExecuteUbergraph_WI_JPCommonSetting_MultiChoice_Option::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WI_JPCommonSetting_MultiChoice_Option.WI_JPCommonSetting_MultiChoice_Option_C.GetValue
// 0x0001 (0x0001 - 0x0000)
struct WI_JPCommonSetting_MultiChoice_Option_C_GetValue final
{
public:
	bool                                          Checked;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_JPCommonSetting_MultiChoice_Option_C_GetValue) == 0x000001, "Wrong alignment on WI_JPCommonSetting_MultiChoice_Option_C_GetValue");
static_assert(sizeof(WI_JPCommonSetting_MultiChoice_Option_C_GetValue) == 0x000001, "Wrong size on WI_JPCommonSetting_MultiChoice_Option_C_GetValue");
static_assert(offsetof(WI_JPCommonSetting_MultiChoice_Option_C_GetValue, Checked) == 0x000000, "Member 'WI_JPCommonSetting_MultiChoice_Option_C_GetValue::Checked' has a wrong offset!");

// Function WI_JPCommonSetting_MultiChoice_Option.WI_JPCommonSetting_MultiChoice_Option_C.OnChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct WI_JPCommonSetting_MultiChoice_Option_C_OnChanged__DelegateSignature final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_JPCommonSetting_MultiChoice_Option_C_OnChanged__DelegateSignature) == 0x000004, "Wrong alignment on WI_JPCommonSetting_MultiChoice_Option_C_OnChanged__DelegateSignature");
static_assert(sizeof(WI_JPCommonSetting_MultiChoice_Option_C_OnChanged__DelegateSignature) == 0x000004, "Wrong size on WI_JPCommonSetting_MultiChoice_Option_C_OnChanged__DelegateSignature");
static_assert(offsetof(WI_JPCommonSetting_MultiChoice_Option_C_OnChanged__DelegateSignature, InIndex) == 0x000000, "Member 'WI_JPCommonSetting_MultiChoice_Option_C_OnChanged__DelegateSignature::InIndex' has a wrong offset!");

// Function WI_JPCommonSetting_MultiChoice_Option.WI_JPCommonSetting_MultiChoice_Option_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WI_JPCommonSetting_MultiChoice_Option_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_JPCommonSetting_MultiChoice_Option_C_PreConstruct) == 0x000001, "Wrong alignment on WI_JPCommonSetting_MultiChoice_Option_C_PreConstruct");
static_assert(sizeof(WI_JPCommonSetting_MultiChoice_Option_C_PreConstruct) == 0x000001, "Wrong size on WI_JPCommonSetting_MultiChoice_Option_C_PreConstruct");
static_assert(offsetof(WI_JPCommonSetting_MultiChoice_Option_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WI_JPCommonSetting_MultiChoice_Option_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WI_JPCommonSetting_MultiChoice_Option.WI_JPCommonSetting_MultiChoice_Option_C.SetValue
// 0x0001 (0x0001 - 0x0000)
struct WI_JPCommonSetting_MultiChoice_Option_C_SetValue final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_JPCommonSetting_MultiChoice_Option_C_SetValue) == 0x000001, "Wrong alignment on WI_JPCommonSetting_MultiChoice_Option_C_SetValue");
static_assert(sizeof(WI_JPCommonSetting_MultiChoice_Option_C_SetValue) == 0x000001, "Wrong size on WI_JPCommonSetting_MultiChoice_Option_C_SetValue");
static_assert(offsetof(WI_JPCommonSetting_MultiChoice_Option_C_SetValue, InValue) == 0x000000, "Member 'WI_JPCommonSetting_MultiChoice_Option_C_SetValue::InValue' has a wrong offset!");

}

