#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameModeJP_MatchBP

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JP_structs.hpp"
#include "Engine_structs.hpp"
#include "E_TimeOfDay_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.CheckFlowerObjectiveLimit
// 0x0010 (0x0010 - 0x0000)
struct GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit final
{
public:
	class UObject*                                Objective;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CanCreateObjective;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit");
static_assert(sizeof(GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit) == 0x000010, "Wrong size on GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit");
static_assert(offsetof(GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit, Objective) == 0x000000, "Member 'GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit::Objective' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit, CanCreateObjective) == 0x000008, "Member 'GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit::CanCreateObjective' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000009, "Member 'GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit, CallFunc_Less_IntInt_ReturnValue) == 0x00000A, "Member 'GameModeJP_MatchBP_C_CheckFlowerObjectiveLimit::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.Create Objective
// 0x0068 (0x0068 - 0x0000)
struct GameModeJP_MatchBP_C_Create_Objective final
{
public:
	class UObjectiveCollection*                   ObjectiveCollection;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObjectiveDefinition*                   ObjectiveToCreate;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UObjectiveDefinition*>           TempObjectives;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UObjectiveDefinition*>           CallFunc_GetObjectives_ReturnValue;                // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObjectiveDefinition*                   CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckFlowerObjectiveLimit_CanCreateObjective; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObjectiveDefinition*                   CallFunc_Array_Random_OutItem;                     // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_Create_Objective) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_Create_Objective");
static_assert(sizeof(GameModeJP_MatchBP_C_Create_Objective) == 0x000068, "Wrong size on GameModeJP_MatchBP_C_Create_Objective");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, ObjectiveCollection) == 0x000000, "Member 'GameModeJP_MatchBP_C_Create_Objective::ObjectiveCollection' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, ObjectiveToCreate) == 0x000008, "Member 'GameModeJP_MatchBP_C_Create_Objective::ObjectiveToCreate' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, TempObjectives) == 0x000010, "Member 'GameModeJP_MatchBP_C_Create_Objective::TempObjectives' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, CallFunc_GetObjectives_ReturnValue) == 0x000020, "Member 'GameModeJP_MatchBP_C_Create_Objective::CallFunc_GetObjectives_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, Temp_int_Array_Index_Variable) == 0x000030, "Member 'GameModeJP_MatchBP_C_Create_Objective::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'GameModeJP_MatchBP_C_Create_Objective::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, CallFunc_Array_Get_Item) == 0x000038, "Member 'GameModeJP_MatchBP_C_Create_Objective::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, CallFunc_CheckFlowerObjectiveLimit_CanCreateObjective) == 0x000040, "Member 'GameModeJP_MatchBP_C_Create_Objective::CallFunc_CheckFlowerObjectiveLimit_CanCreateObjective' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'GameModeJP_MatchBP_C_Create_Objective::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'GameModeJP_MatchBP_C_Create_Objective::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'GameModeJP_MatchBP_C_Create_Objective::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000050, "Member 'GameModeJP_MatchBP_C_Create_Objective::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, CallFunc_Array_Random_OutItem) == 0x000058, "Member 'GameModeJP_MatchBP_C_Create_Objective::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, CallFunc_Array_Random_OutIndex) == 0x000060, "Member 'GameModeJP_MatchBP_C_Create_Objective::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_Create_Objective, CallFunc_Array_Add_ReturnValue) == 0x000064, "Member 'GameModeJP_MatchBP_C_Create_Objective::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.CreateKillReward
// 0x0078 (0x0078 - 0x0000)
struct GameModeJP_MatchBP_C_CreateKillReward final
{
public:
	class APlayerStateJP*                         Killer_PlayerState;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKillReward                            KillReward;                                        // 0x0008(0x0018)(Parm, OutParm, NoDestructor)
	struct FKillReward                            K2Node_MakeStruct_KillReward;                      // 0x0020(0x0018)(NoDestructor)
	class UPerkManagerComponent*                  CallFunc_GetPerkManagerComponentFromPlayerState_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPerkAction*>                    CallFunc_K2_GetAllActionsOfType_ReturnValue;       // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKillReward                            K2Node_MakeStruct_KillReward_1;                    // 0x0060(0x0018)(NoDestructor)
};
static_assert(alignof(GameModeJP_MatchBP_C_CreateKillReward) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_CreateKillReward");
static_assert(sizeof(GameModeJP_MatchBP_C_CreateKillReward) == 0x000078, "Wrong size on GameModeJP_MatchBP_C_CreateKillReward");
static_assert(offsetof(GameModeJP_MatchBP_C_CreateKillReward, Killer_PlayerState) == 0x000000, "Member 'GameModeJP_MatchBP_C_CreateKillReward::Killer_PlayerState' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_CreateKillReward, KillReward) == 0x000008, "Member 'GameModeJP_MatchBP_C_CreateKillReward::KillReward' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_CreateKillReward, K2Node_MakeStruct_KillReward) == 0x000020, "Member 'GameModeJP_MatchBP_C_CreateKillReward::K2Node_MakeStruct_KillReward' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_CreateKillReward, CallFunc_GetPerkManagerComponentFromPlayerState_ReturnValue) == 0x000038, "Member 'GameModeJP_MatchBP_C_CreateKillReward::CallFunc_GetPerkManagerComponentFromPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_CreateKillReward, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'GameModeJP_MatchBP_C_CreateKillReward::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_CreateKillReward, CallFunc_K2_GetAllActionsOfType_ReturnValue) == 0x000048, "Member 'GameModeJP_MatchBP_C_CreateKillReward::CallFunc_K2_GetAllActionsOfType_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_CreateKillReward, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000058, "Member 'GameModeJP_MatchBP_C_CreateKillReward::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_CreateKillReward, K2Node_MakeStruct_KillReward_1) == 0x000060, "Member 'GameModeJP_MatchBP_C_CreateKillReward::K2Node_MakeStruct_KillReward_1' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.DebugPrintKill
// 0x05E8 (0x05E8 - 0x0000)
struct GameModeJP_MatchBP_C_DebugPrintKill final
{
public:
	struct FKillGameplayMessage                   KillGameplayMessage;                               // 0x0000(0x03D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   KillString;                                        // 0x03D8(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCombatParticipant                     CallFunc_Array_Get_Item;                           // 0x03F0(0x0060)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0450(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0498(0x0048)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x04E8(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0530(0x0010)(ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0548(0x0010)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0560(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0570(0x0048)(HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x05B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x05C8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x05D8(0x0010)()
};
static_assert(alignof(GameModeJP_MatchBP_C_DebugPrintKill) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_DebugPrintKill");
static_assert(sizeof(GameModeJP_MatchBP_C_DebugPrintKill) == 0x0005E8, "Wrong size on GameModeJP_MatchBP_C_DebugPrintKill");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, KillGameplayMessage) == 0x000000, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::KillGameplayMessage' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, KillString) == 0x0003D8, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::KillString' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, Temp_int_Array_Index_Variable) == 0x0003E8, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, CallFunc_Array_Get_Item) == 0x0003F0, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, K2Node_MakeStruct_FormatArgumentData) == 0x000450, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, K2Node_MakeStruct_FormatArgumentData_1) == 0x000498, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, CallFunc_Array_Length_ReturnValue) == 0x0004E0, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, Temp_int_Loop_Counter_Variable) == 0x0004E4, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, K2Node_MakeStruct_FormatArgumentData_2) == 0x0004E8, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, K2Node_MakeArray_Array) == 0x000530, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, CallFunc_Less_IntInt_ReturnValue) == 0x000540, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, CallFunc_Format_ReturnValue) == 0x000548, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, CallFunc_Add_IntInt_ReturnValue) == 0x000558, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, CallFunc_Get_ClassLog_Name_name) == 0x000560, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, K2Node_MakeStruct_FormatArgumentData_3) == 0x000570, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, CallFunc_Conv_TextToString_ReturnValue) == 0x0005B8, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, K2Node_MakeArray_Array_1) == 0x0005C8, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_DebugPrintKill, CallFunc_Format_ReturnValue_1) == 0x0005D8, "Member 'GameModeJP_MatchBP_C_DebugPrintKill::CallFunc_Format_ReturnValue_1' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.ExecuteUbergraph_GameModeJP_MatchBP
// 0x0AA0 (0x0AA0 - 0x0000)
struct GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEconomySubsystem*                      CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAsyncAction_ListenForGameplayMessage*  K2Node_CustomEvent_ProxyObject;                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_ActualChannel;                  // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UAsyncAction_ListenForGameplayMessage* ProxyObject, const struct FGameplayTag& ActualChannel)> K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKillGameplayMessage                   Temp_struct_Variable;                              // 0x0030(0x03D8)()
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x0408(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAsyncAction_ListenForGameplayMessage*  Temp_object_Variable;                              // 0x0410(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAsyncAction_ListenForGameplayMessage*  CallFunc_ListenForGameplayMessages_ReturnValue;    // 0x0418(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEconomySubsystem*                      CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x0428(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomySubsystem*                      CallFunc_GetWorldSubsystem_ReturnValue_2;          // 0x0430(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(E_TimeOfDay TimeOfDay)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x043C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FTeam& EliminatedTeam)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x045C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x047C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKillGameplayMessage                   Temp_struct_Variable_2;                            // 0x0498(0x03D8)()
	bool                                          CallFunc_GetPayload_ReturnValue;                   // 0x0870(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_871[0x7];                                      // 0x0871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_ExitingController;                    // 0x0878(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalPlayerController_ReturnValue;      // 0x0880(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0881(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_882[0x6];                                      // 0x0882(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_NewPlayer;                            // 0x0888(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchStarted_ReturnValue;              // 0x0890(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_891[0x7];                                      // 0x0891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeam                                  K2Node_CustomEvent_EliminatedTeam;                 // 0x0898(0x0038)(ConstParm, NoDestructor)
	class FName                                   K2Node_Event_NewState;                             // 0x08D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerStateJP*>                 CallFunc_GetPlayersOfTeam_ReturnValue;             // 0x08D8(0x0010)(ReferenceParm)
	class ADowntimeManager_C*                     CallFunc_GetActorOfClass_ReturnValue;              // 0x08E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x08F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x08F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x08F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F6[0x2];                                      // 0x08F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x08F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TimeOfDay                                   K2Node_CustomEvent_TimeOfDay;                      // 0x08FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FD[0x3];                                      // 0x08FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateJP*                         CallFunc_Array_Get_Item;                           // 0x0900(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0908(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_909[0x7];                                      // 0x0909(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPawn_ReturnValue;                      // 0x0910(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0918(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0920(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0921(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetObjectivesPerSpawn_ReturnValue;        // 0x0922(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_923[0x1];                                      // 0x0923(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0924(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0928(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_929[0x7];                                      // 0x0929(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0930(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item_1;                         // 0x0938(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0940(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0944(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_945[0x3];                                      // 0x0945(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_ResidentCharacter_C*>        CallFunc_GetAllActorsOfClass_OutActors;            // 0x0948(0x0010)(ReferenceParm)
	class UObjectiveCollection*                   Temp_object_Variable_1;                            // 0x0958(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                CallFunc_Array_Get_Item_2;                         // 0x0960(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0968(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RemoveActiveEffectsWithTags_ReturnValue;  // 0x096C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0970(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_971[0x7];                                      // 0x0971(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue;             // 0x0978(0x0010)()
	bool                                          CallFunc_HasMatchEnded_ReturnValue;                // 0x0988(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMatchInProgress_ReturnValue;            // 0x0989(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98A[0x6];                                      // 0x098A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0990(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLevelScaling_ReturnValue;              // 0x0998(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x09A0(0x0010)()
	class APlayerState*                           CallFunc_Array_Get_Item_3;                         // 0x09B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue; // 0x09B8(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x09C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C4[0xC];                                      // 0x09C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransformFromAxes_ReturnValue;        // 0x09D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0A30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A31[0x7];                                      // 0x0A31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerControllerJP*>            CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x0A38(0x0010)(ReferenceParm)
	class APlayerControllerJP*                    CallFunc_Array_Get_Item_4;                         // 0x0A48(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0A50(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0A60(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerStateJP_MatchBP_C*               K2Node_DynamicCast_AsPlayer_State_JP_Match_BP;     // 0x0A68(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0A70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A71[0x7];                                      // 0x0A71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerVoiceChatActorJP_C*           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0A78(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0A80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0A84(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A85[0x3];                                      // 0x0A85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0A88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A8C[0x4];                                      // 0x0A8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObjectiveCollection*                   K2Node_Select_Default;                             // 0x0A90(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast; // 0x0A98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP) == 0x000010, "Wrong alignment on GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP");
static_assert(sizeof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP) == 0x000AA0, "Wrong size on GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, EntryPoint) == 0x000000, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_CustomEvent_ProxyObject) == 0x000010, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_CustomEvent_ProxyObject' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_CustomEvent_ActualChannel) == 0x000018, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_CustomEvent_ActualChannel' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_struct_Variable) == 0x000030, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_struct_Variable_1) == 0x000408, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_object_Variable) == 0x000410, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_ListenForGameplayMessages_ReturnValue) == 0x000418, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_ListenForGameplayMessages_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_IsValid_ReturnValue) == 0x000420, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x000428, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetWorldSubsystem_ReturnValue_2) == 0x000430, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetWorldSubsystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Variable) == 0x000438, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_CreateDelegate_OutputDelegate_1) == 0x00043C, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Add_IntInt_ReturnValue) == 0x00044C, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Loop_Counter_Variable) == 0x000450, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Add_IntInt_ReturnValue_1) == 0x000454, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Array_Index_Variable) == 0x000458, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_CreateDelegate_OutputDelegate_2) == 0x00045C, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Loop_Counter_Variable_1) == 0x00046C, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Array_Index_Variable_1) == 0x000470, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Add_IntInt_ReturnValue_2) == 0x000474, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Loop_Counter_Variable_2) == 0x000478, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Add_IntInt_ReturnValue_3) == 0x00047C, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Array_Index_Variable_2) == 0x000480, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Loop_Counter_Variable_3) == 0x000484, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Loop_Counter_Variable_4) == 0x000488, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Add_IntInt_ReturnValue_4) == 0x00048C, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Add_IntInt_ReturnValue_5) == 0x000490, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Array_Index_Variable_3) == 0x000494, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_struct_Variable_2) == 0x000498, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetPayload_ReturnValue) == 0x000870, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetPayload_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_Event_ExitingController) == 0x000878, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_Event_ExitingController' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_IsLocalPlayerController_ReturnValue) == 0x000880, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_IsLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_IsValid_ReturnValue_1) == 0x000881, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_Event_NewPlayer) == 0x000888, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_Event_NewPlayer' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_HasMatchStarted_ReturnValue) == 0x000890, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_HasMatchStarted_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_CustomEvent_EliminatedTeam) == 0x000898, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_CustomEvent_EliminatedTeam' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_Event_NewState) == 0x0008D0, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_Event_NewState' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetPlayersOfTeam_ReturnValue) == 0x0008D8, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetPlayersOfTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetActorOfClass_ReturnValue) == 0x0008E8, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Array_Length_ReturnValue) == 0x0008F0, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Less_IntInt_ReturnValue) == 0x0008F4, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0008F5, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Array_Index_Variable_4) == 0x0008F8, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_CustomEvent_TimeOfDay) == 0x0008FC, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_CustomEvent_TimeOfDay' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Array_Get_Item) == 0x000900, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_SwitchEnum_CmpSuccess) == 0x000908, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetPawn_ReturnValue) == 0x000910, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000918, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_DynamicCast_bSuccess) == 0x000920, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000921, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetObjectivesPerSpawn_ReturnValue) == 0x000922, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetObjectivesPerSpawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000924, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000928, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetGameState_ReturnValue) == 0x000930, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Array_Get_Item_1) == 0x000938, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Array_Length_ReturnValue_1) == 0x000940, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Less_IntInt_ReturnValue_1) == 0x000944, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetAllActorsOfClass_OutActors) == 0x000948, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_object_Variable_1) == 0x000958, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Array_Get_Item_2) == 0x000960, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Array_Length_ReturnValue_2) == 0x000968, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_RemoveActiveEffectsWithTags_ReturnValue) == 0x00096C, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_RemoveActiveEffectsWithTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Less_IntInt_ReturnValue_2) == 0x000970, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_MakeOutgoingSpec_ReturnValue) == 0x000978, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_MakeOutgoingSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_HasMatchEnded_ReturnValue) == 0x000988, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_HasMatchEnded_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_IsMatchInProgress_ReturnValue) == 0x000989, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_IsMatchInProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetGameState_ReturnValue_1) == 0x000990, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetLevelScaling_ReturnValue) == 0x000998, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetLevelScaling_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x0009A0, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Array_Get_Item_3) == 0x0009B0, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue) == 0x0009B8, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Array_Length_ReturnValue_3) == 0x0009C0, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_MakeTransformFromAxes_ReturnValue) == 0x0009D0, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_MakeTransformFromAxes_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Less_IntInt_ReturnValue_3) == 0x000A30, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000A38, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Array_Get_Item_4) == 0x000A48, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_GetPathName_ReturnValue) == 0x000A50, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_GetPathName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000A60, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_DynamicCast_AsPlayer_State_JP_Match_BP) == 0x000A68, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_DynamicCast_AsPlayer_State_JP_Match_BP' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_DynamicCast_bSuccess_1) == 0x000A70, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_FinishSpawningActor_ReturnValue) == 0x000A78, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Array_Length_ReturnValue_4) == 0x000A80, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_Less_IntInt_ReturnValue_4) == 0x000A84, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, Temp_int_Variable_1) == 0x000A88, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, K2Node_Select_Default) == 0x000A90, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP, CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast) == 0x000A98, "Member 'GameModeJP_MatchBP_C_ExecuteUbergraph_GameModeJP_MatchBP::CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.FindCorrespondingTask
// 0x0018 (0x0018 - 0x0000)
struct GameModeJP_MatchBP_C_FindCorrespondingTask final
{
public:
	uint8                                         ObjectiveType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 NewParam;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_FindCorrespondingTask) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_FindCorrespondingTask");
static_assert(sizeof(GameModeJP_MatchBP_C_FindCorrespondingTask) == 0x000018, "Wrong size on GameModeJP_MatchBP_C_FindCorrespondingTask");
static_assert(offsetof(GameModeJP_MatchBP_C_FindCorrespondingTask, ObjectiveType) == 0x000000, "Member 'GameModeJP_MatchBP_C_FindCorrespondingTask::ObjectiveType' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_FindCorrespondingTask, NewParam) == 0x000008, "Member 'GameModeJP_MatchBP_C_FindCorrespondingTask::NewParam' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_FindCorrespondingTask, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'GameModeJP_MatchBP_C_FindCorrespondingTask::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.Get Messenger
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_MatchBP_C_Get_Messenger final
{
public:
	class AMessengerManager_C*                    Messenger_0;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_Get_Messenger) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_Get_Messenger");
static_assert(sizeof(GameModeJP_MatchBP_C_Get_Messenger) == 0x000008, "Wrong size on GameModeJP_MatchBP_C_Get_Messenger");
static_assert(offsetof(GameModeJP_MatchBP_C_Get_Messenger, Messenger_0) == 0x000000, "Member 'GameModeJP_MatchBP_C_Get_Messenger::Messenger_0' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.GetEnemyHouseEssentialKills
// 0x0050 (0x0050 - 0x0000)
struct GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills final
{
public:
	const class APlayerStateJP*                   PlayerStateJP;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class Abp_groundskeeper_C*                    CallFunc_Get_Groundskeeper_from_Team_Groundskeeper; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAmountOfAliveHouseEssentials_Return;   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class Abp_groundskeeper_C*                    CallFunc_Get_Groundskeeper_from_Team_Groundskeeper_1; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAmountOfAliveHouseEssentials_Return_1; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills");
static_assert(sizeof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills) == 0x000050, "Wrong size on GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, PlayerStateJP) == 0x000000, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::PlayerStateJP' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, ReturnValue) == 0x000008, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_Get_ClassLog_Name_name) == 0x000010, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_GetTeamID_ReturnValue) == 0x000020, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_Get_Groundskeeper_from_Team_Groundskeeper) == 0x000028, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_Get_Groundskeeper_from_Team_Groundskeeper' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_GetAmountOfAliveHouseEssentials_Return) == 0x000034, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_GetAmountOfAliveHouseEssentials_Return' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_Get_Groundskeeper_from_Team_Groundskeeper_1) == 0x000038, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_Get_Groundskeeper_from_Team_Groundskeeper_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_Subtract_IntInt_ReturnValue) == 0x000040, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_IsValid_ReturnValue_2) == 0x000044, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_GetAmountOfAliveHouseEssentials_Return_1) == 0x000048, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_GetAmountOfAliveHouseEssentials_Return_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00004C, "Member 'GameModeJP_MatchBP_C_GetEnemyHouseEssentialKills::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.GetFriendlyResourcesCollected
// 0x0010 (0x0010 - 0x0000)
struct GameModeJP_MatchBP_C_GetFriendlyResourcesCollected final
{
public:
	const class APlayerStateJP*                   PlayerStateJP;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_GetFriendlyResourcesCollected) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_GetFriendlyResourcesCollected");
static_assert(sizeof(GameModeJP_MatchBP_C_GetFriendlyResourcesCollected) == 0x000010, "Wrong size on GameModeJP_MatchBP_C_GetFriendlyResourcesCollected");
static_assert(offsetof(GameModeJP_MatchBP_C_GetFriendlyResourcesCollected, PlayerStateJP) == 0x000000, "Member 'GameModeJP_MatchBP_C_GetFriendlyResourcesCollected::PlayerStateJP' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetFriendlyResourcesCollected, ReturnValue) == 0x000008, "Member 'GameModeJP_MatchBP_C_GetFriendlyResourcesCollected::ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.GetRemainingAmountToSpawn
// 0x0030 (0x0030 - 0x0000)
struct GameModeJP_MatchBP_C_GetRemainingAmountToSpawn final
{
public:
	uint8                                         ObjectiveType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_TweakableData_C*                    CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_TweakableData_C*                    CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data_1; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_TweakableData_C*                    CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data_2; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_TweakableData_C*                    CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data_3; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_GetRemainingAmountToSpawn) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_GetRemainingAmountToSpawn");
static_assert(sizeof(GameModeJP_MatchBP_C_GetRemainingAmountToSpawn) == 0x000030, "Wrong size on GameModeJP_MatchBP_C_GetRemainingAmountToSpawn");
static_assert(offsetof(GameModeJP_MatchBP_C_GetRemainingAmountToSpawn, ObjectiveType) == 0x000000, "Member 'GameModeJP_MatchBP_C_GetRemainingAmountToSpawn::ObjectiveType' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetRemainingAmountToSpawn, Amount) == 0x000004, "Member 'GameModeJP_MatchBP_C_GetRemainingAmountToSpawn::Amount' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetRemainingAmountToSpawn, CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data) == 0x000008, "Member 'GameModeJP_MatchBP_C_GetRemainingAmountToSpawn::CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetRemainingAmountToSpawn, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'GameModeJP_MatchBP_C_GetRemainingAmountToSpawn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetRemainingAmountToSpawn, CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data_1) == 0x000018, "Member 'GameModeJP_MatchBP_C_GetRemainingAmountToSpawn::CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetRemainingAmountToSpawn, CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data_2) == 0x000020, "Member 'GameModeJP_MatchBP_C_GetRemainingAmountToSpawn::CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetRemainingAmountToSpawn, CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data_3) == 0x000028, "Member 'GameModeJP_MatchBP_C_GetRemainingAmountToSpawn::CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data_3' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.GetTeamHouseEssentialLost
// 0x0040 (0x0040 - 0x0000)
struct GameModeJP_MatchBP_C_GetTeamHouseEssentialLost final
{
public:
	const class APlayerStateJP*                   PlayerStateJP;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class Abp_groundskeeper_C*                    CallFunc_Get_Groundskeeper_from_Team_Groundskeeper; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAmountOfAliveHouseEssentials_Return;   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_GetTeamHouseEssentialLost");
static_assert(sizeof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost) == 0x000040, "Wrong size on GameModeJP_MatchBP_C_GetTeamHouseEssentialLost");
static_assert(offsetof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost, PlayerStateJP) == 0x000000, "Member 'GameModeJP_MatchBP_C_GetTeamHouseEssentialLost::PlayerStateJP' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost, ReturnValue) == 0x000008, "Member 'GameModeJP_MatchBP_C_GetTeamHouseEssentialLost::ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'GameModeJP_MatchBP_C_GetTeamHouseEssentialLost::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost, CallFunc_Get_ClassLog_Name_name) == 0x000010, "Member 'GameModeJP_MatchBP_C_GetTeamHouseEssentialLost::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost, CallFunc_GetTeamID_ReturnValue) == 0x000020, "Member 'GameModeJP_MatchBP_C_GetTeamHouseEssentialLost::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost, CallFunc_Get_Groundskeeper_from_Team_Groundskeeper) == 0x000028, "Member 'GameModeJP_MatchBP_C_GetTeamHouseEssentialLost::CallFunc_Get_Groundskeeper_from_Team_Groundskeeper' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'GameModeJP_MatchBP_C_GetTeamHouseEssentialLost::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost, CallFunc_GetAmountOfAliveHouseEssentials_Return) == 0x000034, "Member 'GameModeJP_MatchBP_C_GetTeamHouseEssentialLost::CallFunc_GetAmountOfAliveHouseEssentials_Return' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetTeamHouseEssentialLost, CallFunc_Subtract_IntInt_ReturnValue) == 0x000038, "Member 'GameModeJP_MatchBP_C_GetTeamHouseEssentialLost::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.GrantInitialResources
// 0x0138 (0x0138 - 0x0000)
struct GameModeJP_MatchBP_C_GrantInitialResources final
{
public:
	class UEconomyDefinition*                     Temp_object_Variable;                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Temp_object_Variable_1;                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Temp_object_Variable_2;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Temp_object_Variable_3;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Temp_object_Variable_4;                            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Temp_object_Variable_5;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Temp_object_Variable_6;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Temp_object_Variable_7;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Temp_object_Variable_8;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Temp_object_Variable_9;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Temp_object_Variable_10;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomySubsystem*                      CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMatchConfigurationSubsystem*           CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FMatchConfiguration                    CallFunc_GetMatchConfiguration_ReturnValue;        // 0x0068(0x0058)(ConstParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTeam>                          CallFunc_GetTeams_ReturnValue;                     // 0x00D8(0x0010)(ReferenceParm)
	struct FTeam                                  CallFunc_Array_Get_Item;                           // 0x00E8(0x0038)(NoDestructor)
	class UEconomyDefinition*                     K2Node_Select_Default;                             // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_GrantInitialResources) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_GrantInitialResources");
static_assert(sizeof(GameModeJP_MatchBP_C_GrantInitialResources) == 0x000138, "Wrong size on GameModeJP_MatchBP_C_GrantInitialResources");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable) == 0x000000, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable_1) == 0x000008, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable_2) == 0x000010, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable_3) == 0x000018, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable_4) == 0x000020, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable_5) == 0x000028, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable_6) == 0x000030, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable_7) == 0x000038, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable_8) == 0x000040, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable_9) == 0x000048, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_object_Variable_10) == 0x000050, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000058, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000060, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, CallFunc_GetMatchConfiguration_ReturnValue) == 0x000068, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::CallFunc_GetMatchConfiguration_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_int_Array_Index_Variable) == 0x0000C0, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000C4, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_int_Loop_Counter_Variable) == 0x0000C8, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, CallFunc_Add_IntInt_ReturnValue) == 0x0000CC, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, Temp_int_Variable) == 0x0000D0, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, CallFunc_GetTeams_ReturnValue) == 0x0000D8, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::CallFunc_GetTeams_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, K2Node_Select_Default) == 0x000120, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, CallFunc_Array_Length_ReturnValue) == 0x000128, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00012C, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GrantInitialResources, CallFunc_Less_IntInt_ReturnValue) == 0x000130, "Member 'GameModeJP_MatchBP_C_GrantInitialResources::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.HandlePlayerKill
// 0x0400 (0x0400 - 0x0000)
struct GameModeJP_MatchBP_C_HandlePlayerKill final
{
public:
	struct FKillGameplayMessage                   Kill_Gameplay_Message;                             // 0x0000(0x03D8)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UEconomySubsystem*                      CallFunc_GetWorldSubsystem_ReturnValue;            // 0x03D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKillReward                            CallFunc_CreateKillReward_KillReward;              // 0x03E8(0x0018)(NoDestructor)
};
static_assert(alignof(GameModeJP_MatchBP_C_HandlePlayerKill) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_HandlePlayerKill");
static_assert(sizeof(GameModeJP_MatchBP_C_HandlePlayerKill) == 0x000400, "Wrong size on GameModeJP_MatchBP_C_HandlePlayerKill");
static_assert(offsetof(GameModeJP_MatchBP_C_HandlePlayerKill, Kill_Gameplay_Message) == 0x000000, "Member 'GameModeJP_MatchBP_C_HandlePlayerKill::Kill_Gameplay_Message' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_HandlePlayerKill, CallFunc_GetWorldSubsystem_ReturnValue) == 0x0003D8, "Member 'GameModeJP_MatchBP_C_HandlePlayerKill::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_HandlePlayerKill, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0003E0, "Member 'GameModeJP_MatchBP_C_HandlePlayerKill::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_HandlePlayerKill, CallFunc_CreateKillReward_KillReward) == 0x0003E8, "Member 'GameModeJP_MatchBP_C_HandlePlayerKill::CallFunc_CreateKillReward_KillReward' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.IncrementSpawnedFlowerObjectiveCount
// 0x0010 (0x0010 - 0x0000)
struct GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount final
{
public:
	class UObject*                                Objective;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount");
static_assert(sizeof(GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount) == 0x000010, "Wrong size on GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount");
static_assert(offsetof(GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount, Objective) == 0x000000, "Member 'GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount::Objective' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000008, "Member 'GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'GameModeJP_MatchBP_C_IncrementSpawnedFlowerObjectiveCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.IsTheKillerAPlayer
// 0x03E0 (0x03E0 - 0x0000)
struct GameModeJP_MatchBP_C_IsTheKillerAPlayer final
{
public:
	struct FKillGameplayMessage                   KillGameplayMessage;                               // 0x0000(0x03D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_IsTheKillerAPlayer) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_IsTheKillerAPlayer");
static_assert(sizeof(GameModeJP_MatchBP_C_IsTheKillerAPlayer) == 0x0003E0, "Wrong size on GameModeJP_MatchBP_C_IsTheKillerAPlayer");
static_assert(offsetof(GameModeJP_MatchBP_C_IsTheKillerAPlayer, KillGameplayMessage) == 0x000000, "Member 'GameModeJP_MatchBP_C_IsTheKillerAPlayer::KillGameplayMessage' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_IsTheKillerAPlayer, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x0003D8, "Member 'GameModeJP_MatchBP_C_IsTheKillerAPlayer::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.K2_OnLogout
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_MatchBP_C_K2_OnLogout final
{
public:
	class AController*                            ExitingController;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_K2_OnLogout) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_K2_OnLogout");
static_assert(sizeof(GameModeJP_MatchBP_C_K2_OnLogout) == 0x000008, "Wrong size on GameModeJP_MatchBP_C_K2_OnLogout");
static_assert(offsetof(GameModeJP_MatchBP_C_K2_OnLogout, ExitingController) == 0x000000, "Member 'GameModeJP_MatchBP_C_K2_OnLogout::ExitingController' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.K2_OnSetMatchState
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_MatchBP_C_K2_OnSetMatchState final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_K2_OnSetMatchState) == 0x000004, "Wrong alignment on GameModeJP_MatchBP_C_K2_OnSetMatchState");
static_assert(sizeof(GameModeJP_MatchBP_C_K2_OnSetMatchState) == 0x000008, "Wrong size on GameModeJP_MatchBP_C_K2_OnSetMatchState");
static_assert(offsetof(GameModeJP_MatchBP_C_K2_OnSetMatchState, NewState) == 0x000000, "Member 'GameModeJP_MatchBP_C_K2_OnSetMatchState::NewState' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.K2_PostLogin
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_MatchBP_C_K2_PostLogin final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_K2_PostLogin) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_K2_PostLogin");
static_assert(sizeof(GameModeJP_MatchBP_C_K2_PostLogin) == 0x000008, "Wrong size on GameModeJP_MatchBP_C_K2_PostLogin");
static_assert(offsetof(GameModeJP_MatchBP_C_K2_PostLogin, NewPlayer) == 0x000000, "Member 'GameModeJP_MatchBP_C_K2_PostLogin::NewPlayer' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.ManageKillOccurred
// 0x03D8 (0x03D8 - 0x0000)
struct GameModeJP_MatchBP_C_ManageKillOccurred final
{
public:
	struct FKillGameplayMessage                   Message;                                           // 0x0000(0x03D8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GameModeJP_MatchBP_C_ManageKillOccurred) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_ManageKillOccurred");
static_assert(sizeof(GameModeJP_MatchBP_C_ManageKillOccurred) == 0x0003D8, "Wrong size on GameModeJP_MatchBP_C_ManageKillOccurred");
static_assert(offsetof(GameModeJP_MatchBP_C_ManageKillOccurred, Message) == 0x000000, "Member 'GameModeJP_MatchBP_C_ManageKillOccurred::Message' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.MessageAllPlayersThatAPlayerLeft
// 0x0058 (0x0058 - 0x0000)
struct GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft final
{
public:
	class APlayerState*                           PlayerWhoLeft;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerController*>              CallFunc_GetAllActorsOfClass_OutActors;            // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_PlayerControllerMessage_C> K2Node_DynamicCast_AsI_Player_Controller_Message;  // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft");
static_assert(sizeof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft) == 0x000058, "Wrong size on GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, PlayerWhoLeft) == 0x000000, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::PlayerWhoLeft' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, Temp_int_Array_Index_Variable) == 0x000010, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, CallFunc_GetAllActorsOfClass_OutActors) == 0x000018, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, CallFunc_Array_Get_Item) == 0x000030, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, K2Node_DynamicCast_AsI_Player_Controller_Message) == 0x000040, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::K2Node_DynamicCast_AsI_Player_Controller_Message' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft, CallFunc_IsValid_ReturnValue) == 0x000051, "Member 'GameModeJP_MatchBP_C_MessageAllPlayersThatAPlayerLeft::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.MyChoosePlayerStart
// 0x00C0 (0x00C0 - 0x0000)
struct GameModeJP_MatchBP_C_MyChoosePlayerStart final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class FString                                 DebugStringGroundskeeperTeamIDs;                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerStateJP*                         K2Node_DynamicCast_AsPlayer_State_JP;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerStartPIE*>                CallFunc_GetAllActorsOfClass_OutActors;            // 0x0058(0x0010)(ReferenceParm)
	TArray<class APlayerStartJP_C*>               CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x0068(0x0010)(ReferenceParm)
	class APlayerStartPIE*                        CallFunc_Array_Get_Item;                           // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerStartJP_C*                       CallFunc_Array_Get_Item_1;                         // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerStartJP_C*                       CallFunc_Array_Get_Item_2;                         // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGroundsKeeper*                         CallFunc_GetGroundsKeeper_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue_1;                  // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F[0x1];                                       // 0x009F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_MyChoosePlayerStart) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_MyChoosePlayerStart");
static_assert(sizeof(GameModeJP_MatchBP_C_MyChoosePlayerStart) == 0x0000C0, "Wrong size on GameModeJP_MatchBP_C_MyChoosePlayerStart");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, Controller) == 0x000000, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::Controller' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, ReturnValue) == 0x000008, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, DebugStringGroundskeeperTeamIDs) == 0x000010, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::DebugStringGroundskeeperTeamIDs' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, Temp_int_Array_Index_Variable) == 0x000020, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, K2Node_DynamicCast_AsPlayer_State_JP) == 0x000028, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::K2Node_DynamicCast_AsPlayer_State_JP' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_GetTeamID_ReturnValue) == 0x000031, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, Temp_int_Loop_Counter_Variable_1) == 0x000040, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, Temp_int_Array_Index_Variable_1) == 0x000044, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, Temp_int_Loop_Counter_Variable_2) == 0x00004C, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Add_IntInt_ReturnValue_2) == 0x000050, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, Temp_int_Array_Index_Variable_2) == 0x000054, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_GetAllActorsOfClass_OutActors) == 0x000058, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000068, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Array_Get_Item) == 0x000078, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Array_Get_Item_1) == 0x000080, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Array_Get_Item_2) == 0x000088, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_GetGroundsKeeper_ReturnValue) == 0x000090, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_GetGroundsKeeper_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_IsValid_ReturnValue) == 0x00009C, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Less_IntInt_ReturnValue) == 0x00009D, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_GetTeamID_ReturnValue_1) == 0x00009E, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_GetTeamID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Array_Length_ReturnValue_1) == 0x0000A0, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000A4, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A5, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Array_Length_ReturnValue_2) == 0x0000A8, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000AC, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_MyChoosePlayerStart, CallFunc_Get_ClassLog_Name_name) == 0x0000B0, "Member 'GameModeJP_MatchBP_C_MyChoosePlayerStart::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.On_PlayerLoggedIn__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct GameModeJP_MatchBP_C_On_PlayerLoggedIn__DelegateSignature final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_On_PlayerLoggedIn__DelegateSignature) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_On_PlayerLoggedIn__DelegateSignature");
static_assert(sizeof(GameModeJP_MatchBP_C_On_PlayerLoggedIn__DelegateSignature) == 0x000008, "Wrong size on GameModeJP_MatchBP_C_On_PlayerLoggedIn__DelegateSignature");
static_assert(offsetof(GameModeJP_MatchBP_C_On_PlayerLoggedIn__DelegateSignature, PlayerController) == 0x000000, "Member 'GameModeJP_MatchBP_C_On_PlayerLoggedIn__DelegateSignature::PlayerController' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.On_PlayerLoggedOut__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct GameModeJP_MatchBP_C_On_PlayerLoggedOut__DelegateSignature final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            Controller;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_On_PlayerLoggedOut__DelegateSignature) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_On_PlayerLoggedOut__DelegateSignature");
static_assert(sizeof(GameModeJP_MatchBP_C_On_PlayerLoggedOut__DelegateSignature) == 0x000010, "Wrong size on GameModeJP_MatchBP_C_On_PlayerLoggedOut__DelegateSignature");
static_assert(offsetof(GameModeJP_MatchBP_C_On_PlayerLoggedOut__DelegateSignature, PlayerState) == 0x000000, "Member 'GameModeJP_MatchBP_C_On_PlayerLoggedOut__DelegateSignature::PlayerState' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_On_PlayerLoggedOut__DelegateSignature, Controller) == 0x000008, "Member 'GameModeJP_MatchBP_C_On_PlayerLoggedOut__DelegateSignature::Controller' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.OnMessageReceived_AE04CBC948416123264F5380E20D8CBA
// 0x0010 (0x0010 - 0x0000)
struct GameModeJP_MatchBP_C_OnMessageReceived_AE04CBC948416123264F5380E20D8CBA final
{
public:
	class UAsyncAction_ListenForGameplayMessage*  ProxyObject;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ActualChannel;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_OnMessageReceived_AE04CBC948416123264F5380E20D8CBA) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_OnMessageReceived_AE04CBC948416123264F5380E20D8CBA");
static_assert(sizeof(GameModeJP_MatchBP_C_OnMessageReceived_AE04CBC948416123264F5380E20D8CBA) == 0x000010, "Wrong size on GameModeJP_MatchBP_C_OnMessageReceived_AE04CBC948416123264F5380E20D8CBA");
static_assert(offsetof(GameModeJP_MatchBP_C_OnMessageReceived_AE04CBC948416123264F5380E20D8CBA, ProxyObject) == 0x000000, "Member 'GameModeJP_MatchBP_C_OnMessageReceived_AE04CBC948416123264F5380E20D8CBA::ProxyObject' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_OnMessageReceived_AE04CBC948416123264F5380E20D8CBA, ActualChannel) == 0x000008, "Member 'GameModeJP_MatchBP_C_OnMessageReceived_AE04CBC948416123264F5380E20D8CBA::ActualChannel' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.OnTimeOfDayChange
// 0x0001 (0x0001 - 0x0000)
struct GameModeJP_MatchBP_C_OnTimeOfDayChange final
{
public:
	E_TimeOfDay                                   TimeOfDay;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_OnTimeOfDayChange) == 0x000001, "Wrong alignment on GameModeJP_MatchBP_C_OnTimeOfDayChange");
static_assert(sizeof(GameModeJP_MatchBP_C_OnTimeOfDayChange) == 0x000001, "Wrong size on GameModeJP_MatchBP_C_OnTimeOfDayChange");
static_assert(offsetof(GameModeJP_MatchBP_C_OnTimeOfDayChange, TimeOfDay) == 0x000000, "Member 'GameModeJP_MatchBP_C_OnTimeOfDayChange::TimeOfDay' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.ReadyToStartMatch
// 0x0002 (0x0002 - 0x0000)
struct GameModeJP_MatchBP_C_ReadyToStartMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ReadyToStartMatch_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_ReadyToStartMatch) == 0x000001, "Wrong alignment on GameModeJP_MatchBP_C_ReadyToStartMatch");
static_assert(sizeof(GameModeJP_MatchBP_C_ReadyToStartMatch) == 0x000002, "Wrong size on GameModeJP_MatchBP_C_ReadyToStartMatch");
static_assert(offsetof(GameModeJP_MatchBP_C_ReadyToStartMatch, ReturnValue) == 0x000000, "Member 'GameModeJP_MatchBP_C_ReadyToStartMatch::ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_ReadyToStartMatch, CallFunc_ReadyToStartMatch_ReturnValue) == 0x000001, "Member 'GameModeJP_MatchBP_C_ReadyToStartMatch::CallFunc_ReadyToStartMatch_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.SendResourceCountToLateClient
// 0x0048 (0x0048 - 0x0000)
struct GameModeJP_MatchBP_C_SendResourceCountToLateClient final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEconomySubsystem*                      CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerControllerJP_MatchBP_C*          K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FResourceData                          CallFunc_GetPlayerEconomy_Money;                   // 0x001C(0x0008)(NoDestructor)
	struct FResourceData                          CallFunc_GetPlayerEconomy_Wood;                    // 0x0024(0x0008)(NoDestructor)
	struct FResourceData                          CallFunc_GetPlayerEconomy_Perfectness;             // 0x002C(0x0008)(NoDestructor)
	struct FResourceData                          CallFunc_GetPlayerEconomy_PassiveIncome;           // 0x0034(0x0008)(NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Owner_SetResourceForlateJoin_ResourceAmount_ImplicitCast; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_SendResourceCountToLateClient) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_SendResourceCountToLateClient");
static_assert(sizeof(GameModeJP_MatchBP_C_SendResourceCountToLateClient) == 0x000048, "Wrong size on GameModeJP_MatchBP_C_SendResourceCountToLateClient");
static_assert(offsetof(GameModeJP_MatchBP_C_SendResourceCountToLateClient, PlayerController) == 0x000000, "Member 'GameModeJP_MatchBP_C_SendResourceCountToLateClient::PlayerController' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SendResourceCountToLateClient, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'GameModeJP_MatchBP_C_SendResourceCountToLateClient::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SendResourceCountToLateClient, K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP) == 0x000010, "Member 'GameModeJP_MatchBP_C_SendResourceCountToLateClient::K2Node_DynamicCast_AsPlayer_Controller_JP_Match_BP' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SendResourceCountToLateClient, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GameModeJP_MatchBP_C_SendResourceCountToLateClient::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SendResourceCountToLateClient, CallFunc_GetPlayerEconomy_Money) == 0x00001C, "Member 'GameModeJP_MatchBP_C_SendResourceCountToLateClient::CallFunc_GetPlayerEconomy_Money' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SendResourceCountToLateClient, CallFunc_GetPlayerEconomy_Wood) == 0x000024, "Member 'GameModeJP_MatchBP_C_SendResourceCountToLateClient::CallFunc_GetPlayerEconomy_Wood' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SendResourceCountToLateClient, CallFunc_GetPlayerEconomy_Perfectness) == 0x00002C, "Member 'GameModeJP_MatchBP_C_SendResourceCountToLateClient::CallFunc_GetPlayerEconomy_Perfectness' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SendResourceCountToLateClient, CallFunc_GetPlayerEconomy_PassiveIncome) == 0x000034, "Member 'GameModeJP_MatchBP_C_SendResourceCountToLateClient::CallFunc_GetPlayerEconomy_PassiveIncome' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SendResourceCountToLateClient, CallFunc_Owner_SetResourceForlateJoin_ResourceAmount_ImplicitCast) == 0x000040, "Member 'GameModeJP_MatchBP_C_SendResourceCountToLateClient::CallFunc_Owner_SetResourceForlateJoin_ResourceAmount_ImplicitCast' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.SpawnObjectives
// 0x0020 (0x0020 - 0x0000)
struct GameModeJP_MatchBP_C_SpawnObjectives final
{
public:
	class UObjectiveCollection*                   ObjectiveCollection;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetObjectivesPerSpawn_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_SpawnObjectives) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_SpawnObjectives");
static_assert(sizeof(GameModeJP_MatchBP_C_SpawnObjectives) == 0x000020, "Wrong size on GameModeJP_MatchBP_C_SpawnObjectives");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnObjectives, ObjectiveCollection) == 0x000000, "Member 'GameModeJP_MatchBP_C_SpawnObjectives::ObjectiveCollection' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnObjectives, CallFunc_GetObjectivesPerSpawn_ReturnValue) == 0x000008, "Member 'GameModeJP_MatchBP_C_SpawnObjectives::CallFunc_GetObjectivesPerSpawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnObjectives, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00000C, "Member 'GameModeJP_MatchBP_C_SpawnObjectives::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnObjectives, Temp_int_Variable) == 0x000010, "Member 'GameModeJP_MatchBP_C_SpawnObjectives::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnObjectives, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'GameModeJP_MatchBP_C_SpawnObjectives::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnObjectives, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000018, "Member 'GameModeJP_MatchBP_C_SpawnObjectives::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.SpawnVoiceActor
// 0x00B0 (0x00B0 - 0x0000)
struct GameModeJP_MatchBP_C_SpawnVoiceActor final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransformFromAxes_ReturnValue;        // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerStateJP_MatchBP_C*               K2Node_DynamicCast_AsPlayer_State_JP_Match_BP;     // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerVoiceChatActorJP_C*           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_SpawnVoiceActor) == 0x000010, "Wrong alignment on GameModeJP_MatchBP_C_SpawnVoiceActor");
static_assert(sizeof(GameModeJP_MatchBP_C_SpawnVoiceActor) == 0x0000B0, "Wrong size on GameModeJP_MatchBP_C_SpawnVoiceActor");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnVoiceActor, PlayerController) == 0x000000, "Member 'GameModeJP_MatchBP_C_SpawnVoiceActor::PlayerController' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnVoiceActor, CallFunc_MakeTransformFromAxes_ReturnValue) == 0x000010, "Member 'GameModeJP_MatchBP_C_SpawnVoiceActor::CallFunc_MakeTransformFromAxes_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnVoiceActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000070, "Member 'GameModeJP_MatchBP_C_SpawnVoiceActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnVoiceActor, K2Node_DynamicCast_AsPlayer_State_JP_Match_BP) == 0x000078, "Member 'GameModeJP_MatchBP_C_SpawnVoiceActor::K2Node_DynamicCast_AsPlayer_State_JP_Match_BP' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnVoiceActor, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'GameModeJP_MatchBP_C_SpawnVoiceActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnVoiceActor, CallFunc_FinishSpawningActor_ReturnValue) == 0x000088, "Member 'GameModeJP_MatchBP_C_SpawnVoiceActor::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnVoiceActor, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000090, "Member 'GameModeJP_MatchBP_C_SpawnVoiceActor::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_SpawnVoiceActor, CallFunc_GetPathName_ReturnValue) == 0x000098, "Member 'GameModeJP_MatchBP_C_SpawnVoiceActor::CallFunc_GetPathName_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.Team Eliminated
// 0x0038 (0x0038 - 0x0000)
struct GameModeJP_MatchBP_C_Team_Eliminated final
{
public:
	struct FTeam                                  EliminatedTeam;                                    // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(GameModeJP_MatchBP_C_Team_Eliminated) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_Team_Eliminated");
static_assert(sizeof(GameModeJP_MatchBP_C_Team_Eliminated) == 0x000038, "Wrong size on GameModeJP_MatchBP_C_Team_Eliminated");
static_assert(offsetof(GameModeJP_MatchBP_C_Team_Eliminated, EliminatedTeam) == 0x000000, "Member 'GameModeJP_MatchBP_C_Team_Eliminated::EliminatedTeam' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.GetLevelScaling
// 0x0048 (0x0048 - 0x0000)
struct GameModeJP_MatchBP_C_GetLevelScaling final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameState*                             K2Node_DynamicCast_AsGame_State;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_MakeTimespan_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMinutes_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_MathExpression_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MathExpression_ReturnValue_1;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_GetLevelScaling) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_GetLevelScaling");
static_assert(sizeof(GameModeJP_MatchBP_C_GetLevelScaling) == 0x000048, "Wrong size on GameModeJP_MatchBP_C_GetLevelScaling");
static_assert(offsetof(GameModeJP_MatchBP_C_GetLevelScaling, ReturnValue) == 0x000000, "Member 'GameModeJP_MatchBP_C_GetLevelScaling::ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetLevelScaling, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'GameModeJP_MatchBP_C_GetLevelScaling::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetLevelScaling, K2Node_DynamicCast_AsGame_State) == 0x000010, "Member 'GameModeJP_MatchBP_C_GetLevelScaling::K2Node_DynamicCast_AsGame_State' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetLevelScaling, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GameModeJP_MatchBP_C_GetLevelScaling::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetLevelScaling, CallFunc_MakeTimespan_ReturnValue) == 0x000020, "Member 'GameModeJP_MatchBP_C_GetLevelScaling::CallFunc_MakeTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetLevelScaling, CallFunc_GetMinutes_ReturnValue) == 0x000028, "Member 'GameModeJP_MatchBP_C_GetLevelScaling::CallFunc_GetMinutes_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetLevelScaling, K2Node_MathExpression_ReturnValue) == 0x00002C, "Member 'GameModeJP_MatchBP_C_GetLevelScaling::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetLevelScaling, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000030, "Member 'GameModeJP_MatchBP_C_GetLevelScaling::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetLevelScaling, K2Node_MathExpression_ReturnValue_1) == 0x000038, "Member 'GameModeJP_MatchBP_C_GetLevelScaling::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetLevelScaling, CallFunc_FClamp_ReturnValue) == 0x000040, "Member 'GameModeJP_MatchBP_C_GetLevelScaling::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function GameModeJP_MatchBP.GameModeJP_MatchBP_C.GetNumberOfObjectivesToCreate
// 0x0040 (0x0040 - 0x0000)
struct GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_TweakableData_C*                    CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetNumberOfActiveTeams_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_ByteToDouble_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_EvaluateRuntimeFloatCurve_ReturnValue;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_DoubleToInt64_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_Int64ToInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_EvaluateRuntimeFloatCurve_time_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToInt64_InDouble_ImplicitCast; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate) == 0x000008, "Wrong alignment on GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate");
static_assert(sizeof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate) == 0x000040, "Wrong size on GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate");
static_assert(offsetof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate, ReturnValue) == 0x000000, "Member 'GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate::ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate, CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data) == 0x000008, "Member 'GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate::CallFunc_Get_BP_Tweakable_Data_AsBP_Tweakable_Data' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate, CallFunc_GetNumberOfActiveTeams_ReturnValue) == 0x000010, "Member 'GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate::CallFunc_GetNumberOfActiveTeams_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate, CallFunc_Conv_ByteToDouble_ReturnValue) == 0x000018, "Member 'GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate::CallFunc_Conv_ByteToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate, CallFunc_EvaluateRuntimeFloatCurve_ReturnValue) == 0x000020, "Member 'GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate::CallFunc_EvaluateRuntimeFloatCurve_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate, CallFunc_Conv_DoubleToInt64_ReturnValue) == 0x000028, "Member 'GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate::CallFunc_Conv_DoubleToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate, CallFunc_Conv_Int64ToInt_ReturnValue) == 0x000030, "Member 'GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate::CallFunc_Conv_Int64ToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate, CallFunc_EvaluateRuntimeFloatCurve_time_ImplicitCast) == 0x000034, "Member 'GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate::CallFunc_EvaluateRuntimeFloatCurve_time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate, CallFunc_Conv_DoubleToInt64_InDouble_ImplicitCast) == 0x000038, "Member 'GameModeJP_MatchBP_C_GetNumberOfObjectivesToCreate::CallFunc_Conv_DoubleToInt64_InDouble_ImplicitCast' has a wrong offset!");

}

