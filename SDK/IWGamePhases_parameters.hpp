#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWGamePhases

#include "Basic.hpp"

#include "IWGamePhases_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function IWGamePhases.PhaseSubsystem.K2_StartPhase
// 0x0018 (0x0018 - 0x0000)
struct PhaseSubsystem_K2_StartPhase final
{
public:
	TSubclassOf<class UPhaseAbility>              Phase;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UPhaseAbility* Phase)>   PhaseEnded;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseSubsystem_K2_StartPhase) == 0x000008, "Wrong alignment on PhaseSubsystem_K2_StartPhase");
static_assert(sizeof(PhaseSubsystem_K2_StartPhase) == 0x000018, "Wrong size on PhaseSubsystem_K2_StartPhase");
static_assert(offsetof(PhaseSubsystem_K2_StartPhase, Phase) == 0x000000, "Member 'PhaseSubsystem_K2_StartPhase::Phase' has a wrong offset!");
static_assert(offsetof(PhaseSubsystem_K2_StartPhase, PhaseEnded) == 0x000008, "Member 'PhaseSubsystem_K2_StartPhase::PhaseEnded' has a wrong offset!");

// Function IWGamePhases.PhaseSubsystem.K2_WhenPhaseEnds
// 0x001C (0x001C - 0x0000)
struct PhaseSubsystem_K2_WhenPhaseEnds final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhaseTagMatchType                            MatchType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGameplayTag& PhaseTag)> WhenPhaseEnd;                                      // 0x000C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseSubsystem_K2_WhenPhaseEnds) == 0x000004, "Wrong alignment on PhaseSubsystem_K2_WhenPhaseEnds");
static_assert(sizeof(PhaseSubsystem_K2_WhenPhaseEnds) == 0x00001C, "Wrong size on PhaseSubsystem_K2_WhenPhaseEnds");
static_assert(offsetof(PhaseSubsystem_K2_WhenPhaseEnds, PhaseTag) == 0x000000, "Member 'PhaseSubsystem_K2_WhenPhaseEnds::PhaseTag' has a wrong offset!");
static_assert(offsetof(PhaseSubsystem_K2_WhenPhaseEnds, MatchType) == 0x000008, "Member 'PhaseSubsystem_K2_WhenPhaseEnds::MatchType' has a wrong offset!");
static_assert(offsetof(PhaseSubsystem_K2_WhenPhaseEnds, WhenPhaseEnd) == 0x00000C, "Member 'PhaseSubsystem_K2_WhenPhaseEnds::WhenPhaseEnd' has a wrong offset!");

// Function IWGamePhases.PhaseSubsystem.K2_WhenPhaseStartsOrIsActive
// 0x001C (0x001C - 0x0000)
struct PhaseSubsystem_K2_WhenPhaseStartsOrIsActive final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhaseTagMatchType                            MatchType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGameplayTag& PhaseTag)> WhenPhaseActive;                                   // 0x000C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseSubsystem_K2_WhenPhaseStartsOrIsActive) == 0x000004, "Wrong alignment on PhaseSubsystem_K2_WhenPhaseStartsOrIsActive");
static_assert(sizeof(PhaseSubsystem_K2_WhenPhaseStartsOrIsActive) == 0x00001C, "Wrong size on PhaseSubsystem_K2_WhenPhaseStartsOrIsActive");
static_assert(offsetof(PhaseSubsystem_K2_WhenPhaseStartsOrIsActive, PhaseTag) == 0x000000, "Member 'PhaseSubsystem_K2_WhenPhaseStartsOrIsActive::PhaseTag' has a wrong offset!");
static_assert(offsetof(PhaseSubsystem_K2_WhenPhaseStartsOrIsActive, MatchType) == 0x000008, "Member 'PhaseSubsystem_K2_WhenPhaseStartsOrIsActive::MatchType' has a wrong offset!");
static_assert(offsetof(PhaseSubsystem_K2_WhenPhaseStartsOrIsActive, WhenPhaseActive) == 0x00000C, "Member 'PhaseSubsystem_K2_WhenPhaseStartsOrIsActive::WhenPhaseActive' has a wrong offset!");

// Function IWGamePhases.PhaseSubsystem.IsPhaseActive
// 0x000C (0x000C - 0x0000)
struct PhaseSubsystem_IsPhaseActive final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhaseSubsystem_IsPhaseActive) == 0x000004, "Wrong alignment on PhaseSubsystem_IsPhaseActive");
static_assert(sizeof(PhaseSubsystem_IsPhaseActive) == 0x00000C, "Wrong size on PhaseSubsystem_IsPhaseActive");
static_assert(offsetof(PhaseSubsystem_IsPhaseActive, PhaseTag) == 0x000000, "Member 'PhaseSubsystem_IsPhaseActive::PhaseTag' has a wrong offset!");
static_assert(offsetof(PhaseSubsystem_IsPhaseActive, ReturnValue) == 0x000008, "Member 'PhaseSubsystem_IsPhaseActive::ReturnValue' has a wrong offset!");

}

