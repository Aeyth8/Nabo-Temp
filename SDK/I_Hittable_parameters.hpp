#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Hittable

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_ImpactEffect_structs.hpp"
#include "E_MaterialTypes_structs.hpp"


namespace SDK::Params
{

// Function I_Hittable.I_Hittable_C.GetDurabilityCostWhenHit
// 0x0008 (0x0008 - 0x0000)
struct I_Hittable_C_GetDurabilityCostWhenHit final
{
public:
	double                                        Amount;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Hittable_C_GetDurabilityCostWhenHit) == 0x000008, "Wrong alignment on I_Hittable_C_GetDurabilityCostWhenHit");
static_assert(sizeof(I_Hittable_C_GetDurabilityCostWhenHit) == 0x000008, "Wrong size on I_Hittable_C_GetDurabilityCostWhenHit");
static_assert(offsetof(I_Hittable_C_GetDurabilityCostWhenHit, Amount) == 0x000000, "Member 'I_Hittable_C_GetDurabilityCostWhenHit::Amount' has a wrong offset!");

// Function I_Hittable.I_Hittable_C.GetMaterialType
// 0x0001 (0x0001 - 0x0000)
struct I_Hittable_C_GetMaterialType final
{
public:
	E_MaterialTypes                               MaterialType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Hittable_C_GetMaterialType) == 0x000001, "Wrong alignment on I_Hittable_C_GetMaterialType");
static_assert(sizeof(I_Hittable_C_GetMaterialType) == 0x000001, "Wrong size on I_Hittable_C_GetMaterialType");
static_assert(offsetof(I_Hittable_C_GetMaterialType, MaterialType) == 0x000000, "Member 'I_Hittable_C_GetMaterialType::MaterialType' has a wrong offset!");

// Function I_Hittable.I_Hittable_C.HitInterface
// 0x0018 (0x0018 - 0x0000)
struct I_Hittable_C_HitInterface final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Hittable_C_HitInterface) == 0x000008, "Wrong alignment on I_Hittable_C_HitInterface");
static_assert(sizeof(I_Hittable_C_HitInterface) == 0x000018, "Wrong size on I_Hittable_C_HitInterface");
static_assert(offsetof(I_Hittable_C_HitInterface, Direction) == 0x000000, "Member 'I_Hittable_C_HitInterface::Direction' has a wrong offset!");

// Function I_Hittable.I_Hittable_C.ImpactCosmetics
// 0x0048 (0x0048 - 0x0000)
struct I_Hittable_C_ImpactCosmetics final
{
public:
	class APawn*                                  ImpactCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitImpulse;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ImpactEffect                                ImpactEffect;                                      // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x003C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangedAttributes;                                 // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Hittable_C_ImpactCosmetics) == 0x000008, "Wrong alignment on I_Hittable_C_ImpactCosmetics");
static_assert(sizeof(I_Hittable_C_ImpactCosmetics) == 0x000048, "Wrong size on I_Hittable_C_ImpactCosmetics");
static_assert(offsetof(I_Hittable_C_ImpactCosmetics, ImpactCauser) == 0x000000, "Member 'I_Hittable_C_ImpactCosmetics::ImpactCauser' has a wrong offset!");
static_assert(offsetof(I_Hittable_C_ImpactCosmetics, Location) == 0x000008, "Member 'I_Hittable_C_ImpactCosmetics::Location' has a wrong offset!");
static_assert(offsetof(I_Hittable_C_ImpactCosmetics, HitImpulse) == 0x000020, "Member 'I_Hittable_C_ImpactCosmetics::HitImpulse' has a wrong offset!");
static_assert(offsetof(I_Hittable_C_ImpactCosmetics, ImpactEffect) == 0x000038, "Member 'I_Hittable_C_ImpactCosmetics::ImpactEffect' has a wrong offset!");
static_assert(offsetof(I_Hittable_C_ImpactCosmetics, BoneName) == 0x00003C, "Member 'I_Hittable_C_ImpactCosmetics::BoneName' has a wrong offset!");
static_assert(offsetof(I_Hittable_C_ImpactCosmetics, ChangedAttributes) == 0x000044, "Member 'I_Hittable_C_ImpactCosmetics::ChangedAttributes' has a wrong offset!");

// Function I_Hittable.I_Hittable_C.MeleeHit
// 0x0008 (0x0008 - 0x0000)
struct I_Hittable_C_MeleeHit final
{
public:
	const class AActor*                           AttackingActor;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Hittable_C_MeleeHit) == 0x000008, "Wrong alignment on I_Hittable_C_MeleeHit");
static_assert(sizeof(I_Hittable_C_MeleeHit) == 0x000008, "Wrong size on I_Hittable_C_MeleeHit");
static_assert(offsetof(I_Hittable_C_MeleeHit, AttackingActor) == 0x000000, "Member 'I_Hittable_C_MeleeHit::AttackingActor' has a wrong offset!");

}

