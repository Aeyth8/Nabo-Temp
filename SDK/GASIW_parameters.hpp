#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GASIW

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GASIW_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GASIW.AbilitySystemComponentIW.AbilityInputTagPressed
// 0x0008 (0x0008 - 0x0000)
struct AbilitySystemComponentIW_AbilityInputTagPressed final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentIW_AbilityInputTagPressed) == 0x000004, "Wrong alignment on AbilitySystemComponentIW_AbilityInputTagPressed");
static_assert(sizeof(AbilitySystemComponentIW_AbilityInputTagPressed) == 0x000008, "Wrong size on AbilitySystemComponentIW_AbilityInputTagPressed");
static_assert(offsetof(AbilitySystemComponentIW_AbilityInputTagPressed, InputTag) == 0x000000, "Member 'AbilitySystemComponentIW_AbilityInputTagPressed::InputTag' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.AbilityInputTagReleased
// 0x0008 (0x0008 - 0x0000)
struct AbilitySystemComponentIW_AbilityInputTagReleased final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentIW_AbilityInputTagReleased) == 0x000004, "Wrong alignment on AbilitySystemComponentIW_AbilityInputTagReleased");
static_assert(sizeof(AbilitySystemComponentIW_AbilityInputTagReleased) == 0x000008, "Wrong size on AbilitySystemComponentIW_AbilityInputTagReleased");
static_assert(offsetof(AbilitySystemComponentIW_AbilityInputTagReleased, InputTag) == 0x000000, "Member 'AbilitySystemComponentIW_AbilityInputTagReleased::InputTag' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.AddGameplayCueLocal
// 0x00E0 (0x00E0 - 0x0000)
struct AbilitySystemComponentIW_AddGameplayCueLocal final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentIW_AddGameplayCueLocal) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_AddGameplayCueLocal");
static_assert(sizeof(AbilitySystemComponentIW_AddGameplayCueLocal) == 0x0000E0, "Wrong size on AbilitySystemComponentIW_AddGameplayCueLocal");
static_assert(offsetof(AbilitySystemComponentIW_AddGameplayCueLocal, GameplayCueTag) == 0x000000, "Member 'AbilitySystemComponentIW_AddGameplayCueLocal::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_AddGameplayCueLocal, GameplayCueParameters) == 0x000008, "Member 'AbilitySystemComponentIW_AddGameplayCueLocal::GameplayCueParameters' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.ApplyGameplayEffectSpecToTargetWithChange
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange final
{
public:
	struct FGameplayEffectSpecHandle              SpecHandle;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Changed;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x001C(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange");
static_assert(sizeof(AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange) == 0x000028, "Wrong size on AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange");
static_assert(offsetof(AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange, SpecHandle) == 0x000000, "Member 'AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange::SpecHandle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange, Target) == 0x000010, "Member 'AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange::Target' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange, Changed) == 0x000018, "Member 'AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange::Changed' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange, ReturnValue) == 0x00001C, "Member 'AbilitySystemComponentIW_ApplyGameplayEffectSpecToTargetWithChange::ReturnValue' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.CancelAbilitiesByTag
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponentIW_CancelAbilitiesByTag final
{
public:
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponentIW_CancelAbilitiesByTag) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_CancelAbilitiesByTag");
static_assert(sizeof(AbilitySystemComponentIW_CancelAbilitiesByTag) == 0x000028, "Wrong size on AbilitySystemComponentIW_CancelAbilitiesByTag");
static_assert(offsetof(AbilitySystemComponentIW_CancelAbilitiesByTag, GameplayTagContainer) == 0x000000, "Member 'AbilitySystemComponentIW_CancelAbilitiesByTag::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_CancelAbilitiesByTag, ReturnValue) == 0x000020, "Member 'AbilitySystemComponentIW_CancelAbilitiesByTag::ReturnValue' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.ExecuteGameplayCueLocal
// 0x00E0 (0x00E0 - 0x0000)
struct AbilitySystemComponentIW_ExecuteGameplayCueLocal final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentIW_ExecuteGameplayCueLocal) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_ExecuteGameplayCueLocal");
static_assert(sizeof(AbilitySystemComponentIW_ExecuteGameplayCueLocal) == 0x0000E0, "Wrong size on AbilitySystemComponentIW_ExecuteGameplayCueLocal");
static_assert(offsetof(AbilitySystemComponentIW_ExecuteGameplayCueLocal, GameplayCueTag) == 0x000000, "Member 'AbilitySystemComponentIW_ExecuteGameplayCueLocal::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ExecuteGameplayCueLocal, GameplayCueParameters) == 0x000008, "Member 'AbilitySystemComponentIW_ExecuteGameplayCueLocal::GameplayCueParameters' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.GetCooldownRemainingForTag
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemComponentIW_GetCooldownRemainingForTag final
{
public:
	struct FGameplayTagContainer                  CooldownTags;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         TimeRemaining;                                     // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownDuration;                                  // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponentIW_GetCooldownRemainingForTag) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_GetCooldownRemainingForTag");
static_assert(sizeof(AbilitySystemComponentIW_GetCooldownRemainingForTag) == 0x000030, "Wrong size on AbilitySystemComponentIW_GetCooldownRemainingForTag");
static_assert(offsetof(AbilitySystemComponentIW_GetCooldownRemainingForTag, CooldownTags) == 0x000000, "Member 'AbilitySystemComponentIW_GetCooldownRemainingForTag::CooldownTags' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_GetCooldownRemainingForTag, TimeRemaining) == 0x000020, "Member 'AbilitySystemComponentIW_GetCooldownRemainingForTag::TimeRemaining' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_GetCooldownRemainingForTag, CooldownDuration) == 0x000024, "Member 'AbilitySystemComponentIW_GetCooldownRemainingForTag::CooldownDuration' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_GetCooldownRemainingForTag, ReturnValue) == 0x000028, "Member 'AbilitySystemComponentIW_GetCooldownRemainingForTag::ReturnValue' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.GiveGameplaySet
// 0x0040 (0x0040 - 0x0000)
struct AbilitySystemComponentIW_GiveGameplaySet final
{
public:
	const class UGameplaySet*                     GameplaySet;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SourceObject;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplaySetHandle                     ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentIW_GiveGameplaySet) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_GiveGameplaySet");
static_assert(sizeof(AbilitySystemComponentIW_GiveGameplaySet) == 0x000040, "Wrong size on AbilitySystemComponentIW_GiveGameplaySet");
static_assert(offsetof(AbilitySystemComponentIW_GiveGameplaySet, GameplaySet) == 0x000000, "Member 'AbilitySystemComponentIW_GiveGameplaySet::GameplaySet' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_GiveGameplaySet, SourceObject) == 0x000008, "Member 'AbilitySystemComponentIW_GiveGameplaySet::SourceObject' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_GiveGameplaySet, ReturnValue) == 0x000010, "Member 'AbilitySystemComponentIW_GiveGameplaySet::ReturnValue' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.GiveGameplaySets
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponentIW_GiveGameplaySets final
{
public:
	TArray<class UGameplaySet*>                   GameplaySets;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UObject*                                SourceObject;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplaySetHandle>             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentIW_GiveGameplaySets) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_GiveGameplaySets");
static_assert(sizeof(AbilitySystemComponentIW_GiveGameplaySets) == 0x000028, "Wrong size on AbilitySystemComponentIW_GiveGameplaySets");
static_assert(offsetof(AbilitySystemComponentIW_GiveGameplaySets, GameplaySets) == 0x000000, "Member 'AbilitySystemComponentIW_GiveGameplaySets::GameplaySets' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_GiveGameplaySets, SourceObject) == 0x000010, "Member 'AbilitySystemComponentIW_GiveGameplaySets::SourceObject' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_GiveGameplaySets, ReturnValue) == 0x000018, "Member 'AbilitySystemComponentIW_GiveGameplaySets::ReturnValue' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.RemoveGameplayCueLocal
// 0x00E0 (0x00E0 - 0x0000)
struct AbilitySystemComponentIW_RemoveGameplayCueLocal final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentIW_RemoveGameplayCueLocal) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_RemoveGameplayCueLocal");
static_assert(sizeof(AbilitySystemComponentIW_RemoveGameplayCueLocal) == 0x0000E0, "Wrong size on AbilitySystemComponentIW_RemoveGameplayCueLocal");
static_assert(offsetof(AbilitySystemComponentIW_RemoveGameplayCueLocal, GameplayCueTag) == 0x000000, "Member 'AbilitySystemComponentIW_RemoveGameplayCueLocal::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_RemoveGameplayCueLocal, GameplayCueParameters) == 0x000008, "Member 'AbilitySystemComponentIW_RemoveGameplayCueLocal::GameplayCueParameters' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.RemoveGameplaySet
// 0x0030 (0x0030 - 0x0000)
struct AbilitySystemComponentIW_RemoveGameplaySet final
{
public:
	struct FGameplaySetHandle                     Handle;                                            // 0x0000(0x0030)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentIW_RemoveGameplaySet) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_RemoveGameplaySet");
static_assert(sizeof(AbilitySystemComponentIW_RemoveGameplaySet) == 0x000030, "Wrong size on AbilitySystemComponentIW_RemoveGameplaySet");
static_assert(offsetof(AbilitySystemComponentIW_RemoveGameplaySet, Handle) == 0x000000, "Member 'AbilitySystemComponentIW_RemoveGameplaySet::Handle' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.ServerCurrentMontageJumpToSectionNameForMesh
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh final
{
public:
	class USkeletalMeshComponent*                 InMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ClientAnimMontage;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh");
static_assert(sizeof(AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh) == 0x000018, "Wrong size on AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh, InMesh) == 0x000000, "Member 'AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh::InMesh' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh, ClientAnimMontage) == 0x000008, "Member 'AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh::ClientAnimMontage' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh, SectionName) == 0x000010, "Member 'AbilitySystemComponentIW_ServerCurrentMontageJumpToSectionNameForMesh::SectionName' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.ServerCurrentMontageSetNextSectionNameForMesh
// 0x0028 (0x0028 - 0x0000)
struct AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh final
{
public:
	class USkeletalMeshComponent*                 InMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ClientAnimMontage;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientPosition;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextSectionName;                                   // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh");
static_assert(sizeof(AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh) == 0x000028, "Wrong size on AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh, InMesh) == 0x000000, "Member 'AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh::InMesh' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh, ClientAnimMontage) == 0x000008, "Member 'AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh::ClientAnimMontage' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh, ClientPosition) == 0x000010, "Member 'AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh::ClientPosition' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh, SectionName) == 0x000014, "Member 'AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh::SectionName' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh, NextSectionName) == 0x00001C, "Member 'AbilitySystemComponentIW_ServerCurrentMontageSetNextSectionNameForMesh::NextSectionName' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.ServerCurrentMontageSetPlayRateForMesh
// 0x0018 (0x0018 - 0x0000)
struct AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh final
{
public:
	class USkeletalMeshComponent*                 InMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ClientAnimMontage;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh) == 0x000008, "Wrong alignment on AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh");
static_assert(sizeof(AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh) == 0x000018, "Wrong size on AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh, InMesh) == 0x000000, "Member 'AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh::InMesh' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh, ClientAnimMontage) == 0x000008, "Member 'AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh::ClientAnimMontage' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh, InPlayRate) == 0x000010, "Member 'AbilitySystemComponentIW_ServerCurrentMontageSetPlayRateForMesh::InPlayRate' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.SetGameplayEffectDurationHandle
// 0x0010 (0x0010 - 0x0000)
struct AbilitySystemComponentIW_SetGameplayEffectDurationHandle final
{
public:
	struct FActiveGameplayEffectHandle            Handle;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDuration;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilitySystemComponentIW_SetGameplayEffectDurationHandle) == 0x000004, "Wrong alignment on AbilitySystemComponentIW_SetGameplayEffectDurationHandle");
static_assert(sizeof(AbilitySystemComponentIW_SetGameplayEffectDurationHandle) == 0x000010, "Wrong size on AbilitySystemComponentIW_SetGameplayEffectDurationHandle");
static_assert(offsetof(AbilitySystemComponentIW_SetGameplayEffectDurationHandle, Handle) == 0x000000, "Member 'AbilitySystemComponentIW_SetGameplayEffectDurationHandle::Handle' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_SetGameplayEffectDurationHandle, NewDuration) == 0x000008, "Member 'AbilitySystemComponentIW_SetGameplayEffectDurationHandle::NewDuration' has a wrong offset!");
static_assert(offsetof(AbilitySystemComponentIW_SetGameplayEffectDurationHandle, ReturnValue) == 0x00000C, "Member 'AbilitySystemComponentIW_SetGameplayEffectDurationHandle::ReturnValue' has a wrong offset!");

// Function GASIW.AbilitySystemComponentIW.GetNumAbilities
// 0x0004 (0x0004 - 0x0000)
struct AbilitySystemComponentIW_GetNumAbilities final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilitySystemComponentIW_GetNumAbilities) == 0x000004, "Wrong alignment on AbilitySystemComponentIW_GetNumAbilities");
static_assert(sizeof(AbilitySystemComponentIW_GetNumAbilities) == 0x000004, "Wrong size on AbilitySystemComponentIW_GetNumAbilities");
static_assert(offsetof(AbilitySystemComponentIW_GetNumAbilities, ReturnValue) == 0x000000, "Member 'AbilitySystemComponentIW_GetNumAbilities::ReturnValue' has a wrong offset!");

// Function GASIW.PickupSpawner.AttemptPickUpItem
// 0x0008 (0x0008 - 0x0000)
struct PickupSpawner_AttemptPickUpItem final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PickupSpawner_AttemptPickUpItem) == 0x000008, "Wrong alignment on PickupSpawner_AttemptPickUpItem");
static_assert(sizeof(PickupSpawner_AttemptPickUpItem) == 0x000008, "Wrong size on PickupSpawner_AttemptPickUpItem");
static_assert(offsetof(PickupSpawner_AttemptPickUpItem, Pawn) == 0x000000, "Member 'PickupSpawner_AttemptPickUpItem::Pawn' has a wrong offset!");

// Function GASIW.PickupSpawner.GivePickup
// 0x0038 (0x0038 - 0x0000)
struct PickupSpawner_GivePickup final
{
public:
	TSoftObjectPtr<class UItemDefinition>         PickupItemClass;                                   // 0x0000(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReceivingPawn;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PickupSpawner_GivePickup) == 0x000008, "Wrong alignment on PickupSpawner_GivePickup");
static_assert(sizeof(PickupSpawner_GivePickup) == 0x000038, "Wrong size on PickupSpawner_GivePickup");
static_assert(offsetof(PickupSpawner_GivePickup, PickupItemClass) == 0x000000, "Member 'PickupSpawner_GivePickup::PickupItemClass' has a wrong offset!");
static_assert(offsetof(PickupSpawner_GivePickup, ReceivingPawn) == 0x000028, "Member 'PickupSpawner_GivePickup::ReceivingPawn' has a wrong offset!");
static_assert(offsetof(PickupSpawner_GivePickup, ReturnValue) == 0x000030, "Member 'PickupSpawner_GivePickup::ReturnValue' has a wrong offset!");

// Function GASIW.PickupSpawner.OnInteractBegin
// 0x0008 (0x0008 - 0x0000)
struct PickupSpawner_OnInteractBegin final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PickupSpawner_OnInteractBegin) == 0x000008, "Wrong alignment on PickupSpawner_OnInteractBegin");
static_assert(sizeof(PickupSpawner_OnInteractBegin) == 0x000008, "Wrong size on PickupSpawner_OnInteractBegin");
static_assert(offsetof(PickupSpawner_OnInteractBegin, OtherActor) == 0x000000, "Member 'PickupSpawner_OnInteractBegin::OtherActor' has a wrong offset!");

// Function GASIW.PickupSpawner.OnPickupAvailable
// 0x0001 (0x0001 - 0x0000)
struct PickupSpawner_OnPickupAvailable final
{
public:
	bool                                          PickupAvailability;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PickupSpawner_OnPickupAvailable) == 0x000001, "Wrong alignment on PickupSpawner_OnPickupAvailable");
static_assert(sizeof(PickupSpawner_OnPickupAvailable) == 0x000001, "Wrong size on PickupSpawner_OnPickupAvailable");
static_assert(offsetof(PickupSpawner_OnPickupAvailable, PickupAvailability) == 0x000000, "Member 'PickupSpawner_OnPickupAvailable::PickupAvailability' has a wrong offset!");

// Function GASIW.AbilityTask_RepeatContinuous.RepeatContinuousAction
// 0x0018 (0x0018 - 0x0000)
struct AbilityTask_RepeatContinuous_RepeatContinuousAction final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenActions;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalActionCount;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_RepeatContinuous*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_RepeatContinuous_RepeatContinuousAction) == 0x000008, "Wrong alignment on AbilityTask_RepeatContinuous_RepeatContinuousAction");
static_assert(sizeof(AbilityTask_RepeatContinuous_RepeatContinuousAction) == 0x000018, "Wrong size on AbilityTask_RepeatContinuous_RepeatContinuousAction");
static_assert(offsetof(AbilityTask_RepeatContinuous_RepeatContinuousAction, OwningAbility) == 0x000000, "Member 'AbilityTask_RepeatContinuous_RepeatContinuousAction::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_RepeatContinuous_RepeatContinuousAction, TimeBetweenActions) == 0x000008, "Member 'AbilityTask_RepeatContinuous_RepeatContinuousAction::TimeBetweenActions' has a wrong offset!");
static_assert(offsetof(AbilityTask_RepeatContinuous_RepeatContinuousAction, TotalActionCount) == 0x00000C, "Member 'AbilityTask_RepeatContinuous_RepeatContinuousAction::TotalActionCount' has a wrong offset!");
static_assert(offsetof(AbilityTask_RepeatContinuous_RepeatContinuousAction, ReturnValue) == 0x000010, "Member 'AbilityTask_RepeatContinuous_RepeatContinuousAction::ReturnValue' has a wrong offset!");

// Function GASIW.AbilityTask_AddTagStackOverTime.AddTagStackOverTimeAction
// 0x0028 (0x0028 - 0x0000)
struct AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StacksPerTick;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicksPerSecond;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCharges;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_AddTagStackOverTime*       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction) == 0x000008, "Wrong alignment on AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction");
static_assert(sizeof(AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction) == 0x000028, "Wrong size on AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction");
static_assert(offsetof(AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction, OwningAbility) == 0x000000, "Member 'AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction, Tag) == 0x000008, "Member 'AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction::Tag' has a wrong offset!");
static_assert(offsetof(AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction, StacksPerTick) == 0x000010, "Member 'AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction::StacksPerTick' has a wrong offset!");
static_assert(offsetof(AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction, TicksPerSecond) == 0x000014, "Member 'AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction::TicksPerSecond' has a wrong offset!");
static_assert(offsetof(AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction, MaxCharges) == 0x000018, "Member 'AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction::MaxCharges' has a wrong offset!");
static_assert(offsetof(AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction, TotalTime) == 0x00001C, "Member 'AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction::TotalTime' has a wrong offset!");
static_assert(offsetof(AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction, ReturnValue) == 0x000020, "Member 'AbilityTask_AddTagStackOverTime_AddTagStackOverTimeAction::ReturnValue' has a wrong offset!");

// Function GASIW.PlayMontageForMeshAndWaitForEvent.PlayMontageForMeshAndWaitForEvent
// 0x0068 (0x0068 - 0x0000)
struct PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 Mesh_0;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay_0;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags_0;                                       // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         Rate_0;                                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSection_0;                                    // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAbilityEnds_0;                            // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimRootMotionTranslationScale_0;                  // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicateMontage_0;                               // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideBlendOutTimeForCancelAbility_0;            // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideBlendOutTimeForStopWhenEndAbility_0;       // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayMontageForMeshAndWaitForEvent*     ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent) == 0x000008, "Wrong alignment on PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent");
static_assert(sizeof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent) == 0x000068, "Wrong size on PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, OwningAbility) == 0x000000, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::OwningAbility' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, TaskInstanceName) == 0x000008, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, Mesh_0) == 0x000010, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::Mesh_0' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, MontageToPlay_0) == 0x000018, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::MontageToPlay_0' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, EventTags_0) == 0x000020, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::EventTags_0' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, Rate_0) == 0x000040, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::Rate_0' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, StartSection_0) == 0x000044, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::StartSection_0' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, bStopWhenAbilityEnds_0) == 0x00004C, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::bStopWhenAbilityEnds_0' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, AnimRootMotionTranslationScale_0) == 0x000050, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::AnimRootMotionTranslationScale_0' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, bReplicateMontage_0) == 0x000054, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::bReplicateMontage_0' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, OverrideBlendOutTimeForCancelAbility_0) == 0x000058, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::OverrideBlendOutTimeForCancelAbility_0' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, OverrideBlendOutTimeForStopWhenEndAbility_0) == 0x00005C, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::OverrideBlendOutTimeForStopWhenEndAbility_0' has a wrong offset!");
static_assert(offsetof(PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent, ReturnValue) == 0x000060, "Member 'PlayMontageForMeshAndWaitForEvent_PlayMontageForMeshAndWaitForEvent::ReturnValue' has a wrong offset!");

// Function GASIW.BlueprintFunctionLibraryIW.EffectContextAddTargetData
// 0x0040 (0x0040 - 0x0000)
struct BlueprintFunctionLibraryIW_EffectContextAddTargetData final
{
public:
	struct FGameplayEffectContextHandle           EffectContextHandle;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0018(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryIW_EffectContextAddTargetData) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryIW_EffectContextAddTargetData");
static_assert(sizeof(BlueprintFunctionLibraryIW_EffectContextAddTargetData) == 0x000040, "Wrong size on BlueprintFunctionLibraryIW_EffectContextAddTargetData");
static_assert(offsetof(BlueprintFunctionLibraryIW_EffectContextAddTargetData, EffectContextHandle) == 0x000000, "Member 'BlueprintFunctionLibraryIW_EffectContextAddTargetData::EffectContextHandle' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryIW_EffectContextAddTargetData, TargetData) == 0x000018, "Member 'BlueprintFunctionLibraryIW_EffectContextAddTargetData::TargetData' has a wrong offset!");

// Function GASIW.BlueprintFunctionLibraryIW.EffectContextGetTargetData
// 0x0040 (0x0040 - 0x0000)
struct BlueprintFunctionLibraryIW_EffectContextGetTargetData final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintFunctionLibraryIW_EffectContextGetTargetData) == 0x000008, "Wrong alignment on BlueprintFunctionLibraryIW_EffectContextGetTargetData");
static_assert(sizeof(BlueprintFunctionLibraryIW_EffectContextGetTargetData) == 0x000040, "Wrong size on BlueprintFunctionLibraryIW_EffectContextGetTargetData");
static_assert(offsetof(BlueprintFunctionLibraryIW_EffectContextGetTargetData, EffectContext) == 0x000000, "Member 'BlueprintFunctionLibraryIW_EffectContextGetTargetData::EffectContext' has a wrong offset!");
static_assert(offsetof(BlueprintFunctionLibraryIW_EffectContextGetTargetData, ReturnValue) == 0x000018, "Member 'BlueprintFunctionLibraryIW_EffectContextGetTargetData::ReturnValue' has a wrong offset!");

// Function GASIW.ItemAction_DamageMultiplierStructures.GetMultiplierActionFromDefinition
// 0x0010 (0x0010 - 0x0000)
struct ItemAction_DamageMultiplierStructures_GetMultiplierActionFromDefinition final
{
public:
	TSubclassOf<class UObject>                    ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemAction_DamageMultiplierStructures* ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAction_DamageMultiplierStructures_GetMultiplierActionFromDefinition) == 0x000008, "Wrong alignment on ItemAction_DamageMultiplierStructures_GetMultiplierActionFromDefinition");
static_assert(sizeof(ItemAction_DamageMultiplierStructures_GetMultiplierActionFromDefinition) == 0x000010, "Wrong size on ItemAction_DamageMultiplierStructures_GetMultiplierActionFromDefinition");
static_assert(offsetof(ItemAction_DamageMultiplierStructures_GetMultiplierActionFromDefinition, ItemDefinition) == 0x000000, "Member 'ItemAction_DamageMultiplierStructures_GetMultiplierActionFromDefinition::ItemDefinition' has a wrong offset!");
static_assert(offsetof(ItemAction_DamageMultiplierStructures_GetMultiplierActionFromDefinition, ReturnValue) == 0x000008, "Member 'ItemAction_DamageMultiplierStructures_GetMultiplierActionFromDefinition::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentInstance.SetPrimaryDescription
// 0x0010 (0x0010 - 0x0000)
struct EquipmentInstance_SetPrimaryDescription final
{
public:
	class FText                                   PrimaryDescription;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentInstance_SetPrimaryDescription) == 0x000008, "Wrong alignment on EquipmentInstance_SetPrimaryDescription");
static_assert(sizeof(EquipmentInstance_SetPrimaryDescription) == 0x000010, "Wrong size on EquipmentInstance_SetPrimaryDescription");
static_assert(offsetof(EquipmentInstance_SetPrimaryDescription, PrimaryDescription) == 0x000000, "Member 'EquipmentInstance_SetPrimaryDescription::PrimaryDescription' has a wrong offset!");

// Function GASIW.EquipmentInstance.SetSecondaryDescription
// 0x0010 (0x0010 - 0x0000)
struct EquipmentInstance_SetSecondaryDescription final
{
public:
	class FText                                   SecondaryDescription;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentInstance_SetSecondaryDescription) == 0x000008, "Wrong alignment on EquipmentInstance_SetSecondaryDescription");
static_assert(sizeof(EquipmentInstance_SetSecondaryDescription) == 0x000010, "Wrong size on EquipmentInstance_SetSecondaryDescription");
static_assert(offsetof(EquipmentInstance_SetSecondaryDescription, SecondaryDescription) == 0x000000, "Member 'EquipmentInstance_SetSecondaryDescription::SecondaryDescription' has a wrong offset!");

// Function GASIW.EquipmentInstance.FindActionByType
// 0x0010 (0x0010 - 0x0000)
struct EquipmentInstance_FindActionByType final
{
public:
	TSubclassOf<class UEquipmentAction>           ActionType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UEquipmentAction*                 ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentInstance_FindActionByType) == 0x000008, "Wrong alignment on EquipmentInstance_FindActionByType");
static_assert(sizeof(EquipmentInstance_FindActionByType) == 0x000010, "Wrong size on EquipmentInstance_FindActionByType");
static_assert(offsetof(EquipmentInstance_FindActionByType, ActionType) == 0x000000, "Member 'EquipmentInstance_FindActionByType::ActionType' has a wrong offset!");
static_assert(offsetof(EquipmentInstance_FindActionByType, ReturnValue) == 0x000008, "Member 'EquipmentInstance_FindActionByType::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentInstance.GetInstigator
// 0x0008 (0x0008 - 0x0000)
struct EquipmentInstance_GetInstigator final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentInstance_GetInstigator) == 0x000008, "Wrong alignment on EquipmentInstance_GetInstigator");
static_assert(sizeof(EquipmentInstance_GetInstigator) == 0x000008, "Wrong size on EquipmentInstance_GetInstigator");
static_assert(offsetof(EquipmentInstance_GetInstigator, ReturnValue) == 0x000000, "Member 'EquipmentInstance_GetInstigator::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentInstance.GetPawn
// 0x0008 (0x0008 - 0x0000)
struct EquipmentInstance_GetPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentInstance_GetPawn) == 0x000008, "Wrong alignment on EquipmentInstance_GetPawn");
static_assert(sizeof(EquipmentInstance_GetPawn) == 0x000008, "Wrong size on EquipmentInstance_GetPawn");
static_assert(offsetof(EquipmentInstance_GetPawn, ReturnValue) == 0x000000, "Member 'EquipmentInstance_GetPawn::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentInstance.GetSpawnedActors
// 0x0010 (0x0010 - 0x0000)
struct EquipmentInstance_GetSpawnedActors final
{
public:
	TArray<struct FSpawnedActorData>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentInstance_GetSpawnedActors) == 0x000008, "Wrong alignment on EquipmentInstance_GetSpawnedActors");
static_assert(sizeof(EquipmentInstance_GetSpawnedActors) == 0x000010, "Wrong size on EquipmentInstance_GetSpawnedActors");
static_assert(offsetof(EquipmentInstance_GetSpawnedActors, ReturnValue) == 0x000000, "Member 'EquipmentInstance_GetSpawnedActors::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentInstance.GetTypedPawn
// 0x0010 (0x0010 - 0x0000)
struct EquipmentInstance_GetTypedPawn final
{
public:
	TSubclassOf<class APawn>                      PawnType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentInstance_GetTypedPawn) == 0x000008, "Wrong alignment on EquipmentInstance_GetTypedPawn");
static_assert(sizeof(EquipmentInstance_GetTypedPawn) == 0x000010, "Wrong size on EquipmentInstance_GetTypedPawn");
static_assert(offsetof(EquipmentInstance_GetTypedPawn, PawnType) == 0x000000, "Member 'EquipmentInstance_GetTypedPawn::PawnType' has a wrong offset!");
static_assert(offsetof(EquipmentInstance_GetTypedPawn, ReturnValue) == 0x000008, "Member 'EquipmentInstance_GetTypedPawn::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentInstance.GetViewMode
// 0x0001 (0x0001 - 0x0000)
struct EquipmentInstance_GetViewMode final
{
public:
	EEquipmentViewMode                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentInstance_GetViewMode) == 0x000001, "Wrong alignment on EquipmentInstance_GetViewMode");
static_assert(sizeof(EquipmentInstance_GetViewMode) == 0x000001, "Wrong size on EquipmentInstance_GetViewMode");
static_assert(offsetof(EquipmentInstance_GetViewMode, ReturnValue) == 0x000000, "Member 'EquipmentInstance_GetViewMode::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.AddPerkModifiedEquipment
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManagerComponent_AddPerkModifiedEquipment final
{
public:
	TSubclassOf<class UEquipmentDefinition>       EquipmentDefinition;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGameplaySet*>                   NewGameplaySet;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_AddPerkModifiedEquipment) == 0x000008, "Wrong alignment on EquipmentManagerComponent_AddPerkModifiedEquipment");
static_assert(sizeof(EquipmentManagerComponent_AddPerkModifiedEquipment) == 0x000018, "Wrong size on EquipmentManagerComponent_AddPerkModifiedEquipment");
static_assert(offsetof(EquipmentManagerComponent_AddPerkModifiedEquipment, EquipmentDefinition) == 0x000000, "Member 'EquipmentManagerComponent_AddPerkModifiedEquipment::EquipmentDefinition' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_AddPerkModifiedEquipment, NewGameplaySet) == 0x000008, "Member 'EquipmentManagerComponent_AddPerkModifiedEquipment::NewGameplaySet' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.AddSocketParent
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManagerComponent_AddSocketParent final
{
public:
	EEquipmentViewMode                            ViewMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_AddSocketParent) == 0x000008, "Wrong alignment on EquipmentManagerComponent_AddSocketParent");
static_assert(sizeof(EquipmentManagerComponent_AddSocketParent) == 0x000010, "Wrong size on EquipmentManagerComponent_AddSocketParent");
static_assert(offsetof(EquipmentManagerComponent_AddSocketParent, ViewMode) == 0x000000, "Member 'EquipmentManagerComponent_AddSocketParent::ViewMode' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_AddSocketParent, Parent) == 0x000008, "Member 'EquipmentManagerComponent_AddSocketParent::Parent' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.AssignEquipmentToSlot
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManagerComponent_AssignEquipmentToSlot final
{
public:
	class UEquipmentInstance*                     Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Slot;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentManagerComponent_AssignEquipmentToSlot) == 0x000008, "Wrong alignment on EquipmentManagerComponent_AssignEquipmentToSlot");
static_assert(sizeof(EquipmentManagerComponent_AssignEquipmentToSlot) == 0x000018, "Wrong size on EquipmentManagerComponent_AssignEquipmentToSlot");
static_assert(offsetof(EquipmentManagerComponent_AssignEquipmentToSlot, Instance) == 0x000000, "Member 'EquipmentManagerComponent_AssignEquipmentToSlot::Instance' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_AssignEquipmentToSlot, Slot) == 0x000008, "Member 'EquipmentManagerComponent_AssignEquipmentToSlot::Slot' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_AssignEquipmentToSlot, ReturnValue) == 0x000010, "Member 'EquipmentManagerComponent_AssignEquipmentToSlot::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.BindOnSlotAddedInstance
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManagerComponent_BindOnSlotAddedInstance final
{
public:
	struct FGameplayTag                           Slot;                                              // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UEquipmentInstance* Instance)> Delegate;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_BindOnSlotAddedInstance) == 0x000004, "Wrong alignment on EquipmentManagerComponent_BindOnSlotAddedInstance");
static_assert(sizeof(EquipmentManagerComponent_BindOnSlotAddedInstance) == 0x000018, "Wrong size on EquipmentManagerComponent_BindOnSlotAddedInstance");
static_assert(offsetof(EquipmentManagerComponent_BindOnSlotAddedInstance, Slot) == 0x000000, "Member 'EquipmentManagerComponent_BindOnSlotAddedInstance::Slot' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_BindOnSlotAddedInstance, Delegate) == 0x000008, "Member 'EquipmentManagerComponent_BindOnSlotAddedInstance::Delegate' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.BindOnSlotRemovedInstance
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManagerComponent_BindOnSlotRemovedInstance final
{
public:
	struct FGameplayTag                           Slot;                                              // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UEquipmentInstance* Instance)> Delegate;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_BindOnSlotRemovedInstance) == 0x000004, "Wrong alignment on EquipmentManagerComponent_BindOnSlotRemovedInstance");
static_assert(sizeof(EquipmentManagerComponent_BindOnSlotRemovedInstance) == 0x000018, "Wrong size on EquipmentManagerComponent_BindOnSlotRemovedInstance");
static_assert(offsetof(EquipmentManagerComponent_BindOnSlotRemovedInstance, Slot) == 0x000000, "Member 'EquipmentManagerComponent_BindOnSlotRemovedInstance::Slot' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_BindOnSlotRemovedInstance, Delegate) == 0x000008, "Member 'EquipmentManagerComponent_BindOnSlotRemovedInstance::Delegate' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.ClearSlot
// 0x000C (0x000C - 0x0000)
struct EquipmentManagerComponent_ClearSlot final
{
public:
	struct FGameplayTag                           Slot;                                              // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentManagerComponent_ClearSlot) == 0x000004, "Wrong alignment on EquipmentManagerComponent_ClearSlot");
static_assert(sizeof(EquipmentManagerComponent_ClearSlot) == 0x00000C, "Wrong size on EquipmentManagerComponent_ClearSlot");
static_assert(offsetof(EquipmentManagerComponent_ClearSlot, Slot) == 0x000000, "Member 'EquipmentManagerComponent_ClearSlot::Slot' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_ClearSlot, ReturnValue) == 0x000008, "Member 'EquipmentManagerComponent_ClearSlot::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.DoesSlotContainInstance
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManagerComponent_DoesSlotContainInstance final
{
public:
	class UEquipmentInstance*                     Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Slot;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentManagerComponent_DoesSlotContainInstance) == 0x000008, "Wrong alignment on EquipmentManagerComponent_DoesSlotContainInstance");
static_assert(sizeof(EquipmentManagerComponent_DoesSlotContainInstance) == 0x000018, "Wrong size on EquipmentManagerComponent_DoesSlotContainInstance");
static_assert(offsetof(EquipmentManagerComponent_DoesSlotContainInstance, Instance) == 0x000000, "Member 'EquipmentManagerComponent_DoesSlotContainInstance::Instance' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_DoesSlotContainInstance, Slot) == 0x000008, "Member 'EquipmentManagerComponent_DoesSlotContainInstance::Slot' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_DoesSlotContainInstance, ReturnValue) == 0x000010, "Member 'EquipmentManagerComponent_DoesSlotContainInstance::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.DoesSlotContainItem
// 0x0038 (0x0038 - 0x0000)
struct EquipmentManagerComponent_DoesSlotContainItem final
{
public:
	struct FGameplayTag                           Slot;                                              // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemDefinition>         Item;                                              // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentManagerComponent_DoesSlotContainItem) == 0x000008, "Wrong alignment on EquipmentManagerComponent_DoesSlotContainItem");
static_assert(sizeof(EquipmentManagerComponent_DoesSlotContainItem) == 0x000038, "Wrong size on EquipmentManagerComponent_DoesSlotContainItem");
static_assert(offsetof(EquipmentManagerComponent_DoesSlotContainItem, Slot) == 0x000000, "Member 'EquipmentManagerComponent_DoesSlotContainItem::Slot' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_DoesSlotContainItem, Item) == 0x000008, "Member 'EquipmentManagerComponent_DoesSlotContainItem::Item' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_DoesSlotContainItem, ReturnValue) == 0x000030, "Member 'EquipmentManagerComponent_DoesSlotContainItem::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.EquipDefinition
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManagerComponent_EquipDefinition final
{
public:
	TSubclassOf<class UEquipmentDefinition>       EquipmentDefinition;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SourceObject;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEquipmentInstance*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_EquipDefinition) == 0x000008, "Wrong alignment on EquipmentManagerComponent_EquipDefinition");
static_assert(sizeof(EquipmentManagerComponent_EquipDefinition) == 0x000018, "Wrong size on EquipmentManagerComponent_EquipDefinition");
static_assert(offsetof(EquipmentManagerComponent_EquipDefinition, EquipmentDefinition) == 0x000000, "Member 'EquipmentManagerComponent_EquipDefinition::EquipmentDefinition' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_EquipDefinition, SourceObject) == 0x000008, "Member 'EquipmentManagerComponent_EquipDefinition::SourceObject' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_EquipDefinition, ReturnValue) == 0x000010, "Member 'EquipmentManagerComponent_EquipDefinition::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.EquipItem
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManagerComponent_EquipItem final
{
public:
	class UItemInstance*                          Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEquipmentInstance*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_EquipItem) == 0x000008, "Wrong alignment on EquipmentManagerComponent_EquipItem");
static_assert(sizeof(EquipmentManagerComponent_EquipItem) == 0x000010, "Wrong size on EquipmentManagerComponent_EquipItem");
static_assert(offsetof(EquipmentManagerComponent_EquipItem, Item) == 0x000000, "Member 'EquipmentManagerComponent_EquipItem::Item' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_EquipItem, ReturnValue) == 0x000008, "Member 'EquipmentManagerComponent_EquipItem::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.ForceAssignEquipmentToSlot
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManagerComponent_ForceAssignEquipmentToSlot final
{
public:
	class UEquipmentInstance*                     Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Slot;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_ForceAssignEquipmentToSlot) == 0x000008, "Wrong alignment on EquipmentManagerComponent_ForceAssignEquipmentToSlot");
static_assert(sizeof(EquipmentManagerComponent_ForceAssignEquipmentToSlot) == 0x000010, "Wrong size on EquipmentManagerComponent_ForceAssignEquipmentToSlot");
static_assert(offsetof(EquipmentManagerComponent_ForceAssignEquipmentToSlot, Instance) == 0x000000, "Member 'EquipmentManagerComponent_ForceAssignEquipmentToSlot::Instance' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_ForceAssignEquipmentToSlot, Slot) == 0x000008, "Member 'EquipmentManagerComponent_ForceAssignEquipmentToSlot::Slot' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.GetFirstInstanceOfType
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManagerComponent_GetFirstInstanceOfType final
{
public:
	TSubclassOf<class UEquipmentInstance>         InstanceType;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEquipmentInstance*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_GetFirstInstanceOfType) == 0x000008, "Wrong alignment on EquipmentManagerComponent_GetFirstInstanceOfType");
static_assert(sizeof(EquipmentManagerComponent_GetFirstInstanceOfType) == 0x000010, "Wrong size on EquipmentManagerComponent_GetFirstInstanceOfType");
static_assert(offsetof(EquipmentManagerComponent_GetFirstInstanceOfType, InstanceType) == 0x000000, "Member 'EquipmentManagerComponent_GetFirstInstanceOfType::InstanceType' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_GetFirstInstanceOfType, ReturnValue) == 0x000008, "Member 'EquipmentManagerComponent_GetFirstInstanceOfType::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.GetFirstSpawnedActor
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManagerComponent_GetFirstSpawnedActor final
{
public:
	TSubclassOf<class AActor>                     ActorType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_GetFirstSpawnedActor) == 0x000008, "Wrong alignment on EquipmentManagerComponent_GetFirstSpawnedActor");
static_assert(sizeof(EquipmentManagerComponent_GetFirstSpawnedActor) == 0x000010, "Wrong size on EquipmentManagerComponent_GetFirstSpawnedActor");
static_assert(offsetof(EquipmentManagerComponent_GetFirstSpawnedActor, ActorType) == 0x000000, "Member 'EquipmentManagerComponent_GetFirstSpawnedActor::ActorType' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_GetFirstSpawnedActor, ReturnValue) == 0x000008, "Member 'EquipmentManagerComponent_GetFirstSpawnedActor::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.GetFirstSpawnedActorWithInterface
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManagerComponent_GetFirstSpawnedActorWithInterface final
{
public:
	TSubclassOf<class IInterface>                 InterfaceType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_GetFirstSpawnedActorWithInterface) == 0x000008, "Wrong alignment on EquipmentManagerComponent_GetFirstSpawnedActorWithInterface");
static_assert(sizeof(EquipmentManagerComponent_GetFirstSpawnedActorWithInterface) == 0x000010, "Wrong size on EquipmentManagerComponent_GetFirstSpawnedActorWithInterface");
static_assert(offsetof(EquipmentManagerComponent_GetFirstSpawnedActorWithInterface, InterfaceType) == 0x000000, "Member 'EquipmentManagerComponent_GetFirstSpawnedActorWithInterface::InterfaceType' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_GetFirstSpawnedActorWithInterface, ReturnValue) == 0x000008, "Member 'EquipmentManagerComponent_GetFirstSpawnedActorWithInterface::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.GetGameplaySetModifiedByPerk
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManagerComponent_GetGameplaySetModifiedByPerk final
{
public:
	TSubclassOf<class UEquipmentDefinition>       EquipmentDefinition;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGameplaySet*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_GetGameplaySetModifiedByPerk) == 0x000008, "Wrong alignment on EquipmentManagerComponent_GetGameplaySetModifiedByPerk");
static_assert(sizeof(EquipmentManagerComponent_GetGameplaySetModifiedByPerk) == 0x000018, "Wrong size on EquipmentManagerComponent_GetGameplaySetModifiedByPerk");
static_assert(offsetof(EquipmentManagerComponent_GetGameplaySetModifiedByPerk, EquipmentDefinition) == 0x000000, "Member 'EquipmentManagerComponent_GetGameplaySetModifiedByPerk::EquipmentDefinition' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_GetGameplaySetModifiedByPerk, ReturnValue) == 0x000008, "Member 'EquipmentManagerComponent_GetGameplaySetModifiedByPerk::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.GetInstanceFromSlot
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManagerComponent_GetInstanceFromSlot final
{
public:
	struct FGameplayTag                           Slot;                                              // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInstanceValid;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEquipmentInstance*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_GetInstanceFromSlot) == 0x000008, "Wrong alignment on EquipmentManagerComponent_GetInstanceFromSlot");
static_assert(sizeof(EquipmentManagerComponent_GetInstanceFromSlot) == 0x000018, "Wrong size on EquipmentManagerComponent_GetInstanceFromSlot");
static_assert(offsetof(EquipmentManagerComponent_GetInstanceFromSlot, Slot) == 0x000000, "Member 'EquipmentManagerComponent_GetInstanceFromSlot::Slot' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_GetInstanceFromSlot, IsInstanceValid) == 0x000008, "Member 'EquipmentManagerComponent_GetInstanceFromSlot::IsInstanceValid' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_GetInstanceFromSlot, ReturnValue) == 0x000010, "Member 'EquipmentManagerComponent_GetInstanceFromSlot::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.OnItemMarkedForRemoval
// 0x0008 (0x0008 - 0x0000)
struct EquipmentManagerComponent_OnItemMarkedForRemoval final
{
public:
	class UItemInstance*                          Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_OnItemMarkedForRemoval) == 0x000008, "Wrong alignment on EquipmentManagerComponent_OnItemMarkedForRemoval");
static_assert(sizeof(EquipmentManagerComponent_OnItemMarkedForRemoval) == 0x000008, "Wrong size on EquipmentManagerComponent_OnItemMarkedForRemoval");
static_assert(offsetof(EquipmentManagerComponent_OnItemMarkedForRemoval, Item) == 0x000000, "Member 'EquipmentManagerComponent_OnItemMarkedForRemoval::Item' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.OnItemRemoved
// 0x0008 (0x0008 - 0x0000)
struct EquipmentManagerComponent_OnItemRemoved final
{
public:
	class UItemInstance*                          Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_OnItemRemoved) == 0x000008, "Wrong alignment on EquipmentManagerComponent_OnItemRemoved");
static_assert(sizeof(EquipmentManagerComponent_OnItemRemoved) == 0x000008, "Wrong size on EquipmentManagerComponent_OnItemRemoved");
static_assert(offsetof(EquipmentManagerComponent_OnItemRemoved, Item) == 0x000000, "Member 'EquipmentManagerComponent_OnItemRemoved::Item' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.RemoveInstanceFromSlot
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManagerComponent_RemoveInstanceFromSlot final
{
public:
	class UEquipmentInstance*                     Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentManagerComponent_RemoveInstanceFromSlot) == 0x000008, "Wrong alignment on EquipmentManagerComponent_RemoveInstanceFromSlot");
static_assert(sizeof(EquipmentManagerComponent_RemoveInstanceFromSlot) == 0x000010, "Wrong size on EquipmentManagerComponent_RemoveInstanceFromSlot");
static_assert(offsetof(EquipmentManagerComponent_RemoveInstanceFromSlot, Instance) == 0x000000, "Member 'EquipmentManagerComponent_RemoveInstanceFromSlot::Instance' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_RemoveInstanceFromSlot, ReturnValue) == 0x000008, "Member 'EquipmentManagerComponent_RemoveInstanceFromSlot::ReturnValue' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.UnequipItem
// 0x0008 (0x0008 - 0x0000)
struct EquipmentManagerComponent_UnequipItem final
{
public:
	class UEquipmentInstance*                     ItemInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_UnequipItem) == 0x000008, "Wrong alignment on EquipmentManagerComponent_UnequipItem");
static_assert(sizeof(EquipmentManagerComponent_UnequipItem) == 0x000008, "Wrong size on EquipmentManagerComponent_UnequipItem");
static_assert(offsetof(EquipmentManagerComponent_UnequipItem, ItemInstance) == 0x000000, "Member 'EquipmentManagerComponent_UnequipItem::ItemInstance' has a wrong offset!");

// Function GASIW.EquipmentManagerComponent.GetEquipmentInstancesOfType
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManagerComponent_GetEquipmentInstancesOfType final
{
public:
	TSubclassOf<class UEquipmentInstance>         InstanceType;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEquipmentInstance*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManagerComponent_GetEquipmentInstancesOfType) == 0x000008, "Wrong alignment on EquipmentManagerComponent_GetEquipmentInstancesOfType");
static_assert(sizeof(EquipmentManagerComponent_GetEquipmentInstancesOfType) == 0x000018, "Wrong size on EquipmentManagerComponent_GetEquipmentInstancesOfType");
static_assert(offsetof(EquipmentManagerComponent_GetEquipmentInstancesOfType, InstanceType) == 0x000000, "Member 'EquipmentManagerComponent_GetEquipmentInstancesOfType::InstanceType' has a wrong offset!");
static_assert(offsetof(EquipmentManagerComponent_GetEquipmentInstancesOfType, ReturnValue) == 0x000008, "Member 'EquipmentManagerComponent_GetEquipmentInstancesOfType::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.GetCurrentMontageForMesh
// 0x0010 (0x0010 - 0x0000)
struct GameplayAbilityIW_GetCurrentMontageForMesh final
{
public:
	class USkeletalMeshComponent*                 InMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityIW_GetCurrentMontageForMesh) == 0x000008, "Wrong alignment on GameplayAbilityIW_GetCurrentMontageForMesh");
static_assert(sizeof(GameplayAbilityIW_GetCurrentMontageForMesh) == 0x000010, "Wrong size on GameplayAbilityIW_GetCurrentMontageForMesh");
static_assert(offsetof(GameplayAbilityIW_GetCurrentMontageForMesh, InMesh) == 0x000000, "Member 'GameplayAbilityIW_GetCurrentMontageForMesh::InMesh' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_GetCurrentMontageForMesh, ReturnValue) == 0x000008, "Member 'GameplayAbilityIW_GetCurrentMontageForMesh::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.K2_CanActivate
// 0x0028 (0x0028 - 0x0000)
struct GameplayAbilityIW_K2_CanActivate final
{
public:
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbilityIW_K2_CanActivate) == 0x000008, "Wrong alignment on GameplayAbilityIW_K2_CanActivate");
static_assert(sizeof(GameplayAbilityIW_K2_CanActivate) == 0x000028, "Wrong size on GameplayAbilityIW_K2_CanActivate");
static_assert(offsetof(GameplayAbilityIW_K2_CanActivate, RelevantTags) == 0x000000, "Member 'GameplayAbilityIW_K2_CanActivate::RelevantTags' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_K2_CanActivate, ReturnValue) == 0x000020, "Member 'GameplayAbilityIW_K2_CanActivate::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.K2_GetHitActorsWithTags
// 0x0050 (0x0050 - 0x0000)
struct GameplayAbilityIW_K2_GetHitActorsWithTags final
{
public:
	TArray<struct FHitResult>                     Hits;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToLookFor;                                     // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          AllTagsMustMatch;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         MatchingActors;                                    // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          NoHits;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbilityIW_K2_GetHitActorsWithTags) == 0x000008, "Wrong alignment on GameplayAbilityIW_K2_GetHitActorsWithTags");
static_assert(sizeof(GameplayAbilityIW_K2_GetHitActorsWithTags) == 0x000050, "Wrong size on GameplayAbilityIW_K2_GetHitActorsWithTags");
static_assert(offsetof(GameplayAbilityIW_K2_GetHitActorsWithTags, Hits) == 0x000000, "Member 'GameplayAbilityIW_K2_GetHitActorsWithTags::Hits' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_K2_GetHitActorsWithTags, TagsToLookFor) == 0x000010, "Member 'GameplayAbilityIW_K2_GetHitActorsWithTags::TagsToLookFor' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_K2_GetHitActorsWithTags, AllTagsMustMatch) == 0x000030, "Member 'GameplayAbilityIW_K2_GetHitActorsWithTags::AllTagsMustMatch' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_K2_GetHitActorsWithTags, MatchingActors) == 0x000038, "Member 'GameplayAbilityIW_K2_GetHitActorsWithTags::MatchingActors' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_K2_GetHitActorsWithTags, NoHits) == 0x000048, "Member 'GameplayAbilityIW_K2_GetHitActorsWithTags::NoHits' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.K2_IsActive
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbilityIW_K2_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityIW_K2_IsActive) == 0x000001, "Wrong alignment on GameplayAbilityIW_K2_IsActive");
static_assert(sizeof(GameplayAbilityIW_K2_IsActive) == 0x000001, "Wrong size on GameplayAbilityIW_K2_IsActive");
static_assert(offsetof(GameplayAbilityIW_K2_IsActive, ReturnValue) == 0x000000, "Member 'GameplayAbilityIW_K2_IsActive::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.K2_OnAbilityFailed
// 0x0020 (0x0020 - 0x0000)
struct GameplayAbilityIW_K2_OnAbilityFailed final
{
public:
	struct FGameplayTagContainer                  FailureReason;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityIW_K2_OnAbilityFailed) == 0x000008, "Wrong alignment on GameplayAbilityIW_K2_OnAbilityFailed");
static_assert(sizeof(GameplayAbilityIW_K2_OnAbilityFailed) == 0x000020, "Wrong size on GameplayAbilityIW_K2_OnAbilityFailed");
static_assert(offsetof(GameplayAbilityIW_K2_OnAbilityFailed, FailureReason) == 0x000000, "Member 'GameplayAbilityIW_K2_OnAbilityFailed::FailureReason' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.MontageJumpToSectionForMesh
// 0x0010 (0x0010 - 0x0000)
struct GameplayAbilityIW_MontageJumpToSectionForMesh final
{
public:
	class USkeletalMeshComponent*                 InMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityIW_MontageJumpToSectionForMesh) == 0x000008, "Wrong alignment on GameplayAbilityIW_MontageJumpToSectionForMesh");
static_assert(sizeof(GameplayAbilityIW_MontageJumpToSectionForMesh) == 0x000010, "Wrong size on GameplayAbilityIW_MontageJumpToSectionForMesh");
static_assert(offsetof(GameplayAbilityIW_MontageJumpToSectionForMesh, InMesh) == 0x000000, "Member 'GameplayAbilityIW_MontageJumpToSectionForMesh::InMesh' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_MontageJumpToSectionForMesh, SectionName) == 0x000008, "Member 'GameplayAbilityIW_MontageJumpToSectionForMesh::SectionName' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.MontageSetNextSectionNameForMesh
// 0x0018 (0x0018 - 0x0000)
struct GameplayAbilityIW_MontageSetNextSectionNameForMesh final
{
public:
	class USkeletalMeshComponent*                 InMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FromSectionName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToSectionName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityIW_MontageSetNextSectionNameForMesh) == 0x000008, "Wrong alignment on GameplayAbilityIW_MontageSetNextSectionNameForMesh");
static_assert(sizeof(GameplayAbilityIW_MontageSetNextSectionNameForMesh) == 0x000018, "Wrong size on GameplayAbilityIW_MontageSetNextSectionNameForMesh");
static_assert(offsetof(GameplayAbilityIW_MontageSetNextSectionNameForMesh, InMesh) == 0x000000, "Member 'GameplayAbilityIW_MontageSetNextSectionNameForMesh::InMesh' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_MontageSetNextSectionNameForMesh, FromSectionName) == 0x000008, "Member 'GameplayAbilityIW_MontageSetNextSectionNameForMesh::FromSectionName' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_MontageSetNextSectionNameForMesh, ToSectionName) == 0x000010, "Member 'GameplayAbilityIW_MontageSetNextSectionNameForMesh::ToSectionName' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.MontageStopForAllMeshes
// 0x0004 (0x0004 - 0x0000)
struct GameplayAbilityIW_MontageStopForAllMeshes final
{
public:
	float                                         OverrideBlendOutTime;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityIW_MontageStopForAllMeshes) == 0x000004, "Wrong alignment on GameplayAbilityIW_MontageStopForAllMeshes");
static_assert(sizeof(GameplayAbilityIW_MontageStopForAllMeshes) == 0x000004, "Wrong size on GameplayAbilityIW_MontageStopForAllMeshes");
static_assert(offsetof(GameplayAbilityIW_MontageStopForAllMeshes, OverrideBlendOutTime) == 0x000000, "Member 'GameplayAbilityIW_MontageStopForAllMeshes::OverrideBlendOutTime' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.MontageStopForMesh
// 0x0010 (0x0010 - 0x0000)
struct GameplayAbilityIW_MontageStopForMesh final
{
public:
	class USkeletalMeshComponent*                 InMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideBlendOutTime;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbilityIW_MontageStopForMesh) == 0x000008, "Wrong alignment on GameplayAbilityIW_MontageStopForMesh");
static_assert(sizeof(GameplayAbilityIW_MontageStopForMesh) == 0x000010, "Wrong size on GameplayAbilityIW_MontageStopForMesh");
static_assert(offsetof(GameplayAbilityIW_MontageStopForMesh, InMesh) == 0x000000, "Member 'GameplayAbilityIW_MontageStopForMesh::InMesh' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_MontageStopForMesh, OverrideBlendOutTime) == 0x000008, "Member 'GameplayAbilityIW_MontageStopForMesh::OverrideBlendOutTime' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.GetLastActivationTime
// 0x0004 (0x0004 - 0x0000)
struct GameplayAbilityIW_GetLastActivationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityIW_GetLastActivationTime) == 0x000004, "Wrong alignment on GameplayAbilityIW_GetLastActivationTime");
static_assert(sizeof(GameplayAbilityIW_GetLastActivationTime) == 0x000004, "Wrong size on GameplayAbilityIW_GetLastActivationTime");
static_assert(offsetof(GameplayAbilityIW_GetLastActivationTime, ReturnValue) == 0x000000, "Member 'GameplayAbilityIW_GetLastActivationTime::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.IsInCooldownGracePeriod
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbilityIW_IsInCooldownGracePeriod final
{
public:
	float                                         TotalDurationBeforeDeath;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbilityIW_IsInCooldownGracePeriod) == 0x000004, "Wrong alignment on GameplayAbilityIW_IsInCooldownGracePeriod");
static_assert(sizeof(GameplayAbilityIW_IsInCooldownGracePeriod) == 0x000008, "Wrong size on GameplayAbilityIW_IsInCooldownGracePeriod");
static_assert(offsetof(GameplayAbilityIW_IsInCooldownGracePeriod, TotalDurationBeforeDeath) == 0x000000, "Member 'GameplayAbilityIW_IsInCooldownGracePeriod::TotalDurationBeforeDeath' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_IsInCooldownGracePeriod, ReturnValue) == 0x000004, "Member 'GameplayAbilityIW_IsInCooldownGracePeriod::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.K2_GetCooldownTimeRemainingAndDuration
// 0x000C (0x000C - 0x0000)
struct GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownDuration;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration) == 0x000004, "Wrong alignment on GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration");
static_assert(sizeof(GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration) == 0x00000C, "Wrong size on GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration");
static_assert(offsetof(GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration, TimeRemaining) == 0x000000, "Member 'GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration::TimeRemaining' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration, CooldownDuration) == 0x000004, "Member 'GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration::CooldownDuration' has a wrong offset!");
static_assert(offsetof(GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration, ReturnValue) == 0x000008, "Member 'GameplayAbilityIW_K2_GetCooldownTimeRemainingAndDuration::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityIW.K2_IsInstantiated
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbilityIW_K2_IsInstantiated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityIW_K2_IsInstantiated) == 0x000001, "Wrong alignment on GameplayAbilityIW_K2_IsInstantiated");
static_assert(sizeof(GameplayAbilityIW_K2_IsInstantiated) == 0x000001, "Wrong size on GameplayAbilityIW_K2_IsInstantiated");
static_assert(offsetof(GameplayAbilityIW_K2_IsInstantiated, ReturnValue) == 0x000000, "Member 'GameplayAbilityIW_K2_IsInstantiated::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityEquipment.OnTagStacksChanged
// 0x000C (0x000C - 0x0000)
struct GameplayAbilityEquipment_OnTagStacksChanged final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewStacks;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityEquipment_OnTagStacksChanged) == 0x000004, "Wrong alignment on GameplayAbilityEquipment_OnTagStacksChanged");
static_assert(sizeof(GameplayAbilityEquipment_OnTagStacksChanged) == 0x00000C, "Wrong size on GameplayAbilityEquipment_OnTagStacksChanged");
static_assert(offsetof(GameplayAbilityEquipment_OnTagStacksChanged, Tag) == 0x000000, "Member 'GameplayAbilityEquipment_OnTagStacksChanged::Tag' has a wrong offset!");
static_assert(offsetof(GameplayAbilityEquipment_OnTagStacksChanged, NewStacks) == 0x000008, "Member 'GameplayAbilityEquipment_OnTagStacksChanged::NewStacks' has a wrong offset!");

// Function GASIW.GameplayAbilityEquipment.GetEquipableSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbilityEquipment_GetEquipableSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityEquipment_GetEquipableSkeletalMesh) == 0x000008, "Wrong alignment on GameplayAbilityEquipment_GetEquipableSkeletalMesh");
static_assert(sizeof(GameplayAbilityEquipment_GetEquipableSkeletalMesh) == 0x000008, "Wrong size on GameplayAbilityEquipment_GetEquipableSkeletalMesh");
static_assert(offsetof(GameplayAbilityEquipment_GetEquipableSkeletalMesh, ReturnValue) == 0x000000, "Member 'GameplayAbilityEquipment_GetEquipableSkeletalMesh::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityEquipment.GetEquipableTargetCueParameters
// 0x00D8 (0x00D8 - 0x0000)
struct GameplayAbilityEquipment_GetEquipableTargetCueParameters final
{
public:
	struct FGameplayCueParameters                 ReturnValue;                                       // 0x0000(0x00D8)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityEquipment_GetEquipableTargetCueParameters) == 0x000008, "Wrong alignment on GameplayAbilityEquipment_GetEquipableTargetCueParameters");
static_assert(sizeof(GameplayAbilityEquipment_GetEquipableTargetCueParameters) == 0x0000D8, "Wrong size on GameplayAbilityEquipment_GetEquipableTargetCueParameters");
static_assert(offsetof(GameplayAbilityEquipment_GetEquipableTargetCueParameters, ReturnValue) == 0x000000, "Member 'GameplayAbilityEquipment_GetEquipableTargetCueParameters::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityEquipment.GetTagStackCount
// 0x000C (0x000C - 0x0000)
struct GameplayAbilityEquipment_GetTagStackCount final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityEquipment_GetTagStackCount) == 0x000004, "Wrong alignment on GameplayAbilityEquipment_GetTagStackCount");
static_assert(sizeof(GameplayAbilityEquipment_GetTagStackCount) == 0x00000C, "Wrong size on GameplayAbilityEquipment_GetTagStackCount");
static_assert(offsetof(GameplayAbilityEquipment_GetTagStackCount, Tag) == 0x000000, "Member 'GameplayAbilityEquipment_GetTagStackCount::Tag' has a wrong offset!");
static_assert(offsetof(GameplayAbilityEquipment_GetTagStackCount, ReturnValue) == 0x000008, "Member 'GameplayAbilityEquipment_GetTagStackCount::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityEquipment.GetTagStackCountSafe
// 0x000C (0x000C - 0x0000)
struct GameplayAbilityEquipment_GetTagStackCountSafe final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityEquipment_GetTagStackCountSafe) == 0x000004, "Wrong alignment on GameplayAbilityEquipment_GetTagStackCountSafe");
static_assert(sizeof(GameplayAbilityEquipment_GetTagStackCountSafe) == 0x00000C, "Wrong size on GameplayAbilityEquipment_GetTagStackCountSafe");
static_assert(offsetof(GameplayAbilityEquipment_GetTagStackCountSafe, Tag) == 0x000000, "Member 'GameplayAbilityEquipment_GetTagStackCountSafe::Tag' has a wrong offset!");
static_assert(offsetof(GameplayAbilityEquipment_GetTagStackCountSafe, ReturnValue) == 0x000008, "Member 'GameplayAbilityEquipment_GetTagStackCountSafe::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityItemHandler.GetAssociatedEquipment
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbilityItemHandler_GetAssociatedEquipment final
{
public:
	class UEquipmentInstance*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityItemHandler_GetAssociatedEquipment) == 0x000008, "Wrong alignment on GameplayAbilityItemHandler_GetAssociatedEquipment");
static_assert(sizeof(GameplayAbilityItemHandler_GetAssociatedEquipment) == 0x000008, "Wrong size on GameplayAbilityItemHandler_GetAssociatedEquipment");
static_assert(offsetof(GameplayAbilityItemHandler_GetAssociatedEquipment, ReturnValue) == 0x000000, "Member 'GameplayAbilityItemHandler_GetAssociatedEquipment::ReturnValue' has a wrong offset!");

// Function GASIW.GameplayAbilityItemHandler.GetAssociatedItem
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbilityItemHandler_GetAssociatedItem final
{
public:
	class UItemInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbilityItemHandler_GetAssociatedItem) == 0x000008, "Wrong alignment on GameplayAbilityItemHandler_GetAssociatedItem");
static_assert(sizeof(GameplayAbilityItemHandler_GetAssociatedItem) == 0x000008, "Wrong size on GameplayAbilityItemHandler_GetAssociatedItem");
static_assert(offsetof(GameplayAbilityItemHandler_GetAssociatedItem, ReturnValue) == 0x000000, "Member 'GameplayAbilityItemHandler_GetAssociatedItem::ReturnValue' has a wrong offset!");

// Function GASIW.SpawnedActorViewModeHandler.OnHandleViewMode
// 0x0001 (0x0001 - 0x0000)
struct SpawnedActorViewModeHandler_OnHandleViewMode final
{
public:
	EEquipmentViewMode                            ViewMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnedActorViewModeHandler_OnHandleViewMode) == 0x000001, "Wrong alignment on SpawnedActorViewModeHandler_OnHandleViewMode");
static_assert(sizeof(SpawnedActorViewModeHandler_OnHandleViewMode) == 0x000001, "Wrong size on SpawnedActorViewModeHandler_OnHandleViewMode");
static_assert(offsetof(SpawnedActorViewModeHandler_OnHandleViewMode, ViewMode) == 0x000000, "Member 'SpawnedActorViewModeHandler_OnHandleViewMode::ViewMode' has a wrong offset!");

}

