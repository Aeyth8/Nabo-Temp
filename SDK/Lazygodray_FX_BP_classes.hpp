#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Lazygodray_FX_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass lazygodray_FX_BP.lazygodray_FX_BP_C
// 0x0198 (0x0428 - 0x0290)
class ALazygodray_FX_BP_C final : public AActor
{
public:
	class USpotLightComponent*                    SpotLight;                                         // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Spotlight_grp;                                     // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Godray_card_SM;                                    // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Lazygodray_FX_BP;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Diameter_multiplier;                               // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Length_multiplier;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tint_color;                                        // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Light_shaft_texture;                               // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_intensity;                                 // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_contrast;                                  // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_shaft_strength;                              // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_shaft_amount;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_shaft_length;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Depth_fade_distance;                               // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fesnel_exponent;                                   // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Camera_fading_starting_distance;                   // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Camera_fading_transition_range;                    // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Vertical_falloff_midpoint;                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Vertical_falloff_exponent;                         // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Vertical_falloff_strength;                         // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cylindrical_masking_exponent;                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_lightray_convergent;                           // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lightray_convergent_rate;                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_dust_particle__cannot_be_toggled_during_runtime_; // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Particle_color;                                    // 0x0354(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Amount_multiplier;                                 // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Size_multiplier;                                   // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Size_minimum_percentage;                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Velocity_multiplier;                               // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Velocity_mininum_percentage;                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_location_vertical_offset;                    // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_radius_multiplier;                           // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_length_multiplier;                           // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Revealing_distance;                                // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Revealing_transition;                              // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Culling_distance;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Culling_transition;                                // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_spotlight_component__cannot_be_toggled_during_runtime; // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Light_intensity_in_Lumens;                         // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_source_radius;                               // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Attenuation_offset;                                // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Outer_cone_angle_offset;                           // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Inner_cone_angle;                                  // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Smoke_intensity;                                   // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Smoke_texture;                                     // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Smoke_texture_scale;                               // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Panning_speedX;                                    // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Panning_speedY;                                    // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CastShadow;                                        // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"lazygodray_FX_BP_C">();
	}
	static class ALazygodray_FX_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALazygodray_FX_BP_C>();
	}
};
static_assert(alignof(ALazygodray_FX_BP_C) == 0x000008, "Wrong alignment on ALazygodray_FX_BP_C");
static_assert(sizeof(ALazygodray_FX_BP_C) == 0x000428, "Wrong size on ALazygodray_FX_BP_C");
static_assert(offsetof(ALazygodray_FX_BP_C, SpotLight) == 0x000290, "Member 'ALazygodray_FX_BP_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Spotlight_grp) == 0x000298, "Member 'ALazygodray_FX_BP_C::Spotlight_grp' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Godray_card_SM) == 0x0002A0, "Member 'ALazygodray_FX_BP_C::Godray_card_SM' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Lazygodray_FX_BP) == 0x0002A8, "Member 'ALazygodray_FX_BP_C::Lazygodray_FX_BP' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Diameter_multiplier) == 0x0002B0, "Member 'ALazygodray_FX_BP_C::Diameter_multiplier' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Length_multiplier) == 0x0002B8, "Member 'ALazygodray_FX_BP_C::Length_multiplier' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Tint_color) == 0x0002C0, "Member 'ALazygodray_FX_BP_C::Tint_color' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Light_shaft_texture) == 0x0002D0, "Member 'ALazygodray_FX_BP_C::Light_shaft_texture' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Overall_intensity) == 0x0002D8, "Member 'ALazygodray_FX_BP_C::Overall_intensity' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Overall_contrast) == 0x0002E0, "Member 'ALazygodray_FX_BP_C::Overall_contrast' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Light_shaft_strength) == 0x0002E8, "Member 'ALazygodray_FX_BP_C::Light_shaft_strength' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Light_shaft_amount) == 0x0002F0, "Member 'ALazygodray_FX_BP_C::Light_shaft_amount' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Light_shaft_length) == 0x0002F8, "Member 'ALazygodray_FX_BP_C::Light_shaft_length' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Depth_fade_distance) == 0x000300, "Member 'ALazygodray_FX_BP_C::Depth_fade_distance' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Fesnel_exponent) == 0x000308, "Member 'ALazygodray_FX_BP_C::Fesnel_exponent' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Camera_fading_starting_distance) == 0x000310, "Member 'ALazygodray_FX_BP_C::Camera_fading_starting_distance' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Camera_fading_transition_range) == 0x000318, "Member 'ALazygodray_FX_BP_C::Camera_fading_transition_range' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Vertical_falloff_midpoint) == 0x000320, "Member 'ALazygodray_FX_BP_C::Vertical_falloff_midpoint' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Vertical_falloff_exponent) == 0x000328, "Member 'ALazygodray_FX_BP_C::Vertical_falloff_exponent' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Vertical_falloff_strength) == 0x000330, "Member 'ALazygodray_FX_BP_C::Vertical_falloff_strength' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Cylindrical_masking_exponent) == 0x000338, "Member 'ALazygodray_FX_BP_C::Cylindrical_masking_exponent' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Use_lightray_convergent) == 0x000340, "Member 'ALazygodray_FX_BP_C::Use_lightray_convergent' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Lightray_convergent_rate) == 0x000348, "Member 'ALazygodray_FX_BP_C::Lightray_convergent_rate' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Enable_dust_particle__cannot_be_toggled_during_runtime_) == 0x000350, "Member 'ALazygodray_FX_BP_C::Enable_dust_particle__cannot_be_toggled_during_runtime_' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Particle_color) == 0x000354, "Member 'ALazygodray_FX_BP_C::Particle_color' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Amount_multiplier) == 0x000368, "Member 'ALazygodray_FX_BP_C::Amount_multiplier' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Size_multiplier) == 0x000370, "Member 'ALazygodray_FX_BP_C::Size_multiplier' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Size_minimum_percentage) == 0x000378, "Member 'ALazygodray_FX_BP_C::Size_minimum_percentage' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Velocity_multiplier) == 0x000380, "Member 'ALazygodray_FX_BP_C::Velocity_multiplier' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Velocity_mininum_percentage) == 0x000388, "Member 'ALazygodray_FX_BP_C::Velocity_mininum_percentage' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Spawn_location_vertical_offset) == 0x000390, "Member 'ALazygodray_FX_BP_C::Spawn_location_vertical_offset' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Spawn_radius_multiplier) == 0x000398, "Member 'ALazygodray_FX_BP_C::Spawn_radius_multiplier' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Spawn_length_multiplier) == 0x0003A0, "Member 'ALazygodray_FX_BP_C::Spawn_length_multiplier' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Revealing_distance) == 0x0003A8, "Member 'ALazygodray_FX_BP_C::Revealing_distance' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Revealing_transition) == 0x0003B0, "Member 'ALazygodray_FX_BP_C::Revealing_transition' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Culling_distance) == 0x0003B8, "Member 'ALazygodray_FX_BP_C::Culling_distance' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Culling_transition) == 0x0003C0, "Member 'ALazygodray_FX_BP_C::Culling_transition' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Enable_spotlight_component__cannot_be_toggled_during_runtime) == 0x0003C8, "Member 'ALazygodray_FX_BP_C::Enable_spotlight_component__cannot_be_toggled_during_runtime' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Light_intensity_in_Lumens) == 0x0003D0, "Member 'ALazygodray_FX_BP_C::Light_intensity_in_Lumens' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Light_source_radius) == 0x0003D8, "Member 'ALazygodray_FX_BP_C::Light_source_radius' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Attenuation_offset) == 0x0003E0, "Member 'ALazygodray_FX_BP_C::Attenuation_offset' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Outer_cone_angle_offset) == 0x0003E8, "Member 'ALazygodray_FX_BP_C::Outer_cone_angle_offset' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Inner_cone_angle) == 0x0003F0, "Member 'ALazygodray_FX_BP_C::Inner_cone_angle' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Smoke_intensity) == 0x0003F8, "Member 'ALazygodray_FX_BP_C::Smoke_intensity' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Smoke_texture) == 0x000400, "Member 'ALazygodray_FX_BP_C::Smoke_texture' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Smoke_texture_scale) == 0x000408, "Member 'ALazygodray_FX_BP_C::Smoke_texture_scale' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Panning_speedX) == 0x000410, "Member 'ALazygodray_FX_BP_C::Panning_speedX' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, Panning_speedY) == 0x000418, "Member 'ALazygodray_FX_BP_C::Panning_speedY' has a wrong offset!");
static_assert(offsetof(ALazygodray_FX_BP_C, CastShadow) == 0x000420, "Member 'ALazygodray_FX_BP_C::CastShadow' has a wrong offset!");

}

