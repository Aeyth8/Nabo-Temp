#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EndOfGameCamera

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EndOfGameCamera.BP_EndOfGameCamera_C
// 0x0070 (0x0A20 - 0x09B0)
class ABP_EndOfGameCamera_C final : public ACameraActor
{
public:
	class UStaticMeshComponent*                   RightTeamBase;                                     // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LeftTeamBase;                                      // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WinningTeamBase;                                   // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToCamera;                                  // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceBetweenBases;                              // 0x09CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<uint8, struct FTransform>                TeamToBaseMap;                                     // 0x09D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AssignTeamsToBases(uint8 WinningTeamID);
	void GetSpawnTransformFromTeam(const uint8& TeamId, struct FTransform* Transform, bool* FoundTransform);
	void InitBases();
	void InitLeftTeamBase();
	void InitRightTeamBase();
	void InitWinningTeamBase();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EndOfGameCamera_C">();
	}
	static class ABP_EndOfGameCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EndOfGameCamera_C>();
	}
};
static_assert(alignof(ABP_EndOfGameCamera_C) == 0x000010, "Wrong alignment on ABP_EndOfGameCamera_C");
static_assert(sizeof(ABP_EndOfGameCamera_C) == 0x000A20, "Wrong size on ABP_EndOfGameCamera_C");
static_assert(offsetof(ABP_EndOfGameCamera_C, RightTeamBase) == 0x0009B0, "Member 'ABP_EndOfGameCamera_C::RightTeamBase' has a wrong offset!");
static_assert(offsetof(ABP_EndOfGameCamera_C, LeftTeamBase) == 0x0009B8, "Member 'ABP_EndOfGameCamera_C::LeftTeamBase' has a wrong offset!");
static_assert(offsetof(ABP_EndOfGameCamera_C, WinningTeamBase) == 0x0009C0, "Member 'ABP_EndOfGameCamera_C::WinningTeamBase' has a wrong offset!");
static_assert(offsetof(ABP_EndOfGameCamera_C, DistanceToCamera) == 0x0009C8, "Member 'ABP_EndOfGameCamera_C::DistanceToCamera' has a wrong offset!");
static_assert(offsetof(ABP_EndOfGameCamera_C, DistanceBetweenBases) == 0x0009CC, "Member 'ABP_EndOfGameCamera_C::DistanceBetweenBases' has a wrong offset!");
static_assert(offsetof(ABP_EndOfGameCamera_C, TeamToBaseMap) == 0x0009D0, "Member 'ABP_EndOfGameCamera_C::TeamToBaseMap' has a wrong offset!");

}

