#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Window_Level2

#include "Basic.hpp"

#include "BP_Window_Level2_classes.hpp"
#include "BP_Window_Level2_parameters.hpp"


namespace SDK
{

// Function BP_Window_Level2.BP_Window_Level2_C.AddMeshBounceComponents
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Window_Level2_C::AddMeshBounceComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Window_Level2_C", "AddMeshBounceComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Window_Level2.BP_Window_Level2_C.GetWindowBaseHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Health                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Window_Level2_C::GetWindowBaseHealth(double* Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Window_Level2_C", "GetWindowBaseHealth");

	Params::BP_Window_Level2_C_GetWindowBaseHealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Health != nullptr)
		*Health = Parms.Health;
}


// Function BP_Window_Level2.BP_Window_Level2_C.IsInteractable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interactable                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Window_Level2_C::IsInteractable(bool* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Window_Level2_C", "IsInteractable");

	Params::BP_Window_Level2_C_IsInteractable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Interactable != nullptr)
		*Interactable = Parms.Interactable;
}


// Function BP_Window_Level2.BP_Window_Level2_C.IsNotLockpickable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsNotLockpickable_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Window_Level2_C::IsNotLockpickable(bool* Param_IsNotLockpickable_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Window_Level2_C", "IsNotLockpickable");

	Params::BP_Window_Level2_C_IsNotLockpickable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsNotLockpickable_0 != nullptr)
		*Param_IsNotLockpickable_0 = Parms.Param_IsNotLockpickable_0;
}


// Function BP_Window_Level2.BP_Window_Level2_C.WindowSabotaged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TURR                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Window_Level2_C::WindowSabotaged(bool TURR)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Window_Level2_C", "WindowSabotaged");

	Params::BP_Window_Level2_C_WindowSabotaged Parms{};

	Parms.TURR = TURR;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Window_Level2.BP_Window_Level2_C.IsAvailableForInteraction
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Window_Level2_C::IsAvailableForInteraction(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Window_Level2_C", "IsAvailableForInteraction");

	Params::BP_Window_Level2_C_IsAvailableForInteraction Parms{};

	Parms.InteractingActor = InteractingActor;
	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

