#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_CharacterAnimation

#include "Basic.hpp"

#include "JP_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function I_CharacterAnimation.I_CharacterAnimation_C.ADS
// 0x0001 (0x0001 - 0x0000)
struct I_CharacterAnimation_C_ADS final
{
public:
	bool                                          bADS;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_ADS) == 0x000001, "Wrong alignment on I_CharacterAnimation_C_ADS");
static_assert(sizeof(I_CharacterAnimation_C_ADS) == 0x000001, "Wrong size on I_CharacterAnimation_C_ADS");
static_assert(offsetof(I_CharacterAnimation_C_ADS, bADS) == 0x000000, "Member 'I_CharacterAnimation_C_ADS::bADS' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.Attacking
// 0x0010 (0x0010 - 0x0000)
struct I_CharacterAnimation_C_Attacking final
{
public:
	bool                                          Attacking_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Heavy;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Error_Tolerance;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_Attacking) == 0x000008, "Wrong alignment on I_CharacterAnimation_C_Attacking");
static_assert(sizeof(I_CharacterAnimation_C_Attacking) == 0x000010, "Wrong size on I_CharacterAnimation_C_Attacking");
static_assert(offsetof(I_CharacterAnimation_C_Attacking, Attacking_0) == 0x000000, "Member 'I_CharacterAnimation_C_Attacking::Attacking_0' has a wrong offset!");
static_assert(offsetof(I_CharacterAnimation_C_Attacking, Heavy) == 0x000001, "Member 'I_CharacterAnimation_C_Attacking::Heavy' has a wrong offset!");
static_assert(offsetof(I_CharacterAnimation_C_Attacking, Error_Tolerance) == 0x000008, "Member 'I_CharacterAnimation_C_Attacking::Error_Tolerance' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.Blocking
// 0x0001 (0x0001 - 0x0000)
struct I_CharacterAnimation_C_Blocking final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_Blocking) == 0x000001, "Wrong alignment on I_CharacterAnimation_C_Blocking");
static_assert(sizeof(I_CharacterAnimation_C_Blocking) == 0x000001, "Wrong size on I_CharacterAnimation_C_Blocking");
static_assert(offsetof(I_CharacterAnimation_C_Blocking, Blocked) == 0x000000, "Member 'I_CharacterAnimation_C_Blocking::Blocked' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.HeadRotation
// 0x0001 (0x0001 - 0x0000)
struct I_CharacterAnimation_C_HeadRotation final
{
public:
	bool                                          Rotate;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_HeadRotation) == 0x000001, "Wrong alignment on I_CharacterAnimation_C_HeadRotation");
static_assert(sizeof(I_CharacterAnimation_C_HeadRotation) == 0x000001, "Wrong size on I_CharacterAnimation_C_HeadRotation");
static_assert(offsetof(I_CharacterAnimation_C_HeadRotation, Rotate) == 0x000000, "Member 'I_CharacterAnimation_C_HeadRotation::Rotate' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.Hit
// 0x0010 (0x0010 - 0x0000)
struct I_CharacterAnimation_C_Hit final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayRate;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_Hit) == 0x000008, "Wrong alignment on I_CharacterAnimation_C_Hit");
static_assert(sizeof(I_CharacterAnimation_C_Hit) == 0x000010, "Wrong size on I_CharacterAnimation_C_Hit");
static_assert(offsetof(I_CharacterAnimation_C_Hit, Time) == 0x000000, "Member 'I_CharacterAnimation_C_Hit::Time' has a wrong offset!");
static_assert(offsetof(I_CharacterAnimation_C_Hit, PlayRate) == 0x000008, "Member 'I_CharacterAnimation_C_Hit::PlayRate' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.Interacted
// 0x0008 (0x0008 - 0x0000)
struct I_CharacterAnimation_C_Interacted final
{
public:
	class UObject*                                InteractedObject;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_Interacted) == 0x000008, "Wrong alignment on I_CharacterAnimation_C_Interacted");
static_assert(sizeof(I_CharacterAnimation_C_Interacted) == 0x000008, "Wrong size on I_CharacterAnimation_C_Interacted");
static_assert(offsetof(I_CharacterAnimation_C_Interacted, InteractedObject) == 0x000000, "Member 'I_CharacterAnimation_C_Interacted::InteractedObject' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.ItemReady
// 0x0001 (0x0001 - 0x0000)
struct I_CharacterAnimation_C_ItemReady final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_ItemReady) == 0x000001, "Wrong alignment on I_CharacterAnimation_C_ItemReady");
static_assert(sizeof(I_CharacterAnimation_C_ItemReady) == 0x000001, "Wrong size on I_CharacterAnimation_C_ItemReady");
static_assert(offsetof(I_CharacterAnimation_C_ItemReady, bReady) == 0x000000, "Member 'I_CharacterAnimation_C_ItemReady::bReady' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.Jab
// 0x0001 (0x0001 - 0x0000)
struct I_CharacterAnimation_C_Jab final
{
public:
	bool                                          Jab_0;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_Jab) == 0x000001, "Wrong alignment on I_CharacterAnimation_C_Jab");
static_assert(sizeof(I_CharacterAnimation_C_Jab) == 0x000001, "Wrong size on I_CharacterAnimation_C_Jab");
static_assert(offsetof(I_CharacterAnimation_C_Jab, Jab_0) == 0x000000, "Member 'I_CharacterAnimation_C_Jab::Jab_0' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.SetChargeHoldTime
// 0x0008 (0x0008 - 0x0000)
struct I_CharacterAnimation_C_SetChargeHoldTime final
{
public:
	double                                        HoldTime;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_SetChargeHoldTime) == 0x000008, "Wrong alignment on I_CharacterAnimation_C_SetChargeHoldTime");
static_assert(sizeof(I_CharacterAnimation_C_SetChargeHoldTime) == 0x000008, "Wrong size on I_CharacterAnimation_C_SetChargeHoldTime");
static_assert(offsetof(I_CharacterAnimation_C_SetChargeHoldTime, HoldTime) == 0x000000, "Member 'I_CharacterAnimation_C_SetChargeHoldTime::HoldTime' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.SetEffectCauser
// 0x0008 (0x0008 - 0x0000)
struct I_CharacterAnimation_C_SetEffectCauser final
{
public:
	class AActor*                                 EffectCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_SetEffectCauser) == 0x000008, "Wrong alignment on I_CharacterAnimation_C_SetEffectCauser");
static_assert(sizeof(I_CharacterAnimation_C_SetEffectCauser) == 0x000008, "Wrong size on I_CharacterAnimation_C_SetEffectCauser");
static_assert(offsetof(I_CharacterAnimation_C_SetEffectCauser, EffectCauser) == 0x000000, "Member 'I_CharacterAnimation_C_SetEffectCauser::EffectCauser' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.SetFacialStates
// 0x0010 (0x0010 - 0x0000)
struct I_CharacterAnimation_C_SetFacialStates final
{
public:
	EFacialStatesJP                               FacialState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HoldStateDuration;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_SetFacialStates) == 0x000008, "Wrong alignment on I_CharacterAnimation_C_SetFacialStates");
static_assert(sizeof(I_CharacterAnimation_C_SetFacialStates) == 0x000010, "Wrong size on I_CharacterAnimation_C_SetFacialStates");
static_assert(offsetof(I_CharacterAnimation_C_SetFacialStates, FacialState) == 0x000000, "Member 'I_CharacterAnimation_C_SetFacialStates::FacialState' has a wrong offset!");
static_assert(offsetof(I_CharacterAnimation_C_SetFacialStates, HoldStateDuration) == 0x000008, "Member 'I_CharacterAnimation_C_SetFacialStates::HoldStateDuration' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.SetOverlayState
// 0x0001 (0x0001 - 0x0000)
struct I_CharacterAnimation_C_SetOverlayState final
{
public:
	EItemsJP                                      OverlayState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_SetOverlayState) == 0x000001, "Wrong alignment on I_CharacterAnimation_C_SetOverlayState");
static_assert(sizeof(I_CharacterAnimation_C_SetOverlayState) == 0x000001, "Wrong size on I_CharacterAnimation_C_SetOverlayState");
static_assert(offsetof(I_CharacterAnimation_C_SetOverlayState, OverlayState) == 0x000000, "Member 'I_CharacterAnimation_C_SetOverlayState::OverlayState' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.SetPetActor
// 0x0008 (0x0008 - 0x0000)
struct I_CharacterAnimation_C_SetPetActor final
{
public:
	class ABP_Leloi_C*                            PetActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_SetPetActor) == 0x000008, "Wrong alignment on I_CharacterAnimation_C_SetPetActor");
static_assert(sizeof(I_CharacterAnimation_C_SetPetActor) == 0x000008, "Wrong size on I_CharacterAnimation_C_SetPetActor");
static_assert(offsetof(I_CharacterAnimation_C_SetPetActor, PetActor) == 0x000000, "Member 'I_CharacterAnimation_C_SetPetActor::PetActor' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.SetPlayRate
// 0x0008 (0x0008 - 0x0000)
struct I_CharacterAnimation_C_SetPlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_SetPlayRate) == 0x000008, "Wrong alignment on I_CharacterAnimation_C_SetPlayRate");
static_assert(sizeof(I_CharacterAnimation_C_SetPlayRate) == 0x000008, "Wrong size on I_CharacterAnimation_C_SetPlayRate");
static_assert(offsetof(I_CharacterAnimation_C_SetPlayRate, PlayRate) == 0x000000, "Member 'I_CharacterAnimation_C_SetPlayRate::PlayRate' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.Talking
// 0x0008 (0x0008 - 0x0000)
struct I_CharacterAnimation_C_Talking final
{
public:
	double                                        Volume;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_Talking) == 0x000008, "Wrong alignment on I_CharacterAnimation_C_Talking");
static_assert(sizeof(I_CharacterAnimation_C_Talking) == 0x000008, "Wrong size on I_CharacterAnimation_C_Talking");
static_assert(offsetof(I_CharacterAnimation_C_Talking, Volume) == 0x000000, "Member 'I_CharacterAnimation_C_Talking::Volume' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.Throwing
// 0x0001 (0x0001 - 0x0000)
struct I_CharacterAnimation_C_Throwing final
{
public:
	bool                                          Throwing_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_Throwing) == 0x000001, "Wrong alignment on I_CharacterAnimation_C_Throwing");
static_assert(sizeof(I_CharacterAnimation_C_Throwing) == 0x000001, "Wrong size on I_CharacterAnimation_C_Throwing");
static_assert(offsetof(I_CharacterAnimation_C_Throwing, Throwing_0) == 0x000000, "Member 'I_CharacterAnimation_C_Throwing::Throwing_0' has a wrong offset!");

// Function I_CharacterAnimation.I_CharacterAnimation_C.ToggleHandIK
// 0x0070 (0x0070 - 0x0000)
struct I_CharacterAnimation_C_ToggleHandIK final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HandTarget;                                        // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_CharacterAnimation_C_ToggleHandIK) == 0x000010, "Wrong alignment on I_CharacterAnimation_C_ToggleHandIK");
static_assert(sizeof(I_CharacterAnimation_C_ToggleHandIK) == 0x000070, "Wrong size on I_CharacterAnimation_C_ToggleHandIK");
static_assert(offsetof(I_CharacterAnimation_C_ToggleHandIK, Condition) == 0x000000, "Member 'I_CharacterAnimation_C_ToggleHandIK::Condition' has a wrong offset!");
static_assert(offsetof(I_CharacterAnimation_C_ToggleHandIK, HandTarget) == 0x000010, "Member 'I_CharacterAnimation_C_ToggleHandIK::HandTarget' has a wrong offset!");

}

