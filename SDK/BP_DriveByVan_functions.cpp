#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DriveByVan

#include "Basic.hpp"

#include "BP_DriveByVan_classes.hpp"
#include "BP_DriveByVan_parameters.hpp"


namespace SDK
{

// Function BP_DriveByVan.BP_DriveByVan_C.AddRandomSpreadToDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         InDirection                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_DriveByVan_C::AddRandomSpreadToDirection(const struct FRotator& InDirection, struct FRotator* OutDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "AddRandomSpreadToDirection");

	Params::BP_DriveByVan_C_AddRandomSpreadToDirection Parms{};

	Parms.InDirection = std::move(InDirection);

	UObject::ProcessEvent(Func, &Parms);

	if (OutDirection != nullptr)
		*OutDirection = std::move(Parms.OutDirection);
}


// Function BP_DriveByVan.BP_DriveByVan_C.ApplyDamage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::ApplyDamage(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "ApplyDamage");

	Params::BP_DriveByVan_C_ApplyDamage Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DriveByVan.BP_DriveByVan_C.AttemptFireAtTeam
// (BlueprintCallable, BlueprintEvent)

void ABP_DriveByVan_C::AttemptFireAtTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "AttemptFireAtTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.BndEvt__BP_DeliveryService_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_DriveByVan_C::BndEvt__BP_DeliveryService_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "BndEvt__BP_DeliveryService_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_DriveByVan_C_BndEvt__BP_DeliveryService_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DriveByVan.BP_DriveByVan_C.BndEvt__BP_DriveByVan_SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_DriveByVan_C::BndEvt__BP_DriveByVan_SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "BndEvt__BP_DriveByVan_SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_DriveByVan_C_BndEvt__BP_DriveByVan_SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DriveByVan.BP_DriveByVan_C.CanShootAtTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ResidentCharacter_C*          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    CanHitPlayer                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::CanShootAtTarget(class ABP_ResidentCharacter_C* Target, bool* CanHitPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "CanShootAtTarget");

	Params::BP_DriveByVan_C_CanShootAtTarget Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (CanHitPlayer != nullptr)
		*CanHitPlayer = Parms.CanHitPlayer;
}


// Function BP_DriveByVan.BP_DriveByVan_C.CreateFireSolutionAgainstTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ResidentCharacter_C*          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::CreateFireSolutionAgainstTarget(class ABP_ResidentCharacter_C* Target, struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "CreateFireSolutionAgainstTarget");

	Params::BP_DriveByVan_C_CreateFireSolutionAgainstTarget Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_DriveByVan.BP_DriveByVan_C.CreateKillData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_DriveByVan_C::CreateKillData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "CreateKillData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.ExecuteUbergraph_BP_DriveByVan
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::ExecuteUbergraph_BP_DriveByVan(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "ExecuteUbergraph_BP_DriveByVan");

	Params::BP_DriveByVan_C_ExecuteUbergraph_BP_DriveByVan Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DriveByVan.BP_DriveByVan_C.Fire Projectile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class APooledActor>         ProjectileClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GravityScale                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::Fire_Projectile(TSubclassOf<class APooledActor> ProjectileClass, const struct FTransform& SpawnTransform, double Speed, double GravityScale, double Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "Fire Projectile");

	Params::BP_DriveByVan_C_Fire_Projectile Parms{};

	Parms.ProjectileClass = ProjectileClass;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Speed = Speed;
	Parms.GravityScale = GravityScale;
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DriveByVan.BP_DriveByVan_C.FireMortar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Spawn                                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Gravity                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::FireMortar(const struct FTransform& Spawn, double Speed, double Gravity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "FireMortar");

	Params::BP_DriveByVan_C_FireMortar Parms{};

	Parms.Spawn = std::move(Spawn);
	Parms.Speed = Speed;
	Parms.Gravity = Gravity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DriveByVan.BP_DriveByVan_C.Get Current World Location And Rotation On Vehicle Path Based On Timeline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UTimelineComponent*               Timeline_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class ABP_Base_VehiclePathSpline_C*     VehiclePath_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         WorldRotation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_DriveByVan_C::Get_Current_World_Location_And_Rotation_On_Vehicle_Path_Based_On_Timeline(class UTimelineComponent* Timeline_0, class ABP_Base_VehiclePathSpline_C* VehiclePath_0, struct FVector* WorldLocation, struct FRotator* WorldRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "Get Current World Location And Rotation On Vehicle Path Based On Timeline");

	Params::BP_DriveByVan_C_Get_Current_World_Location_And_Rotation_On_Vehicle_Path_Based_On_Timeline Parms{};

	Parms.Timeline_0 = Timeline_0;
	Parms.VehiclePath_0 = VehiclePath_0;

	UObject::ProcessEvent(Func, &Parms);

	if (WorldLocation != nullptr)
		*WorldLocation = std::move(Parms.WorldLocation);

	if (WorldRotation != nullptr)
		*WorldRotation = std::move(Parms.WorldRotation);
}


// Function BP_DriveByVan.BP_DriveByVan_C.GetWorldLocationAndRotatationAlongSpline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USplineComponent*                 SplineComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  DistanceFraction                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         WorldRotation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_DriveByVan_C::GetWorldLocationAndRotatationAlongSpline(class USplineComponent* SplineComponent, double DistanceFraction, struct FVector* WorldLocation, struct FRotator* WorldRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "GetWorldLocationAndRotatationAlongSpline");

	Params::BP_DriveByVan_C_GetWorldLocationAndRotatationAlongSpline Parms{};

	Parms.SplineComponent = SplineComponent;
	Parms.DistanceFraction = DistanceFraction;

	UObject::ProcessEvent(Func, &Parms);

	if (WorldLocation != nullptr)
		*WorldLocation = std::move(Parms.WorldLocation);

	if (WorldRotation != nullptr)
		*WorldRotation = std::move(Parms.WorldRotation);
}


// Function BP_DriveByVan.BP_DriveByVan_C.HandleCloseDoor
// (BlueprintCallable, BlueprintEvent)

void ABP_DriveByVan_C::HandleCloseDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "HandleCloseDoor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.HandleOpenDoor
// (BlueprintCallable, BlueprintEvent)

void ABP_DriveByVan_C::HandleOpenDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "HandleOpenDoor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.HandleStartMusic
// (BlueprintCallable, BlueprintEvent)

void ABP_DriveByVan_C::HandleStartMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "HandleStartMusic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.HandleStopMusic
// (BlueprintCallable, BlueprintEvent)

void ABP_DriveByVan_C::HandleStopMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "HandleStopMusic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.HandleTireSqueel
// (BlueprintCallable, BlueprintEvent)

void ABP_DriveByVan_C::HandleTireSqueel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "HandleTireSqueel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.ImpactActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ImpactedActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::ImpactActor(class AActor* ImpactedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "ImpactActor");

	Params::BP_DriveByVan_C_ImpactActor Parms{};

	Parms.ImpactedActor = ImpactedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DriveByVan.BP_DriveByVan_C.InitTimelineEvents
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DriveByVan_C::InitTimelineEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "InitTimelineEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.OnDrivingCompleted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_DriveByVan_C*                 DriveByVan                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::OnDrivingCompleted__DelegateSignature(class ABP_DriveByVan_C* DriveByVan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "OnDrivingCompleted__DelegateSignature");

	Params::BP_DriveByVan_C_OnDrivingCompleted__DelegateSignature Parms{};

	Parms.DriveByVan = DriveByVan;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DriveByVan.BP_DriveByVan_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_DriveByVan_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.SetVanDoorsOpenState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Open                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::SetVanDoorsOpenState(bool Open)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "SetVanDoorsOpenState");

	Params::BP_DriveByVan_C_SetVanDoorsOpenState Parms{};

	Parms.Open = Open;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DriveByVan.BP_DriveByVan_C.ShootFromDriveByVechicle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          AttackTargetWorldPosition                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::ShootFromDriveByVechicle(const struct FVector& AttackTargetWorldPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "ShootFromDriveByVechicle");

	Params::BP_DriveByVan_C_ShootFromDriveByVechicle Parms{};

	Parms.AttackTargetWorldPosition = std::move(AttackTargetWorldPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DriveByVan.BP_DriveByVan_C.StartDriving
// (BlueprintCallable, BlueprintEvent)

void ABP_DriveByVan_C::StartDriving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "StartDriving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.Timeline__FinishedFunc
// (BlueprintEvent)

void ABP_DriveByVan_C::Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.Timeline__UpdateFunc
// (BlueprintEvent)

void ABP_DriveByVan_C::Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DriveByVan.BP_DriveByVan_C.TryLaunchMortar
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LocationInYard                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DriveByVan_C::TryLaunchMortar(uint8 Team, const struct FVector& LocationInYard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DriveByVan_C", "TryLaunchMortar");

	Params::BP_DriveByVan_C_TryLaunchMortar Parms{};

	Parms.Team = Team;
	Parms.LocationInYard = std::move(LocationInYard);

	UObject::ProcessEvent(Func, &Parms);
}

}

