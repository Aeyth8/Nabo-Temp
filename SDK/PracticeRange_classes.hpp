#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PracticeRange

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class PracticeRange.AimAssistSettingsWidget
// 0x0000 (0x02E0 - 0x02E0)
class UAimAssistSettingsWidget final : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AimAssistSettingsWidget">();
	}
	static class UAimAssistSettingsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimAssistSettingsWidget>();
	}
};
static_assert(alignof(UAimAssistSettingsWidget) == 0x000008, "Wrong alignment on UAimAssistSettingsWidget");
static_assert(sizeof(UAimAssistSettingsWidget) == 0x0002E0, "Wrong size on UAimAssistSettingsWidget");

// Class PracticeRange.GridShot
// 0x0040 (0x02D0 - 0x0290)
class AGridShot final : public AActor
{
public:
	int32                                         Size;                                              // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CellSize;                                          // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AGridTarget>>     Grid;                                              // 0x0298(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FVector                                CellOriginLocation;                                // 0x02A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AGridTarget>                GridTargetTemplate;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTargetHit(const int32 Position);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridShot">();
	}
	static class AGridShot* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGridShot>();
	}
};
static_assert(alignof(AGridShot) == 0x000008, "Wrong alignment on AGridShot");
static_assert(sizeof(AGridShot) == 0x0002D0, "Wrong size on AGridShot");
static_assert(offsetof(AGridShot, Size) == 0x000290, "Member 'AGridShot::Size' has a wrong offset!");
static_assert(offsetof(AGridShot, CellSize) == 0x000294, "Member 'AGridShot::CellSize' has a wrong offset!");
static_assert(offsetof(AGridShot, Grid) == 0x000298, "Member 'AGridShot::Grid' has a wrong offset!");
static_assert(offsetof(AGridShot, CellOriginLocation) == 0x0002A8, "Member 'AGridShot::CellOriginLocation' has a wrong offset!");
static_assert(offsetof(AGridShot, GridTargetTemplate) == 0x0002C0, "Member 'AGridShot::GridTargetTemplate' has a wrong offset!");

// Class PracticeRange.GridTarget
// 0x0018 (0x02A8 - 0x0290)
class AGridTarget final : public AActor
{
public:
	FMulticastInlineDelegateProperty_             TargetHit;                                         // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         Position;                                          // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridTarget">();
	}
	static class AGridTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGridTarget>();
	}
};
static_assert(alignof(AGridTarget) == 0x000008, "Wrong alignment on AGridTarget");
static_assert(sizeof(AGridTarget) == 0x0002A8, "Wrong size on AGridTarget");
static_assert(offsetof(AGridTarget, TargetHit) == 0x000290, "Member 'AGridTarget::TargetHit' has a wrong offset!");
static_assert(offsetof(AGridTarget, Position) == 0x0002A0, "Member 'AGridTarget::Position' has a wrong offset!");

}

