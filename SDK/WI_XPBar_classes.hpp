#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_XPBar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WI_XPBar.WI_XPBar_C
// 0x0510 (0x07F0 - 0x02E0)
class UWI_XPBar_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       FilledUp;                                          // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UOverlay*                               AnimatedMarker;                                    // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Background;                                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BarToAnimate;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               BarToAnimateOverlay;                               // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BarToFill;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               BarToFillOverlay;                                  // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Border;                                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               InnerOverlay;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Marker;                                            // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URetainerBox*                           OuterRetainerBox;                                  // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       XPText;                                            // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSlateBrush                            BarBackground;                                     // 0x0350(0x00D0)(Edit, BlueprintVisible)
	struct FSlateBrush                            BarBorder;                                         // 0x0420(0x00D0)(Edit, BlueprintVisible)
	struct FSlateBrush                            BarToAnimateColor;                                 // 0x04F0(0x00D0)(Edit, BlueprintVisible)
	struct FSlateBrush                            BarToFillColor;                                    // 0x05C0(0x00D0)(Edit, BlueprintVisible)
	struct FSlateBrush                            MarkerImage;                                       // 0x0690(0x00D0)(Edit, BlueprintVisible)
	double                                        DisplayInterpSpeed;                                // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFloatSpringState                      DisplayJumpSpringState;                            // 0x0768(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_774[0x4];                                      // 0x0774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DisplayJumpOffset;                                 // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DisplayJumpOffsetMultiplier;                       // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DisplayJumpScaleMultiplier;                        // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AnimTickHandle;                                    // 0x0790(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AnimTickFrequency;                                 // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimTickPercentageStep;                            // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                InnerOverlayPadding;                               // 0x07A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	FMulticastInlineDelegateProperty_             OnReachedTargetValue;                              // 0x07B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         LowerBound;                                        // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UpperBound;                                        // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartingValue;                                     // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetValue;                                       // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DesiredAnimatingValue;                             // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimatingValue;                                    // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviouslyGrantedXP;                               // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoTickAnimation;                                   // 0x07E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E5[0x3];                                      // 0x07E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BarWidth;                                          // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimateToTargetValue();
	void AnimTick();
	void Construct();
	void ExecuteUbergraph_WI_XPBar(int32 EntryPoint);
	void GetPercentageAsValue(double Percentage, int32* Value);
	void GetValueAsPercentage(int32 Value, double* Percentage);
	void OnReachedTargetValue__DelegateSignature();
	void PreConstruct(bool IsDesignTime);
	void SetAnimatingValue(int32 AnimatingValue_0);
	void SetBarPercentage(double InputPin, class UWidget* Target);
	void SetPreviouslyGrantedXP(int32 PreviouslyGrantedXP_0);
	void SetStartingValue(int32 StartingValue_0);
	void SetTargetValue(int32 TargetValue_0);
	void SetTextValue(int32 XP);
	void SetValues(int32 LowerBound_0, int32 UpperBound_0, int32 PreviouslyGrantedXP_0, int32 StartingValue_0, int32 TargetValue_0);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateTextValue();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WI_XPBar_C">();
	}
	static class UWI_XPBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWI_XPBar_C>();
	}
};
static_assert(alignof(UWI_XPBar_C) == 0x000010, "Wrong alignment on UWI_XPBar_C");
static_assert(sizeof(UWI_XPBar_C) == 0x0007F0, "Wrong size on UWI_XPBar_C");
static_assert(offsetof(UWI_XPBar_C, UberGraphFrame) == 0x0002E0, "Member 'UWI_XPBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, FilledUp) == 0x0002E8, "Member 'UWI_XPBar_C::FilledUp' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, AnimatedMarker) == 0x0002F0, "Member 'UWI_XPBar_C::AnimatedMarker' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, Background) == 0x0002F8, "Member 'UWI_XPBar_C::Background' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, BarToAnimate) == 0x000300, "Member 'UWI_XPBar_C::BarToAnimate' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, BarToAnimateOverlay) == 0x000308, "Member 'UWI_XPBar_C::BarToAnimateOverlay' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, BarToFill) == 0x000310, "Member 'UWI_XPBar_C::BarToFill' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, BarToFillOverlay) == 0x000318, "Member 'UWI_XPBar_C::BarToFillOverlay' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, Border) == 0x000320, "Member 'UWI_XPBar_C::Border' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, InnerOverlay) == 0x000328, "Member 'UWI_XPBar_C::InnerOverlay' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, Marker) == 0x000330, "Member 'UWI_XPBar_C::Marker' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, OuterRetainerBox) == 0x000338, "Member 'UWI_XPBar_C::OuterRetainerBox' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, SizeBox) == 0x000340, "Member 'UWI_XPBar_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, XPText) == 0x000348, "Member 'UWI_XPBar_C::XPText' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, BarBackground) == 0x000350, "Member 'UWI_XPBar_C::BarBackground' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, BarBorder) == 0x000420, "Member 'UWI_XPBar_C::BarBorder' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, BarToAnimateColor) == 0x0004F0, "Member 'UWI_XPBar_C::BarToAnimateColor' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, BarToFillColor) == 0x0005C0, "Member 'UWI_XPBar_C::BarToFillColor' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, MarkerImage) == 0x000690, "Member 'UWI_XPBar_C::MarkerImage' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, DisplayInterpSpeed) == 0x000760, "Member 'UWI_XPBar_C::DisplayInterpSpeed' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, DisplayJumpSpringState) == 0x000768, "Member 'UWI_XPBar_C::DisplayJumpSpringState' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, DisplayJumpOffset) == 0x000778, "Member 'UWI_XPBar_C::DisplayJumpOffset' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, DisplayJumpOffsetMultiplier) == 0x000780, "Member 'UWI_XPBar_C::DisplayJumpOffsetMultiplier' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, DisplayJumpScaleMultiplier) == 0x000788, "Member 'UWI_XPBar_C::DisplayJumpScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, AnimTickHandle) == 0x000790, "Member 'UWI_XPBar_C::AnimTickHandle' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, AnimTickFrequency) == 0x000798, "Member 'UWI_XPBar_C::AnimTickFrequency' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, AnimTickPercentageStep) == 0x0007A0, "Member 'UWI_XPBar_C::AnimTickPercentageStep' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, InnerOverlayPadding) == 0x0007A8, "Member 'UWI_XPBar_C::InnerOverlayPadding' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, OnReachedTargetValue) == 0x0007B8, "Member 'UWI_XPBar_C::OnReachedTargetValue' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, LowerBound) == 0x0007C8, "Member 'UWI_XPBar_C::LowerBound' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, UpperBound) == 0x0007CC, "Member 'UWI_XPBar_C::UpperBound' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, StartingValue) == 0x0007D0, "Member 'UWI_XPBar_C::StartingValue' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, TargetValue) == 0x0007D4, "Member 'UWI_XPBar_C::TargetValue' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, DesiredAnimatingValue) == 0x0007D8, "Member 'UWI_XPBar_C::DesiredAnimatingValue' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, AnimatingValue) == 0x0007DC, "Member 'UWI_XPBar_C::AnimatingValue' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, PreviouslyGrantedXP) == 0x0007E0, "Member 'UWI_XPBar_C::PreviouslyGrantedXP' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, DoTickAnimation) == 0x0007E4, "Member 'UWI_XPBar_C::DoTickAnimation' has a wrong offset!");
static_assert(offsetof(UWI_XPBar_C, BarWidth) == 0x0007E8, "Member 'UWI_XPBar_C::BarWidth' has a wrong offset!");

}

