#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BlockingVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_MaterialTypes_structs.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BlockingVolume.BP_BlockingVolume_C
// 0x0048 (0x02E8 - 0x02A0)
class ABP_BlockingVolume_C final : public AStaticMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	FMulticastInlineDelegateProperty_             AttackBlocked;                                     // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                ActiveScale;                                       // 0x02B8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                InactiveScale;                                     // 0x02D0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void AttackBlocked__DelegateSignature(int32 IncomingDamage, const struct FHitResult& HitResult);
	void BlockedTrace(int32 IncomingDamage, const struct FHitResult& HitResult);
	void ExecuteUbergraph_BP_BlockingVolume(int32 EntryPoint);
	void GetDurabilityCostWhenHit(double* Amount);
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void HitInterface(const struct FVector& Direction);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void MeleeHit(const class AActor*& AttackingActor);
	void ProjectileImpact(int32 Incoming_Damage, const struct FHitResult& HitResult);
	void Server_SetBlockingState(bool Active, const struct FVector& Scale);
	void SetBlockingState(bool Active);
	void SetScale(bool Active, const struct FVector& Scale);
	void TakeDamage();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BlockingVolume_C">();
	}
	static class ABP_BlockingVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BlockingVolume_C>();
	}
};
static_assert(alignof(ABP_BlockingVolume_C) == 0x000008, "Wrong alignment on ABP_BlockingVolume_C");
static_assert(sizeof(ABP_BlockingVolume_C) == 0x0002E8, "Wrong size on ABP_BlockingVolume_C");
static_assert(offsetof(ABP_BlockingVolume_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_BlockingVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BlockingVolume_C, AttackBlocked) == 0x0002A8, "Member 'ABP_BlockingVolume_C::AttackBlocked' has a wrong offset!");
static_assert(offsetof(ABP_BlockingVolume_C, ActiveScale) == 0x0002B8, "Member 'ABP_BlockingVolume_C::ActiveScale' has a wrong offset!");
static_assert(offsetof(ABP_BlockingVolume_C, InactiveScale) == 0x0002D0, "Member 'ABP_BlockingVolume_C::InactiveScale' has a wrong offset!");

}

