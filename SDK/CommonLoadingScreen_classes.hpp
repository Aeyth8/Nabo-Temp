#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonLoadingScreen

#include "Basic.hpp"

#include "DeveloperSettings_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "CommonLoadingScreen_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class CommonLoadingScreen.LoadingProcessInterface
// 0x0000 (0x0028 - 0x0028)
class ILoadingProcessInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingProcessInterface">();
	}
	static class ILoadingProcessInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILoadingProcessInterface>();
	}
};
static_assert(alignof(ILoadingProcessInterface) == 0x000008, "Wrong alignment on ILoadingProcessInterface");
static_assert(sizeof(ILoadingProcessInterface) == 0x000028, "Wrong size on ILoadingProcessInterface");

// Class CommonLoadingScreen.LoadingScreenWidgetHandler
// 0x0000 (0x0028 - 0x0028)
class ILoadingScreenWidgetHandler final : public IInterface
{
public:
	void UpdateBackground(class UTexture2D* Texture);
	void UpdateBackgroundRemoved();
	void UpdateMessage(const class FText& Message);
	void UpdateSound(class USoundBase* Sound, bool StopMenuMusic);
	void UpdateSoundLoadingScreenHidden(bool StartMenuMusic);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingScreenWidgetHandler">();
	}
	static class ILoadingScreenWidgetHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILoadingScreenWidgetHandler>();
	}
};
static_assert(alignof(ILoadingScreenWidgetHandler) == 0x000008, "Wrong alignment on ILoadingScreenWidgetHandler");
static_assert(sizeof(ILoadingScreenWidgetHandler) == 0x000028, "Wrong size on ILoadingScreenWidgetHandler");

// Class CommonLoadingScreen.CommonLoadingScreenSettings
// 0x00F0 (0x0128 - 0x0038)
class UCommonLoadingScreenSettings final : public UDeveloperSettingsBackedByCVars
{
public:
	struct FSoftClassPath                         LoadingScreenWidget;                               // 0x0038(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSoftObjectPtr<class UWorld>, struct FLoadingScreenLevelSettings> LoadingScreenLevelSettingsMap;                     // 0x0058(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	struct FLoadingScreenLevelSettings            GenericLevelLoadingSettings;                       // 0x00A8(0x0068)(Edit, Config, NativeAccessSpecifierPublic)
	int32                                         LoadingScreenZOrder;                               // 0x0110(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldLoadingScreenAdditionalSecs;                   // 0x0114(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadingScreenHeartbeatHangDuration;                // 0x0118(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogLoadingScreenHeartbeatInterval;                 // 0x011C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LogLoadingScreenReasonEveryFrame;                  // 0x0120(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLoadingScreenVisible;                         // 0x0121(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HoldLoadingScreenAdditionalSecsEvenInEditor;       // 0x0122(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTickLoadingScreenEvenInEditor;                // 0x0123(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLoadingScreenSettings">();
	}
	static class UCommonLoadingScreenSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLoadingScreenSettings>();
	}
};
static_assert(alignof(UCommonLoadingScreenSettings) == 0x000008, "Wrong alignment on UCommonLoadingScreenSettings");
static_assert(sizeof(UCommonLoadingScreenSettings) == 0x000128, "Wrong size on UCommonLoadingScreenSettings");
static_assert(offsetof(UCommonLoadingScreenSettings, LoadingScreenWidget) == 0x000038, "Member 'UCommonLoadingScreenSettings::LoadingScreenWidget' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LoadingScreenLevelSettingsMap) == 0x000058, "Member 'UCommonLoadingScreenSettings::LoadingScreenLevelSettingsMap' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, GenericLevelLoadingSettings) == 0x0000A8, "Member 'UCommonLoadingScreenSettings::GenericLevelLoadingSettings' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LoadingScreenZOrder) == 0x000110, "Member 'UCommonLoadingScreenSettings::LoadingScreenZOrder' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, HoldLoadingScreenAdditionalSecs) == 0x000114, "Member 'UCommonLoadingScreenSettings::HoldLoadingScreenAdditionalSecs' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LoadingScreenHeartbeatHangDuration) == 0x000118, "Member 'UCommonLoadingScreenSettings::LoadingScreenHeartbeatHangDuration' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LogLoadingScreenHeartbeatInterval) == 0x00011C, "Member 'UCommonLoadingScreenSettings::LogLoadingScreenHeartbeatInterval' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LogLoadingScreenReasonEveryFrame) == 0x000120, "Member 'UCommonLoadingScreenSettings::LogLoadingScreenReasonEveryFrame' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, ForceLoadingScreenVisible) == 0x000121, "Member 'UCommonLoadingScreenSettings::ForceLoadingScreenVisible' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, HoldLoadingScreenAdditionalSecsEvenInEditor) == 0x000122, "Member 'UCommonLoadingScreenSettings::HoldLoadingScreenAdditionalSecsEvenInEditor' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, ForceTickLoadingScreenEvenInEditor) == 0x000123, "Member 'UCommonLoadingScreenSettings::ForceTickLoadingScreenEvenInEditor' has a wrong offset!");

// Class CommonLoadingScreen.LoadingScreenManager
// 0x0128 (0x0158 - 0x0030)
class ULoadingScreenManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x40];                                      // 0x0030(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WidgetHandler;                                     // 0x0070(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x78];                                      // 0x0078(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLoadingScreenLevelSettings            CurrentLoadingScreenLevelSettings;                 // 0x00F0(0x0068)(NativeAccessSpecifierPrivate)

public:
	void BlockLoadingScreen();
	void EnableShowingLoadingScreens();

	class FString GetDebugReasonForShowingOrHidingLoadingScreen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingScreenManager">();
	}
	static class ULoadingScreenManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenManager>();
	}
};
static_assert(alignof(ULoadingScreenManager) == 0x000008, "Wrong alignment on ULoadingScreenManager");
static_assert(sizeof(ULoadingScreenManager) == 0x000158, "Wrong size on ULoadingScreenManager");
static_assert(offsetof(ULoadingScreenManager, WidgetHandler) == 0x000070, "Member 'ULoadingScreenManager::WidgetHandler' has a wrong offset!");
static_assert(offsetof(ULoadingScreenManager, CurrentLoadingScreenLevelSettings) == 0x0000F0, "Member 'ULoadingScreenManager::CurrentLoadingScreenLevelSettings' has a wrong offset!");

// Class CommonLoadingScreen.LoadingProcessTask
// 0x0018 (0x0040 - 0x0028)
class ULoadingProcessTask final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULoadingProcessTask* CreateLoadingScreenProcessTask(class UObject* WorldContextObject, const class FString& ShowLoadingScreenReason);

	void SetShowLoadingScreenReason(const class FString& InReason);
	void Unregister();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingProcessTask">();
	}
	static class ULoadingProcessTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingProcessTask>();
	}
};
static_assert(alignof(ULoadingProcessTask) == 0x000008, "Wrong alignment on ULoadingProcessTask");
static_assert(sizeof(ULoadingProcessTask) == 0x000040, "Wrong size on ULoadingProcessTask");

}

