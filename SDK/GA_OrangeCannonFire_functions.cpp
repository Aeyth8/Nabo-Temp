#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_OrangeCannonFire

#include "Basic.hpp"

#include "GA_OrangeCannonFire_classes.hpp"
#include "GA_OrangeCannonFire_parameters.hpp"


namespace SDK
{

// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.CancelAim
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_OrangeCannonFire_C::CancelAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "CancelAim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.CreateCosmeticProjectile
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_OrangeCannonFire_C::CreateCosmeticProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "CreateCosmeticProjectile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.CreateCosmeticProjectileCueParameters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayCueParameters           ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference)

struct FGameplayCueParameters UGA_OrangeCannonFire_C::CreateCosmeticProjectileCueParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "CreateCosmeticProjectileCueParameters");

	Params::GA_OrangeCannonFire_C_CreateCosmeticProjectileCueParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.CreateRandomDirection
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_OrangeCannonFire_C::CreateRandomDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "CreateRandomDirection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.ExecuteCues
// (Public, BlueprintCallable, BlueprintEvent)

void UGA_OrangeCannonFire_C::ExecuteCues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "ExecuteCues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.ExecuteUbergraph_GA_OrangeCannonFire
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_OrangeCannonFire_C::ExecuteUbergraph_GA_OrangeCannonFire(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "ExecuteUbergraph_GA_OrangeCannonFire");

	Params::GA_OrangeCannonFire_C_ExecuteUbergraph_GA_OrangeCannonFire Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.GetProjectileData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            OwnerAsPawn_0                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LocalSpaceVelocity                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ChargePercentage                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GravityScale                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform UGA_OrangeCannonFire_C::GetProjectileData(class APawn** OwnerAsPawn_0, struct FVector* LocalSpaceVelocity, double* ChargePercentage, double* GravityScale, double* MinDamage, double* MaxDamage, double* MinSpeed, double* MaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "GetProjectileData");

	Params::GA_OrangeCannonFire_C_GetProjectileData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OwnerAsPawn_0 != nullptr)
		*OwnerAsPawn_0 = Parms.OwnerAsPawn_0;

	if (LocalSpaceVelocity != nullptr)
		*LocalSpaceVelocity = std::move(Parms.LocalSpaceVelocity);

	if (ChargePercentage != nullptr)
		*ChargePercentage = Parms.ChargePercentage;

	if (GravityScale != nullptr)
		*GravityScale = Parms.GravityScale;

	if (MinDamage != nullptr)
		*MinDamage = Parms.MinDamage;

	if (MaxDamage != nullptr)
		*MaxDamage = Parms.MaxDamage;

	if (MinSpeed != nullptr)
		*MinSpeed = Parms.MinSpeed;

	if (MaxSpeed != nullptr)
		*MaxSpeed = Parms.MaxSpeed;

	return Parms.ReturnValue;
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.GetRandomizedSpawnTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform UGA_OrangeCannonFire_C::GetRandomizedSpawnTransform(const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "GetRandomizedSpawnTransform");

	Params::GA_OrangeCannonFire_C_GetRandomizedSpawnTransform Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_OrangeCannonFire_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.Server_SpawnProjectiles
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Spawn_Transform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LocalVelocity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PercentageCharged                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GravityScale                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinSpeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSpeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  SructureDamageMultiplier                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_OrangeCannonFire_C::Server_SpawnProjectiles(const struct FTransform& Spawn_Transform, class APawn* Owner, const struct FVector& LocalVelocity, double PercentageCharged, double GravityScale, double MinDamage, double MaxDamage, double MinSpeed, double MaxSpeed, double SructureDamageMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "Server_SpawnProjectiles");

	Params::GA_OrangeCannonFire_C_Server_SpawnProjectiles Parms{};

	Parms.Spawn_Transform = std::move(Spawn_Transform);
	Parms.Owner = Owner;
	Parms.LocalVelocity = std::move(LocalVelocity);
	Parms.PercentageCharged = PercentageCharged;
	Parms.GravityScale = GravityScale;
	Parms.MinDamage = MinDamage;
	Parms.MaxDamage = MaxDamage;
	Parms.MinSpeed = MinSpeed;
	Parms.MaxSpeed = MaxSpeed;
	Parms.SructureDamageMultiplier = SructureDamageMultiplier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.SetCountFromGameplayTag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UGA_OrangeCannonFire_C::SetCountFromGameplayTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "SetCountFromGameplayTag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.Get Percentage Charged
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UGA_OrangeCannonFire_C::Get_Percentage_Charged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "Get Percentage Charged");

	Params::GA_OrangeCannonFire_C_Get_Percentage_Charged Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.GetGravityScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UGA_OrangeCannonFire_C::GetGravityScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "GetGravityScale");

	Params::GA_OrangeCannonFire_C_GetGravityScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.GetProjectileTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform UGA_OrangeCannonFire_C::GetProjectileTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "GetProjectileTransform");

	Params::GA_OrangeCannonFire_C_GetProjectileTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_OrangeCannonFire.GA_OrangeCannonFire_C.IsHipFire
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UGA_OrangeCannonFire_C::IsHipFire() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_OrangeCannonFire_C", "IsHipFire");

	Params::GA_OrangeCannonFire_C_IsHipFire Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

