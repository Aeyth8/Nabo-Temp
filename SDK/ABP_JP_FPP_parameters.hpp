#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_JP_FPP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JP_structs.hpp"


namespace SDK::Params
{

// Function ABP_JP_FPP.ABP_JP_FPP_C.ADS
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_FPP_C_ADS final
{
public:
	bool                                          bADS_0;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_ADS) == 0x000001, "Wrong alignment on ABP_JP_FPP_C_ADS");
static_assert(sizeof(ABP_JP_FPP_C_ADS) == 0x000001, "Wrong size on ABP_JP_FPP_C_ADS");
static_assert(offsetof(ABP_JP_FPP_C_ADS, bADS_0) == 0x000000, "Member 'ABP_JP_FPP_C_ADS::bADS_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_FPP_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_FPP_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_AnimGraph");
static_assert(sizeof(ABP_JP_FPP_C_AnimGraph) == 0x000010, "Wrong size on ABP_JP_FPP_C_AnimGraph");
static_assert(offsetof(ABP_JP_FPP_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_JP_FPP_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.Attacking
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_FPP_C_Attacking final
{
public:
	bool                                          Attacking_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Heavy;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Error_Tolerance;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_Attacking) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_Attacking");
static_assert(sizeof(ABP_JP_FPP_C_Attacking) == 0x000010, "Wrong size on ABP_JP_FPP_C_Attacking");
static_assert(offsetof(ABP_JP_FPP_C_Attacking, Attacking_0) == 0x000000, "Member 'ABP_JP_FPP_C_Attacking::Attacking_0' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_Attacking, Heavy) == 0x000001, "Member 'ABP_JP_FPP_C_Attacking::Heavy' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_Attacking, Error_Tolerance) == 0x000008, "Member 'ABP_JP_FPP_C_Attacking::Error_Tolerance' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.base
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_FPP_C_base final
{
public:
	struct FPoseLink                              base_0;                                            // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_FPP_C_base) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_base");
static_assert(sizeof(ABP_JP_FPP_C_base) == 0x000010, "Wrong size on ABP_JP_FPP_C_base");
static_assert(offsetof(ABP_JP_FPP_C_base, base_0) == 0x000000, "Member 'ABP_JP_FPP_C_base::base_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.BasePose
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_FPP_C_BasePose final
{
public:
	struct FPoseLink                              BasePose_0;                                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_FPP_C_BasePose) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_BasePose");
static_assert(sizeof(ABP_JP_FPP_C_BasePose) == 0x000010, "Wrong size on ABP_JP_FPP_C_BasePose");
static_assert(offsetof(ABP_JP_FPP_C_BasePose, BasePose_0) == 0x000000, "Member 'ABP_JP_FPP_C_BasePose::BasePose_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.BlendLayers
// 0x0040 (0x0040 - 0x0000)
struct ABP_JP_FPP_C_BlendLayers final
{
public:
	struct FPoseLink                              BaseLayer;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              OverlayLayer;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BasePose_0;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BlendLayers_0;                                     // 0x0030(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_FPP_C_BlendLayers) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_BlendLayers");
static_assert(sizeof(ABP_JP_FPP_C_BlendLayers) == 0x000040, "Wrong size on ABP_JP_FPP_C_BlendLayers");
static_assert(offsetof(ABP_JP_FPP_C_BlendLayers, BaseLayer) == 0x000000, "Member 'ABP_JP_FPP_C_BlendLayers::BaseLayer' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_BlendLayers, OverlayLayer) == 0x000010, "Member 'ABP_JP_FPP_C_BlendLayers::OverlayLayer' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_BlendLayers, BasePose_0) == 0x000020, "Member 'ABP_JP_FPP_C_BlendLayers::BasePose_0' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_BlendLayers, BlendLayers_0) == 0x000030, "Member 'ABP_JP_FPP_C_BlendLayers::BlendLayers_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.Blocking
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_FPP_C_Blocking final
{
public:
	bool                                          Blocked;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_Blocking) == 0x000001, "Wrong alignment on ABP_JP_FPP_C_Blocking");
static_assert(sizeof(ABP_JP_FPP_C_Blocking) == 0x000001, "Wrong size on ABP_JP_FPP_C_Blocking");
static_assert(offsetof(ABP_JP_FPP_C_Blocking, Blocked) == 0x000000, "Member 'ABP_JP_FPP_C_Blocking::Blocked' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.BlueprintThreadSafeUpdateAnimation
// 0x0018 (0x0018 - 0x0000)
struct ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_UpdateLeaningData_DeltaTime_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateAimOffsetData_DeltaTime_ImplicitCast; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation) == 0x000018, "Wrong size on ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation, CallFunc_UpdateLeaningData_DeltaTime_ImplicitCast) == 0x000008, "Member 'ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation::CallFunc_UpdateLeaningData_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation, CallFunc_UpdateAimOffsetData_DeltaTime_ImplicitCast) == 0x000010, "Member 'ABP_JP_FPP_C_BlueprintThreadSafeUpdateAnimation::CallFunc_UpdateAimOffsetData_DeltaTime_ImplicitCast' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_JP_FPP_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_JP_FPP_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_JP_FPP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_JP_FPP_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_JP_FPP_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_JP_FPP_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.ExecuteUbergraph_ABP_JP_FPP
// 0x0A40 (0x0A40 - 0x0000)
struct ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_4;          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_5;          // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_6;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_7;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_8;          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_9;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_10;         // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_11;         // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_12;         // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_13;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_14;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_15;         // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_16;         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_17;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_18;         // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_10;       // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_11;       // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_12;       // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_19;         // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_20;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_13;       // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_21;         // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_14;       // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_15;       // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_22;         // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_23;         // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_16;       // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_17;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_24;         // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_25;         // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_18;       // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_19;       // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_26;         // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_20;       // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_21;       // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_27;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_28;         // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_22;       // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_23;       // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_29;         // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_30;         // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_24;       // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_31;         // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_25;       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_32;         // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_26;       // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_33;         // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_27;       // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_34;         // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_28;       // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_35;         // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_29;       // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_36;         // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_30;       // 0x012E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_31;       // 0x012F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_37;         // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_32;       // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_33;       // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_34;       // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_35;       // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_38;         // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_36;       // 0x0137(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_39;         // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_40;         // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_37;       // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_38;       // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_41;         // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x013E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_39;       // 0x013F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_42;         // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_4;                // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_5;                // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_6;                // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_7;                // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_40;       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_2;        // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_41;       // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_43;         // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_44;         // 0x026A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_42;       // 0x026B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_45;         // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_46;         // 0x026D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_43;       // 0x026E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26F[0x1];                                      // 0x026F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_8;                // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_44;       // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_47;         // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_45;       // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_9;                // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_46;       // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_48;         // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_49;         // 0x02DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_47;       // 0x02DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_50;         // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_48;       // 0x02DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_51;         // 0x02DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_49;       // 0x02DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_50;       // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_MovementCharacter_C*                K2Node_DynamicCast_AsBP_Movement_Character;        // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bReady;                               // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_312[0x6];                                      // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Volume;                               // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFacialStatesJP                               K2Node_Event_FacialState;                          // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_HoldStateDuration;                    // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bADS;                                 // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Blocked;                              // 0x0331(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Time;                                 // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_PlayRate_1;                           // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Rotate;                               // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Jab;                                  // 0x0349(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_EffectCauser;                         // 0x0350(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_HoldTime;                             // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_PlayRate;                             // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Attacking;                            // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Heavy;                                // 0x0369(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Error_Tolerance;                      // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0380(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x03E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Throwing;                             // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0xF];                                      // 0x0441(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0450(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x04B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x04C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x04E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_51;       // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_52;         // 0x04F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_52;       // 0x04FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_53;         // 0x04FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_InteractedObject;                     // 0x0500(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EItemsJP                                      K2Node_Event_OverlayState;                         // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_54;         // 0x0509(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50A[0x2];                                      // 0x050A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x050C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_CustomEvent_NewRelativeTransform;           // 0x0510(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0570(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0588(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x05A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B9[0x7];                                      // 0x05B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x05D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D8[0x8];                                      // 0x05D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x05E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x0640(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_2;     // 0x06A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_3;     // 0x0700(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_53;       // 0x0760(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_761[0xF];                                      // 0x0761(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue_1;      // 0x0770(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x07D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x07E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0800(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x0830(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0848(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_849[0x7];                                      // 0x0849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0850(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x08B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue_2;      // 0x0910(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_54;       // 0x0970(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_971[0x7];                                      // 0x0971(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x0978(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x0990(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x09A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Leloi_C*                            K2Node_Event_PetActor;                             // 0x09C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x09C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_55;       // 0x09C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9CA[0x6];                                      // 0x09CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast; // 0x09D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast_1; // 0x09D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x09E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_X_ImplicitCast;                // 0x09E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Y_ImplicitCast;                // 0x09F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast;                // 0x09F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0A00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0A04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0A08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A0C[0x4];                                      // 0x0A0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MakeVector_X_ImplicitCast_1;              // 0x0A10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Y_ImplicitCast_1;              // 0x0A18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast_1;              // 0x0A20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x0A28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_1;         // 0x0A2C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast_1;          // 0x0A30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP) == 0x000010, "Wrong alignment on ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP");
static_assert(sizeof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP) == 0x000A40, "Wrong size on ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, EntryPoint) == 0x000000, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000005, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000006, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000007, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000008, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000009, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00000A, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00000B, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x00000C, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x00000D, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_4) == 0x00000E, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_5) == 0x00000F, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x000010, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_6) == 0x000011, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_7) == 0x000012, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_8) == 0x000013, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_9) == 0x000014, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_10) == 0x000015, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_11) == 0x000016, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_12) == 0x000017, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_13) == 0x000018, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_14) == 0x000019, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_15) == 0x00001A, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_IsValid_ReturnValue) == 0x00001B, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_GetSocketLocation_ReturnValue) == 0x000020, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x000038, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_16) == 0x000039, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_GetForwardVector_ReturnValue) == 0x000040, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_17) == 0x000058, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x000059, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_18) == 0x00005A, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x00005B, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_10) == 0x00005C, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_11) == 0x00005D, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_12) == 0x00005E, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_19) == 0x00005F, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_20) == 0x000060, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_13) == 0x000061, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_21) == 0x000062, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_14) == 0x000063, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_15) == 0x000064, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_22) == 0x000065, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_23) == 0x000066, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_16) == 0x000067, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_17) == 0x000068, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_24) == 0x000069, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_25) == 0x00006A, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_18) == 0x00006B, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_19) == 0x00006C, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_26) == 0x00006D, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_20) == 0x00006E, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_21) == 0x00006F, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_27) == 0x000070, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_28) == 0x000071, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_22) == 0x000072, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_23) == 0x000073, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_29) == 0x000074, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_30) == 0x000075, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_24) == 0x000076, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_31) == 0x000077, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_25) == 0x000078, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_32) == 0x000079, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_26) == 0x00007A, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_33) == 0x00007B, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_ReturnValue) == 0x000080, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_ReturnValue_1) == 0x000098, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_ReturnValue_2) == 0x0000B0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_ReturnValue) == 0x0000C8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_ReturnValue_1) == 0x0000E0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_ReturnValue_3) == 0x0000F8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_ReturnValue_2) == 0x000110, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_27) == 0x000128, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_34) == 0x000129, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_28) == 0x00012A, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_35) == 0x00012B, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_29) == 0x00012C, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_36) == 0x00012D, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_30) == 0x00012E, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_31) == 0x00012F, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_37) == 0x000130, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_32) == 0x000131, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_33) == 0x000132, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_Not_PreBool_ReturnValue) == 0x000133, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_34) == 0x000134, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_35) == 0x000135, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_38) == 0x000136, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_38' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_36) == 0x000137, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_39) == 0x000138, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_39' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_40) == 0x000139, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_40' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_37) == 0x00013A, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_38) == 0x00013B, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_38' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_41) == 0x00013C, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_41' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_Not_PreBool_ReturnValue_1) == 0x00013D, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BooleanAND_ReturnValue) == 0x00013E, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_39) == 0x00013F, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_39' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Location) == 0x000140, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Rotation) == 0x000158, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Scale) == 0x000170, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_42) == 0x000188, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_42' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakRotator_Roll) == 0x00018C, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakRotator_Pitch) == 0x000190, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakRotator_Yaw) == 0x000194, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_ReturnValue_4) == 0x000198, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_ReturnValue_5) == 0x0001B0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_ReturnValue_6) == 0x0001C8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_ReturnValue_7) == 0x0001E0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_40) == 0x0001F8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_40' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_ReturnValue_3) == 0x000200, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000218, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000220, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000238, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_Conv_DoubleToVector_ReturnValue_2) == 0x000250, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_Conv_DoubleToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_41) == 0x000268, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_41' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_43) == 0x000269, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_43' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_44) == 0x00026A, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_44' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_42) == 0x00026B, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_42' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_45) == 0x00026C, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_45' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_46) == 0x00026D, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_46' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_43) == 0x00026E, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_43' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MapRangeClamped_ReturnValue) == 0x000270, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_ReturnValue_8) == 0x000278, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_44) == 0x000290, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_44' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_47) == 0x000291, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_47' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_ReturnValue_4) == 0x000298, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_45) == 0x0002B0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_45' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0002B8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_ReturnValue_9) == 0x0002C0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_46) == 0x0002D8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_46' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_48) == 0x0002D9, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_48' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_49) == 0x0002DA, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_49' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_47) == 0x0002DB, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_47' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_50) == 0x0002DC, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_50' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_48) == 0x0002DD, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_48' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_51) == 0x0002DE, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_51' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_49) == 0x0002DF, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_49' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_50) == 0x0002E0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_50' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_TryGetPawnOwner_ReturnValue) == 0x0002E8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_DynamicCast_AsBP_Movement_Character) == 0x0002F0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_DynamicCast_AsBP_Movement_Character' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_DynamicCast_bSuccess) == 0x0002F8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x000300, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_DynamicCast_AsBP_Resident_Character) == 0x000308, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_DynamicCast_bSuccess_1) == 0x000310, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_bReady) == 0x000311, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_bReady' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_Volume) == 0x000318, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_Volume' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_FacialState) == 0x000320, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_FacialState' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_HoldStateDuration) == 0x000328, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_HoldStateDuration' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_bADS) == 0x000330, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_bADS' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_Blocked) == 0x000331, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_Blocked' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_Time) == 0x000338, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_PlayRate_1) == 0x000340, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_PlayRate_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_Rotate) == 0x000348, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_Rotate' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_Jab) == 0x000349, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_Jab' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_EffectCauser) == 0x000350, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_EffectCauser' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_HoldTime) == 0x000358, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_HoldTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_PlayRate) == 0x000360, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_Attacking) == 0x000368, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_Attacking' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_Heavy) == 0x000369, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_Heavy' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_Error_Tolerance) == 0x000370, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_Error_Tolerance' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000380, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x0003E0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_Throwing) == 0x000440, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_Throwing' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000450, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Location_1) == 0x0004B0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Rotation_1) == 0x0004C8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Scale_1) == 0x0004E0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_51) == 0x0004F8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_51' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_52) == 0x0004F9, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_52' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_52) == 0x0004FA, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_52' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_53) == 0x0004FB, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_53' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_InteractedObject) == 0x000500, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_InteractedObject' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_OverlayState) == 0x000508, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_OverlayState' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NotEqual_ByteByte_ReturnValue_54) == 0x000509, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NotEqual_ByteByte_ReturnValue_54' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_DeltaTimeX) == 0x00050C, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_CustomEvent_NewRelativeTransform) == 0x000510, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_CustomEvent_NewRelativeTransform' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Location_2) == 0x000570, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Rotation_2) == 0x000588, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Scale_2) == 0x0005A0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_IsValid_ReturnValue_1) == 0x0005B8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakVector_X) == 0x0005C0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakVector_Y) == 0x0005C8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakVector_Z) == 0x0005D0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_GetSocketTransform_ReturnValue) == 0x0005E0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_GetSocketTransform_ReturnValue_1) == 0x000640, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_K2_GetComponentToWorld_ReturnValue_2) == 0x0006A0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_K2_GetComponentToWorld_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_K2_GetComponentToWorld_ReturnValue_3) == 0x000700, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_K2_GetComponentToWorld_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_53) == 0x000760, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_53' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRelativeTransform_ReturnValue_1) == 0x000770, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRelativeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Location_3) == 0x0007D0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Rotation_3) == 0x0007E8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Scale_3) == 0x000800, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakVector_X_1) == 0x000818, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakVector_Y_1) == 0x000820, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakVector_Z_1) == 0x000828, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_ReturnValue_5) == 0x000830, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_IsLocallyControlled_ReturnValue) == 0x000848, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeTransform_ReturnValue) == 0x000850, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_ComposeTransforms_ReturnValue) == 0x0008B0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRelativeTransform_ReturnValue_2) == 0x000910, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRelativeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_54) == 0x000970, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_54' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Location_4) == 0x000978, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Rotation_4) == 0x000990, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_BreakTransform_Scale_4) == 0x0009A8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, K2Node_Event_PetActor) == 0x0009C0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::K2Node_Event_PetActor' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_IsValid_ReturnValue_2) == 0x0009C8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_EqualEqual_ByteByte_ReturnValue_55) == 0x0009C9, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_EqualEqual_ByteByte_ReturnValue_55' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast) == 0x0009D0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast_1) == 0x0009D8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x0009E0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_X_ImplicitCast) == 0x0009E8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_Y_ImplicitCast) == 0x0009F0, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_Y_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_Z_ImplicitCast) == 0x0009F8, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_Z_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000A00, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000A04, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000A08, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_X_ImplicitCast_1) == 0x000A10, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_X_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_Y_ImplicitCast_1) == 0x000A18, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_Y_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeVector_Z_ImplicitCast_1) == 0x000A20, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeVector_Z_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x000A28, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_Pitch_ImplicitCast_1) == 0x000A2C, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_Pitch_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP, CallFunc_MakeRotator_Roll_ImplicitCast_1) == 0x000A30, "Member 'ABP_JP_FPP_C_ExecuteUbergraph_ABP_JP_FPP::CallFunc_MakeRotator_Roll_ImplicitCast_1' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.GetMovementComponent
// 0x0018 (0x0018 - 0x0000)
struct ABP_JP_FPP_C_GetMovementComponent final
{
public:
	class UCharacterMovementComponent*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            K2Node_DynamicCast_AsCharacter_Movement_Component; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_GetMovementComponent) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_GetMovementComponent");
static_assert(sizeof(ABP_JP_FPP_C_GetMovementComponent) == 0x000018, "Wrong size on ABP_JP_FPP_C_GetMovementComponent");
static_assert(offsetof(ABP_JP_FPP_C_GetMovementComponent, ReturnValue) == 0x000000, "Member 'ABP_JP_FPP_C_GetMovementComponent::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetMovementComponent, K2Node_DynamicCast_AsCharacter_Movement_Component) == 0x000008, "Member 'ABP_JP_FPP_C_GetMovementComponent::K2Node_DynamicCast_AsCharacter_Movement_Component' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetMovementComponent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_JP_FPP_C_GetMovementComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.GetStandingPlayRate
// 0x0070 (0x0070 - 0x0000)
struct ABP_JP_FPP_C_GetStandingPlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_GetStandingPlayRate) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_GetStandingPlayRate");
static_assert(sizeof(ABP_JP_FPP_C_GetStandingPlayRate) == 0x000070, "Wrong size on ABP_JP_FPP_C_GetStandingPlayRate");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, PlayRate) == 0x000000, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_GetCurveValue_ReturnValue) == 0x000008, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000018, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_FClamp_ReturnValue_1) == 0x000028, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000040, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_Lerp_ReturnValue) == 0x000048, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_Lerp_ReturnValue_1) == 0x000050, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_FClamp_ReturnValue_2) == 0x000058, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000060, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_GetStandingPlayRate, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x000068, "Member 'ABP_JP_FPP_C_GetStandingPlayRate::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.HandIK
// 0x0040 (0x0040 - 0x0000)
struct ABP_JP_FPP_C_HandIK final
{
public:
	struct FPoseLink                              In_Pose;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HandIKInputPose;                                   // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BaseAnimationInput;                                // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HandIK_0;                                          // 0x0030(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_FPP_C_HandIK) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_HandIK");
static_assert(sizeof(ABP_JP_FPP_C_HandIK) == 0x000040, "Wrong size on ABP_JP_FPP_C_HandIK");
static_assert(offsetof(ABP_JP_FPP_C_HandIK, In_Pose) == 0x000000, "Member 'ABP_JP_FPP_C_HandIK::In_Pose' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_HandIK, HandIKInputPose) == 0x000010, "Member 'ABP_JP_FPP_C_HandIK::HandIKInputPose' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_HandIK, BaseAnimationInput) == 0x000020, "Member 'ABP_JP_FPP_C_HandIK::BaseAnimationInput' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_HandIK, HandIK_0) == 0x000030, "Member 'ABP_JP_FPP_C_HandIK::HandIK_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.Handsway
// 0x0020 (0x0020 - 0x0000)
struct ABP_JP_FPP_C_Handsway final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Handsway_0;                                        // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_FPP_C_Handsway) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_Handsway");
static_assert(sizeof(ABP_JP_FPP_C_Handsway) == 0x000020, "Wrong size on ABP_JP_FPP_C_Handsway");
static_assert(offsetof(ABP_JP_FPP_C_Handsway, InPose) == 0x000000, "Member 'ABP_JP_FPP_C_Handsway::InPose' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_Handsway, Handsway_0) == 0x000010, "Member 'ABP_JP_FPP_C_Handsway::Handsway_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.HeadRotation
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_FPP_C_HeadRotation final
{
public:
	bool                                          Rotate;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_HeadRotation) == 0x000001, "Wrong alignment on ABP_JP_FPP_C_HeadRotation");
static_assert(sizeof(ABP_JP_FPP_C_HeadRotation) == 0x000001, "Wrong size on ABP_JP_FPP_C_HeadRotation");
static_assert(offsetof(ABP_JP_FPP_C_HeadRotation, Rotate) == 0x000000, "Member 'ABP_JP_FPP_C_HeadRotation::Rotate' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.Hit
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_FPP_C_Hit final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayRate;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_Hit) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_Hit");
static_assert(sizeof(ABP_JP_FPP_C_Hit) == 0x000010, "Wrong size on ABP_JP_FPP_C_Hit");
static_assert(offsetof(ABP_JP_FPP_C_Hit, Time) == 0x000000, "Member 'ABP_JP_FPP_C_Hit::Time' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_Hit, PlayRate) == 0x000008, "Member 'ABP_JP_FPP_C_Hit::PlayRate' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.Interacted
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_FPP_C_Interacted final
{
public:
	class UObject*                                InteractedObject;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_Interacted) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_Interacted");
static_assert(sizeof(ABP_JP_FPP_C_Interacted) == 0x000008, "Wrong size on ABP_JP_FPP_C_Interacted");
static_assert(offsetof(ABP_JP_FPP_C_Interacted, InteractedObject) == 0x000000, "Member 'ABP_JP_FPP_C_Interacted::InteractedObject' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.ItemReady
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_FPP_C_ItemReady final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_ItemReady) == 0x000001, "Wrong alignment on ABP_JP_FPP_C_ItemReady");
static_assert(sizeof(ABP_JP_FPP_C_ItemReady) == 0x000001, "Wrong size on ABP_JP_FPP_C_ItemReady");
static_assert(offsetof(ABP_JP_FPP_C_ItemReady, bReady) == 0x000000, "Member 'ABP_JP_FPP_C_ItemReady::bReady' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.Jab
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_FPP_C_Jab final
{
public:
	bool                                          Jab_0;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_Jab) == 0x000001, "Wrong alignment on ABP_JP_FPP_C_Jab");
static_assert(sizeof(ABP_JP_FPP_C_Jab) == 0x000001, "Wrong size on ABP_JP_FPP_C_Jab");
static_assert(offsetof(ABP_JP_FPP_C_Jab, Jab_0) == 0x000000, "Member 'ABP_JP_FPP_C_Jab::Jab_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.NewFunction
// 0x0068 (0x0068 - 0x0000)
struct ABP_JP_FPP_C_NewFunction final
{
public:
	struct FVector                                RelativeToHandLocation_0;                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InputPin;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	double                                        InputPin2;                                         // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_NewFunction) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_NewFunction");
static_assert(sizeof(ABP_JP_FPP_C_NewFunction) == 0x000068, "Wrong size on ABP_JP_FPP_C_NewFunction");
static_assert(offsetof(ABP_JP_FPP_C_NewFunction, RelativeToHandLocation_0) == 0x000000, "Member 'ABP_JP_FPP_C_NewFunction::RelativeToHandLocation_0' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_NewFunction, InputPin) == 0x000018, "Member 'ABP_JP_FPP_C_NewFunction::InputPin' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_NewFunction, InputPin2) == 0x000030, "Member 'ABP_JP_FPP_C_NewFunction::InputPin2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_NewFunction, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'ABP_JP_FPP_C_NewFunction::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_NewFunction, CallFunc_Add_VectorVector_ReturnValue) == 0x000050, "Member 'ABP_JP_FPP_C_NewFunction::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.NewSightTransforms
// 0x0060 (0x0060 - 0x0000)
struct ABP_JP_FPP_C_NewSightTransforms final
{
public:
	struct FTransform                             NewRelativeTransform;                              // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_NewSightTransforms) == 0x000010, "Wrong alignment on ABP_JP_FPP_C_NewSightTransforms");
static_assert(sizeof(ABP_JP_FPP_C_NewSightTransforms) == 0x000060, "Wrong size on ABP_JP_FPP_C_NewSightTransforms");
static_assert(offsetof(ABP_JP_FPP_C_NewSightTransforms, NewRelativeTransform) == 0x000000, "Member 'ABP_JP_FPP_C_NewSightTransforms::NewRelativeTransform' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.Overlay
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_FPP_C_Overlay final
{
public:
	struct FPoseLink                              Overlay_0;                                         // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_FPP_C_Overlay) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_Overlay");
static_assert(sizeof(ABP_JP_FPP_C_Overlay) == 0x000010, "Wrong size on ABP_JP_FPP_C_Overlay");
static_assert(offsetof(ABP_JP_FPP_C_Overlay, Overlay_0) == 0x000000, "Member 'ABP_JP_FPP_C_Overlay::Overlay_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.PettheDogFixups
// 0x0028 (0x0028 - 0x0000)
struct ABP_JP_FPP_C_PettheDogFixups final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          InputParam;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              PettheDogFixups_0;                                 // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_JP_FPP_C_PettheDogFixups) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_PettheDogFixups");
static_assert(sizeof(ABP_JP_FPP_C_PettheDogFixups) == 0x000028, "Wrong size on ABP_JP_FPP_C_PettheDogFixups");
static_assert(offsetof(ABP_JP_FPP_C_PettheDogFixups, InPose_0) == 0x000000, "Member 'ABP_JP_FPP_C_PettheDogFixups::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_PettheDogFixups, InputParam) == 0x000010, "Member 'ABP_JP_FPP_C_PettheDogFixups::InputParam' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_PettheDogFixups, PettheDogFixups_0) == 0x000018, "Member 'ABP_JP_FPP_C_PettheDogFixups::PettheDogFixups_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.SetChargeHoldTime
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_FPP_C_SetChargeHoldTime final
{
public:
	double                                        HoldTime;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_SetChargeHoldTime) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_SetChargeHoldTime");
static_assert(sizeof(ABP_JP_FPP_C_SetChargeHoldTime) == 0x000008, "Wrong size on ABP_JP_FPP_C_SetChargeHoldTime");
static_assert(offsetof(ABP_JP_FPP_C_SetChargeHoldTime, HoldTime) == 0x000000, "Member 'ABP_JP_FPP_C_SetChargeHoldTime::HoldTime' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.SetEffectCauser
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_FPP_C_SetEffectCauser final
{
public:
	class AActor*                                 EffectCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_SetEffectCauser) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_SetEffectCauser");
static_assert(sizeof(ABP_JP_FPP_C_SetEffectCauser) == 0x000008, "Wrong size on ABP_JP_FPP_C_SetEffectCauser");
static_assert(offsetof(ABP_JP_FPP_C_SetEffectCauser, EffectCauser) == 0x000000, "Member 'ABP_JP_FPP_C_SetEffectCauser::EffectCauser' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.SetFacialStates
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_FPP_C_SetFacialStates final
{
public:
	EFacialStatesJP                               FacialState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HoldStateDuration;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_SetFacialStates) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_SetFacialStates");
static_assert(sizeof(ABP_JP_FPP_C_SetFacialStates) == 0x000010, "Wrong size on ABP_JP_FPP_C_SetFacialStates");
static_assert(offsetof(ABP_JP_FPP_C_SetFacialStates, FacialState) == 0x000000, "Member 'ABP_JP_FPP_C_SetFacialStates::FacialState' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_SetFacialStates, HoldStateDuration) == 0x000008, "Member 'ABP_JP_FPP_C_SetFacialStates::HoldStateDuration' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.SetOverlayState
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_FPP_C_SetOverlayState final
{
public:
	EItemsJP                                      OverlayState_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_SetOverlayState) == 0x000001, "Wrong alignment on ABP_JP_FPP_C_SetOverlayState");
static_assert(sizeof(ABP_JP_FPP_C_SetOverlayState) == 0x000001, "Wrong size on ABP_JP_FPP_C_SetOverlayState");
static_assert(offsetof(ABP_JP_FPP_C_SetOverlayState, OverlayState_0) == 0x000000, "Member 'ABP_JP_FPP_C_SetOverlayState::OverlayState_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.SetPetActor
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_FPP_C_SetPetActor final
{
public:
	class ABP_Leloi_C*                            PetActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_SetPetActor) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_SetPetActor");
static_assert(sizeof(ABP_JP_FPP_C_SetPetActor) == 0x000008, "Wrong size on ABP_JP_FPP_C_SetPetActor");
static_assert(offsetof(ABP_JP_FPP_C_SetPetActor, PetActor) == 0x000000, "Member 'ABP_JP_FPP_C_SetPetActor::PetActor' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.SetPlayRate
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_FPP_C_SetPlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_SetPlayRate) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_SetPlayRate");
static_assert(sizeof(ABP_JP_FPP_C_SetPlayRate) == 0x000008, "Wrong size on ABP_JP_FPP_C_SetPlayRate");
static_assert(offsetof(ABP_JP_FPP_C_SetPlayRate, PlayRate) == 0x000000, "Member 'ABP_JP_FPP_C_SetPlayRate::PlayRate' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.Talking
// 0x0008 (0x0008 - 0x0000)
struct ABP_JP_FPP_C_Talking final
{
public:
	double                                        Volume;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_Talking) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_Talking");
static_assert(sizeof(ABP_JP_FPP_C_Talking) == 0x000008, "Wrong size on ABP_JP_FPP_C_Talking");
static_assert(offsetof(ABP_JP_FPP_C_Talking, Volume) == 0x000000, "Member 'ABP_JP_FPP_C_Talking::Volume' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.Throwing
// 0x0001 (0x0001 - 0x0000)
struct ABP_JP_FPP_C_Throwing final
{
public:
	bool                                          Throwing_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_Throwing) == 0x000001, "Wrong alignment on ABP_JP_FPP_C_Throwing");
static_assert(sizeof(ABP_JP_FPP_C_Throwing) == 0x000001, "Wrong size on ABP_JP_FPP_C_Throwing");
static_assert(offsetof(ABP_JP_FPP_C_Throwing, Throwing_0) == 0x000000, "Member 'ABP_JP_FPP_C_Throwing::Throwing_0' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.UpdateAccelerationData
// 0x0010 (0x0010 - 0x0000)
struct ABP_JP_FPP_C_UpdateAccelerationData final
{
public:
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_UpdateAccelerationData) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_UpdateAccelerationData");
static_assert(sizeof(ABP_JP_FPP_C_UpdateAccelerationData) == 0x000010, "Wrong size on ABP_JP_FPP_C_UpdateAccelerationData");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAccelerationData, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'ABP_JP_FPP_C_UpdateAccelerationData::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAccelerationData, CallFunc_VSize_ReturnValue) == 0x000008, "Member 'ABP_JP_FPP_C_UpdateAccelerationData::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.UpdateAimOffsetData
// 0x0098 (0x0098 - 0x0000)
struct ABP_JP_FPP_C_UpdateAimOffsetData final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_1;     // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Target_ImplicitCast;            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_AimUp_ImplicitCast;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_UpdateAimOffsetData) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_UpdateAimOffsetData");
static_assert(sizeof(ABP_JP_FPP_C_UpdateAimOffsetData) == 0x000098, "Wrong size on ABP_JP_FPP_C_UpdateAimOffsetData");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, DeltaTime) == 0x000000, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000010, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_NormalizedDeltaRotator_ReturnValue_1) == 0x000028, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_NormalizedDeltaRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_BreakRotator_Roll) == 0x000040, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_BreakRotator_Pitch) == 0x000044, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_BreakRotator_Yaw) == 0x000048, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_BreakRotator_Roll_1) == 0x00004C, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_BreakRotator_Pitch_1) == 0x000050, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_BreakRotator_Yaw_1) == 0x000054, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_SafeDivide_ReturnValue) == 0x000058, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000060, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000068, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_FInterpTo_ReturnValue) == 0x000070, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000078, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_FInterpTo_ReturnValue_1) == 0x000080, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, CallFunc_FInterpTo_Target_ImplicitCast) == 0x000088, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::CallFunc_FInterpTo_Target_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateAimOffsetData, K2Node_VariableSet_AimUp_ImplicitCast) == 0x000090, "Member 'ABP_JP_FPP_C_UpdateAimOffsetData::K2Node_VariableSet_AimUp_ImplicitCast' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.UpdateDirectionData
// 0x0088 (0x0088 - 0x0000)
struct ABP_JP_FPP_C_UpdateDirectionData final
{
public:
	float                                         CallFunc_CalculateDirection_ReturnValue;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_Direction_ImplicitCast;         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_UpdateDirectionData) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_UpdateDirectionData");
static_assert(sizeof(ABP_JP_FPP_C_UpdateDirectionData) == 0x000088, "Wrong size on ABP_JP_FPP_C_UpdateDirectionData");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_CalculateDirection_ReturnValue) == 0x000000, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_CalculateDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_BreakVector_X) == 0x000008, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_BreakVector_Y) == 0x000010, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_BreakVector_Z) == 0x000018, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_VSize_ReturnValue) == 0x000038, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000040, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_VSize_ReturnValue_1) == 0x000058, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_BreakVector_X_1) == 0x000060, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_BreakVector_Y_1) == 0x000068, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_BreakVector_Z_1) == 0x000070, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000078, "Member 'ABP_JP_FPP_C_UpdateDirectionData::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateDirectionData, K2Node_VariableSet_Direction_ImplicitCast) == 0x000080, "Member 'ABP_JP_FPP_C_UpdateDirectionData::K2Node_VariableSet_Direction_ImplicitCast' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.UpdateLayerData
// 0x0108 (0x0108 - 0x0000)
struct ABP_JP_FPP_C_UpdateLayerData final
{
public:
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_1;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_4;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_5;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_6;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_7;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_8;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_9;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_10;             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_11;             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_12;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_13;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_14;             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Value_ImplicitCast;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Hand_R_ImplicitCast;            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_2; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Value_ImplicitCast_1;              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_ScaleWeaponR_ImplicitCast;      // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_Arm_R_Add_ImplicitCast;         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_HandIK_R_HeadSpaceAlpha_ImplicitCast; // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_HandIK_L_HeadSpaceAlpha_ImplicitCast; // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_L_Add_ImplicitCast;         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Hand_L_ImplicitCast;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_L_LS_ImplicitCast;          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Arm_R_LS_ImplicitCast;          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Value_ImplicitCast_2;              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaryKnittingbagScale_ImplicitCast; // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_UpdateLayerData) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_UpdateLayerData");
static_assert(sizeof(ABP_JP_FPP_C_UpdateLayerData) == 0x000108, "Wrong size on ABP_JP_FPP_C_UpdateLayerData");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_FFloor_ReturnValue) == 0x000000, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_FFloor_ReturnValue_1) == 0x000004, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_FFloor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00000C, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000010, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000018, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue) == 0x000020, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_1) == 0x000024, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000028, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000029, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_2) == 0x00002C, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_3) == 0x000030, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_FClamp_ReturnValue) == 0x000038, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_4) == 0x000040, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_5) == 0x000044, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_6) == 0x000048, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_7) == 0x00004C, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x000050, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_FClamp_ReturnValue_1) == 0x000058, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_BooleanAND_ReturnValue) == 0x000060, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_BooleanAND_ReturnValue_1) == 0x000061, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_8) == 0x000064, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_SelectFloat_ReturnValue) == 0x000068, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_9) == 0x000070, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_10) == 0x000074, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_11) == 0x000078, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_12) == 0x00007C, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_13) == 0x000080, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_GetCurveValue_ReturnValue_14) == 0x000084, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_GetCurveValue_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_FClamp_ReturnValue_2) == 0x000088, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000090, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1) == 0x000098, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_FClamp_Value_ImplicitCast) == 0x0000A0, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_FClamp_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, K2Node_VariableSet_Hand_R_ImplicitCast) == 0x0000A8, "Member 'ABP_JP_FPP_C_UpdateLayerData::K2Node_VariableSet_Hand_R_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_2) == 0x0000B0, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_FClamp_Value_ImplicitCast_1) == 0x0000B8, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_FClamp_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, K2Node_VariableSet_ScaleWeaponR_ImplicitCast) == 0x0000C0, "Member 'ABP_JP_FPP_C_UpdateLayerData::K2Node_VariableSet_ScaleWeaponR_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, K2Node_VariableSet_Arm_R_Add_ImplicitCast) == 0x0000C8, "Member 'ABP_JP_FPP_C_UpdateLayerData::K2Node_VariableSet_Arm_R_Add_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, K2Node_VariableSet_HandIK_R_HeadSpaceAlpha_ImplicitCast) == 0x0000D0, "Member 'ABP_JP_FPP_C_UpdateLayerData::K2Node_VariableSet_HandIK_R_HeadSpaceAlpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, K2Node_VariableSet_HandIK_L_HeadSpaceAlpha_ImplicitCast) == 0x0000D4, "Member 'ABP_JP_FPP_C_UpdateLayerData::K2Node_VariableSet_HandIK_L_HeadSpaceAlpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, K2Node_VariableSet_Arm_L_Add_ImplicitCast) == 0x0000D8, "Member 'ABP_JP_FPP_C_UpdateLayerData::K2Node_VariableSet_Arm_L_Add_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, K2Node_VariableSet_Hand_L_ImplicitCast) == 0x0000E0, "Member 'ABP_JP_FPP_C_UpdateLayerData::K2Node_VariableSet_Hand_L_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, K2Node_VariableSet_Arm_L_LS_ImplicitCast) == 0x0000E8, "Member 'ABP_JP_FPP_C_UpdateLayerData::K2Node_VariableSet_Arm_L_LS_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, K2Node_VariableSet_Arm_R_LS_ImplicitCast) == 0x0000F0, "Member 'ABP_JP_FPP_C_UpdateLayerData::K2Node_VariableSet_Arm_R_LS_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, CallFunc_FClamp_Value_ImplicitCast_2) == 0x0000F8, "Member 'ABP_JP_FPP_C_UpdateLayerData::CallFunc_FClamp_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLayerData, K2Node_VariableSet_MaryKnittingbagScale_ImplicitCast) == 0x000100, "Member 'ABP_JP_FPP_C_UpdateLayerData::K2Node_VariableSet_MaryKnittingbagScale_ImplicitCast' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.UpdateLeaningData
// 0x0068 (0x0068 - 0x0000)
struct ABP_JP_FPP_C_UpdateLeaningData final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Target_ImplicitCast;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_UpdateLeaningData) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_UpdateLeaningData");
static_assert(sizeof(ABP_JP_FPP_C_UpdateLeaningData) == 0x000068, "Wrong size on ABP_JP_FPP_C_UpdateLeaningData");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, DeltaTime) == 0x000000, "Member 'ABP_JP_FPP_C_UpdateLeaningData::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_SafeDivide_ReturnValue) == 0x000008, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000010, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_BreakRotator_Roll) == 0x000028, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_BreakRotator_Pitch) == 0x00002C, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_BreakRotator_Yaw) == 0x000030, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_FInterpTo_ReturnValue) == 0x000038, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000048, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_FInterpTo_ReturnValue_1) == 0x000050, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_FInterpTo_Target_ImplicitCast) == 0x000058, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_FInterpTo_Target_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdateLeaningData, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000060, "Member 'ABP_JP_FPP_C_UpdateLeaningData::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function ABP_JP_FPP.ABP_JP_FPP_C.UpdatePlayerStateData
// 0x0040 (0x0040 - 0x0000)
struct ABP_JP_FPP_C_UpdatePlayerStateData final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStanceJP                                     Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStanceJP                                     Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStanceJP                                     K2Node_Select_Default;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetStandingPlayRate_PlayRate;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_JP_FPP_C_UpdatePlayerStateData) == 0x000008, "Wrong alignment on ABP_JP_FPP_C_UpdatePlayerStateData");
static_assert(sizeof(ABP_JP_FPP_C_UpdatePlayerStateData) == 0x000040, "Wrong size on ABP_JP_FPP_C_UpdatePlayerStateData");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, Temp_bool_Variable) == 0x000000, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, Temp_byte_Variable) == 0x000001, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, Temp_byte_Variable_1) == 0x000002, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, K2Node_Select_Default) == 0x000003, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, CallFunc_BreakVector_X) == 0x000008, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, CallFunc_BreakVector_Y) == 0x000010, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, CallFunc_BreakVector_Z) == 0x000018, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000020, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000031, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_JP_FPP_C_UpdatePlayerStateData, CallFunc_GetStandingPlayRate_PlayRate) == 0x000038, "Member 'ABP_JP_FPP_C_UpdatePlayerStateData::CallFunc_GetStandingPlayRate_PlayRate' has a wrong offset!");

}

