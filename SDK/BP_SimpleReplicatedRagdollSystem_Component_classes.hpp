#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SimpleReplicatedRagdollSystem_Component

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SimpleReplicatedRagdollSystem_Component.BP_SimpleReplicatedRagdollSystem_Component_C
// 0x00C0 (0x0160 - 0x00A0)
class UBP_SimpleReplicatedRagdollSystem_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FDateTime                              RecoveryStartTime;                                 // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollEnabled;                                    // 0x00B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             OwnerCharacter;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollFaceUp;                                     // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollOnGround;                                   // 0x00C1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RagdollWorldRotationYaw;                           // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRagdollRotation;                             // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                PelvisLocation;                                    // 0x00E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxErrorInAir;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxErrorOnGround;                                  // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AutomaticRecoveryDelayWhenStill;                   // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RecoverAutomatically;                              // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PelvisBoneName;                                    // 0x011C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeadBoneName;                                      // 0x0124(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TickRateInHz;                                      // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDrawErrorAmount;                             // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           RecoveryAnimation_FaceDown;                        // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           RecoveryAnimation_FaceUp;                          // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_PlayerDown;                                  // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_PlayerRecovered;                             // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void EnableRagdoll(const struct FVector& Impulse_0, bool AddNewImpulse);
	void ExecuteUbergraph_BP_SimpleReplicatedRagdollSystem_Component(int32 EntryPoint);
	void GetGetUpAnimation(bool FacingUp_, class UAnimMontage** AnimMontage);
	void Impulse(bool RunOnServerOnly, const struct FVector& Impulse_0, class FName bone);
	void ImpulseMulticast(const struct FVector& Vector, class FName bone);
	void LimitRagdollSpeed();
	void PauseLocationInterpolation(double Duration);
	void PauseVelocityInterpolation(double Duration);
	void RagdollEndMulticast(const struct FVector& ActorLocation, const struct FRotator& ActorRotation);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RecoverEvent();
	void SetLocationVelocityAndRotationEventMulticast(const struct FVector& Location, const struct FVector& MeshVelocity, const struct FRotator& Rotation);
	void SmoothlySynchronizeMeshDuringRecovery();
	void StartSimulatingPhysicsMulticast(const struct FVector& Velocity, bool AddNewImpulse);
	void StartSimulatingPhysicsServer(const struct FVector& Velocity, bool AddNewImpulse);
	void StopRecovery();
	void StopRecoveryServer();
	void ToggleInput(bool On);
	void ToggleMeshAdjustment(bool On);
	void TraceForOtherCharacters(const struct FVector& TraceStart, const struct FVector& TraceEnd, double ImpulseStrength);
	void TryToInterpolateMeshLocation();
	void UpdateRagdollServer();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SimpleReplicatedRagdollSystem_Component_C">();
	}
	static class UBP_SimpleReplicatedRagdollSystem_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SimpleReplicatedRagdollSystem_Component_C>();
	}
};
static_assert(alignof(UBP_SimpleReplicatedRagdollSystem_Component_C) == 0x000008, "Wrong alignment on UBP_SimpleReplicatedRagdollSystem_Component_C");
static_assert(sizeof(UBP_SimpleReplicatedRagdollSystem_Component_C) == 0x000160, "Wrong size on UBP_SimpleReplicatedRagdollSystem_Component_C");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, RecoveryStartTime) == 0x0000A8, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::RecoveryStartTime' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, RagdollEnabled) == 0x0000B0, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::RagdollEnabled' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, OwnerCharacter) == 0x0000B8, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, RagdollFaceUp) == 0x0000C0, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::RagdollFaceUp' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, RagdollOnGround) == 0x0000C1, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::RagdollOnGround' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, RagdollWorldRotationYaw) == 0x0000C8, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::RagdollWorldRotationYaw' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, TargetRagdollRotation) == 0x0000D0, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::TargetRagdollRotation' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, PelvisLocation) == 0x0000E8, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::PelvisLocation' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, MaxErrorInAir) == 0x000100, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::MaxErrorInAir' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, MaxErrorOnGround) == 0x000108, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::MaxErrorOnGround' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, AutomaticRecoveryDelayWhenStill) == 0x000110, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::AutomaticRecoveryDelayWhenStill' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, RecoverAutomatically) == 0x000118, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::RecoverAutomatically' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, PelvisBoneName) == 0x00011C, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::PelvisBoneName' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, HeadBoneName) == 0x000124, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::HeadBoneName' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, TickRateInHz) == 0x000130, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::TickRateInHz' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, ShouldDrawErrorAmount) == 0x000138, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::ShouldDrawErrorAmount' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, RecoveryAnimation_FaceDown) == 0x000140, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::RecoveryAnimation_FaceDown' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, RecoveryAnimation_FaceUp) == 0x000148, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::RecoveryAnimation_FaceUp' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, Sound_PlayerDown) == 0x000150, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::Sound_PlayerDown' has a wrong offset!");
static_assert(offsetof(UBP_SimpleReplicatedRagdollSystem_Component_C, Sound_PlayerRecovered) == 0x000158, "Member 'UBP_SimpleReplicatedRagdollSystem_Component_C::Sound_PlayerRecovered' has a wrong offset!");

}

