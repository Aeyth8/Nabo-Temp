#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_NeighborDetailsPerkSelect

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WI_NeighborDetailsPerkSelect.WI_NeighborDetailsPerkSelect_C
// 0x00A8 (0x0388 - 0x02E0)
class UWI_NeighborDetailsPerkSelect_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWrapBox*                               GeneralPerkOverview;                               // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_PerkDetailsPanel_C*                 GeneralPerkPanel;                                  // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       NeighborLevelText;                                 // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWrapBox*                               NeighborPerkOverview;                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_PerkDetailsPanel_C*                 NeighborPerkPanel;                                 // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FGameplayTag                           NeighborID;                                        // 0x0310(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         NeighborLevel;                                     // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GeneralPerksPerRow;                                // 0x031C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeighborPerksPerRow;                               // 0x0320(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NeighborPerkButtonDiameter;                        // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NeighborPerkIconDiameter;                          // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GeneralPerkButtonDiameter;                         // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GeneralPerkIconDiameter;                           // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnPerkGridElementClicked;                          // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWI_NeighborDetailsPerkSelectElement_C* ActivePerkSelectElement;                           // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_NeighborDetailsPerkSelectElement_C* EquippedNeighborPerkSelectElement;                 // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_NeighborDetailsPerkSelectElement_C* EquippedGeneralPerkSelectElement;                  // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnNewPerkElementActivated;                         // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SelectEquippedGeneralPerk;                         // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddPerkButtonToContainer(class UWI_NeighborDetailsPerkSelectElement_C* PerkButton);
	void BindPerkButtonEvents(class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement);
	void ClearOverviews();
	void Deactivate();
	void ExecuteUbergraph_WI_NeighborDetailsPerkSelect(int32 EntryPoint);
	void Initialize_Perk_Slot(class UWI_PerkDetailsPanel_C* Perk_Panel, const struct FGameplayTag& PerkID);
	void InitializeNeighborPerkSlot();
	void InitializePerkDetails(const struct FGameplayTag& NeighborID_0, int32 NeighborLevel_0);
	void OnNewPerkActivatedHandler(class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement);
	void OnNewPerkElementActivated__DelegateSignature(class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement);
	void OnNewPerkEquippedHandler(class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement);
	void OnPerkGridElementClicked__DelegateSignature(class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement);
	void OnPerkGridElementClickedHandler(class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement);
	void PreConstruct(bool IsDesignTime);
	void PreconstructGeneralPerksGrid();
	void PreconstructNeighborPerksGrid();
	void ProcessPerkReward(const struct FGameplayTag& PerkID, int32 Level);
	void ProcessRewardsByNeighbor();
	void SelectEquippedPerk(bool SelectEquippedGeneralPerk_0);
	void SetNeighborID(const struct FGameplayTag& NeighborID_0);
	void SetNeighborLevel(int32 NeighborLevel_0);
	void TryCreatePerkButton(const struct FGameplayTag& PerkID, int32 LevelRequirement, bool* Succeeded, class UWI_NeighborDetailsPerkSelectElement_C** PerkButton);
	void UpdateEquippedPerks();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WI_NeighborDetailsPerkSelect_C">();
	}
	static class UWI_NeighborDetailsPerkSelect_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWI_NeighborDetailsPerkSelect_C>();
	}
};
static_assert(alignof(UWI_NeighborDetailsPerkSelect_C) == 0x000008, "Wrong alignment on UWI_NeighborDetailsPerkSelect_C");
static_assert(sizeof(UWI_NeighborDetailsPerkSelect_C) == 0x000388, "Wrong size on UWI_NeighborDetailsPerkSelect_C");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, UberGraphFrame) == 0x0002E0, "Member 'UWI_NeighborDetailsPerkSelect_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, GeneralPerkOverview) == 0x0002E8, "Member 'UWI_NeighborDetailsPerkSelect_C::GeneralPerkOverview' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, GeneralPerkPanel) == 0x0002F0, "Member 'UWI_NeighborDetailsPerkSelect_C::GeneralPerkPanel' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, NeighborLevelText) == 0x0002F8, "Member 'UWI_NeighborDetailsPerkSelect_C::NeighborLevelText' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, NeighborPerkOverview) == 0x000300, "Member 'UWI_NeighborDetailsPerkSelect_C::NeighborPerkOverview' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, NeighborPerkPanel) == 0x000308, "Member 'UWI_NeighborDetailsPerkSelect_C::NeighborPerkPanel' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, NeighborID) == 0x000310, "Member 'UWI_NeighborDetailsPerkSelect_C::NeighborID' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, NeighborLevel) == 0x000318, "Member 'UWI_NeighborDetailsPerkSelect_C::NeighborLevel' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, GeneralPerksPerRow) == 0x00031C, "Member 'UWI_NeighborDetailsPerkSelect_C::GeneralPerksPerRow' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, NeighborPerksPerRow) == 0x000320, "Member 'UWI_NeighborDetailsPerkSelect_C::NeighborPerksPerRow' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, NeighborPerkButtonDiameter) == 0x000328, "Member 'UWI_NeighborDetailsPerkSelect_C::NeighborPerkButtonDiameter' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, NeighborPerkIconDiameter) == 0x000330, "Member 'UWI_NeighborDetailsPerkSelect_C::NeighborPerkIconDiameter' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, GeneralPerkButtonDiameter) == 0x000338, "Member 'UWI_NeighborDetailsPerkSelect_C::GeneralPerkButtonDiameter' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, GeneralPerkIconDiameter) == 0x000340, "Member 'UWI_NeighborDetailsPerkSelect_C::GeneralPerkIconDiameter' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, OnPerkGridElementClicked) == 0x000348, "Member 'UWI_NeighborDetailsPerkSelect_C::OnPerkGridElementClicked' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, ActivePerkSelectElement) == 0x000358, "Member 'UWI_NeighborDetailsPerkSelect_C::ActivePerkSelectElement' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, EquippedNeighborPerkSelectElement) == 0x000360, "Member 'UWI_NeighborDetailsPerkSelect_C::EquippedNeighborPerkSelectElement' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, EquippedGeneralPerkSelectElement) == 0x000368, "Member 'UWI_NeighborDetailsPerkSelect_C::EquippedGeneralPerkSelectElement' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, OnNewPerkElementActivated) == 0x000370, "Member 'UWI_NeighborDetailsPerkSelect_C::OnNewPerkElementActivated' has a wrong offset!");
static_assert(offsetof(UWI_NeighborDetailsPerkSelect_C, SelectEquippedGeneralPerk) == 0x000380, "Member 'UWI_NeighborDetailsPerkSelect_C::SelectEquippedGeneralPerk' has a wrong offset!");

}

