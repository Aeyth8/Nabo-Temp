#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UniversalVoiceChatPro

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UniversalVoiceChatPro_structs.hpp"


namespace SDK
{

// Class UniversalVoiceChatPro.AudioCaptureAndroid
// 0x0000 (0x0028 - 0x0028)
class UAudioCaptureAndroid final : public UBlueprintFunctionLibrary
{
public:
	static void AndroidAskPermission();
	static bool AndroidHasPermission();
	static bool AndroidMicrophoneStart(class UMicrophoneSpeakComponent* CallbackComp, int32 SampleRateToUse);
	static void AndroidMicrophoneStop(class UMicrophoneSpeakComponent* CallbackComp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioCaptureAndroid">();
	}
	static class UAudioCaptureAndroid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioCaptureAndroid>();
	}
};
static_assert(alignof(UAudioCaptureAndroid) == 0x000008, "Wrong alignment on UAudioCaptureAndroid");
static_assert(sizeof(UAudioCaptureAndroid) == 0x000028, "Wrong size on UAudioCaptureAndroid");

// Class UniversalVoiceChatPro.MicrophoneSpeakComponent
// 0x01C0 (0x0260 - 0x00A0)
class UMicrophoneSpeakComponent final : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnDataMicrophoneReceived;                          // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMicrophoneVolumeReceived;                        // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x20];                                      // 0x00C0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LatestVolume;                                      // 0x00E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x3C];                                      // 0x00E4(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        VoiceAudioComponent;                               // 0x0120(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        VoiceTeamAudioComponent;                           // 0x0128(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWaveProcedural*                   VoiceSoundWaveProcedural;                          // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWaveProcedural*                   TeamVoiceSoundWaveProcedural;                      // 0x0138(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x120];                                    // 0x0140(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DataMicrophoneReceived__DelegateSignature(const TArray<uint8>& Data);
	void EndSpeaking();
	float GetLocallyMultiplierVolume();
	bool InitAudioResources(int32 VoiceSampleRate, int32 OpusFramesPerSec);
	bool IsPlayingAudioVoice();
	void MicrophoneVolumeReceived__DelegateSignature(float Volume);
	void MuteAudio(bool _isMuted);
	void PayloadReceivedVoiceData(const TArray<uint8>& DataEncoded, int32 SampleRate, int32 PCMSize, int32 OpusFramePerSec, const TArray<uint8>& _radioChannel);
	void RPCClientTransmitVoiceData(const TArray<uint8>& Data, int32 SampleRate, int32 PCMSize, int32 OpusFramePerSec, bool _isGlobal, const TArray<uint8>& _radioChannel, bool _useRange, float _maxRange);
	void RPCReceiveVoiceFromServer(class UMicrophoneSpeakComponent* CompToOutputVoice, const TArray<uint8>& DataEncoded, int32 SampleRate, int32 PCMSize, int32 OpusFramePerSec, const TArray<uint8>& _radioChannel);
	void RPCServerBroadcastVoiceData(const TArray<uint8>& Data, int32 SampleRate, int32 PCMSize, int32 OpusFramePerSec, const TArray<uint8>& _radioChannel);
	void SetAttenuationAssetPath(bool EnableAttenuation, const class FString& _pathToAttenuationAsset);
	void SetLocallyMultiplierVolume(float MultiplierVolume);
	void SetOverrideLocallyAttenuationPath(bool EnableAttenuation, bool OverrideLocally, const class FString& _pathToAttenuationAsset);
	void SetOverrideLocallySourceEffectPath(bool EnableSourceEffect, bool OverrideLocally, const class FString& _pathToSourceEffectAsset);
	void SetSourceChainEffectAssetPath(bool EnableSourceChainEffect, const class FString& _pathToSourceChainEffect);
	void SetVoiceVolume(float Volume);
	bool StartSpeaking(bool _shouldHearMyOwnVoice, bool IsGlobal, const TArray<uint8>& RadioChannel, bool UseRange, float MaxRange);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MicrophoneSpeakComponent">();
	}
	static class UMicrophoneSpeakComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMicrophoneSpeakComponent>();
	}
};
static_assert(alignof(UMicrophoneSpeakComponent) == 0x000008, "Wrong alignment on UMicrophoneSpeakComponent");
static_assert(sizeof(UMicrophoneSpeakComponent) == 0x000260, "Wrong size on UMicrophoneSpeakComponent");
static_assert(offsetof(UMicrophoneSpeakComponent, OnDataMicrophoneReceived) == 0x0000A0, "Member 'UMicrophoneSpeakComponent::OnDataMicrophoneReceived' has a wrong offset!");
static_assert(offsetof(UMicrophoneSpeakComponent, OnMicrophoneVolumeReceived) == 0x0000B0, "Member 'UMicrophoneSpeakComponent::OnMicrophoneVolumeReceived' has a wrong offset!");
static_assert(offsetof(UMicrophoneSpeakComponent, LatestVolume) == 0x0000E0, "Member 'UMicrophoneSpeakComponent::LatestVolume' has a wrong offset!");
static_assert(offsetof(UMicrophoneSpeakComponent, VoiceAudioComponent) == 0x000120, "Member 'UMicrophoneSpeakComponent::VoiceAudioComponent' has a wrong offset!");
static_assert(offsetof(UMicrophoneSpeakComponent, VoiceTeamAudioComponent) == 0x000128, "Member 'UMicrophoneSpeakComponent::VoiceTeamAudioComponent' has a wrong offset!");
static_assert(offsetof(UMicrophoneSpeakComponent, VoiceSoundWaveProcedural) == 0x000130, "Member 'UMicrophoneSpeakComponent::VoiceSoundWaveProcedural' has a wrong offset!");
static_assert(offsetof(UMicrophoneSpeakComponent, TeamVoiceSoundWaveProcedural) == 0x000138, "Member 'UMicrophoneSpeakComponent::TeamVoiceSoundWaveProcedural' has a wrong offset!");

// Class UniversalVoiceChatPro.PlayerVoiceChatActor
// 0x0090 (0x0320 - 0x0290)
class APlayerVoiceChatActor : public AActor
{
public:
	class USceneComponent*                        RootSceneComponent;                                // 0x0290(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMicrophoneSpeakComponent*              MicrophoneSpeakComponent;                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           OwnerPlayerState;                                  // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IdVoiceChat;                                       // 0x02A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x02B0(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMicrophoneOn;                                    // 0x02C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VoiceVolume;                                       // 0x02C4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 RadioChannelSubscribed;                            // 0x02C8(0x0010)(BlueprintVisible, Net, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class FString                                 PathToAttenuationAsset;                            // 0x02D8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, RepNotify, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PathToSourceChainEffectAsset;                      // 0x02E8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, RepNotify, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerPerformAntiCheat;                            // 0x02F8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AntiCheatAllowUseProximity;                        // 0x02F9(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AntiCheatAllowUseGlobal;                           // 0x02FA(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FB[0x1];                                      // 0x02FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AntiCheatMaxProximityRange;                        // 0x02FC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerNameReceived;                              // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnIsMicrophoneOnReceived;                          // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void DelegateEndPlayOwner(class AActor* Act, EEndPlayReason EndPlayReason);
	float GetLocallyMultiplierVolume();
	bool IsMicrophoneComponentValid();
	void MuteAudio(bool IsMute);
	void PlayerMicrophoneOnReceived__DelegateSignature(bool IsMicrophoneOn_0);
	void PlayerNameReceived__DelegateSignature(const class FString& Name_0);
	void RepNotifyAttenuationAsset();
	void RepNotifyIsMicrophoneOn();
	void RepNotifyMicComp();
	void RepNotifyPlayerName();
	void RepNotifySourceEffectAsset();
	void RepNotifyVoiceVolume();
	void RPCClientAskAddChannel(uint8 ChannelToAdd);
	void RPCClientAskRemoveChannel(uint8 ChannelToRemove);
	void RPCClientSetAttenuationPath(const class FString& _attenuationPath);
	void RPCClientSetIsMicrophoneOn(bool _isMicrophoneOn);
	void RPCClientSetMicrophoneVolume(float Volume);
	void RPCClientSetPlayerName(const class FString& Name_0);
	void RPCClientSetSourceChainEffectPath(const class FString& _pathToSourceChainEffectAsset);
	void RPCServerUpdatePosAudioComp(const struct FVector& WorldPos, const struct FRotator& WorldRotation);
	void ServerAddChannel(uint8 ChannelToAdd);
	void ServerRemoveChannel(uint8 ChannelToRemove);
	void ServerSetAllowUseGlobal(bool _allowUseGlobal);
	void ServerSetAllowUseProximity(bool _allowUseRange);
	void ServerSetAttenuation(bool EnableAttenuation, const class FString& _pathToAttenuationAsset);
	void ServerSetMaxProximityRange(float _maxProximityRange);
	void ServerSetSourceChainEffect(bool EnableSourceChainEffect, const class FString& _pathToSourceChainEffect);
	void SetLocallyMultiplierVolume(float MultiplierVolume);
	void SetOverrideLocallyAttenuationPath(bool EnableAttenuation, bool OverrideLocally, const class FString& _pathToAttenuationAsset);
	void SetOverrideLocallySourceEffectPath(bool EnableSourceEffect, bool OverrideLocally, const class FString& _pathToSourceEffectAsset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerVoiceChatActor">();
	}
	static class APlayerVoiceChatActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerVoiceChatActor>();
	}
};
static_assert(alignof(APlayerVoiceChatActor) == 0x000008, "Wrong alignment on APlayerVoiceChatActor");
static_assert(sizeof(APlayerVoiceChatActor) == 0x000320, "Wrong size on APlayerVoiceChatActor");
static_assert(offsetof(APlayerVoiceChatActor, RootSceneComponent) == 0x000290, "Member 'APlayerVoiceChatActor::RootSceneComponent' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, MicrophoneSpeakComponent) == 0x000298, "Member 'APlayerVoiceChatActor::MicrophoneSpeakComponent' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, OwnerPlayerState) == 0x0002A0, "Member 'APlayerVoiceChatActor::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, IdVoiceChat) == 0x0002A8, "Member 'APlayerVoiceChatActor::IdVoiceChat' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, PlayerName) == 0x0002B0, "Member 'APlayerVoiceChatActor::PlayerName' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, IsMicrophoneOn) == 0x0002C0, "Member 'APlayerVoiceChatActor::IsMicrophoneOn' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, VoiceVolume) == 0x0002C4, "Member 'APlayerVoiceChatActor::VoiceVolume' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, RadioChannelSubscribed) == 0x0002C8, "Member 'APlayerVoiceChatActor::RadioChannelSubscribed' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, PathToAttenuationAsset) == 0x0002D8, "Member 'APlayerVoiceChatActor::PathToAttenuationAsset' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, PathToSourceChainEffectAsset) == 0x0002E8, "Member 'APlayerVoiceChatActor::PathToSourceChainEffectAsset' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, ServerPerformAntiCheat) == 0x0002F8, "Member 'APlayerVoiceChatActor::ServerPerformAntiCheat' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, AntiCheatAllowUseProximity) == 0x0002F9, "Member 'APlayerVoiceChatActor::AntiCheatAllowUseProximity' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, AntiCheatAllowUseGlobal) == 0x0002FA, "Member 'APlayerVoiceChatActor::AntiCheatAllowUseGlobal' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, AntiCheatMaxProximityRange) == 0x0002FC, "Member 'APlayerVoiceChatActor::AntiCheatMaxProximityRange' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, OnPlayerNameReceived) == 0x000300, "Member 'APlayerVoiceChatActor::OnPlayerNameReceived' has a wrong offset!");
static_assert(offsetof(APlayerVoiceChatActor, OnIsMicrophoneOnReceived) == 0x000310, "Member 'APlayerVoiceChatActor::OnIsMicrophoneOnReceived' has a wrong offset!");

// Class UniversalVoiceChatPro.UniversalVoiceChat
// 0x0000 (0x0028 - 0x0028)
class UUniversalVoiceChat final : public UBlueprintFunctionLibrary
{
public:
	static bool IsMyPlayerVoiceChatActorReady();
	static void RegisterCallbackDeleteVoiceChatActor(const TDelegate<void(class APlayerVoiceChatActor* VoiceChatActor)>& Delegate);
	static void RegisterCallbackMyVoiceChatActorReady(const TDelegate<void(class APlayerVoiceChatActor* VoiceChatActor)>& Delegate);
	static void RegisterCallbackNewVoiceChatActor(const TDelegate<void(class APlayerVoiceChatActor* VoiceChatActor)>& Delegate);
	static bool VoiceChatAddChannel(uint8 ChannelToAdd);
	static void VoiceChatAskMicrophonePermission();
	static bool VoiceChatCheckRegisteredToChannel(uint8 ChannelToCheck);
	static bool VoiceChatEnableShouldHearMyOwnVoice(bool Enable);
	static class APlayerVoiceChatActor* VoiceChatGetActorFromPlayerState(const class UObject* WorldContextObject, class APlayerState* FromPlayerState);
	static void VoiceChatGetAudioDevicesList(TArray<class FString>* OutDevices);
	static float VoiceChatGetMicrophoneRuntimeVolumeFromPlayerState(const class UObject* WorldContextObject, class APlayerState* FromPlayerState);
	static bool VoiceChatGetMuteAllPlayers();
	static class APlayerVoiceChatActor* VoiceChatGetMyLocalPlayerVoiceChat();
	static bool VoiceChatHasMicrophonePermission();
	static bool VoiceChatInitAudioVoiceChatQuality(int32 _sampleRate, EOpusFramePerSec _opusFramePerSec);
	static bool VoiceChatIsSpeaking();
	static bool VoiceChatLocalIsMutedSomeone(const class UObject* WorldContextObject, class APlayerState* PlayerToCheckMute);
	static void VoiceChatLocalMuteSomeone(const class UObject* WorldContextObject, class APlayerState* PlayerToMute, bool ShouldMute);
	static bool VoiceChatRemoveChannel(uint8 ChannelToRemove);
	static bool VoiceChatSetAttenuationPath(bool EnableAttenuation, const class FString& _attenuationPath);
	static void VoiceChatSetDefaultTickRateUpdateLocation(float TickRate);
	static void VoiceChatSetGlobalVolume(float GlobalVolume);
	static void VoiceChatSetHardwareAudioInput(const class FString& AudioInputDeviceName);
	static bool VoiceChatSetMicrophoneVolume(float Volume);
	static void VoiceChatSetMuteAllPlayers(bool _muteAll);
	static bool VoiceChatSetPlayerName(const class FString& Name_0);
	static void VoiceChatSetRawMicrophoneGain(float Gain);
	static bool VoiceChatSetSourceChainEffectPath(bool EnableSourceChainEffect, const class FString& _pathToSourceChainEffectAsset);
	static void VoiceChatSetThresholdSendData(float ThresholdSendData);
	static bool VoiceChatStartSpeak(bool _shouldHearMyOwnVoice, bool IsGlobal, uint8 RadioChannel, bool UseProximity, float MaxProximityRange);
	static bool VoiceChatStartSpeakTeamArray(bool _shouldHearMyOwnVoice, bool IsGlobal, const TArray<uint8>& RadioChannel, bool UseProximity, float MaxProximityRange);
	static bool VoiceChatStopSpeak();
	static void VoiceChatUseAndroidCommunicationMode(bool Use);
	static bool VoiceChatWasInitAudioVoiceChatQuality();

	float VoiceChatGetSomeoneLocallyMultiplierVolume(const class UObject* WorldContextObject, class APlayerState* PlayerToOverride);
	void VoiceChatSetSomeoneLocallyMultiplierVolume(const class UObject* WorldContextObject, float MultiplierVolume, class APlayerState* PlayerToOverride);
	void VoiceChatSetSomeoneOverrideLocallyAttenuationPath(const class UObject* WorldContextObject, bool EnableAttenuation, bool OverrideLocally, const class FString& _pathToAttenuationAsset, class APlayerState* PlayerToOverride);
	void VoiceChatSetSomeoneOverrideLocallySourceEffectPath(const class UObject* WorldContextObject, bool EnableSourceEffect, bool OverrideLocally, const class FString& _pathToSourceEffectAsset, class APlayerState* PlayerToOverride);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UniversalVoiceChat">();
	}
	static class UUniversalVoiceChat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUniversalVoiceChat>();
	}
};
static_assert(alignof(UUniversalVoiceChat) == 0x000008, "Wrong alignment on UUniversalVoiceChat");
static_assert(sizeof(UUniversalVoiceChat) == 0x000028, "Wrong size on UUniversalVoiceChat");

}

