#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_KnockedOut_DeathTimerDetails

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "S_DeathTimerDetails_structs.hpp"


namespace SDK::Params
{

// Function WI_KnockedOut_DeathTimerDetails.WI_KnockedOut_DeathTimerDetails_C.ExecuteUbergraph_WI_KnockedOut_DeathTimerDetails
// 0x0008 (0x0008 - 0x0000)
struct WI_KnockedOut_DeathTimerDetails_C_ExecuteUbergraph_WI_KnockedOut_DeathTimerDetails final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_KnockedOut_DeathTimerDetails_C_ExecuteUbergraph_WI_KnockedOut_DeathTimerDetails) == 0x000004, "Wrong alignment on WI_KnockedOut_DeathTimerDetails_C_ExecuteUbergraph_WI_KnockedOut_DeathTimerDetails");
static_assert(sizeof(WI_KnockedOut_DeathTimerDetails_C_ExecuteUbergraph_WI_KnockedOut_DeathTimerDetails) == 0x000008, "Wrong size on WI_KnockedOut_DeathTimerDetails_C_ExecuteUbergraph_WI_KnockedOut_DeathTimerDetails");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_ExecuteUbergraph_WI_KnockedOut_DeathTimerDetails, EntryPoint) == 0x000000, "Member 'WI_KnockedOut_DeathTimerDetails_C_ExecuteUbergraph_WI_KnockedOut_DeathTimerDetails::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_ExecuteUbergraph_WI_KnockedOut_DeathTimerDetails, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WI_KnockedOut_DeathTimerDetails_C_ExecuteUbergraph_WI_KnockedOut_DeathTimerDetails::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WI_KnockedOut_DeathTimerDetails.WI_KnockedOut_DeathTimerDetails_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WI_KnockedOut_DeathTimerDetails_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_KnockedOut_DeathTimerDetails_C_PreConstruct) == 0x000001, "Wrong alignment on WI_KnockedOut_DeathTimerDetails_C_PreConstruct");
static_assert(sizeof(WI_KnockedOut_DeathTimerDetails_C_PreConstruct) == 0x000001, "Wrong size on WI_KnockedOut_DeathTimerDetails_C_PreConstruct");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WI_KnockedOut_DeathTimerDetails_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WI_KnockedOut_DeathTimerDetails.WI_KnockedOut_DeathTimerDetails_C.SetDataViaStruct
// 0x0028 (0x0028 - 0x0000)
struct WI_KnockedOut_DeathTimerDetails_C_SetDataViaStruct final
{
public:
	struct FS_DeathTimerDetails                   DeathTimerDetails;                                 // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_KnockedOut_DeathTimerDetails_C_SetDataViaStruct) == 0x000008, "Wrong alignment on WI_KnockedOut_DeathTimerDetails_C_SetDataViaStruct");
static_assert(sizeof(WI_KnockedOut_DeathTimerDetails_C_SetDataViaStruct) == 0x000028, "Wrong size on WI_KnockedOut_DeathTimerDetails_C_SetDataViaStruct");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetDataViaStruct, DeathTimerDetails) == 0x000000, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetDataViaStruct::DeathTimerDetails' has a wrong offset!");

// Function WI_KnockedOut_DeathTimerDetails.WI_KnockedOut_DeathTimerDetails_C.SetHasPerkBonus
// 0x0040 (0x0040 - 0x0000)
struct WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus final
{
public:
	bool                                          HasPerkBonus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RespawnTimeBeforePerkMultiplier;                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RespawnTimeAfterPerkMultiplier;                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_TimeToSecondsString_SecondsString;        // 0x0028(0x0010)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus) == 0x000008, "Wrong alignment on WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus");
static_assert(sizeof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus) == 0x000040, "Wrong size on WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus, HasPerkBonus) == 0x000000, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus::HasPerkBonus' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus, RespawnTimeBeforePerkMultiplier) == 0x000008, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus::RespawnTimeBeforePerkMultiplier' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus, RespawnTimeAfterPerkMultiplier) == 0x000010, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus::RespawnTimeAfterPerkMultiplier' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus, Temp_byte_Variable) == 0x000018, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus, CallFunc_TimeToSecondsString_SecondsString) == 0x000028, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus::CallFunc_TimeToSecondsString_SecondsString' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus, Temp_byte_Variable_1) == 0x000038, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus, Temp_bool_Variable) == 0x000039, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus, K2Node_Select_Default) == 0x00003A, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetHasPerkBonus::K2Node_Select_Default' has a wrong offset!");

// Function WI_KnockedOut_DeathTimerDetails.WI_KnockedOut_DeathTimerDetails_C.SetIsAtHome
// 0x0040 (0x0040 - 0x0000)
struct WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome final
{
public:
	bool                                          IsAtHome;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RespawnTimeBeforeLocationMultiplier;               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RespawnTimeAfterLocationMultiplier;                // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_TimeToSecondsString_SecondsString;        // 0x0028(0x0010)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome) == 0x000008, "Wrong alignment on WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome");
static_assert(sizeof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome) == 0x000040, "Wrong size on WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome, IsAtHome) == 0x000000, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome::IsAtHome' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome, RespawnTimeBeforeLocationMultiplier) == 0x000008, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome::RespawnTimeBeforeLocationMultiplier' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome, RespawnTimeAfterLocationMultiplier) == 0x000010, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome::RespawnTimeAfterLocationMultiplier' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome, Temp_byte_Variable) == 0x000018, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome, CallFunc_TimeToSecondsString_SecondsString) == 0x000028, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome::CallFunc_TimeToSecondsString_SecondsString' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome, Temp_byte_Variable_1) == 0x000038, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome, Temp_bool_Variable) == 0x000039, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome, K2Node_Select_Default) == 0x00003A, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetIsAtHome::K2Node_Select_Default' has a wrong offset!");

// Function WI_KnockedOut_DeathTimerDetails.WI_KnockedOut_DeathTimerDetails_C.SetRespawnPenalty
// 0x0018 (0x0018 - 0x0000)
struct WI_KnockedOut_DeathTimerDetails_C_SetRespawnPenalty final
{
public:
	double                                        RespawnTime;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_TimeToSecondsString_SecondsString;        // 0x0008(0x0010)()
};
static_assert(alignof(WI_KnockedOut_DeathTimerDetails_C_SetRespawnPenalty) == 0x000008, "Wrong alignment on WI_KnockedOut_DeathTimerDetails_C_SetRespawnPenalty");
static_assert(sizeof(WI_KnockedOut_DeathTimerDetails_C_SetRespawnPenalty) == 0x000018, "Wrong size on WI_KnockedOut_DeathTimerDetails_C_SetRespawnPenalty");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetRespawnPenalty, RespawnTime) == 0x000000, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetRespawnPenalty::RespawnTime' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_SetRespawnPenalty, CallFunc_TimeToSecondsString_SecondsString) == 0x000008, "Member 'WI_KnockedOut_DeathTimerDetails_C_SetRespawnPenalty::CallFunc_TimeToSecondsString_SecondsString' has a wrong offset!");

// Function WI_KnockedOut_DeathTimerDetails.WI_KnockedOut_DeathTimerDetails_C.TimeToSecondsString
// 0x0098 (0x0098 - 0x0000)
struct WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString final
{
public:
	double                                        Seconds;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAlwaysSign;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SecondsString;                                     // 0x0010(0x0010)(Parm, OutParm)
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0020(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0088(0x0010)()
};
static_assert(alignof(WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString) == 0x000008, "Wrong alignment on WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString");
static_assert(sizeof(WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString) == 0x000098, "Wrong size on WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString, Seconds) == 0x000000, "Member 'WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString::Seconds' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString, bAlwaysSign) == 0x000008, "Member 'WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString::bAlwaysSign' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString, SecondsString) == 0x000010, "Member 'WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString::SecondsString' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000020, "Member 'WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString, K2Node_MakeArray_Array) == 0x000078, "Member 'WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString, CallFunc_Format_ReturnValue) == 0x000088, "Member 'WI_KnockedOut_DeathTimerDetails_C_TimeToSecondsString::CallFunc_Format_ReturnValue' has a wrong offset!");

}

