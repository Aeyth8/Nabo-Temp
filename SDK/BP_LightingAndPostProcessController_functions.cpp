#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightingAndPostProcessController

#include "Basic.hpp"

#include "BP_LightingAndPostProcessController_classes.hpp"
#include "BP_LightingAndPostProcessController_parameters.hpp"


namespace SDK
{

// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.BlendDefaultSkylightValues
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::BlendDefaultSkylightValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "BlendDefaultSkylightValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.BlendTargetSkylightValues
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::BlendTargetSkylightValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "BlendTargetSkylightValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.BlendTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_LightingAndPostProcessController_C::BlendTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "BlendTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.BlendTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_LightingAndPostProcessController_C::BlendTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "BlendTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.ExecuteUbergraph_BP_LightingAndPostProcessController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightingAndPostProcessController_C::ExecuteUbergraph_BP_LightingAndPostProcessController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "ExecuteUbergraph_BP_LightingAndPostProcessController");

	Params::BP_LightingAndPostProcessController_C_ExecuteUbergraph_BP_LightingAndPostProcessController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.ForceDefaultSettings
// (BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::ForceDefaultSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "ForceDefaultSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.ImplementDefaults
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::ImplementDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "ImplementDefaults");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.NightEvents
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::NightEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "NightEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.PP Overlapped
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Lighting_Presets                      LightingPreset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Lighting_Presets                      LightingPresetNight                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightingAndPostProcessController_C::PP_Overlapped(E_Lighting_Presets LightingPreset, E_Lighting_Presets LightingPresetNight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "PP Overlapped");

	Params::BP_LightingAndPostProcessController_C_PP_Overlapped Parms{};

	Parms.LightingPreset = LightingPreset;
	Parms.LightingPresetNight = LightingPresetNight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.PP_OverlapEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::PP_OverlapEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "PP_OverlapEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.ReplaceBackgroundBuildingMaterials
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::ReplaceBackgroundBuildingMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "ReplaceBackgroundBuildingMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.SetDefaultVariables
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::SetDefaultVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "SetDefaultVariables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.SetLightingSettingsPreview
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Lighting_Presets                      Enumerator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightingAndPostProcessController_C::SetLightingSettingsPreview(E_Lighting_Presets Enumerator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "SetLightingSettingsPreview");

	Params::BP_LightingAndPostProcessController_C_SetLightingSettingsPreview Parms{};

	Parms.Enumerator = Enumerator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.SetRotations
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::SetRotations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "SetRotations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.SetTransitionCurve
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveFloat*                      NewFloatCurve                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_LightingAndPostProcessController_C::SetTransitionCurve(class UCurveFloat* NewFloatCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "SetTransitionCurve");

	Params::BP_LightingAndPostProcessController_C_SetTransitionCurve Parms{};

	Parms.NewFloatCurve = NewFloatCurve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.SkyBlender__FinishedFunc
// (BlueprintEvent)

void ABP_LightingAndPostProcessController_C::SkyBlender__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "SkyBlender__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.SkyBlender__UpdateFunc
// (BlueprintEvent)

void ABP_LightingAndPostProcessController_C::SkyBlender__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "SkyBlender__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.SwitchToDay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DayTransitionDuration                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightingAndPostProcessController_C::SwitchToDay(double DayTransitionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "SwitchToDay");

	Params::BP_LightingAndPostProcessController_C_SwitchToDay Parms{};

	Parms.DayTransitionDuration = DayTransitionDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.SwitchToNight
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NightTransitionDuration                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightingAndPostProcessController_C::SwitchToNight(double NightTransitionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "SwitchToNight");

	Params::BP_LightingAndPostProcessController_C_SwitchToNight Parms{};

	Parms.NightTransitionDuration = NightTransitionDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateMainPostProcesses
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateMainPostProcesses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateMainPostProcesses");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateMoon
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateMoon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateMoon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateSkyAtmosphereSunColor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateSkyAtmosphereSunColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateSkyAtmosphereSunColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateSkyAtmosphereSunIntensity
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateSkyAtmosphereSunIntensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateSkyAtmosphereSunIntensity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateSkyAtmosphereSunRotation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateSkyAtmosphereSunRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateSkyAtmosphereSunRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateSkyAtmosphereSunTemparature
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateSkyAtmosphereSunTemparature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateSkyAtmosphereSunTemparature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateSkylight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateSkylight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateSkylight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateStars
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateStars()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateStars");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateSunColor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateSunColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateSunColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateSunIntensity
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateSunIntensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateSunIntensity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateSunRotation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateSunRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateSunRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UpdateSunTemperature
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UpdateSunTemperature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UpdateSunTemperature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingAndPostProcessController.BP_LightingAndPostProcessController_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LightingAndPostProcessController_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingAndPostProcessController_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

