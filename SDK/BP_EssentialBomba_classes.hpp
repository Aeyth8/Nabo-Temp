#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EssentialBomba

#include "Basic.hpp"

#include "InteractableBase_classes.hpp"
#include "Engine_structs.hpp"
#include "JP_structs.hpp"
#include "E_MaterialTypes_structs.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EssentialBomba.BP_EssentialBomba_C
// 0x00C8 (0x03A8 - 0x02E0)
class ABP_EssentialBomba_C final : public AInteractableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_EssentialBomba_C;                // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDistanceScalingWidgetComponent*        DistanceScalingWidgetPOI;                          // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioFuse;                                         // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereDistanceScalingWidget;                       // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDistanceScalingWidgetComponent*        DistanceScalingWidget;                             // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponentIW*              AbilitySystemComponentIW;                          // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BombMesh;                                          // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         TeamOwner;                                         // 0x0328(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           InstigatorPlayerState;                             // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FCombatParticipant                     Killer;                                            // 0x0338(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UItemCompatibleInfoWI_C*                HealthBarWidget;                                   // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          FuseTimerElapsed;                                  // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FuseTime;                                          // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__HouseActorBase_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__HouseActorBase_Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CacheHealthBar();
	void ExecuteUbergraph_BP_EssentialBomba(int32 EntryPoint);
	void GetDamageSpec(class ACharacter* Target, struct FGameplayEffectSpecHandle* SpecHandle);
	void GetDurabilityCostWhenHit(double* Amount);
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void GetOptionalText(class FText* Return, class FText* Optional_Second_Line);
	void HideInteractionWidget(bool* Return);
	void HitInterface(const struct FVector& Direction);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void MeleeHit(const class AActor*& AttackingActor);
	void On_Fuse_Timer_Elapsed();
	void OnDamaged(float Delta, class AActor* Causer, const struct FCombatParticipant& CombatParticipant, const struct FKillMethod& KillMethod, const struct FVector_NetQuantize& Location);
	void OnHealthChanged(float Health, float MaxHealth);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void Spawn_Detsroyed_Bomb();
	void TakeDamage();
	void UpdateHealthBar();

	struct FTeam GetTeam() const;
	uint8 GetTeamID() const;
	bool HasTeam() const;
	bool IsAvailableForEnemyTeam(class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForInteraction(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent) const;
	bool TakeDamageFromAllTeams() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EssentialBomba_C">();
	}
	static class ABP_EssentialBomba_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EssentialBomba_C>();
	}
};
static_assert(alignof(ABP_EssentialBomba_C) == 0x000008, "Wrong alignment on ABP_EssentialBomba_C");
static_assert(sizeof(ABP_EssentialBomba_C) == 0x0003A8, "Wrong size on ABP_EssentialBomba_C");
static_assert(offsetof(ABP_EssentialBomba_C, UberGraphFrame_BP_EssentialBomba_C) == 0x0002E0, "Member 'ABP_EssentialBomba_C::UberGraphFrame_BP_EssentialBomba_C' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, DistanceScalingWidgetPOI) == 0x0002E8, "Member 'ABP_EssentialBomba_C::DistanceScalingWidgetPOI' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, AudioFuse) == 0x0002F0, "Member 'ABP_EssentialBomba_C::AudioFuse' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, Niagara) == 0x0002F8, "Member 'ABP_EssentialBomba_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, SphereDistanceScalingWidget) == 0x000300, "Member 'ABP_EssentialBomba_C::SphereDistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, DistanceScalingWidget) == 0x000308, "Member 'ABP_EssentialBomba_C::DistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, AbilitySystemComponentIW) == 0x000310, "Member 'ABP_EssentialBomba_C::AbilitySystemComponentIW' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, BombMesh) == 0x000318, "Member 'ABP_EssentialBomba_C::BombMesh' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, Root) == 0x000320, "Member 'ABP_EssentialBomba_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, TeamOwner) == 0x000328, "Member 'ABP_EssentialBomba_C::TeamOwner' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, InstigatorPlayerState) == 0x000330, "Member 'ABP_EssentialBomba_C::InstigatorPlayerState' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, Killer) == 0x000338, "Member 'ABP_EssentialBomba_C::Killer' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, HealthBarWidget) == 0x000398, "Member 'ABP_EssentialBomba_C::HealthBarWidget' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, FuseTimerElapsed) == 0x0003A0, "Member 'ABP_EssentialBomba_C::FuseTimerElapsed' has a wrong offset!");
static_assert(offsetof(ABP_EssentialBomba_C, FuseTime) == 0x0003A4, "Member 'ABP_EssentialBomba_C::FuseTime' has a wrong offset!");

}

