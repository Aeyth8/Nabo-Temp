#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_CharacterNamePlate

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "E_NameplateDistanceState_structs.hpp"
#include "JP_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.ExecuteUbergraph_WI_CharacterNamePlate
// 0x0128 (0x0128 - 0x0000)
struct WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_3;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_4;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable;                               // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Enable;                         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_StealthActive;                        // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsEnemyToLocalPlayer;                 // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_5;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Show;                           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_2;                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0044(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VectorSpringInterp_ReturnValue;           // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_3;                           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_3;              // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsTalking;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate) == 0x000008, "Wrong alignment on WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate");
static_assert(sizeof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate) == 0x000128, "Wrong size on WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, EntryPoint) == 0x000000, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_byte_Variable) == 0x000004, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_bool_Variable) == 0x000005, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_byte_Variable_1) == 0x000006, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_byte_Variable_2) == 0x000007, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_bool_Variable_1) == 0x000008, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_real_Variable) == 0x00000C, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_real_Variable_1) == 0x000010, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_bool_Variable_2) == 0x000014, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_byte_Variable_3) == 0x000015, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_byte_Variable_4) == 0x000016, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_Event_Enable) == 0x000017, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_Event_IsDesignTime) == 0x000018, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_CustomEvent_Enable) == 0x000019, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_CustomEvent_Enable' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_Event_StealthActive) == 0x00001A, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_Event_StealthActive' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_Event_IsEnemyToLocalPlayer) == 0x00001B, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_Event_IsEnemyToLocalPlayer' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_Select_Default) == 0x00001C, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_Select_Default_1) == 0x000020, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_byte_Variable_5) == 0x000030, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_CustomEvent_Show) == 0x000031, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_CustomEvent_Show' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_PlayAnimation_ReturnValue_1) == 0x000038, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_Select_Default_2) == 0x000040, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_Event_MyGeometry) == 0x000044, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_Event_InDeltaTime) == 0x00007C, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_PlayAnimation_ReturnValue_2) == 0x000080, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, Temp_bool_Variable_3) == 0x000088, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_VectorSpringInterp_ReturnValue) == 0x000090, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_VectorSpringInterp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_Select_Default_3) == 0x0000A8, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_PlayAnimation_ReturnValue_3) == 0x0000B0, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_PlayAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0000B8, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000D0, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_BreakVector_X) == 0x0000E8, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_BreakVector_Y) == 0x0000F0, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_BreakVector_Z) == 0x0000F8, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, K2Node_CustomEvent_IsTalking) == 0x000100, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::K2Node_CustomEvent_IsTalking' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_MakeVector2D_ReturnValue) == 0x000108, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000118, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000120, "Member 'WI_CharacterNamePlate_C_ExecuteUbergraph_WI_CharacterNamePlate::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.GetStealthActive
// 0x0001 (0x0001 - 0x0000)
struct WI_CharacterNamePlate_C_GetStealthActive final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_GetStealthActive) == 0x000001, "Wrong alignment on WI_CharacterNamePlate_C_GetStealthActive");
static_assert(sizeof(WI_CharacterNamePlate_C_GetStealthActive) == 0x000001, "Wrong size on WI_CharacterNamePlate_C_GetStealthActive");
static_assert(offsetof(WI_CharacterNamePlate_C_GetStealthActive, Return) == 0x000000, "Member 'WI_CharacterNamePlate_C_GetStealthActive::Return' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.OnStealthToggle
// 0x0002 (0x0002 - 0x0000)
struct WI_CharacterNamePlate_C_OnStealthToggle final
{
public:
	bool                                          StealthActive;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnemyToLocalPlayer;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_OnStealthToggle) == 0x000001, "Wrong alignment on WI_CharacterNamePlate_C_OnStealthToggle");
static_assert(sizeof(WI_CharacterNamePlate_C_OnStealthToggle) == 0x000002, "Wrong size on WI_CharacterNamePlate_C_OnStealthToggle");
static_assert(offsetof(WI_CharacterNamePlate_C_OnStealthToggle, StealthActive) == 0x000000, "Member 'WI_CharacterNamePlate_C_OnStealthToggle::StealthActive' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_OnStealthToggle, IsEnemyToLocalPlayer) == 0x000001, "Member 'WI_CharacterNamePlate_C_OnStealthToggle::IsEnemyToLocalPlayer' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WI_CharacterNamePlate_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_PreConstruct) == 0x000001, "Wrong alignment on WI_CharacterNamePlate_C_PreConstruct");
static_assert(sizeof(WI_CharacterNamePlate_C_PreConstruct) == 0x000001, "Wrong size on WI_CharacterNamePlate_C_PreConstruct");
static_assert(offsetof(WI_CharacterNamePlate_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WI_CharacterNamePlate_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.Set Primary Visibility
// 0x0001 (0x0001 - 0x0000)
struct WI_CharacterNamePlate_C_Set_Primary_Visibility final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_Set_Primary_Visibility) == 0x000001, "Wrong alignment on WI_CharacterNamePlate_C_Set_Primary_Visibility");
static_assert(sizeof(WI_CharacterNamePlate_C_Set_Primary_Visibility) == 0x000001, "Wrong size on WI_CharacterNamePlate_C_Set_Primary_Visibility");
static_assert(offsetof(WI_CharacterNamePlate_C_Set_Primary_Visibility, Show) == 0x000000, "Member 'WI_CharacterNamePlate_C_Set_Primary_Visibility::Show' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.Set Stealth Visibility
// 0x0001 (0x0001 - 0x0000)
struct WI_CharacterNamePlate_C_Set_Stealth_Visibility final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_Set_Stealth_Visibility) == 0x000001, "Wrong alignment on WI_CharacterNamePlate_C_Set_Stealth_Visibility");
static_assert(sizeof(WI_CharacterNamePlate_C_Set_Stealth_Visibility) == 0x000001, "Wrong size on WI_CharacterNamePlate_C_Set_Stealth_Visibility");
static_assert(offsetof(WI_CharacterNamePlate_C_Set_Stealth_Visibility, Enable) == 0x000000, "Member 'WI_CharacterNamePlate_C_Set_Stealth_Visibility::Enable' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.SetForcedStealth
// 0x0001 (0x0001 - 0x0000)
struct WI_CharacterNamePlate_C_SetForcedStealth final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_SetForcedStealth) == 0x000001, "Wrong alignment on WI_CharacterNamePlate_C_SetForcedStealth");
static_assert(sizeof(WI_CharacterNamePlate_C_SetForcedStealth) == 0x000001, "Wrong size on WI_CharacterNamePlate_C_SetForcedStealth");
static_assert(offsetof(WI_CharacterNamePlate_C_SetForcedStealth, Enable) == 0x000000, "Member 'WI_CharacterNamePlate_C_SetForcedStealth::Enable' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.SetHealthFraction
// 0x0028 (0x0028 - 0x0000)
struct WI_CharacterNamePlate_C_SetHealthFraction final
{
public:
	double                                        HealthFraction_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_SetHealthFraction) == 0x000008, "Wrong alignment on WI_CharacterNamePlate_C_SetHealthFraction");
static_assert(sizeof(WI_CharacterNamePlate_C_SetHealthFraction) == 0x000028, "Wrong size on WI_CharacterNamePlate_C_SetHealthFraction");
static_assert(offsetof(WI_CharacterNamePlate_C_SetHealthFraction, HealthFraction_0) == 0x000000, "Member 'WI_CharacterNamePlate_C_SetHealthFraction::HealthFraction_0' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_SetHealthFraction, CallFunc_RandomUnitVector_ReturnValue) == 0x000008, "Member 'WI_CharacterNamePlate_C_SetHealthFraction::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_SetHealthFraction, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000020, "Member 'WI_CharacterNamePlate_C_SetHealthFraction::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.SetPlayerName
// 0x0020 (0x0020 - 0x0000)
struct WI_CharacterNamePlate_C_SetPlayerName final
{
public:
	class FString                                 PlayerName_0;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0010(0x0010)()
};
static_assert(alignof(WI_CharacterNamePlate_C_SetPlayerName) == 0x000008, "Wrong alignment on WI_CharacterNamePlate_C_SetPlayerName");
static_assert(sizeof(WI_CharacterNamePlate_C_SetPlayerName) == 0x000020, "Wrong size on WI_CharacterNamePlate_C_SetPlayerName");
static_assert(offsetof(WI_CharacterNamePlate_C_SetPlayerName, PlayerName_0) == 0x000000, "Member 'WI_CharacterNamePlate_C_SetPlayerName::PlayerName_0' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_SetPlayerName, CallFunc_Conv_StringToText_ReturnValue) == 0x000010, "Member 'WI_CharacterNamePlate_C_SetPlayerName::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.SetTalkingVisibility
// 0x0001 (0x0001 - 0x0000)
struct WI_CharacterNamePlate_C_SetTalkingVisibility final
{
public:
	bool                                          IsTalking;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_SetTalkingVisibility) == 0x000001, "Wrong alignment on WI_CharacterNamePlate_C_SetTalkingVisibility");
static_assert(sizeof(WI_CharacterNamePlate_C_SetTalkingVisibility) == 0x000001, "Wrong size on WI_CharacterNamePlate_C_SetTalkingVisibility");
static_assert(offsetof(WI_CharacterNamePlate_C_SetTalkingVisibility, IsTalking) == 0x000000, "Member 'WI_CharacterNamePlate_C_SetTalkingVisibility::IsTalking' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.SetTeam
// 0x0018 (0x0018 - 0x0000)
struct WI_CharacterNamePlate_C_SetTeam final
{
public:
	ETeamType                                     Team_0;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0004(0x0014)()
};
static_assert(alignof(WI_CharacterNamePlate_C_SetTeam) == 0x000004, "Wrong alignment on WI_CharacterNamePlate_C_SetTeam");
static_assert(sizeof(WI_CharacterNamePlate_C_SetTeam) == 0x000018, "Wrong size on WI_CharacterNamePlate_C_SetTeam");
static_assert(offsetof(WI_CharacterNamePlate_C_SetTeam, Team_0) == 0x000000, "Member 'WI_CharacterNamePlate_C_SetTeam::Team_0' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_SetTeam, Temp_byte_Variable) == 0x000001, "Member 'WI_CharacterNamePlate_C_SetTeam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_SetTeam, K2Node_Select_Default) == 0x000004, "Member 'WI_CharacterNamePlate_C_SetTeam::K2Node_Select_Default' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.SetVisibilityOnWidgetsBasedOnCurrentState
// 0x0002 (0x0002 - 0x0000)
struct WI_CharacterNamePlate_C_SetVisibilityOnWidgetsBasedOnCurrentState final
{
public:
	E_NameplateDistanceState                      State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_SetVisibilityOnWidgetsBasedOnCurrentState) == 0x000001, "Wrong alignment on WI_CharacterNamePlate_C_SetVisibilityOnWidgetsBasedOnCurrentState");
static_assert(sizeof(WI_CharacterNamePlate_C_SetVisibilityOnWidgetsBasedOnCurrentState) == 0x000002, "Wrong size on WI_CharacterNamePlate_C_SetVisibilityOnWidgetsBasedOnCurrentState");
static_assert(offsetof(WI_CharacterNamePlate_C_SetVisibilityOnWidgetsBasedOnCurrentState, State) == 0x000000, "Member 'WI_CharacterNamePlate_C_SetVisibilityOnWidgetsBasedOnCurrentState::State' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_SetVisibilityOnWidgetsBasedOnCurrentState, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WI_CharacterNamePlate_C_SetVisibilityOnWidgetsBasedOnCurrentState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.Tick
// 0x003C (0x003C - 0x0000)
struct WI_CharacterNamePlate_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_Tick) == 0x000004, "Wrong alignment on WI_CharacterNamePlate_C_Tick");
static_assert(sizeof(WI_CharacterNamePlate_C_Tick) == 0x00003C, "Wrong size on WI_CharacterNamePlate_C_Tick");
static_assert(offsetof(WI_CharacterNamePlate_C_Tick, MyGeometry) == 0x000000, "Member 'WI_CharacterNamePlate_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_Tick, InDeltaTime) == 0x000038, "Member 'WI_CharacterNamePlate_C_Tick::InDeltaTime' has a wrong offset!");

// Function WI_CharacterNamePlate.WI_CharacterNamePlate_C.UpdateRenderScale
// 0x0020 (0x0020 - 0x0000)
struct WI_CharacterNamePlate_C_UpdateRenderScale final
{
public:
	double                                        ScaleX;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScaleY;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_CharacterNamePlate_C_UpdateRenderScale) == 0x000008, "Wrong alignment on WI_CharacterNamePlate_C_UpdateRenderScale");
static_assert(sizeof(WI_CharacterNamePlate_C_UpdateRenderScale) == 0x000020, "Wrong size on WI_CharacterNamePlate_C_UpdateRenderScale");
static_assert(offsetof(WI_CharacterNamePlate_C_UpdateRenderScale, ScaleX) == 0x000000, "Member 'WI_CharacterNamePlate_C_UpdateRenderScale::ScaleX' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_UpdateRenderScale, ScaleY) == 0x000008, "Member 'WI_CharacterNamePlate_C_UpdateRenderScale::ScaleY' has a wrong offset!");
static_assert(offsetof(WI_CharacterNamePlate_C_UpdateRenderScale, CallFunc_MakeVector2D_ReturnValue) == 0x000010, "Member 'WI_CharacterNamePlate_C_UpdateRenderScale::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

}

