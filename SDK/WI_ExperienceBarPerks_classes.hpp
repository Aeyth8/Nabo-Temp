#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_ExperienceBarPerks

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WI_ExperienceBarPerks.WI_ExperienceBarPerks_C
// 0x0100 (0x0530 - 0x0430)
class UWI_ExperienceBarPerks_C final : public UCommonActivatableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0430(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       LeveledUpAnim;                                     // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FillAnimShake;                                     // 0x0440(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UOverlay*                               AnimatedMarker;                                    // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_ExperienceIcon_C*                   CurrentLevel;                                      // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_69;                                          // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_137;                                         // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Marker;                                            // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_ExperienceIcon_C*                   NextLevel;                                         // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBarFutureFill;                             // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBarMoving;                                 // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_PerkUnlock_C*                       WI_PerkUnlock;                                     // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_XPBar_C*                            WI_XPBar;                                          // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       XPText;                                            // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             LevelGained;                                       // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ShouldUpdateVisuals;                               // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1[0x3];                                      // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewXP;                                             // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimatedXP;                                        // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewLevel;                                          // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AnimatedLevel;                                     // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             AnimationStopped;                                  // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         OldXP;                                             // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StartBarPercentage;                                // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentBarPercentage;                              // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EndBarPercentage;                                  // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeveledUp;                                         // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F9[0x3];                                      // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentUpdateTime;                                 // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UpdateTimeMax;                                     // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TickSoundHandle;                                   // 0x0508(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             FinishedUpdating;                                  // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           OverflowHandle;                                    // 0x0520(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        XPSound;                                           // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void AnimateBar(int32 PreviouslyGrantedXP);
	void AnimationStopped__DelegateSignature();
	void ExecuteUbergraph_WI_ExperienceBarPerks(int32 EntryPoint);
	void FinishedUpdating__DelegateSignature();
	void ForceStopUpdate();
	int32 GetCharacterXP();
	void GetNeighborID(struct FGameplayTag* NeighborID);
	void GetXPGained(int32* XP);
	void InitializeValues();
	void LevelGained__DelegateSignature(int32 NewLevel_0);
	void NotifyAnimationStopped();
	void NotifyLevelIncrease();
	void OnBarReachedValue();
	void OnLevelUpCosmetics();
	void SetAnimationValues();
	void SetLevelRequirements();
	void SetPerkRewardTag(const struct FGameplayTag& Tag);
	void SetValuesAndUpdateProgress();
	void SetXPBarValues(int32 PreviosulyGrantedXP);
	void Start_XP_Sound();
	void StartOverflowAnimation();
	void StartProgressUpdate();
	void StartSimpleAnimation();
	void Stop_XP_Sound();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateOverflow();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WI_ExperienceBarPerks_C">();
	}
	static class UWI_ExperienceBarPerks_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWI_ExperienceBarPerks_C>();
	}
};
static_assert(alignof(UWI_ExperienceBarPerks_C) == 0x000008, "Wrong alignment on UWI_ExperienceBarPerks_C");
static_assert(sizeof(UWI_ExperienceBarPerks_C) == 0x000530, "Wrong size on UWI_ExperienceBarPerks_C");
static_assert(offsetof(UWI_ExperienceBarPerks_C, UberGraphFrame) == 0x000430, "Member 'UWI_ExperienceBarPerks_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, LeveledUpAnim) == 0x000438, "Member 'UWI_ExperienceBarPerks_C::LeveledUpAnim' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, FillAnimShake) == 0x000440, "Member 'UWI_ExperienceBarPerks_C::FillAnimShake' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, AnimatedMarker) == 0x000448, "Member 'UWI_ExperienceBarPerks_C::AnimatedMarker' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, CurrentLevel) == 0x000450, "Member 'UWI_ExperienceBarPerks_C::CurrentLevel' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, Image_69) == 0x000458, "Member 'UWI_ExperienceBarPerks_C::Image_69' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, Image_137) == 0x000460, "Member 'UWI_ExperienceBarPerks_C::Image_137' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, Marker) == 0x000468, "Member 'UWI_ExperienceBarPerks_C::Marker' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, NextLevel) == 0x000470, "Member 'UWI_ExperienceBarPerks_C::NextLevel' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, ProgressBarFutureFill) == 0x000478, "Member 'UWI_ExperienceBarPerks_C::ProgressBarFutureFill' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, ProgressBarMoving) == 0x000480, "Member 'UWI_ExperienceBarPerks_C::ProgressBarMoving' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, WI_PerkUnlock) == 0x000488, "Member 'UWI_ExperienceBarPerks_C::WI_PerkUnlock' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, WI_XPBar) == 0x000490, "Member 'UWI_ExperienceBarPerks_C::WI_XPBar' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, XPText) == 0x000498, "Member 'UWI_ExperienceBarPerks_C::XPText' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, LevelGained) == 0x0004A0, "Member 'UWI_ExperienceBarPerks_C::LevelGained' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, ShouldUpdateVisuals) == 0x0004B0, "Member 'UWI_ExperienceBarPerks_C::ShouldUpdateVisuals' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, NewXP) == 0x0004B4, "Member 'UWI_ExperienceBarPerks_C::NewXP' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, AnimatedXP) == 0x0004B8, "Member 'UWI_ExperienceBarPerks_C::AnimatedXP' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, NewLevel) == 0x0004BC, "Member 'UWI_ExperienceBarPerks_C::NewLevel' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, AnimatedLevel) == 0x0004C0, "Member 'UWI_ExperienceBarPerks_C::AnimatedLevel' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, AnimationStopped) == 0x0004C8, "Member 'UWI_ExperienceBarPerks_C::AnimationStopped' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, OldXP) == 0x0004D8, "Member 'UWI_ExperienceBarPerks_C::OldXP' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, StartBarPercentage) == 0x0004E0, "Member 'UWI_ExperienceBarPerks_C::StartBarPercentage' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, CurrentBarPercentage) == 0x0004E8, "Member 'UWI_ExperienceBarPerks_C::CurrentBarPercentage' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, EndBarPercentage) == 0x0004F0, "Member 'UWI_ExperienceBarPerks_C::EndBarPercentage' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, LeveledUp) == 0x0004F8, "Member 'UWI_ExperienceBarPerks_C::LeveledUp' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, CurrentUpdateTime) == 0x0004FC, "Member 'UWI_ExperienceBarPerks_C::CurrentUpdateTime' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, UpdateTimeMax) == 0x000500, "Member 'UWI_ExperienceBarPerks_C::UpdateTimeMax' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, TickSoundHandle) == 0x000508, "Member 'UWI_ExperienceBarPerks_C::TickSoundHandle' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, FinishedUpdating) == 0x000510, "Member 'UWI_ExperienceBarPerks_C::FinishedUpdating' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, OverflowHandle) == 0x000520, "Member 'UWI_ExperienceBarPerks_C::OverflowHandle' has a wrong offset!");
static_assert(offsetof(UWI_ExperienceBarPerks_C, XPSound) == 0x000528, "Member 'UWI_ExperienceBarPerks_C::XPSound' has a wrong offset!");

}

