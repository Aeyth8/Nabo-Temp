#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_ThrowProjectile

#include "Basic.hpp"

#include "GA_ThrowProjectile_classes.hpp"
#include "GA_ThrowProjectile_parameters.hpp"


namespace SDK
{

// Function GA_ThrowProjectile.GA_ThrowProjectile_C.CalculateChargeBasedOnTimeHeld
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  TimeHeld                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Charge                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ThrowProjectile_C::CalculateChargeBasedOnTimeHeld(double TimeHeld, double* Charge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ThrowProjectile_C", "CalculateChargeBasedOnTimeHeld");

	Params::GA_ThrowProjectile_C_CalculateChargeBasedOnTimeHeld Parms{};

	Parms.TimeHeld = TimeHeld;

	UObject::ProcessEvent(Func, &Parms);

	if (Charge != nullptr)
		*Charge = Parms.Charge;
}


// Function GA_ThrowProjectile.GA_ThrowProjectile_C.GetSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  TimeHeld                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UGA_ThrowProjectile_C::GetSpeed(double TimeHeld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ThrowProjectile_C", "GetSpeed");

	Params::GA_ThrowProjectile_C_GetSpeed Parms{};

	Parms.TimeHeld = TimeHeld;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_ThrowProjectile.GA_ThrowProjectile_C.InitializeProjectileValues
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ChargePercent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ProjectileSpeed                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InLifespan                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GravityScale                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DamageMultiplierToStructures                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       InTransform                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCosmetic                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_ProjectileBase_C*             ProjectileWithValues                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_ThrowProjectile_C::InitializeProjectileValues(class UObject* Object, double ChargePercent, double ProjectileSpeed, float InLifespan, double GravityScale, double MinDamage, double MaxDamage, double DamageMultiplierToStructures, const struct FTransform& InTransform, bool IsCosmetic, class ABP_ProjectileBase_C** ProjectileWithValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ThrowProjectile_C", "InitializeProjectileValues");

	Params::GA_ThrowProjectile_C_InitializeProjectileValues Parms{};

	Parms.Object = Object;
	Parms.ChargePercent = ChargePercent;
	Parms.ProjectileSpeed = ProjectileSpeed;
	Parms.InLifespan = InLifespan;
	Parms.GravityScale = GravityScale;
	Parms.MinDamage = MinDamage;
	Parms.MaxDamage = MaxDamage;
	Parms.DamageMultiplierToStructures = DamageMultiplierToStructures;
	Parms.InTransform = std::move(InTransform);
	Parms.IsCosmetic = IsCosmetic;

	UObject::ProcessEvent(Func, &Parms);

	if (ProjectileWithValues != nullptr)
		*ProjectileWithValues = Parms.ProjectileWithValues;
}


// Function GA_ThrowProjectile.GA_ThrowProjectile_C.SpawnProjectile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ChargePercent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LocalVelocity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Lifetime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GravityScale                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  StructureDamageMultiplier                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ProjectileClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UGA_ThrowProjectile_C::SpawnProjectile(const struct FTransform& SpawnTransform, double ChargePercent, class APawn* Owner, const struct FVector& LocalVelocity, double Speed, double Lifetime, double MinDamage, double MaxDamage, double GravityScale, double StructureDamageMultiplier, class UClass* ProjectileClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ThrowProjectile_C", "SpawnProjectile");

	Params::GA_ThrowProjectile_C_SpawnProjectile Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.ChargePercent = ChargePercent;
	Parms.Owner = Owner;
	Parms.LocalVelocity = std::move(LocalVelocity);
	Parms.Speed = Speed;
	Parms.Lifetime = Lifetime;
	Parms.MinDamage = MinDamage;
	Parms.MaxDamage = MaxDamage;
	Parms.GravityScale = GravityScale;
	Parms.StructureDamageMultiplier = StructureDamageMultiplier;
	Parms.ProjectileClass = ProjectileClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_ThrowProjectile.GA_ThrowProjectile_C.GetMaxSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UGA_ThrowProjectile_C::GetMaxSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ThrowProjectile_C", "GetMaxSpeed");

	Params::GA_ThrowProjectile_C_GetMaxSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GA_ThrowProjectile.GA_ThrowProjectile_C.GetMinSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  MinSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_ThrowProjectile_C::GetMinSpeed(double* MinSpeed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_ThrowProjectile_C", "GetMinSpeed");

	Params::GA_ThrowProjectile_C_GetMinSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MinSpeed != nullptr)
		*MinSpeed = Parms.MinSpeed;
}

}

