#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_HitDirection

#include "Basic.hpp"

#include "E_HitDirections_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AC_HitDirection.AC_HitDirection_C.CreateHealDirectionMarker
// 0x0020 (0x0020 - 0x0000)
struct AC_HitDirection_C_CreateHealDirectionMarker final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealAmount;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_HitDirection_C_CreateHealDirectionMarker) == 0x000008, "Wrong alignment on AC_HitDirection_C_CreateHealDirectionMarker");
static_assert(sizeof(AC_HitDirection_C_CreateHealDirectionMarker) == 0x000020, "Wrong size on AC_HitDirection_C_CreateHealDirectionMarker");
static_assert(offsetof(AC_HitDirection_C_CreateHealDirectionMarker, HitLocation) == 0x000000, "Member 'AC_HitDirection_C_CreateHealDirectionMarker::HitLocation' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_CreateHealDirectionMarker, HealAmount) == 0x000018, "Member 'AC_HitDirection_C_CreateHealDirectionMarker::HealAmount' has a wrong offset!");

// Function AC_HitDirection.AC_HitDirection_C.CreateHitDirectionMarker
// 0x0020 (0x0020 - 0x0000)
struct AC_HitDirection_C_CreateHitDirectionMarker final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Damage;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_HitDirection_C_CreateHitDirectionMarker) == 0x000008, "Wrong alignment on AC_HitDirection_C_CreateHitDirectionMarker");
static_assert(sizeof(AC_HitDirection_C_CreateHitDirectionMarker) == 0x000020, "Wrong size on AC_HitDirection_C_CreateHitDirectionMarker");
static_assert(offsetof(AC_HitDirection_C_CreateHitDirectionMarker, HitLocation) == 0x000000, "Member 'AC_HitDirection_C_CreateHitDirectionMarker::HitLocation' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_CreateHitDirectionMarker, Damage) == 0x000018, "Member 'AC_HitDirection_C_CreateHitDirectionMarker::Damage' has a wrong offset!");

// Function AC_HitDirection.AC_HitDirection_C.ExecuteUbergraph_AC_HitDirection
// 0x0088 (0x0088 - 0x0000)
struct AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_HealDirection_C*                    CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_HitLocation_1;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_Damage;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_HitDirection_C*                     CallFunc_Create_ReturnValue_1;                     // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HitLocation;                    // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_HealAmount;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue_1;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection) == 0x000008, "Wrong alignment on AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection");
static_assert(sizeof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection) == 0x000088, "Wrong size on AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, EntryPoint) == 0x000000, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::EntryPoint' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, CallFunc_IsDedicatedServer_ReturnValue) == 0x000010, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, CallFunc_Create_ReturnValue) == 0x000018, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000020, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, K2Node_CustomEvent_HitLocation_1) == 0x000028, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::K2Node_CustomEvent_HitLocation_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, K2Node_CustomEvent_Damage) == 0x000040, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::K2Node_CustomEvent_Damage' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, CallFunc_GetPlayerController_ReturnValue_1) == 0x000048, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000050, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, CallFunc_Create_ReturnValue_1) == 0x000058, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, K2Node_CustomEvent_HitLocation) == 0x000060, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::K2Node_CustomEvent_HitLocation' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, K2Node_CustomEvent_HealAmount) == 0x000078, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::K2Node_CustomEvent_HealAmount' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection, CallFunc_NotEqual_VectorVector_ReturnValue_1) == 0x000080, "Member 'AC_HitDirection_C_ExecuteUbergraph_AC_HitDirection::CallFunc_NotEqual_VectorVector_ReturnValue_1' has a wrong offset!");

// Function AC_HitDirection.AC_HitDirection_C.FindDirections
// 0x0088 (0x0088 - 0x0000)
struct AC_HitDirection_C_FindDirections final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HitDirections                               PrimaryDirection;                                  // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HitDirections                               SecondaryDirection;                                // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HitDirections                               LPrimaryDirection;                                 // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_HitDirections>                       LDirectionEnums;                                   // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<E_HitDirections>                       K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionUnitVector_ReturnValue;       // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                CallFunc_GetDotProductsFromDirections_DotProducts; // 0x0070(0x0010)(ReferenceParm)
	E_HitDirections                               CallFunc_FindPrimaryDirection_Output;              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HitDirections                               CallFunc_FindSecondaryDirection_Output;            // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_HitDirection_C_FindDirections) == 0x000008, "Wrong alignment on AC_HitDirection_C_FindDirections");
static_assert(sizeof(AC_HitDirection_C_FindDirections) == 0x000088, "Wrong size on AC_HitDirection_C_FindDirections");
static_assert(offsetof(AC_HitDirection_C_FindDirections, HitLocation) == 0x000000, "Member 'AC_HitDirection_C_FindDirections::HitLocation' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindDirections, PrimaryDirection) == 0x000018, "Member 'AC_HitDirection_C_FindDirections::PrimaryDirection' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindDirections, SecondaryDirection) == 0x000019, "Member 'AC_HitDirection_C_FindDirections::SecondaryDirection' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindDirections, LPrimaryDirection) == 0x00001A, "Member 'AC_HitDirection_C_FindDirections::LPrimaryDirection' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindDirections, LDirectionEnums) == 0x000020, "Member 'AC_HitDirection_C_FindDirections::LDirectionEnums' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindDirections, K2Node_MakeArray_Array) == 0x000030, "Member 'AC_HitDirection_C_FindDirections::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindDirections, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000040, "Member 'AC_HitDirection_C_FindDirections::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindDirections, CallFunc_GetDirectionUnitVector_ReturnValue) == 0x000058, "Member 'AC_HitDirection_C_FindDirections::CallFunc_GetDirectionUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindDirections, CallFunc_GetDotProductsFromDirections_DotProducts) == 0x000070, "Member 'AC_HitDirection_C_FindDirections::CallFunc_GetDotProductsFromDirections_DotProducts' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindDirections, CallFunc_FindPrimaryDirection_Output) == 0x000080, "Member 'AC_HitDirection_C_FindDirections::CallFunc_FindPrimaryDirection_Output' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindDirections, CallFunc_FindSecondaryDirection_Output) == 0x000081, "Member 'AC_HitDirection_C_FindDirections::CallFunc_FindSecondaryDirection_Output' has a wrong offset!");

// Function AC_HitDirection.AC_HitDirection_C.FindPrimaryDirection
// 0x0048 (0x0048 - 0x0000)
struct AC_HitDirection_C_FindPrimaryDirection final
{
public:
	TArray<double>                                DotProducts;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<E_HitDirections>                       Directions;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	E_HitDirections                               Output;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MaxOfFloatArray_MaxValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HitDirections                               CallFunc_Array_Get_Item;                           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast;  // 0x0030(0x0010)(ConstParm, ReferenceParm)
	double                                        K2Node_VariableSet_PrimaryProduct_ImplicitCast;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_HitDirection_C_FindPrimaryDirection) == 0x000008, "Wrong alignment on AC_HitDirection_C_FindPrimaryDirection");
static_assert(sizeof(AC_HitDirection_C_FindPrimaryDirection) == 0x000048, "Wrong size on AC_HitDirection_C_FindPrimaryDirection");
static_assert(offsetof(AC_HitDirection_C_FindPrimaryDirection, DotProducts) == 0x000000, "Member 'AC_HitDirection_C_FindPrimaryDirection::DotProducts' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindPrimaryDirection, Directions) == 0x000010, "Member 'AC_HitDirection_C_FindPrimaryDirection::Directions' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindPrimaryDirection, Output) == 0x000020, "Member 'AC_HitDirection_C_FindPrimaryDirection::Output' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindPrimaryDirection, CallFunc_MaxOfFloatArray_IndexOfMaxValue) == 0x000024, "Member 'AC_HitDirection_C_FindPrimaryDirection::CallFunc_MaxOfFloatArray_IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindPrimaryDirection, CallFunc_MaxOfFloatArray_MaxValue) == 0x000028, "Member 'AC_HitDirection_C_FindPrimaryDirection::CallFunc_MaxOfFloatArray_MaxValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindPrimaryDirection, CallFunc_Array_Get_Item) == 0x00002C, "Member 'AC_HitDirection_C_FindPrimaryDirection::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindPrimaryDirection, CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast) == 0x000030, "Member 'AC_HitDirection_C_FindPrimaryDirection::CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindPrimaryDirection, K2Node_VariableSet_PrimaryProduct_ImplicitCast) == 0x000040, "Member 'AC_HitDirection_C_FindPrimaryDirection::K2Node_VariableSet_PrimaryProduct_ImplicitCast' has a wrong offset!");

// Function AC_HitDirection.AC_HitDirection_C.FindSecondaryDirection
// 0x0078 (0x0078 - 0x0000)
struct AC_HitDirection_C_FindSecondaryDirection final
{
public:
	TArray<double>                                DotProducts;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<E_HitDirections>                       Directions;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	E_HitDirections                               Output;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MaxOfFloatArray_MaxValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue_1;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MaxOfFloatArray_MaxValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HitDirections                               CallFunc_Array_Get_Item;                           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0038(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast;  // 0x0050(0x0010)(ConstParm, ReferenceParm)
	TArray<float>                                 CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast_1; // 0x0060(0x0010)(ConstParm, ReferenceParm)
	double                                        K2Node_VariableSet_SecondaryProduct_ImplicitCast;  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_HitDirection_C_FindSecondaryDirection) == 0x000008, "Wrong alignment on AC_HitDirection_C_FindSecondaryDirection");
static_assert(sizeof(AC_HitDirection_C_FindSecondaryDirection) == 0x000078, "Wrong size on AC_HitDirection_C_FindSecondaryDirection");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, DotProducts) == 0x000000, "Member 'AC_HitDirection_C_FindSecondaryDirection::DotProducts' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, Directions) == 0x000010, "Member 'AC_HitDirection_C_FindSecondaryDirection::Directions' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, Output) == 0x000020, "Member 'AC_HitDirection_C_FindSecondaryDirection::Output' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, CallFunc_MaxOfFloatArray_IndexOfMaxValue) == 0x000024, "Member 'AC_HitDirection_C_FindSecondaryDirection::CallFunc_MaxOfFloatArray_IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, CallFunc_MaxOfFloatArray_MaxValue) == 0x000028, "Member 'AC_HitDirection_C_FindSecondaryDirection::CallFunc_MaxOfFloatArray_MaxValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, CallFunc_MaxOfFloatArray_IndexOfMaxValue_1) == 0x00002C, "Member 'AC_HitDirection_C_FindSecondaryDirection::CallFunc_MaxOfFloatArray_IndexOfMaxValue_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, CallFunc_MaxOfFloatArray_MaxValue_1) == 0x000030, "Member 'AC_HitDirection_C_FindSecondaryDirection::CallFunc_MaxOfFloatArray_MaxValue_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, CallFunc_Array_Get_Item) == 0x000034, "Member 'AC_HitDirection_C_FindSecondaryDirection::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, Temp_real_Variable) == 0x000038, "Member 'AC_HitDirection_C_FindSecondaryDirection::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000040, "Member 'AC_HitDirection_C_FindSecondaryDirection::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000048, "Member 'AC_HitDirection_C_FindSecondaryDirection::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast) == 0x000050, "Member 'AC_HitDirection_C_FindSecondaryDirection::CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast_1) == 0x000060, "Member 'AC_HitDirection_C_FindSecondaryDirection::CallFunc_MaxOfFloatArray_FloatArray_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_FindSecondaryDirection, K2Node_VariableSet_SecondaryProduct_ImplicitCast) == 0x000070, "Member 'AC_HitDirection_C_FindSecondaryDirection::K2Node_VariableSet_SecondaryProduct_ImplicitCast' has a wrong offset!");

// Function AC_HitDirection.AC_HitDirection_C.GetDotProductsFromDirections
// 0x00E8 (0x00E8 - 0x0000)
struct AC_HitDirection_C_GetDotProductsFromDirections final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                DotProducts;                                       // 0x0018(0x0010)(Parm, OutParm)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue_1;             // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue_2;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue_1;               // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue_3;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ReferenceParm)
};
static_assert(alignof(AC_HitDirection_C_GetDotProductsFromDirections) == 0x000008, "Wrong alignment on AC_HitDirection_C_GetDotProductsFromDirections");
static_assert(sizeof(AC_HitDirection_C_GetDotProductsFromDirections) == 0x0000E8, "Wrong size on AC_HitDirection_C_GetDotProductsFromDirections");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, HitDirection) == 0x000000, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::HitDirection' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, DotProducts) == 0x000018, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::DotProducts' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, CallFunc_GetRightVector_ReturnValue) == 0x000028, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, CallFunc_GetRightVector_ReturnValue_1) == 0x000040, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::CallFunc_GetRightVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, CallFunc_Dot_VectorVector_ReturnValue) == 0x000058, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, CallFunc_NegateVector_ReturnValue) == 0x000060, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, CallFunc_GetForwardVector_ReturnValue) == 0x000078, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x000090, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, CallFunc_Dot_VectorVector_ReturnValue_2) == 0x000098, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::CallFunc_Dot_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, CallFunc_GetForwardVector_ReturnValue_1) == 0x0000A0, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, CallFunc_NegateVector_ReturnValue_1) == 0x0000B8, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::CallFunc_NegateVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, CallFunc_Dot_VectorVector_ReturnValue_3) == 0x0000D0, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::CallFunc_Dot_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_HitDirection_C_GetDotProductsFromDirections, K2Node_MakeArray_Array) == 0x0000D8, "Member 'AC_HitDirection_C_GetDotProductsFromDirections::K2Node_MakeArray_Array' has a wrong offset!");

}

