#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_Indicator

#include "Basic.hpp"

#include "AC_Indicator_classes.hpp"
#include "AC_Indicator_parameters.hpp"


namespace SDK
{

// Function AC_Indicator.AC_Indicator_C.ActivateOffscreenWidget
// (BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::ActivateOffscreenWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "ActivateOffscreenWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.CacheOriginalScale
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::CacheOriginalScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "CacheOriginalScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.CheckLineOfSight
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    In_Line_Of_Sight                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::CheckLineOfSight(bool* In_Line_Of_Sight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "CheckLineOfSight");

	Params::AC_Indicator_C_CheckLineOfSight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (In_Line_Of_Sight != nullptr)
		*In_Line_Of_Sight = Parms.In_Line_Of_Sight;
}


// Function AC_Indicator.AC_Indicator_C.DelayStoponScreen
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ShowForSeconds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::DelayStoponScreen(double ShowForSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "DelayStoponScreen");

	Params::AC_Indicator_C_DelayStoponScreen Parms{};

	Parms.ShowForSeconds = ShowForSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.ExecuteUbergraph_AC_Indicator
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::ExecuteUbergraph_AC_Indicator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "ExecuteUbergraph_AC_Indicator");

	Params::AC_Indicator_C_ExecuteUbergraph_AC_Indicator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.GetColorToUse
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_IndicatorData                 IndicatorData_0                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::GetColorToUse(const struct FS_IndicatorData& IndicatorData_0, struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "GetColorToUse");

	Params::AC_Indicator_C_GetColorToUse Parms{};

	Parms.IndicatorData_0 = std::move(IndicatorData_0);

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function AC_Indicator.AC_Indicator_C.IndicatorsHiddenByCheat
// (BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::IndicatorsHiddenByCheat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "IndicatorsHiddenByCheat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.InitComponent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   TeamToShow                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::InitComponent(uint8 TeamToShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "InitComponent");

	Params::AC_Indicator_C_InitComponent Parms{};

	Parms.TeamToShow = TeamToShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.Is In Acceptable Range
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    InRange                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::Is_In_Acceptable_Range(bool* InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "Is In Acceptable Range");

	Params::AC_Indicator_C_Is_In_Acceptable_Range Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InRange != nullptr)
		*InRange = Parms.InRange;
}


// Function AC_Indicator.AC_Indicator_C.IsOnSameTeam
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    SameTeam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::IsOnSameTeam(bool* SameTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "IsOnSameTeam");

	Params::AC_Indicator_C_IsOnSameTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SameTeam != nullptr)
		*SameTeam = Parms.SameTeam;
}


// Function AC_Indicator.AC_Indicator_C.OnEnded_9C2783B3416F9B076B58C692B6CA6687
// (BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::OnEnded_9C2783B3416F9B076B58C692B6CA6687()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "OnEnded_9C2783B3416F9B076B58C692B6CA6687");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.OnGameEnded_Event
// (BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::OnGameEnded_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "OnGameEnded_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.OnIndicatorInitialised__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::OnIndicatorInitialised__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "OnIndicatorInitialised__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.OverrideOnscreenWidgetScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::OverrideOnscreenWidgetScale(double NewScale, class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "OverrideOnscreenWidgetScale");

	Params::AC_Indicator_C_OverrideOnscreenWidgetScale Parms{};

	Parms.NewScale = NewScale;
	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.OverrideOnscreenWidgetText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             NewText                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UAC_Indicator_C::OverrideOnscreenWidgetText(const class FText& NewText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "OverrideOnscreenWidgetText");

	Params::AC_Indicator_C_OverrideOnscreenWidgetText Parms{};

	Parms.NewText = std::move(NewText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UAC_Indicator_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "ReceiveEndPlay");

	Params::AC_Indicator_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "ReceiveTick");

	Params::AC_Indicator_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.RemoveAllSpawnedOffscreenWidgets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::RemoveAllSpawnedOffscreenWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "RemoveAllSpawnedOffscreenWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.Reset Damaged Sound
// (BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::Reset_Damaged_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "Reset Damaged Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.ResetOnscreenWidgetScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::ResetOnscreenWidgetScale(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "ResetOnscreenWidgetScale");

	Params::AC_Indicator_C_ResetOnscreenWidgetScale Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.Set OffscreenWidget Visuals
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWI_OffscreenIndicator_C*         Indicator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::Set_OffscreenWidget_Visuals(class UWI_OffscreenIndicator_C* Indicator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "Set OffscreenWidget Visuals");

	Params::AC_Indicator_C_Set_OffscreenWidget_Visuals Parms{};

	Parms.Indicator = Indicator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.SetIndicatorData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::SetIndicatorData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "SetIndicatorData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.SetOffscreenArrowVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OnScreen                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::SetOffscreenArrowVisibility(bool OnScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "SetOffscreenArrowVisibility");

	Params::AC_Indicator_C_SetOffscreenArrowVisibility Parms{};

	Parms.OnScreen = OnScreen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.SetOffscreenElements
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::SetOffscreenElements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "SetOffscreenElements");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.SetOffscreenLocationAndRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::SetOffscreenLocationAndRotation(const struct FVector2D& Location, double Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "SetOffscreenLocationAndRotation");

	Params::AC_Indicator_C_SetOffscreenLocationAndRotation Parms{};

	Parms.Location = std::move(Location);
	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.SetOnscreenWidgetVisuals
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::SetOnscreenWidgetVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "SetOnscreenWidgetVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.StartOnscreenUpdate
// (BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::StartOnscreenUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "StartOnscreenUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.StopOnscreenUpdate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::StopOnscreenUpdate(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "StopOnscreenUpdate");

	Params::AC_Indicator_C_StopOnscreenUpdate Parms{};

	Parms.NewVisibility = NewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_Indicator.AC_Indicator_C.TeamIsValid
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::TeamIsValid(bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "TeamIsValid");

	Params::AC_Indicator_C_TeamIsValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function AC_Indicator.AC_Indicator_C.ToggleOnscreenVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::ToggleOnscreenVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "ToggleOnscreenVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.Try Create Offscreen Widget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::Try_Create_Offscreen_Widget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "Try Create Offscreen Widget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.TryActivateBrokenEffect
// (BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::TryActivateBrokenEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "TryActivateBrokenEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.TurnOff
// (BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::TurnOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "TurnOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.UpdateOnscreenIndicator
// (BlueprintCallable, BlueprintEvent)

void UAC_Indicator_C::UpdateOnscreenIndicator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "UpdateOnscreenIndicator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_Indicator.AC_Indicator_C.VisibleForCurrentPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Visible                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_Indicator_C::VisibleForCurrentPlayer(bool* Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_Indicator_C", "VisibleForCurrentPlayer");

	Params::AC_Indicator_C_VisibleForCurrentPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Visible != nullptr)
		*Visible = Parms.Visible;
}

}

