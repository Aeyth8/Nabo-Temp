#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DriveByVan

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JP_structs.hpp"
#include "JP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DriveByVan.BP_DriveByVan_C
// 0x0220 (0x0548 - 0x0328)
class ABP_DriveByVan_C final : public ADriveByVan
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        FirePosLeft;                                       // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FirePosRight;                                      // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ChickenGunnerRight;                                // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ChickenGunnerLeft;                                 // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PlayerDetection;                                   // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneLaunchLocation;                               // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ChickenDriver;                                     // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ProjectileOrigin;                                  // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioTireSqueal;                                   // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HornBox;                                           // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioEngineLocation;                               // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioHorn;                                         // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioImpact;                                       // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioThrow;                                        // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioMusic;                                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_7936DACC49A722F26F8534B63353535C; // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_Base_VehiclePathSpline_C*           VehiclePath;                                       // 0x03D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         TeamIdThatOrdered;                                 // 0x03E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         TeamIdToAttack;                                    // 0x03E1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3E2[0x2];                                      // 0x03E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x03E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         RecentlyImpactedActors;                            // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UClass*>                         HouseActorClassesToIgnoreForAttack;                // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DebugAttack;                                       // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDrivingCompleted;                                // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         TimelineLength;                                    // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 OpenDoorTimes;                                     // 0x0428(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ExposeOnSpawn)
	TArray<float>                                 CloseDoorTimes;                                    // 0x0438(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ExposeOnSpawn)
	TArray<float>                                 TireSqueelTimes;                                   // 0x0448(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ExposeOnSpawn)
	TArray<float>                                 AttackTeamTimes;                                   // 0x0458(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ExposeOnSpawn)
	TArray<float>                                 StartMusicTimes;                                   // 0x0468(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ExposeOnSpawn)
	TArray<float>                                 StopMusicTimes;                                    // 0x0478(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ExposeOnSpawn)
	struct FCombatParticipant                     Killer;                                            // 0x0488(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UTexture2D>              RunOverKillFeedIcon;                               // 0x04E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	double                                        PlayerFireDistance;                                // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                CurrentTarget;                                     // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FireTimerHandle;                                   // 0x0520(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Charges;                                           // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           OrderingPlayerState;                               // 0x0530(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        ProjectileDamage;                                  // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BombDamage;                                        // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddRandomSpreadToDirection(const struct FRotator& InDirection, struct FRotator* OutDirection);
	void ApplyDamage(class AActor* Target);
	void AttemptFireAtTeam();
	void BndEvt__BP_DeliveryService_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_DriveByVan_SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CanShootAtTarget(class ABP_ResidentCharacter_C* Target, bool* CanHitPlayer);
	void CreateFireSolutionAgainstTarget(class ABP_ResidentCharacter_C* Target, struct FTransform* Transform);
	void CreateKillData();
	void ExecuteUbergraph_BP_DriveByVan(int32 EntryPoint);
	void Fire_Projectile(TSubclassOf<class APooledActor> ProjectileClass, const struct FTransform& SpawnTransform, double Speed, double GravityScale, double Damage);
	void FireMortar(const struct FTransform& Spawn, double Speed, double Gravity);
	void Get_Current_World_Location_And_Rotation_On_Vehicle_Path_Based_On_Timeline(class UTimelineComponent* Timeline_0, class ABP_Base_VehiclePathSpline_C* VehiclePath_0, struct FVector* WorldLocation, struct FRotator* WorldRotation);
	void GetWorldLocationAndRotatationAlongSpline(class USplineComponent* SplineComponent, double DistanceFraction, struct FVector* WorldLocation, struct FRotator* WorldRotation);
	void HandleCloseDoor();
	void HandleOpenDoor();
	void HandleStartMusic();
	void HandleStopMusic();
	void HandleTireSqueel();
	void ImpactActor(class AActor* ImpactedActor);
	void InitTimelineEvents();
	void OnDrivingCompleted__DelegateSignature(class ABP_DriveByVan_C* DriveByVan);
	void ReceiveBeginPlay();
	void SetVanDoorsOpenState(bool Open);
	void ShootFromDriveByVechicle(const struct FVector& AttackTargetWorldPosition);
	void StartDriving();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void TryLaunchMortar(uint8 Team, const struct FVector& LocationInYard);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DriveByVan_C">();
	}
	static class ABP_DriveByVan_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DriveByVan_C>();
	}
};
static_assert(alignof(ABP_DriveByVan_C) == 0x000008, "Wrong alignment on ABP_DriveByVan_C");
static_assert(sizeof(ABP_DriveByVan_C) == 0x000548, "Wrong size on ABP_DriveByVan_C");
static_assert(offsetof(ABP_DriveByVan_C, UberGraphFrame) == 0x000328, "Member 'ABP_DriveByVan_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, FirePosLeft) == 0x000330, "Member 'ABP_DriveByVan_C::FirePosLeft' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, FirePosRight) == 0x000338, "Member 'ABP_DriveByVan_C::FirePosRight' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, ChickenGunnerRight) == 0x000340, "Member 'ABP_DriveByVan_C::ChickenGunnerRight' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, ChickenGunnerLeft) == 0x000348, "Member 'ABP_DriveByVan_C::ChickenGunnerLeft' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, PlayerDetection) == 0x000350, "Member 'ABP_DriveByVan_C::PlayerDetection' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, SceneLaunchLocation) == 0x000358, "Member 'ABP_DriveByVan_C::SceneLaunchLocation' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, ChickenDriver) == 0x000360, "Member 'ABP_DriveByVan_C::ChickenDriver' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, ProjectileOrigin) == 0x000368, "Member 'ABP_DriveByVan_C::ProjectileOrigin' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, PointLight) == 0x000370, "Member 'ABP_DriveByVan_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, AudioTireSqueal) == 0x000378, "Member 'ABP_DriveByVan_C::AudioTireSqueal' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, PointLight1) == 0x000380, "Member 'ABP_DriveByVan_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, HornBox) == 0x000388, "Member 'ABP_DriveByVan_C::HornBox' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, AudioEngineLocation) == 0x000390, "Member 'ABP_DriveByVan_C::AudioEngineLocation' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, AudioHorn) == 0x000398, "Member 'ABP_DriveByVan_C::AudioHorn' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, AudioImpact) == 0x0003A0, "Member 'ABP_DriveByVan_C::AudioImpact' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, AudioThrow) == 0x0003A8, "Member 'ABP_DriveByVan_C::AudioThrow' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, AudioMusic) == 0x0003B0, "Member 'ABP_DriveByVan_C::AudioMusic' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, SkeletalMesh) == 0x0003B8, "Member 'ABP_DriveByVan_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, DefaultSceneRoot) == 0x0003C0, "Member 'ABP_DriveByVan_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, Timeline__Direction_7936DACC49A722F26F8534B63353535C) == 0x0003C8, "Member 'ABP_DriveByVan_C::Timeline__Direction_7936DACC49A722F26F8534B63353535C' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, Timeline) == 0x0003D0, "Member 'ABP_DriveByVan_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, VehiclePath) == 0x0003D8, "Member 'ABP_DriveByVan_C::VehiclePath' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, TeamIdThatOrdered) == 0x0003E0, "Member 'ABP_DriveByVan_C::TeamIdThatOrdered' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, TeamIdToAttack) == 0x0003E1, "Member 'ABP_DriveByVan_C::TeamIdToAttack' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, PlayRate) == 0x0003E4, "Member 'ABP_DriveByVan_C::PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, RecentlyImpactedActors) == 0x0003E8, "Member 'ABP_DriveByVan_C::RecentlyImpactedActors' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, HouseActorClassesToIgnoreForAttack) == 0x0003F8, "Member 'ABP_DriveByVan_C::HouseActorClassesToIgnoreForAttack' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, DebugAttack) == 0x000408, "Member 'ABP_DriveByVan_C::DebugAttack' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, OnDrivingCompleted) == 0x000410, "Member 'ABP_DriveByVan_C::OnDrivingCompleted' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, TimelineLength) == 0x000420, "Member 'ABP_DriveByVan_C::TimelineLength' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, OpenDoorTimes) == 0x000428, "Member 'ABP_DriveByVan_C::OpenDoorTimes' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, CloseDoorTimes) == 0x000438, "Member 'ABP_DriveByVan_C::CloseDoorTimes' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, TireSqueelTimes) == 0x000448, "Member 'ABP_DriveByVan_C::TireSqueelTimes' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, AttackTeamTimes) == 0x000458, "Member 'ABP_DriveByVan_C::AttackTeamTimes' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, StartMusicTimes) == 0x000468, "Member 'ABP_DriveByVan_C::StartMusicTimes' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, StopMusicTimes) == 0x000478, "Member 'ABP_DriveByVan_C::StopMusicTimes' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, Killer) == 0x000488, "Member 'ABP_DriveByVan_C::Killer' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, RunOverKillFeedIcon) == 0x0004E8, "Member 'ABP_DriveByVan_C::RunOverKillFeedIcon' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, PlayerFireDistance) == 0x000510, "Member 'ABP_DriveByVan_C::PlayerFireDistance' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, CurrentTarget) == 0x000518, "Member 'ABP_DriveByVan_C::CurrentTarget' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, FireTimerHandle) == 0x000520, "Member 'ABP_DriveByVan_C::FireTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, Charges) == 0x000528, "Member 'ABP_DriveByVan_C::Charges' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, OrderingPlayerState) == 0x000530, "Member 'ABP_DriveByVan_C::OrderingPlayerState' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, ProjectileDamage) == 0x000538, "Member 'ABP_DriveByVan_C::ProjectileDamage' has a wrong offset!");
static_assert(offsetof(ABP_DriveByVan_C, BombDamage) == 0x000540, "Member 'ABP_DriveByVan_C::BombDamage' has a wrong offset!");

}

