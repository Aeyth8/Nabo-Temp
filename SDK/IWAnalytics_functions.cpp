#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWAnalytics

#include "Basic.hpp"

#include "IWAnalytics_classes.hpp"
#include "IWAnalytics_parameters.hpp"


namespace SDK
{

// Function IWAnalytics.IWAnalyticsBlueprintFunctionLibrary.EnqueueAnalyticsEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UIWAnalyticsEvent*                AnalyticsEvent                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIWAnalyticsBlueprintFunctionLibrary::EnqueueAnalyticsEvent(class UObject* WorldContext, class UIWAnalyticsEvent* AnalyticsEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IWAnalyticsBlueprintFunctionLibrary", "EnqueueAnalyticsEvent");

	Params::IWAnalyticsBlueprintFunctionLibrary_EnqueueAnalyticsEvent Parms{};

	Parms.WorldContext = WorldContext;
	Parms.AnalyticsEvent = AnalyticsEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWAnalytics.IWAnalyticsBlueprintFunctionLibrary.FlushQueuedAnalyticsEvents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIWAnalyticsBlueprintFunctionLibrary::FlushQueuedAnalyticsEvents(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("IWAnalyticsBlueprintFunctionLibrary", "FlushQueuedAnalyticsEvents");

	Params::IWAnalyticsBlueprintFunctionLibrary_FlushQueuedAnalyticsEvents Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWAnalytics.IWAnalyticsEvent.OnCreatePayload
// (Event, Protected, BlueprintEvent)

void UIWAnalyticsEvent::OnCreatePayload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IWAnalyticsEvent", "OnCreatePayload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function IWAnalytics.IWAnalyticsSubsystem.EnqueueAnalyticsEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UIWAnalyticsEvent*                Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIWAnalyticsSubsystem::EnqueueAnalyticsEvent(class UIWAnalyticsEvent* Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IWAnalyticsSubsystem", "EnqueueAnalyticsEvent");

	Params::IWAnalyticsSubsystem_EnqueueAnalyticsEvent Parms{};

	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWAnalytics.IWAnalyticsSubsystem.FlushQueuedAnalyticsEvents
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UIWAnalyticsSubsystem::FlushQueuedAnalyticsEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IWAnalyticsSubsystem", "FlushQueuedAnalyticsEvents");

	Params::IWAnalyticsSubsystem_FlushQueuedAnalyticsEvents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

