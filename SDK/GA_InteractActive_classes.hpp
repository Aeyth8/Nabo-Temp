#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_InteractActive

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "GASIW_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_InteractActive.GA_InteractActive_C
// 0x0080 (0x04E0 - 0x0460)
class UGA_InteractActive_C final : public UGameplayAbilityIW
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsInteracting;                                     // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputRelease*          WaitInputReleaseTask;                              // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitDelay*                 WaitDelayTask;                                     // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_NetworkSyncPoint*          PostInteractSyncTask;                              // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_NetworkSyncPoint*          PreInteractSyncTask;                               // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GE_InteractingHandle;                              // 0x0490(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GE_InteractingRemovalHandle;                       // 0x0498(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       InteractableTarget;                                // 0x04A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        MaxDistanceToTarget;                               // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InteractionDuration;                               // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_InteractActive(int32 EntryPoint);
	void GetInteractButtonWI(class UInteractButtonWI_C** PrintMessageWI);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_OnEndAbility(bool bWasCancelled);
	void OnFinish_2153878E4B5D7D92F5D504B840DE14DD();
	void OnRelease_6CA27C9F42C560DB82020F8E8DB541BD(float TimeHeld);
	void OnSync_417BC4EF4A39166787A18AA741C52AD0();
	void OnSync_D1157B6F44771DFE4C3E309405D4A4BC();
	void ValidateTarget(const struct FGameplayAbilityTargetDataHandle& Target_Data, bool* IsValid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_InteractActive_C">();
	}
	static class UGA_InteractActive_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_InteractActive_C>();
	}
};
static_assert(alignof(UGA_InteractActive_C) == 0x000010, "Wrong alignment on UGA_InteractActive_C");
static_assert(sizeof(UGA_InteractActive_C) == 0x0004E0, "Wrong size on UGA_InteractActive_C");
static_assert(offsetof(UGA_InteractActive_C, UberGraphFrame) == 0x000460, "Member 'UGA_InteractActive_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_InteractActive_C, IsInteracting) == 0x000468, "Member 'UGA_InteractActive_C::IsInteracting' has a wrong offset!");
static_assert(offsetof(UGA_InteractActive_C, WaitInputReleaseTask) == 0x000470, "Member 'UGA_InteractActive_C::WaitInputReleaseTask' has a wrong offset!");
static_assert(offsetof(UGA_InteractActive_C, WaitDelayTask) == 0x000478, "Member 'UGA_InteractActive_C::WaitDelayTask' has a wrong offset!");
static_assert(offsetof(UGA_InteractActive_C, PostInteractSyncTask) == 0x000480, "Member 'UGA_InteractActive_C::PostInteractSyncTask' has a wrong offset!");
static_assert(offsetof(UGA_InteractActive_C, PreInteractSyncTask) == 0x000488, "Member 'UGA_InteractActive_C::PreInteractSyncTask' has a wrong offset!");
static_assert(offsetof(UGA_InteractActive_C, GE_InteractingHandle) == 0x000490, "Member 'UGA_InteractActive_C::GE_InteractingHandle' has a wrong offset!");
static_assert(offsetof(UGA_InteractActive_C, GE_InteractingRemovalHandle) == 0x000498, "Member 'UGA_InteractActive_C::GE_InteractingRemovalHandle' has a wrong offset!");
static_assert(offsetof(UGA_InteractActive_C, InteractableTarget) == 0x0004A0, "Member 'UGA_InteractActive_C::InteractableTarget' has a wrong offset!");
static_assert(offsetof(UGA_InteractActive_C, MaxDistanceToTarget) == 0x0004C8, "Member 'UGA_InteractActive_C::MaxDistanceToTarget' has a wrong offset!");
static_assert(offsetof(UGA_InteractActive_C, InteractionDuration) == 0x0004D0, "Member 'UGA_InteractActive_C::InteractionDuration' has a wrong offset!");

}

