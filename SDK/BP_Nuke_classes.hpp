#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Nuke

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MessItem_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Nuke.BP_Nuke_C
// 0x0030 (0x0630 - 0x0600)
class ABP_Nuke_C final : public ABP_MessItem_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Nuke_C;                          // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AudioTick;                                         // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PingableComponent_C*                BP_PingableComponent;                              // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_Indicator_C*                        AC_Indicator;                                      // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             LastHolder;                                        // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void EliminateTeam(uint8 TeamId);
	void ExecuteUbergraph_BP_Nuke(int32 EntryPoint);
	void GetClosestTeam(uint8* Return);
	void GrippedLocal(class ACharacter* GrippingCharacter);
	void LaunchCrate();
	void On_Fuse_Timer_Elapsed();
	void OnDropped();
	void OnGrabbed();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void Released_Local(class ACharacter* ReleasingCharacter);
	void ToggleReceptacleVisual(bool Visible, class ACharacter* Character);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Nuke_C">();
	}
	static class ABP_Nuke_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Nuke_C>();
	}
};
static_assert(alignof(ABP_Nuke_C) == 0x000010, "Wrong alignment on ABP_Nuke_C");
static_assert(sizeof(ABP_Nuke_C) == 0x000630, "Wrong size on ABP_Nuke_C");
static_assert(offsetof(ABP_Nuke_C, UberGraphFrame_BP_Nuke_C) == 0x000600, "Member 'ABP_Nuke_C::UberGraphFrame_BP_Nuke_C' has a wrong offset!");
static_assert(offsetof(ABP_Nuke_C, AudioTick) == 0x000608, "Member 'ABP_Nuke_C::AudioTick' has a wrong offset!");
static_assert(offsetof(ABP_Nuke_C, BP_PingableComponent) == 0x000610, "Member 'ABP_Nuke_C::BP_PingableComponent' has a wrong offset!");
static_assert(offsetof(ABP_Nuke_C, AC_Indicator) == 0x000618, "Member 'ABP_Nuke_C::AC_Indicator' has a wrong offset!");
static_assert(offsetof(ABP_Nuke_C, SpringArm) == 0x000620, "Member 'ABP_Nuke_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_Nuke_C, LastHolder) == 0x000628, "Member 'ABP_Nuke_C::LastHolder' has a wrong offset!");

}

