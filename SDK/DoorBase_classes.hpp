#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DoorBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HouseActorBase_classes.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass DoorBase.DoorBase_C
// 0x0128 (0x0518 - 0x03F0)
class ADoorBase_C : public AHouseActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_DoorBase_C;                         // 0x03F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PingableComponent_C*                BP_PingableComponent;                              // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DestroyedScene;                                    // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        InteractWidget;                                    // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneInFront;                                      // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroundskeeperReference*                GroundskeeperReference;                            // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Door_Timeline_Alpha_D3A7F08941E662718BB2A783CE213B1A; // 0x0438(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Door_Timeline__Direction_D3A7F08941E662718BB2A783CE213B1A; // 0x043C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43D[0x3];                                      // 0x043D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Door_Timeline;                                     // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Open;                                              // 0x0448(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayRate;                                          // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoClose;                                         // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnClosed;                                          // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          DoorShut;                                          // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Destroyed;                                         // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_472[0x6];                                      // 0x0472(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CurrentDamageCauser;                               // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HealthIndicatorMI;                                 // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanReceiveDamage;                                  // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreventInteractionWhenMoving;                      // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableCollisionWhenMoving;                        // 0x048A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CollisionEnabled;                                  // 0x048B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterIsInFront;                                // 0x048C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetRotation;                                    // 0x0490(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnlyTeamMembersCanOpen;                            // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DoorCurve;                                         // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OpenSound;                                         // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CloseSound;                                        // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             LockedSound;                                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipRotation;                                      // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AudioMultiplierApplied;                            // 0x04C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2[0x6];                                      // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HealthbarOffset;                                   // 0x04C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AcIndicatorZOffset;                                // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastDamageCauser;                                  // 0x04E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeDestroyed;                                    // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnOpen;                                            // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          LockedToPlayer;                                    // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RotationAngleMultiplier;                           // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Attempt_Auto_Close();
	void Audio_Close();
	void Audio_Closed();
	void Audio_Door_Knock();
	void Audio_Locked();
	void Audio_Open();
	void Audio_Opened();
	void Close_Door();
	void Closed();
	void Cosmetics_State_Sabotaged();
	void Destroy_All_Components_With_Door_Tag();
	void DestroyDoorMesh();
	void DisableSkeletalMeshTick();
	void Door_Timeline__FinishedFunc();
	void Door_Timeline__UpdateFunc();
	void Event_Apply_Audio_Multiplier(class AActor* InteractingActor);
	void ExecuteUbergraph_DoorBase(int32 EntryPoint);
	void GetCenterLocation(struct FVector* Location);
	void GetInteractableLockedCosmetics(bool* Return);
	void ImpactBounce(const struct FVector& HitLocation, const struct FVector& HitImpact);
	void Init_Door();
	bool IsActorSameTeam(class UObject* FocusingActor);
	void IsInteractingActorTeamMember(class AActor* Actor, bool* Return);
	void IsLockedToPlayer(const class AActor* FocusingActor);
	void Leloi_Interact(class AActor* InteractingActor);
	void OnClosed__DelegateSignature();
	void OnEnded_1C4709354CF3622E31A89BA44F184D91();
	void OnOpen__DelegateSignature(bool Open_0);
	void OnRep_CollisionEnabled();
	void OnRep_CollisionEnabledImplementation();
	void OnRep_Open();
	void Open_Door();
	void Opened();
	void PingTeamOnDestruction();
	void SpawnDestroyedDoor();
	void Start_Auto_Close_Timer();
	void Toggle();
	void ToggleCollision(bool CollisionOn);
	void Update_Alpha(double Alpha);
	void Update_Health_Status();
	void GetWidgetLocation(struct FVector* Location);
	void House_Actor_Impact_Cosmetics(const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect);
	void IsInFocus(class AActor* Focusing_Actor);
	void Multi_Cosmetic_Break();
	void OnDamaged(float Delta, class AActor* Causer, const struct FCombatParticipant& CombatParticipant, const struct FKillMethod& KillMethod, const struct FVector_NetQuantize& Location);
	void PostInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void ReceiveBeginPlay();
	void ReloadAfterHousesLoaded(bool* Return);

	uint8 GetTeamID() const;
	bool IsAvailableForInteraction(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DoorBase_C">();
	}
	static class ADoorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADoorBase_C>();
	}
};
static_assert(alignof(ADoorBase_C) == 0x000008, "Wrong alignment on ADoorBase_C");
static_assert(sizeof(ADoorBase_C) == 0x000518, "Wrong size on ADoorBase_C");
static_assert(offsetof(ADoorBase_C, UberGraphFrame_DoorBase_C) == 0x0003F0, "Member 'ADoorBase_C::UberGraphFrame_DoorBase_C' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, BP_PingableComponent) == 0x0003F8, "Member 'ADoorBase_C::BP_PingableComponent' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, DestroyedScene) == 0x000400, "Member 'ADoorBase_C::DestroyedScene' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, InteractWidget) == 0x000408, "Member 'ADoorBase_C::InteractWidget' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, Audio) == 0x000410, "Member 'ADoorBase_C::Audio' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, SceneInFront) == 0x000418, "Member 'ADoorBase_C::SceneInFront' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, GroundskeeperReference) == 0x000420, "Member 'ADoorBase_C::GroundskeeperReference' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, Arrow) == 0x000428, "Member 'ADoorBase_C::Arrow' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, NavModifier) == 0x000430, "Member 'ADoorBase_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, Door_Timeline_Alpha_D3A7F08941E662718BB2A783CE213B1A) == 0x000438, "Member 'ADoorBase_C::Door_Timeline_Alpha_D3A7F08941E662718BB2A783CE213B1A' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, Door_Timeline__Direction_D3A7F08941E662718BB2A783CE213B1A) == 0x00043C, "Member 'ADoorBase_C::Door_Timeline__Direction_D3A7F08941E662718BB2A783CE213B1A' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, Door_Timeline) == 0x000440, "Member 'ADoorBase_C::Door_Timeline' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, Open) == 0x000448, "Member 'ADoorBase_C::Open' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, PlayRate) == 0x000450, "Member 'ADoorBase_C::PlayRate' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, AutoClose) == 0x000458, "Member 'ADoorBase_C::AutoClose' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, OnClosed) == 0x000460, "Member 'ADoorBase_C::OnClosed' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, DoorShut) == 0x000470, "Member 'ADoorBase_C::DoorShut' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, Destroyed) == 0x000471, "Member 'ADoorBase_C::Destroyed' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, CurrentDamageCauser) == 0x000478, "Member 'ADoorBase_C::CurrentDamageCauser' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, HealthIndicatorMI) == 0x000480, "Member 'ADoorBase_C::HealthIndicatorMI' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, CanReceiveDamage) == 0x000488, "Member 'ADoorBase_C::CanReceiveDamage' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, PreventInteractionWhenMoving) == 0x000489, "Member 'ADoorBase_C::PreventInteractionWhenMoving' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, DisableCollisionWhenMoving) == 0x00048A, "Member 'ADoorBase_C::DisableCollisionWhenMoving' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, CollisionEnabled) == 0x00048B, "Member 'ADoorBase_C::CollisionEnabled' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, CharacterIsInFront) == 0x00048C, "Member 'ADoorBase_C::CharacterIsInFront' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, TargetRotation) == 0x000490, "Member 'ADoorBase_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, OnlyTeamMembersCanOpen) == 0x000498, "Member 'ADoorBase_C::OnlyTeamMembersCanOpen' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, DoorCurve) == 0x0004A0, "Member 'ADoorBase_C::DoorCurve' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, OpenSound) == 0x0004A8, "Member 'ADoorBase_C::OpenSound' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, CloseSound) == 0x0004B0, "Member 'ADoorBase_C::CloseSound' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, LockedSound) == 0x0004B8, "Member 'ADoorBase_C::LockedSound' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, FlipRotation) == 0x0004C0, "Member 'ADoorBase_C::FlipRotation' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, AudioMultiplierApplied) == 0x0004C1, "Member 'ADoorBase_C::AudioMultiplierApplied' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, HealthbarOffset) == 0x0004C8, "Member 'ADoorBase_C::HealthbarOffset' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, AcIndicatorZOffset) == 0x0004E0, "Member 'ADoorBase_C::AcIndicatorZOffset' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, LastDamageCauser) == 0x0004E8, "Member 'ADoorBase_C::LastDamageCauser' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, CanBeDestroyed) == 0x0004F0, "Member 'ADoorBase_C::CanBeDestroyed' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, OnOpen) == 0x0004F8, "Member 'ADoorBase_C::OnOpen' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, LockedToPlayer) == 0x000508, "Member 'ADoorBase_C::LockedToPlayer' has a wrong offset!");
static_assert(offsetof(ADoorBase_C, RotationAngleMultiplier) == 0x000510, "Member 'ADoorBase_C::RotationAngleMultiplier' has a wrong offset!");

}

