#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BlockingVolume

#include "Basic.hpp"

#include "E_MaterialTypes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ImpactEffect_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_BlockingVolume.BP_BlockingVolume_C.AttackBlocked__DelegateSignature
// 0x0100 (0x0100 - 0x0000)
struct BP_BlockingVolume_C_AttackBlocked__DelegateSignature final
{
public:
	int32                                         IncomingDamage;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0008(0x00F8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_BlockingVolume_C_AttackBlocked__DelegateSignature) == 0x000008, "Wrong alignment on BP_BlockingVolume_C_AttackBlocked__DelegateSignature");
static_assert(sizeof(BP_BlockingVolume_C_AttackBlocked__DelegateSignature) == 0x000100, "Wrong size on BP_BlockingVolume_C_AttackBlocked__DelegateSignature");
static_assert(offsetof(BP_BlockingVolume_C_AttackBlocked__DelegateSignature, IncomingDamage) == 0x000000, "Member 'BP_BlockingVolume_C_AttackBlocked__DelegateSignature::IncomingDamage' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_AttackBlocked__DelegateSignature, HitResult) == 0x000008, "Member 'BP_BlockingVolume_C_AttackBlocked__DelegateSignature::HitResult' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.BlockedTrace
// 0x0100 (0x0100 - 0x0000)
struct BP_BlockingVolume_C_BlockedTrace final
{
public:
	int32                                         IncomingDamage;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0008(0x00F8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_BlockingVolume_C_BlockedTrace) == 0x000008, "Wrong alignment on BP_BlockingVolume_C_BlockedTrace");
static_assert(sizeof(BP_BlockingVolume_C_BlockedTrace) == 0x000100, "Wrong size on BP_BlockingVolume_C_BlockedTrace");
static_assert(offsetof(BP_BlockingVolume_C_BlockedTrace, IncomingDamage) == 0x000000, "Member 'BP_BlockingVolume_C_BlockedTrace::IncomingDamage' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_BlockedTrace, HitResult) == 0x000008, "Member 'BP_BlockingVolume_C_BlockedTrace::HitResult' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.ExecuteUbergraph_BP_BlockingVolume
// 0x0248 (0x0248 - 0x0000)
struct BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           K2Node_Event_AttackingActor;                       // 0x0008(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Direction;                            // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_IncomingDamage;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_HitResult_1;                          // 0x0030(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_Event_Incoming_Damage;                      // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_HitResult;                            // 0x0130(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_CustomEvent_Active;                         // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Scale;                          // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume) == 0x000008, "Wrong alignment on BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume");
static_assert(sizeof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume) == 0x000248, "Wrong size on BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume");
static_assert(offsetof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume, EntryPoint) == 0x000000, "Member 'BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume, K2Node_Event_AttackingActor) == 0x000008, "Member 'BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume::K2Node_Event_AttackingActor' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume, K2Node_Event_Direction) == 0x000010, "Member 'BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume::K2Node_Event_Direction' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume, K2Node_Event_IncomingDamage) == 0x000028, "Member 'BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume::K2Node_Event_IncomingDamage' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume, K2Node_Event_HitResult_1) == 0x000030, "Member 'BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume::K2Node_Event_HitResult_1' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume, K2Node_Event_Incoming_Damage) == 0x000128, "Member 'BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume::K2Node_Event_Incoming_Damage' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume, K2Node_Event_HitResult) == 0x000130, "Member 'BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume::K2Node_Event_HitResult' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume, K2Node_CustomEvent_Active) == 0x000228, "Member 'BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume::K2Node_CustomEvent_Active' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume, K2Node_CustomEvent_Scale) == 0x000230, "Member 'BP_BlockingVolume_C_ExecuteUbergraph_BP_BlockingVolume::K2Node_CustomEvent_Scale' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.GetDurabilityCostWhenHit
// 0x0008 (0x0008 - 0x0000)
struct BP_BlockingVolume_C_GetDurabilityCostWhenHit final
{
public:
	double                                        Amount;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BlockingVolume_C_GetDurabilityCostWhenHit) == 0x000008, "Wrong alignment on BP_BlockingVolume_C_GetDurabilityCostWhenHit");
static_assert(sizeof(BP_BlockingVolume_C_GetDurabilityCostWhenHit) == 0x000008, "Wrong size on BP_BlockingVolume_C_GetDurabilityCostWhenHit");
static_assert(offsetof(BP_BlockingVolume_C_GetDurabilityCostWhenHit, Amount) == 0x000000, "Member 'BP_BlockingVolume_C_GetDurabilityCostWhenHit::Amount' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.GetMaterialType
// 0x0001 (0x0001 - 0x0000)
struct BP_BlockingVolume_C_GetMaterialType final
{
public:
	E_MaterialTypes                               MaterialType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BlockingVolume_C_GetMaterialType) == 0x000001, "Wrong alignment on BP_BlockingVolume_C_GetMaterialType");
static_assert(sizeof(BP_BlockingVolume_C_GetMaterialType) == 0x000001, "Wrong size on BP_BlockingVolume_C_GetMaterialType");
static_assert(offsetof(BP_BlockingVolume_C_GetMaterialType, MaterialType) == 0x000000, "Member 'BP_BlockingVolume_C_GetMaterialType::MaterialType' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.HitInterface
// 0x0018 (0x0018 - 0x0000)
struct BP_BlockingVolume_C_HitInterface final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BlockingVolume_C_HitInterface) == 0x000008, "Wrong alignment on BP_BlockingVolume_C_HitInterface");
static_assert(sizeof(BP_BlockingVolume_C_HitInterface) == 0x000018, "Wrong size on BP_BlockingVolume_C_HitInterface");
static_assert(offsetof(BP_BlockingVolume_C_HitInterface, Direction) == 0x000000, "Member 'BP_BlockingVolume_C_HitInterface::Direction' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.ImpactCosmetics
// 0x0048 (0x0048 - 0x0000)
struct BP_BlockingVolume_C_ImpactCosmetics final
{
public:
	class APawn*                                  ImpactCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitImpulse;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ImpactEffect                                ImpactEffect;                                      // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x003C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangedAttributes;                                 // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BlockingVolume_C_ImpactCosmetics) == 0x000008, "Wrong alignment on BP_BlockingVolume_C_ImpactCosmetics");
static_assert(sizeof(BP_BlockingVolume_C_ImpactCosmetics) == 0x000048, "Wrong size on BP_BlockingVolume_C_ImpactCosmetics");
static_assert(offsetof(BP_BlockingVolume_C_ImpactCosmetics, ImpactCauser) == 0x000000, "Member 'BP_BlockingVolume_C_ImpactCosmetics::ImpactCauser' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ImpactCosmetics, Location) == 0x000008, "Member 'BP_BlockingVolume_C_ImpactCosmetics::Location' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ImpactCosmetics, HitImpulse) == 0x000020, "Member 'BP_BlockingVolume_C_ImpactCosmetics::HitImpulse' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ImpactCosmetics, ImpactEffect) == 0x000038, "Member 'BP_BlockingVolume_C_ImpactCosmetics::ImpactEffect' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ImpactCosmetics, BoneName) == 0x00003C, "Member 'BP_BlockingVolume_C_ImpactCosmetics::BoneName' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ImpactCosmetics, ChangedAttributes) == 0x000044, "Member 'BP_BlockingVolume_C_ImpactCosmetics::ChangedAttributes' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.MeleeHit
// 0x0008 (0x0008 - 0x0000)
struct BP_BlockingVolume_C_MeleeHit final
{
public:
	const class AActor*                           AttackingActor;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BlockingVolume_C_MeleeHit) == 0x000008, "Wrong alignment on BP_BlockingVolume_C_MeleeHit");
static_assert(sizeof(BP_BlockingVolume_C_MeleeHit) == 0x000008, "Wrong size on BP_BlockingVolume_C_MeleeHit");
static_assert(offsetof(BP_BlockingVolume_C_MeleeHit, AttackingActor) == 0x000000, "Member 'BP_BlockingVolume_C_MeleeHit::AttackingActor' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.ProjectileImpact
// 0x0100 (0x0100 - 0x0000)
struct BP_BlockingVolume_C_ProjectileImpact final
{
public:
	int32                                         Incoming_Damage;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0008(0x00F8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_BlockingVolume_C_ProjectileImpact) == 0x000008, "Wrong alignment on BP_BlockingVolume_C_ProjectileImpact");
static_assert(sizeof(BP_BlockingVolume_C_ProjectileImpact) == 0x000100, "Wrong size on BP_BlockingVolume_C_ProjectileImpact");
static_assert(offsetof(BP_BlockingVolume_C_ProjectileImpact, Incoming_Damage) == 0x000000, "Member 'BP_BlockingVolume_C_ProjectileImpact::Incoming_Damage' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_ProjectileImpact, HitResult) == 0x000008, "Member 'BP_BlockingVolume_C_ProjectileImpact::HitResult' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.Server_SetBlockingState
// 0x0020 (0x0020 - 0x0000)
struct BP_BlockingVolume_C_Server_SetBlockingState final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BlockingVolume_C_Server_SetBlockingState) == 0x000008, "Wrong alignment on BP_BlockingVolume_C_Server_SetBlockingState");
static_assert(sizeof(BP_BlockingVolume_C_Server_SetBlockingState) == 0x000020, "Wrong size on BP_BlockingVolume_C_Server_SetBlockingState");
static_assert(offsetof(BP_BlockingVolume_C_Server_SetBlockingState, Active) == 0x000000, "Member 'BP_BlockingVolume_C_Server_SetBlockingState::Active' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_Server_SetBlockingState, Scale) == 0x000008, "Member 'BP_BlockingVolume_C_Server_SetBlockingState::Scale' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.SetBlockingState
// 0x0001 (0x0001 - 0x0000)
struct BP_BlockingVolume_C_SetBlockingState final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BlockingVolume_C_SetBlockingState) == 0x000001, "Wrong alignment on BP_BlockingVolume_C_SetBlockingState");
static_assert(sizeof(BP_BlockingVolume_C_SetBlockingState) == 0x000001, "Wrong size on BP_BlockingVolume_C_SetBlockingState");
static_assert(offsetof(BP_BlockingVolume_C_SetBlockingState, Active) == 0x000000, "Member 'BP_BlockingVolume_C_SetBlockingState::Active' has a wrong offset!");

// Function BP_BlockingVolume.BP_BlockingVolume_C.SetScale
// 0x0020 (0x0020 - 0x0000)
struct BP_BlockingVolume_C_SetScale final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BlockingVolume_C_SetScale) == 0x000008, "Wrong alignment on BP_BlockingVolume_C_SetScale");
static_assert(sizeof(BP_BlockingVolume_C_SetScale) == 0x000020, "Wrong size on BP_BlockingVolume_C_SetScale");
static_assert(offsetof(BP_BlockingVolume_C_SetScale, Active) == 0x000000, "Member 'BP_BlockingVolume_C_SetScale::Active' has a wrong offset!");
static_assert(offsetof(BP_BlockingVolume_C_SetScale, Scale) == 0x000008, "Member 'BP_BlockingVolume_C_SetScale::Scale' has a wrong offset!");

}

