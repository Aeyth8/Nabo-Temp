#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TutorialSequencer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TutorialSequencer.BP_TutorialSequencer_C
// 0x0120 (0x03B0 - 0x0290)
class ABP_TutorialSequencer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSequenceEnded;                                   // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        LerpingSpeed;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CameraBlendTime;                                   // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CameraPositions;                                   // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class AActor*                                 SequenceCamera;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLerping;                                         // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OriginActor;                                       // 0x02E0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TargetActor;                                       // 0x0340(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ProgressValue;                                     // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PositionListIndex;                                 // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ArrivedAtDestination();
	void CreateSequenceCamera(const struct FTransform& SpawnTransform, class AActor** Camera);
	void EndSequence();
	void ExecuteUbergraph_BP_TutorialSequencer(int32 EntryPoint);
	const struct FTransform GetFirstSequencePosition();
	void GiveCameraBackToPlayer();
	void GoToNextCameraPosition();
	void GoToPreviousCameraPosition();
	void OnSequenceEnded__DelegateSignature();
	void ReceiveTick(float DeltaSeconds);
	void StartLerping(int32 TargetIndex, bool* SequenceEnded);
	void StartSequence();
	void TakeCameraAwayFromPlayer(class AActor* Camera);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TutorialSequencer_C">();
	}
	static class ABP_TutorialSequencer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TutorialSequencer_C>();
	}
};
static_assert(alignof(ABP_TutorialSequencer_C) == 0x000010, "Wrong alignment on ABP_TutorialSequencer_C");
static_assert(sizeof(ABP_TutorialSequencer_C) == 0x0003B0, "Wrong size on ABP_TutorialSequencer_C");
static_assert(offsetof(ABP_TutorialSequencer_C, UberGraphFrame) == 0x000290, "Member 'ABP_TutorialSequencer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_TutorialSequencer_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, OnSequenceEnded) == 0x0002A0, "Member 'ABP_TutorialSequencer_C::OnSequenceEnded' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, LerpingSpeed) == 0x0002B0, "Member 'ABP_TutorialSequencer_C::LerpingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, CameraBlendTime) == 0x0002B8, "Member 'ABP_TutorialSequencer_C::CameraBlendTime' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, CameraPositions) == 0x0002C0, "Member 'ABP_TutorialSequencer_C::CameraPositions' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, SequenceCamera) == 0x0002D0, "Member 'ABP_TutorialSequencer_C::SequenceCamera' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, IsLerping) == 0x0002D8, "Member 'ABP_TutorialSequencer_C::IsLerping' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, OriginActor) == 0x0002E0, "Member 'ABP_TutorialSequencer_C::OriginActor' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, TargetActor) == 0x000340, "Member 'ABP_TutorialSequencer_C::TargetActor' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, ProgressValue) == 0x0003A0, "Member 'ABP_TutorialSequencer_C::ProgressValue' has a wrong offset!");
static_assert(offsetof(ABP_TutorialSequencer_C, PositionListIndex) == 0x0003A8, "Member 'ABP_TutorialSequencer_C::PositionListIndex' has a wrong offset!");

}

