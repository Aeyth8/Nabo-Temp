#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpectatorPawnJP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_FOVZoom_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SpectatorPawnJP.SpectatorPawnJP_C
// 0x0050 (0x0390 - 0x0340)
class ASpectatorPawnJP_C final : public ASpectatorPawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFloatingPawnMovement*                  FloatingPawnMovement;                              // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FOV;                                               // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_FOVZoom                                     FOVButton;                                         // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowControls;                                      // 0x0365(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_366[0x2];                                      // 0x0366(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UUserWidget>>        WidgetsToAffect;                                   // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSubclassOf<class AActor>>             ActorsToAffect;                                    // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        MaxAllowedSpeed;                                   // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_SpectatorPawnJP(int32 EntryPoint);
	void Hide_All_Widgets();
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_N_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_Tab_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_V_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void ReceiveBeginPlay();
	void ReceiveRestarted();
	void ReceiveTick(float DeltaSeconds);
	void SetVisibilityForWidgets();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SpectatorPawnJP_C">();
	}
	static class ASpectatorPawnJP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpectatorPawnJP_C>();
	}
};
static_assert(alignof(ASpectatorPawnJP_C) == 0x000008, "Wrong alignment on ASpectatorPawnJP_C");
static_assert(sizeof(ASpectatorPawnJP_C) == 0x000390, "Wrong size on ASpectatorPawnJP_C");
static_assert(offsetof(ASpectatorPawnJP_C, UberGraphFrame) == 0x000340, "Member 'ASpectatorPawnJP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASpectatorPawnJP_C, FloatingPawnMovement) == 0x000348, "Member 'ASpectatorPawnJP_C::FloatingPawnMovement' has a wrong offset!");
static_assert(offsetof(ASpectatorPawnJP_C, Camera) == 0x000350, "Member 'ASpectatorPawnJP_C::Camera' has a wrong offset!");
static_assert(offsetof(ASpectatorPawnJP_C, SpringArm) == 0x000358, "Member 'ASpectatorPawnJP_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ASpectatorPawnJP_C, FOV) == 0x000360, "Member 'ASpectatorPawnJP_C::FOV' has a wrong offset!");
static_assert(offsetof(ASpectatorPawnJP_C, FOVButton) == 0x000364, "Member 'ASpectatorPawnJP_C::FOVButton' has a wrong offset!");
static_assert(offsetof(ASpectatorPawnJP_C, ShowControls) == 0x000365, "Member 'ASpectatorPawnJP_C::ShowControls' has a wrong offset!");
static_assert(offsetof(ASpectatorPawnJP_C, WidgetsToAffect) == 0x000368, "Member 'ASpectatorPawnJP_C::WidgetsToAffect' has a wrong offset!");
static_assert(offsetof(ASpectatorPawnJP_C, ActorsToAffect) == 0x000378, "Member 'ASpectatorPawnJP_C::ActorsToAffect' has a wrong offset!");
static_assert(offsetof(ASpectatorPawnJP_C, MaxAllowedSpeed) == 0x000388, "Member 'ASpectatorPawnJP_C::MaxAllowedSpeed' has a wrong offset!");

}

