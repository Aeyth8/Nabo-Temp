#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PA_SwapToolTipOnEquip

#include "Basic.hpp"


namespace SDK::Params
{

// Function PA_SwapToolTipOnEquip.PA_SwapToolTipOnEquip_C.SwapToolTip
// 0x0040 (0x0040 - 0x0000)
struct PA_SwapToolTipOnEquip_C_SwapToolTip final
{
public:
	class UEquipmentInstance*                     Instance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObjectiveDefinition*                   K2Node_DynamicCast_AsObjective_Definition;         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObjectiveAction*                       CallFunc_FindActionByType_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObjectiveAction_ItemName*              K2Node_DynamicCast_AsObjective_Action_Item_Name;   // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PA_SwapToolTipOnEquip_C_SwapToolTip) == 0x000008, "Wrong alignment on PA_SwapToolTipOnEquip_C_SwapToolTip");
static_assert(sizeof(PA_SwapToolTipOnEquip_C_SwapToolTip) == 0x000040, "Wrong size on PA_SwapToolTipOnEquip_C_SwapToolTip");
static_assert(offsetof(PA_SwapToolTipOnEquip_C_SwapToolTip, Instance) == 0x000000, "Member 'PA_SwapToolTipOnEquip_C_SwapToolTip::Instance' has a wrong offset!");
static_assert(offsetof(PA_SwapToolTipOnEquip_C_SwapToolTip, CallFunc_GetObjectClass_ReturnValue) == 0x000008, "Member 'PA_SwapToolTipOnEquip_C_SwapToolTip::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(PA_SwapToolTipOnEquip_C_SwapToolTip, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000010, "Member 'PA_SwapToolTipOnEquip_C_SwapToolTip::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(PA_SwapToolTipOnEquip_C_SwapToolTip, K2Node_DynamicCast_AsObjective_Definition) == 0x000018, "Member 'PA_SwapToolTipOnEquip_C_SwapToolTip::K2Node_DynamicCast_AsObjective_Definition' has a wrong offset!");
static_assert(offsetof(PA_SwapToolTipOnEquip_C_SwapToolTip, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'PA_SwapToolTipOnEquip_C_SwapToolTip::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PA_SwapToolTipOnEquip_C_SwapToolTip, CallFunc_FindActionByType_ReturnValue) == 0x000028, "Member 'PA_SwapToolTipOnEquip_C_SwapToolTip::CallFunc_FindActionByType_ReturnValue' has a wrong offset!");
static_assert(offsetof(PA_SwapToolTipOnEquip_C_SwapToolTip, K2Node_DynamicCast_AsObjective_Action_Item_Name) == 0x000030, "Member 'PA_SwapToolTipOnEquip_C_SwapToolTip::K2Node_DynamicCast_AsObjective_Action_Item_Name' has a wrong offset!");
static_assert(offsetof(PA_SwapToolTipOnEquip_C_SwapToolTip, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'PA_SwapToolTipOnEquip_C_SwapToolTip::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

}

