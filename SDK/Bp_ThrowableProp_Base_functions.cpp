#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Bp_ThrowableProp_Base

#include "Basic.hpp"

#include "Bp_ThrowableProp_Base_classes.hpp"
#include "Bp_ThrowableProp_Base_parameters.hpp"


namespace SDK
{

// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.AddImpulseOwner
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::AddImpulseOwner(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "AddImpulseOwner");

	Params::Bp_ThrowableProp_Base_C_AddImpulseOwner Parms{};

	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.AddImpulseServer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::AddImpulseServer(const struct FVector& Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "AddImpulseServer");

	Params::Bp_ThrowableProp_Base_C_AddImpulseServer Parms{};

	Parms.Impulse = std::move(Impulse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.AttemptSecondary
// (Public, BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::AttemptSecondary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "AttemptSecondary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.Audio Drop
// (BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::Audio_Drop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "Audio Drop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.Audio Pick Up
// (BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::Audio_Pick_Up()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "Audio Pick Up");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.Audio Throw
// (BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::Audio_Throw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "Audio Throw");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.BelowDeathPlane
// (Public, BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::BelowDeathPlane()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "BelowDeathPlane");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.CancelInteraction
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::CancelInteraction(class UPrimitiveComponent* InteractionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "CancelInteraction");

	Params::Bp_ThrowableProp_Base_C_CancelInteraction Parms{};

	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.DebugGripPoint
// (BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::DebugGripPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "DebugGripPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.ExecuteUbergraph_Bp_ThrowableProp_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::ExecuteUbergraph_Bp_ThrowableProp_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "ExecuteUbergraph_Bp_ThrowableProp_Base");

	Params::Bp_ThrowableProp_Base_C_ExecuteUbergraph_Bp_ThrowableProp_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.FocusGained
// (BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::FocusGained()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "FocusGained");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.FocusLost
// (BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::FocusLost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "FocusLost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GetDurabilityCostWhenHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Amount                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::GetDurabilityCostWhenHit(double* Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GetDurabilityCostWhenHit");

	Params::Bp_ThrowableProp_Base_C_GetDurabilityCostWhenHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Amount != nullptr)
		*Amount = Parms.Amount;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GetInteractSound
// (Public, BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::GetInteractSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GetInteractSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GetMaterialType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MaterialTypes                         MaterialType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::GetMaterialType(E_MaterialTypes* MaterialType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GetMaterialType");

	Params::Bp_ThrowableProp_Base_C_GetMaterialType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaterialType != nullptr)
		*MaterialType = Parms.MaterialType;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GetNewWidgetColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateColor                      NewColor                                               (Parm, OutParm)

void ABp_ThrowableProp_Base_C::GetNewWidgetColor(struct FSlateColor* NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GetNewWidgetColor");

	Params::Bp_ThrowableProp_Base_C_GetNewWidgetColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewColor != nullptr)
		*NewColor = std::move(Parms.NewColor);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GetOptionalText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Return                                                 (Parm, OutParm)
// class FText                             Optional_Second_Line                                   (Parm, OutParm)

void ABp_ThrowableProp_Base_C::GetOptionalText(class FText* Return, class FText* Optional_Second_Line)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GetOptionalText");

	Params::Bp_ThrowableProp_Base_C_GetOptionalText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = std::move(Parms.Return);

	if (Optional_Second_Line != nullptr)
		*Optional_Second_Line = std::move(Parms.Optional_Second_Line);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GetPriority
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Priority                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::GetPriority(int32* Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GetPriority");

	Params::Bp_ThrowableProp_Base_C_GetPriority Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Priority != nullptr)
		*Priority = Parms.Priority;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GetWidgetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::GetWidgetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GetWidgetLocation");

	Params::Bp_ThrowableProp_Base_C_GetWidgetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GrippedLocal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       GrippingCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::GrippedLocal(class ACharacter* GrippingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GrippedLocal");

	Params::Bp_ThrowableProp_Base_C_GrippedLocal Parms{};

	Parms.GrippingCharacter = GrippingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GrippedServer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       GrippingCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::GrippedServer(class ACharacter* GrippingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GrippedServer");

	Params::Bp_ThrowableProp_Base_C_GrippedServer Parms{};

	Parms.GrippingCharacter = GrippingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.HideInteractionWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::HideInteractionWidget(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "HideInteractionWidget");

	Params::Bp_ThrowableProp_Base_C_HideInteractionWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.HighConstrastModeChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::HighConstrastModeChanged(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "HighConstrastModeChanged");

	Params::Bp_ThrowableProp_Base_C_HighConstrastModeChanged Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.HitInterface
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::HitInterface(const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "HitInterface");

	Params::Bp_ThrowableProp_Base_C_HitInterface Parms{};

	Parms.Direction = std::move(Direction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.ImpactCosmetics
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ImpactCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitImpulse                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ImpactEffect                          ImpactEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ChangedAttributes                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "ImpactCosmetics");

	Params::Bp_ThrowableProp_Base_C_ImpactCosmetics Parms{};

	Parms.ImpactCauser = ImpactCauser;
	Parms.Location = std::move(Location);
	Parms.HitImpulse = std::move(HitImpulse);
	Parms.ImpactEffect = ImpactEffect;
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);

	if (ChangedAttributes != nullptr)
		*ChangedAttributes = Parms.ChangedAttributes;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.InteractableCancelInteraction
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::InteractableCancelInteraction(class UPrimitiveComponent* InteractionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "InteractableCancelInteraction");

	Params::Bp_ThrowableProp_Base_C_InteractableCancelInteraction Parms{};

	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.InteractPressed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::InteractPressed(class AActor* InteractingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "InteractPressed");

	Params::Bp_ThrowableProp_Base_C_InteractPressed Parms{};

	Parms.InteractingActor = InteractingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.InteractReleased
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::InteractReleased(class AActor* InteractingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "InteractReleased");

	Params::Bp_ThrowableProp_Base_C_InteractReleased Parms{};

	Parms.InteractingActor = InteractingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.InternalFocusGained
// (BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::InternalFocusGained()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "InternalFocusGained");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.InternalFocusLost
// (BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::InternalFocusLost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "InternalFocusLost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.IsBeingHeld
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABp_ThrowableProp_Base_C::IsBeingHeld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "IsBeingHeld");

	Params::Bp_ThrowableProp_Base_C_IsBeingHeld Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.IsInFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Focusing_Actor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::IsInFocus(class AActor* Focusing_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "IsInFocus");

	Params::Bp_ThrowableProp_Base_C_IsInFocus Parms{};

	Parms.Focusing_Actor = Focusing_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.IsInteractable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interactable                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::IsInteractable(bool* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "IsInteractable");

	Params::Bp_ThrowableProp_Base_C_IsInteractable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Interactable != nullptr)
		*Interactable = Parms.Interactable;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.K2_FellOutOfWorld
// (Event, Public, BlueprintEvent)

void ABp_ThrowableProp_Base_C::K2_FellOutOfWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "K2_FellOutOfWorld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.Knockback
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    XYOverride                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ZOverride                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AirControlMultiplier                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Void                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::Knockback(const struct FVector& Velocity, bool XYOverride, bool ZOverride, double AirControlMultiplier, bool* Void)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "Knockback");

	Params::Bp_ThrowableProp_Base_C_Knockback Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.XYOverride = XYOverride;
	Parms.ZOverride = ZOverride;
	Parms.AirControlMultiplier = AirControlMultiplier;

	UObject::ProcessEvent(Func, &Parms);

	if (Void != nullptr)
		*Void = Parms.Void;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.LimitVelocity
// (Public, BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::LimitVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "LimitVelocity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.MeleeHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           AttackingActor                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::MeleeHit(const class AActor*& AttackingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "MeleeHit");

	Params::Bp_ThrowableProp_Base_C_MeleeHit Parms{};

	Parms.AttackingActor = AttackingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.Multi_TeleportToSpawnPosition
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::Multi_TeleportToSpawnPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "Multi_TeleportToSpawnPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.OnRep_Held
// (BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::OnRep_Held()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "OnRep_Held");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.OnRep_HoldingCharacter
// (BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::OnRep_HoldingCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "OnRep_HoldingCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.PlayHitAudio
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPhysicalMaterial*                Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::PlayHitAudio(class UPhysicalMaterial* Hit, class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "PlayHitAudio");

	Params::Bp_ThrowableProp_Base_C_PlayHitAudio Parms{};

	Parms.Hit = Hit;
	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.PlayImpactCosmetics
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UPrimitiveComponent*              MyComponent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::PlayImpactCosmetics(const struct FVector& Location, const struct FHitResult& Hit, class UPrimitiveComponent* MyComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "PlayImpactCosmetics");

	Params::Bp_ThrowableProp_Base_C_PlayImpactCosmetics Parms{};

	Parms.Location = std::move(Location);
	Parms.Hit = std::move(Hit);
	Parms.MyComponent = MyComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.PostInteract
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::PostInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "PostInteract");

	Params::Bp_ThrowableProp_Base_C_PostInteract Parms{};

	Parms.InteractingActor = InteractingActor;
	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.PreInteract
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::PreInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "PreInteract");

	Params::Bp_ThrowableProp_Base_C_PreInteract Parms{};

	Parms.InteractingActor = InteractingActor;
	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.PropIsDropped__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::PropIsDropped__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "PropIsDropped__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.PropIsGrabbed__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::PropIsGrabbed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "PropIsGrabbed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABp_ThrowableProp_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABp_ThrowableProp_Base_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "ReceiveHit");

	Params::Bp_ThrowableProp_Base_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.RegisterInteracter
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::RegisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "RegisterInteracter");

	Params::Bp_ThrowableProp_Base_C_RegisterInteracter Parms{};

	Parms.InteractionComponent = InteractionComponent;
	Parms.InteractingActor = InteractingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.Released Local
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       ReleasingCharacter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::Released_Local(class ACharacter* ReleasingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "Released Local");

	Params::Bp_ThrowableProp_Base_C_Released_Local Parms{};

	Parms.ReleasingCharacter = ReleasingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.ReleasedServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       ReleasingCharacter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::ReleasedServer(class ACharacter* ReleasingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "ReleasedServer");

	Params::Bp_ThrowableProp_Base_C_ReleasedServer Parms{};

	Parms.ReleasingCharacter = ReleasingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.ReloadAfterHousesLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::ReloadAfterHousesLoaded(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "ReloadAfterHousesLoaded");

	Params::Bp_ThrowableProp_Base_C_ReloadAfterHousesLoaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.SetHighContrastMode
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::SetHighContrastMode(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "SetHighContrastMode");

	Params::Bp_ThrowableProp_Base_C_SetHighContrastMode Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.SetHoveredComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInteractionComponent_C*          HoveredComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Void                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::SetHoveredComponent(class UInteractionComponent_C* HoveredComponent, bool* Void)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "SetHoveredComponent");

	Params::Bp_ThrowableProp_Base_C_SetHoveredComponent Parms{};

	Parms.HoveredComponent = HoveredComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (Void != nullptr)
		*Void = Parms.Void;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.SetInteractable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interactable                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::SetInteractable(bool Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "SetInteractable");

	Params::Bp_ThrowableProp_Base_C_SetInteractable Parms{};

	Parms.Interactable = Interactable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.SetLinearVelocityOwner
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewVelocity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::SetLinearVelocityOwner(const struct FVector& NewVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "SetLinearVelocityOwner");

	Params::Bp_ThrowableProp_Base_C_SetLinearVelocityOwner Parms{};

	Parms.NewVelocity = std::move(NewVelocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.SetLinearVelocityServer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewVelocity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::SetLinearVelocityServer(const struct FVector& NewVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "SetLinearVelocityServer");

	Params::Bp_ThrowableProp_Base_C_SetLinearVelocityServer Parms{};

	Parms.NewVelocity = std::move(NewVelocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.Show Throwable Widget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::Show_Throwable_Widget(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "Show Throwable Widget");

	Params::Bp_ThrowableProp_Base_C_Show_Throwable_Widget Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.TakeDamage
// (Public, BlueprintCallable, BlueprintEvent)

void ABp_ThrowableProp_Base_C::TakeDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "TakeDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.UnregisterInteracter
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::UnregisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "UnregisterInteracter");

	Params::Bp_ThrowableProp_Base_C_UnregisterInteracter Parms{};

	Parms.InteractionComponent = InteractionComponent;
	Parms.InteractingActor = InteractingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GetInteractionDuration
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABp_ThrowableProp_Base_C::GetInteractionDuration(class UPrimitiveComponent* InteractionComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GetInteractionDuration");

	Params::Bp_ThrowableProp_Base_C_GetInteractionDuration Parms{};

	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GetPostInteractSyncType
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bShouldSync                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAbilityTaskNetSyncType                 Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::GetPostInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GetPostInteractSyncType");

	Params::Bp_ThrowableProp_Base_C_GetPostInteractSyncType Parms{};

	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldSync != nullptr)
		*bShouldSync = Parms.bShouldSync;

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.GetPreInteractSyncType
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bShouldSync                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAbilityTaskNetSyncType                 Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABp_ThrowableProp_Base_C::GetPreInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "GetPreInteractSyncType");

	Params::Bp_ThrowableProp_Base_C_GetPreInteractSyncType Parms{};

	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldSync != nullptr)
		*bShouldSync = Parms.bShouldSync;

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.IsAvailableForEnemyTeam
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABp_ThrowableProp_Base_C::IsAvailableForEnemyTeam(class UPrimitiveComponent* InteractionComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "IsAvailableForEnemyTeam");

	Params::Bp_ThrowableProp_Base_C_IsAvailableForEnemyTeam Parms{};

	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Bp_ThrowableProp_Base.Bp_ThrowableProp_Base_C.IsAvailableForInteraction
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              InteractionComponent                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABp_ThrowableProp_Base_C::IsAvailableForInteraction(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bp_ThrowableProp_Base_C", "IsAvailableForInteraction");

	Params::Bp_ThrowableProp_Base_C_IsAvailableForInteraction Parms{};

	Parms.InteractingActor = InteractingActor;
	Parms.InteractionComponent = InteractionComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

