#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerStateJP_MatchBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "JP_classes.hpp"
#include "E_TimeOfDay_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerStateJP_MatchBP.PlayerStateJP_MatchBP_C
// 0x0058 (0x08B0 - 0x0858)
class APlayerStateJP_MatchBP_C final : public APlayerStateJP_Match
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0858(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAC_MusicManagerNew_C*                  AC_MusicManagerNew;                                // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_AchievementTracker_C*               AC_AchievementTracker;                             // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PerkManagerComponent_C*             BP_PerkManagerComponent;                           // 0x0870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HandsGranted;                                      // 0x0880(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_881[0x7];                                      // 0x0881(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ResourcesCollected;                                // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerVoiceChatActorJP_C*           VoiceActor;                                        // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             VoiceActorSet;                                     // 0x0898(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Surrendering;                                      // 0x08A8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Speaking;                                          // 0x08A9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8AA[0x2];                                      // 0x08AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SurrenderUnlockTime;                               // 0x08AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_PlayerStateJP_MatchBP(int32 EntryPoint);
	void IsKillSuicide(const struct FKillInfo& KillInfo, bool* IsSuicide);
	void On_NightTimeChange_Event(E_TimeOfDay TimeOfDay);
	void OnChangeToDayEvent(E_TimeOfDay TimeOfDay);
	void OnMessageReceived_9BDC650D40F23A862C9362A7554D4329(class UAsyncAction_ListenForGameplayMessage* ProxyObject, const struct FGameplayTag& ActualChannel);
	void OnObjectiveFinished_Event(const struct FObjectiveAndOwningPlayer& ObjectiveDefinition);
	void OnRep_Speaking();
	void OnSecondNightChange(E_TimeOfDay TimeOfDay);
	void ReceiveBeginPlay();
	void Server_SetSpeaking(bool New_Speaking_State);
	void Server_SetSurrendering(bool NewSurrenderState);
	void SetVoiceActor(class ABP_PlayerVoiceChatActorJP_C* VoiceActor_0);
	void VisibleAtDayTimeEvent(E_TimeOfDay TimeOfDay);
	void VoiceActorSet__DelegateSignature(class ABP_PlayerVoiceChatActorJP_C* VoiceActor_0);

	class UPerkManagerComponent* GetPerkManagerComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerStateJP_MatchBP_C">();
	}
	static class APlayerStateJP_MatchBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerStateJP_MatchBP_C>();
	}
};
static_assert(alignof(APlayerStateJP_MatchBP_C) == 0x000008, "Wrong alignment on APlayerStateJP_MatchBP_C");
static_assert(sizeof(APlayerStateJP_MatchBP_C) == 0x0008B0, "Wrong size on APlayerStateJP_MatchBP_C");
static_assert(offsetof(APlayerStateJP_MatchBP_C, UberGraphFrame) == 0x000858, "Member 'APlayerStateJP_MatchBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, AC_MusicManagerNew) == 0x000860, "Member 'APlayerStateJP_MatchBP_C::AC_MusicManagerNew' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, AC_AchievementTracker) == 0x000868, "Member 'APlayerStateJP_MatchBP_C::AC_AchievementTracker' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, BP_PerkManagerComponent) == 0x000870, "Member 'APlayerStateJP_MatchBP_C::BP_PerkManagerComponent' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, DefaultSceneRoot) == 0x000878, "Member 'APlayerStateJP_MatchBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, HandsGranted) == 0x000880, "Member 'APlayerStateJP_MatchBP_C::HandsGranted' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, ResourcesCollected) == 0x000888, "Member 'APlayerStateJP_MatchBP_C::ResourcesCollected' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, VoiceActor) == 0x000890, "Member 'APlayerStateJP_MatchBP_C::VoiceActor' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, VoiceActorSet) == 0x000898, "Member 'APlayerStateJP_MatchBP_C::VoiceActorSet' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, Surrendering) == 0x0008A8, "Member 'APlayerStateJP_MatchBP_C::Surrendering' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, Speaking) == 0x0008A9, "Member 'APlayerStateJP_MatchBP_C::Speaking' has a wrong offset!");
static_assert(offsetof(APlayerStateJP_MatchBP_C, SurrenderUnlockTime) == 0x0008AC, "Member 'APlayerStateJP_MatchBP_C::SurrenderUnlockTime' has a wrong offset!");

}

