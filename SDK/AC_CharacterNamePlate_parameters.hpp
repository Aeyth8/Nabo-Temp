#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_CharacterNamePlate

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "JP_structs.hpp"


namespace SDK::Params
{

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.BindHealthChangedListeners
// 0x0030 (0x0030 - 0x0000)
struct AC_CharacterNamePlate_C_BindHealthChangedListeners final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_ActorWithHealth_C>  K2Node_DynamicCast_AsI_Actor_with_Health;          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_ActorWithHealth_HealthChangedReceiver_C> CallFunc_AddOnHealthChangedListener_Listener_CastInput; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_BindHealthChangedListeners) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_BindHealthChangedListeners");
static_assert(sizeof(AC_CharacterNamePlate_C_BindHealthChangedListeners) == 0x000030, "Wrong size on AC_CharacterNamePlate_C_BindHealthChangedListeners");
static_assert(offsetof(AC_CharacterNamePlate_C_BindHealthChangedListeners, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AC_CharacterNamePlate_C_BindHealthChangedListeners::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_BindHealthChangedListeners, K2Node_DynamicCast_AsI_Actor_with_Health) == 0x000008, "Member 'AC_CharacterNamePlate_C_BindHealthChangedListeners::K2Node_DynamicCast_AsI_Actor_with_Health' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_BindHealthChangedListeners, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AC_CharacterNamePlate_C_BindHealthChangedListeners::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_BindHealthChangedListeners, CallFunc_AddOnHealthChangedListener_Listener_CastInput) == 0x000020, "Member 'AC_CharacterNamePlate_C_BindHealthChangedListeners::CallFunc_AddOnHealthChangedListener_Listener_CastInput' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.BindTeamChangedListeners
// 0x0030 (0x0030 - 0x0000)
struct AC_CharacterNamePlate_C_BindTeamChangedListeners final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_ActorWithChangeableTeam_C> K2Node_DynamicCast_AsI_Actor_with_Changeable_Team; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_ActorWithChangeableTeam_TeamChangedReceiver_C> CallFunc_AddOnTeamChangedListener_Listener_CastInput; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_BindTeamChangedListeners) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_BindTeamChangedListeners");
static_assert(sizeof(AC_CharacterNamePlate_C_BindTeamChangedListeners) == 0x000030, "Wrong size on AC_CharacterNamePlate_C_BindTeamChangedListeners");
static_assert(offsetof(AC_CharacterNamePlate_C_BindTeamChangedListeners, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AC_CharacterNamePlate_C_BindTeamChangedListeners::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_BindTeamChangedListeners, K2Node_DynamicCast_AsI_Actor_with_Changeable_Team) == 0x000008, "Member 'AC_CharacterNamePlate_C_BindTeamChangedListeners::K2Node_DynamicCast_AsI_Actor_with_Changeable_Team' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_BindTeamChangedListeners, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AC_CharacterNamePlate_C_BindTeamChangedListeners::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_BindTeamChangedListeners, CallFunc_AddOnTeamChangedListener_Listener_CastInput) == 0x000020, "Member 'AC_CharacterNamePlate_C_BindTeamChangedListeners::CallFunc_AddOnTeamChangedListener_Listener_CastInput' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.DebugPrintHealth
// 0x01A0 (0x01A0 - 0x0000)
struct AC_CharacterNamePlate_C_DebugPrintHealth final
{
public:
	class FString                                 ContextName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0010(0x0010)()
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0078(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00D0(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0118(0x0048)(HasGetValueTypeHash)
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0170(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0180(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_DebugPrintHealth) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_DebugPrintHealth");
static_assert(sizeof(AC_CharacterNamePlate_C_DebugPrintHealth) == 0x0001A0, "Wrong size on AC_CharacterNamePlate_C_DebugPrintHealth");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, ContextName) == 0x000000, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::ContextName' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, CallFunc_Conv_StringToText_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, CallFunc_GetDisplayName_ReturnValue) == 0x000020, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000078, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000D0, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, K2Node_MakeStruct_FormatArgumentData_3) == 0x000118, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, CallFunc_Get_ClassLog_Name_name) == 0x000160, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, K2Node_MakeArray_Array) == 0x000170, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, CallFunc_Format_ReturnValue) == 0x000180, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintHealth, CallFunc_Conv_TextToString_ReturnValue) == 0x000190, "Member 'AC_CharacterNamePlate_C_DebugPrintHealth::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.DebugPrintPlayerName
// 0x0168 (0x0168 - 0x0000)
struct AC_CharacterNamePlate_C_DebugPrintPlayerName final
{
public:
	class FString                                 ContextName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0010(0x0010)()
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0078(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x00D0(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00E0(0x0048)(HasGetValueTypeHash)
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0138(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0148(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_DebugPrintPlayerName) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_DebugPrintPlayerName");
static_assert(sizeof(AC_CharacterNamePlate_C_DebugPrintPlayerName) == 0x000168, "Wrong size on AC_CharacterNamePlate_C_DebugPrintPlayerName");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, ContextName) == 0x000000, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::ContextName' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, CallFunc_Conv_StringToText_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, CallFunc_GetDisplayName_ReturnValue) == 0x000020, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000078, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, CallFunc_Conv_StringToText_ReturnValue_2) == 0x0000D0, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000E0, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, CallFunc_Get_ClassLog_Name_name) == 0x000128, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, K2Node_MakeArray_Array) == 0x000138, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, CallFunc_Format_ReturnValue) == 0x000148, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintPlayerName, CallFunc_Conv_TextToString_ReturnValue) == 0x000158, "Member 'AC_CharacterNamePlate_C_DebugPrintPlayerName::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.DebugPrintTeam
// 0x0178 (0x0178 - 0x0000)
struct AC_CharacterNamePlate_C_DebugPrintTeam final
{
public:
	class FString                                 ContextName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0010(0x0010)()
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0078(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0048)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x00E0(0x0010)()
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0100(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0148(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0158(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_DebugPrintTeam) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_DebugPrintTeam");
static_assert(sizeof(AC_CharacterNamePlate_C_DebugPrintTeam) == 0x000178, "Wrong size on AC_CharacterNamePlate_C_DebugPrintTeam");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, ContextName) == 0x000000, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::ContextName' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, CallFunc_Conv_StringToText_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, CallFunc_GetDisplayName_ReturnValue) == 0x000020, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000078, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0000D0, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, CallFunc_Conv_StringToText_ReturnValue_2) == 0x0000E0, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, CallFunc_Get_ClassLog_Name_name) == 0x0000F0, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, K2Node_MakeStruct_FormatArgumentData_2) == 0x000100, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, K2Node_MakeArray_Array) == 0x000148, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, CallFunc_Format_ReturnValue) == 0x000158, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_DebugPrintTeam, CallFunc_Conv_TextToString_ReturnValue) == 0x000168, "Member 'AC_CharacterNamePlate_C_DebugPrintTeam::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.ExecuteUbergraph_AC_CharacterNamePlate
// 0x00D8 (0x00D8 - 0x0000)
struct AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Get_ClassLog_Name_name;                   // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Enable;                               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue; // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_CurrentHealth;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_MaxHealth;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_CurrentHealthFraction;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryReadHealthStateVariablesFromCharacter_Success; // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryReadNameStateVariablesFromCharacter_Success; // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryReadNameStateVariablesFromCharacter_Success_1; // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_Team_ID;                              // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     K2Node_Event_Team_Type;                            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryReadTeamStateVariablesFromCharacter_Success; // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UInitializationStateEnded*              CallFunc_ListenToInitializationStateEnded_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_StealthActive;                        // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsEnemyToLocalPlayer;                 // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetWidget_ReturnValue;                    // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_Stealth_C>          K2Node_DynamicCast_AsI_Stealth;                    // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x007C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_Dead_C>             K2Node_DynamicCast_AsI_Dead;                       // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_1;     // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue_1; // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue_2; // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_2;     // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate");
static_assert(sizeof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate) == 0x0000D8, "Wrong size on AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, EntryPoint) == 0x000000, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::EntryPoint' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_Get_ClassLog_Name_name) == 0x000008, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_Get_ClassLog_Name_name' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_IsDedicatedServer_ReturnValue) == 0x000018, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_Event_Enable) == 0x000019, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_Event_Enable' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_Event_DeltaSeconds) == 0x00001C, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000020, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue) == 0x000029, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_Event_EndPlayReason) == 0x00002B, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_Event_CurrentHealth) == 0x000030, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_Event_CurrentHealth' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_Event_MaxHealth) == 0x000038, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_Event_MaxHealth' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_Event_CurrentHealthFraction) == 0x000040, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_Event_CurrentHealthFraction' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_TryReadHealthStateVariablesFromCharacter_Success) == 0x000048, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_TryReadHealthStateVariablesFromCharacter_Success' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_TryReadNameStateVariablesFromCharacter_Success) == 0x000049, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_TryReadNameStateVariablesFromCharacter_Success' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_TryReadNameStateVariablesFromCharacter_Success_1) == 0x00004A, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_TryReadNameStateVariablesFromCharacter_Success_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_Event_Team_ID) == 0x00004B, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_Event_Team_ID' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_Event_Team_Type) == 0x00004C, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_Event_Team_Type' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_TryReadTeamStateVariablesFromCharacter_Success) == 0x00004D, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_TryReadTeamStateVariablesFromCharacter_Success' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_ListenToInitializationStateEnded_ReturnValue) == 0x000050, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_ListenToInitializationStateEnded_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_Event_StealthActive) == 0x000059, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_Event_StealthActive' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_Event_IsEnemyToLocalPlayer) == 0x00005A, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_Event_IsEnemyToLocalPlayer' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_GetWidget_ReturnValue) == 0x000060, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_DynamicCast_AsI_Stealth) == 0x000068, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_DynamicCast_AsI_Stealth' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_CreateDelegate_OutputDelegate) == 0x00007C, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_DynamicCast_AsI_Dead) == 0x000090, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_DynamicCast_AsI_Dead' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_DynamicCast_bSuccess_1) == 0x0000A0, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_GetPlayerCameraManager_ReturnValue_1) == 0x0000A8, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_GetPlayerCameraManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_IsValid_ReturnValue_2) == 0x0000B0, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue_1) == 0x0000B1, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue_2) == 0x0000B2, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_GetPlayerCameraManager_ReturnValue_2) == 0x0000B8, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_GetPlayerCameraManager_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_GetOwner_ReturnValue) == 0x0000C0, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_DynamicCast_AsBP_Resident_Character) == 0x0000C8, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, K2Node_DynamicCast_bSuccess_2) == 0x0000D0, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000D1, "Member 'AC_CharacterNamePlate_C_ExecuteUbergraph_AC_CharacterNamePlate::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.Get Distance To Camera
// 0x0070 (0x0070 - 0x0000)
struct AC_CharacterNamePlate_C_Get_Distance_To_Camera final
{
public:
	class APlayerCameraManager*                   Player_Camera_Manager;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_To_Camera;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_Get_Distance_To_Camera) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_Get_Distance_To_Camera");
static_assert(sizeof(AC_CharacterNamePlate_C_Get_Distance_To_Camera) == 0x000070, "Wrong size on AC_CharacterNamePlate_C_Get_Distance_To_Camera");
static_assert(offsetof(AC_CharacterNamePlate_C_Get_Distance_To_Camera, Player_Camera_Manager) == 0x000000, "Member 'AC_CharacterNamePlate_C_Get_Distance_To_Camera::Player_Camera_Manager' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Get_Distance_To_Camera, Distance_To_Camera) == 0x000008, "Member 'AC_CharacterNamePlate_C_Get_Distance_To_Camera::Distance_To_Camera' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Get_Distance_To_Camera, CallFunc_GetCameraLocation_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_Get_Distance_To_Camera::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Get_Distance_To_Camera, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'AC_CharacterNamePlate_C_Get_Distance_To_Camera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Get_Distance_To_Camera, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'AC_CharacterNamePlate_C_Get_Distance_To_Camera::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Get_Distance_To_Camera, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000048, "Member 'AC_CharacterNamePlate_C_Get_Distance_To_Camera::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Get_Distance_To_Camera, CallFunc_VSize_ReturnValue) == 0x000060, "Member 'AC_CharacterNamePlate_C_Get_Distance_To_Camera::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Get_Distance_To_Camera, CallFunc_Abs_ReturnValue) == 0x000068, "Member 'AC_CharacterNamePlate_C_Get_Distance_To_Camera::CallFunc_Abs_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.GetCharacterLocatorWidget
// 0x0018 (0x0018 - 0x0000)
struct AC_CharacterNamePlate_C_GetCharacterLocatorWidget final
{
public:
	class UWI_CharacterLocator_C*                 WI_CharacterLocator;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_GetCharacterLocatorWidget) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_GetCharacterLocatorWidget");
static_assert(sizeof(AC_CharacterNamePlate_C_GetCharacterLocatorWidget) == 0x000018, "Wrong size on AC_CharacterNamePlate_C_GetCharacterLocatorWidget");
static_assert(offsetof(AC_CharacterNamePlate_C_GetCharacterLocatorWidget, WI_CharacterLocator) == 0x000000, "Member 'AC_CharacterNamePlate_C_GetCharacterLocatorWidget::WI_CharacterLocator' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetCharacterLocatorWidget, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate) == 0x000008, "Member 'AC_CharacterNamePlate_C_GetCharacterLocatorWidget::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetCharacterLocatorWidget, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_GetCharacterLocatorWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.GetCharacterNamePlateWidget
// 0x0020 (0x0020 - 0x0000)
struct AC_CharacterNamePlate_C_GetCharacterNamePlateWidget final
{
public:
	class UWI_CharacterNamePlate_C*               Character_Name_Plate;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetWidget_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_CharacterNamePlate_C*               K2Node_DynamicCast_AsWI_Character_Name_Plate;      // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_GetCharacterNamePlateWidget) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_GetCharacterNamePlateWidget");
static_assert(sizeof(AC_CharacterNamePlate_C_GetCharacterNamePlateWidget) == 0x000020, "Wrong size on AC_CharacterNamePlate_C_GetCharacterNamePlateWidget");
static_assert(offsetof(AC_CharacterNamePlate_C_GetCharacterNamePlateWidget, Character_Name_Plate) == 0x000000, "Member 'AC_CharacterNamePlate_C_GetCharacterNamePlateWidget::Character_Name_Plate' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetCharacterNamePlateWidget, CallFunc_GetWidget_ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_GetCharacterNamePlateWidget::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetCharacterNamePlateWidget, K2Node_DynamicCast_AsWI_Character_Name_Plate) == 0x000010, "Member 'AC_CharacterNamePlate_C_GetCharacterNamePlateWidget::K2Node_DynamicCast_AsWI_Character_Name_Plate' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetCharacterNamePlateWidget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AC_CharacterNamePlate_C_GetCharacterNamePlateWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetCharacterNamePlateWidget, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'AC_CharacterNamePlate_C_GetCharacterNamePlateWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.GetHasLineOfSight
// 0x01B0 (0x01B0 - 0x0000)
struct AC_CharacterNamePlate_C_GetHasLineOfSight final
{
public:
	class APlayerCameraManager*                   Player_Camera_Manager;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Line_Of_Sight_0;                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITeamableInterface>    K2Node_DynamicCast_AsTeamable_Interface;           // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ITeamableInterface>    K2Node_DynamicCast_AsTeamable_Interface_1;         // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue_1;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00A0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00B0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_GetHasLineOfSight) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_GetHasLineOfSight");
static_assert(sizeof(AC_CharacterNamePlate_C_GetHasLineOfSight) == 0x0001B0, "Wrong size on AC_CharacterNamePlate_C_GetHasLineOfSight");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, Player_Camera_Manager) == 0x000000, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::Player_Camera_Manager' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, Has_Line_Of_Sight_0) == 0x000008, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::Has_Line_Of_Sight_0' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, Temp_byte_Variable) == 0x000009, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_GetCameraLocation_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, Temp_byte_Variable_1) == 0x000028, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_GetPlayerPawn_ReturnValue) == 0x000030, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, K2Node_DynamicCast_AsTeamable_Interface) == 0x000040, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::K2Node_DynamicCast_AsTeamable_Interface' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_GetTeamID_ReturnValue) == 0x000051, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_GetOwner_ReturnValue) == 0x000058, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, K2Node_DynamicCast_AsTeamable_Interface_1) == 0x000060, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::K2Node_DynamicCast_AsTeamable_Interface_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_GetTeamID_ReturnValue_1) == 0x000071, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_GetTeamID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_IsValid_ReturnValue) == 0x000072, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_GetPlayerController_ReturnValue) == 0x000078, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_K2_GetPawn_ReturnValue) == 0x000080, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000088, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, K2Node_MakeArray_Array) == 0x0000A0, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_LineTraceSingle_OutHit) == 0x0000B0, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_LineTraceSingle_ReturnValue) == 0x0001A8, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_GetHasLineOfSight, CallFunc_Not_PreBool_ReturnValue) == 0x0001A9, "Member 'AC_CharacterNamePlate_C_GetHasLineOfSight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.GetStealthActive
// 0x0001 (0x0001 - 0x0000)
struct AC_CharacterNamePlate_C_GetStealthActive final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_GetStealthActive) == 0x000001, "Wrong alignment on AC_CharacterNamePlate_C_GetStealthActive");
static_assert(sizeof(AC_CharacterNamePlate_C_GetStealthActive) == 0x000001, "Wrong size on AC_CharacterNamePlate_C_GetStealthActive");
static_assert(offsetof(AC_CharacterNamePlate_C_GetStealthActive, Return) == 0x000000, "Member 'AC_CharacterNamePlate_C_GetStealthActive::Return' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.HandleHealthChanged
// 0x0018 (0x0018 - 0x0000)
struct AC_CharacterNamePlate_C_HandleHealthChanged final
{
public:
	double                                        CurrentHealth_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHealth_0;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentHealthFraction;                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_HandleHealthChanged) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_HandleHealthChanged");
static_assert(sizeof(AC_CharacterNamePlate_C_HandleHealthChanged) == 0x000018, "Wrong size on AC_CharacterNamePlate_C_HandleHealthChanged");
static_assert(offsetof(AC_CharacterNamePlate_C_HandleHealthChanged, CurrentHealth_0) == 0x000000, "Member 'AC_CharacterNamePlate_C_HandleHealthChanged::CurrentHealth_0' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_HandleHealthChanged, MaxHealth_0) == 0x000008, "Member 'AC_CharacterNamePlate_C_HandleHealthChanged::MaxHealth_0' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_HandleHealthChanged, CurrentHealthFraction) == 0x000010, "Member 'AC_CharacterNamePlate_C_HandleHealthChanged::CurrentHealthFraction' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.HandleTeamChanged
// 0x0002 (0x0002 - 0x0000)
struct AC_CharacterNamePlate_C_HandleTeamChanged final
{
public:
	uint8                                         Team_ID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     Team_Type;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_HandleTeamChanged) == 0x000001, "Wrong alignment on AC_CharacterNamePlate_C_HandleTeamChanged");
static_assert(sizeof(AC_CharacterNamePlate_C_HandleTeamChanged) == 0x000002, "Wrong size on AC_CharacterNamePlate_C_HandleTeamChanged");
static_assert(offsetof(AC_CharacterNamePlate_C_HandleTeamChanged, Team_ID) == 0x000000, "Member 'AC_CharacterNamePlate_C_HandleTeamChanged::Team_ID' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_HandleTeamChanged, Team_Type) == 0x000001, "Member 'AC_CharacterNamePlate_C_HandleTeamChanged::Team_Type' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.HideIfControlledByLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct AC_CharacterNamePlate_C_HideIfControlledByLocalPlayer final
{
public:
	bool                                          CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_HideIfControlledByLocalPlayer) == 0x000001, "Wrong alignment on AC_CharacterNamePlate_C_HideIfControlledByLocalPlayer");
static_assert(sizeof(AC_CharacterNamePlate_C_HideIfControlledByLocalPlayer) == 0x000001, "Wrong size on AC_CharacterNamePlate_C_HideIfControlledByLocalPlayer");
static_assert(offsetof(AC_CharacterNamePlate_C_HideIfControlledByLocalPlayer, CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue) == 0x000000, "Member 'AC_CharacterNamePlate_C_HideIfControlledByLocalPlayer::CallFunc_IsOwnerCharacterLocallyControlled_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.InitialiseWidgetPlayerName
// 0x0008 (0x0008 - 0x0000)
struct AC_CharacterNamePlate_C_InitialiseWidgetPlayerName final
{
public:
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_InitialiseWidgetPlayerName) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_InitialiseWidgetPlayerName");
static_assert(sizeof(AC_CharacterNamePlate_C_InitialiseWidgetPlayerName) == 0x000008, "Wrong size on AC_CharacterNamePlate_C_InitialiseWidgetPlayerName");
static_assert(offsetof(AC_CharacterNamePlate_C_InitialiseWidgetPlayerName, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate) == 0x000000, "Member 'AC_CharacterNamePlate_C_InitialiseWidgetPlayerName::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.IsComponentAboveCameraCenter
// 0x0120 (0x0120 - 0x0000)
struct AC_CharacterNamePlate_C_IsComponentAboveCameraCenter final
{
public:
	class APlayerCameraManager*                   PlayerCameraManager;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlane                                 CallFunc_MakePlaneFromPointAndNormal_ReturnValue;  // 0x0090(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinePlaneIntersection_T;                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_LinePlaneIntersection_Intersection;       // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LinePlaneIntersection_ReturnValue;        // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter) == 0x000010, "Wrong alignment on AC_CharacterNamePlate_C_IsComponentAboveCameraCenter");
static_assert(sizeof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter) == 0x000120, "Wrong size on AC_CharacterNamePlate_C_IsComponentAboveCameraCenter");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, PlayerCameraManager) == 0x000000, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::PlayerCameraManager' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_GetCameraRotation_ReturnValue) == 0x000028, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_GetCameraLocation_ReturnValue) == 0x000040, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_GetForwardVector_ReturnValue) == 0x000058, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_GetUpVector_ReturnValue) == 0x000070, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_MakePlaneFromPointAndNormal_ReturnValue) == 0x000090, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_MakePlaneFromPointAndNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000B0, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000C8, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E0, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_LinePlaneIntersection_T) == 0x0000F8, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_LinePlaneIntersection_T' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_LinePlaneIntersection_Intersection) == 0x000100, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_LinePlaneIntersection_Intersection' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsComponentAboveCameraCenter, CallFunc_LinePlaneIntersection_ReturnValue) == 0x000118, "Member 'AC_CharacterNamePlate_C_IsComponentAboveCameraCenter::CallFunc_LinePlaneIntersection_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.IsInfrontOfCamera
// 0x00B0 (0x00B0 - 0x0000)
struct AC_CharacterNamePlate_C_IsInfrontOfCamera final
{
public:
	class APlayerCameraManager*                   PlayerCameraManager;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          InfrontOfCamera;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_IsInfrontOfCamera) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_IsInfrontOfCamera");
static_assert(sizeof(AC_CharacterNamePlate_C_IsInfrontOfCamera) == 0x0000B0, "Wrong size on AC_CharacterNamePlate_C_IsInfrontOfCamera");
static_assert(offsetof(AC_CharacterNamePlate_C_IsInfrontOfCamera, PlayerCameraManager) == 0x000000, "Member 'AC_CharacterNamePlate_C_IsInfrontOfCamera::PlayerCameraManager' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsInfrontOfCamera, InfrontOfCamera) == 0x000008, "Member 'AC_CharacterNamePlate_C_IsInfrontOfCamera::InfrontOfCamera' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsInfrontOfCamera, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_IsInfrontOfCamera::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsInfrontOfCamera, CallFunc_GetCameraRotation_ReturnValue) == 0x000028, "Member 'AC_CharacterNamePlate_C_IsInfrontOfCamera::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsInfrontOfCamera, CallFunc_GetCameraLocation_ReturnValue) == 0x000040, "Member 'AC_CharacterNamePlate_C_IsInfrontOfCamera::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsInfrontOfCamera, CallFunc_GetForwardVector_ReturnValue) == 0x000058, "Member 'AC_CharacterNamePlate_C_IsInfrontOfCamera::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsInfrontOfCamera, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000070, "Member 'AC_CharacterNamePlate_C_IsInfrontOfCamera::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsInfrontOfCamera, CallFunc_Normal_ReturnValue) == 0x000088, "Member 'AC_CharacterNamePlate_C_IsInfrontOfCamera::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsInfrontOfCamera, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000A0, "Member 'AC_CharacterNamePlate_C_IsInfrontOfCamera::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsInfrontOfCamera, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'AC_CharacterNamePlate_C_IsInfrontOfCamera::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.IsOwnerCharacterLocallyControlled
// 0x0020 (0x0020 - 0x0000)
struct AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled");
static_assert(sizeof(AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled) == 0x000020, "Wrong size on AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled");
static_assert(offsetof(AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled, ReturnValue) == 0x000000, "Member 'AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled, K2Node_DynamicCast_AsPawn) == 0x000010, "Member 'AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled, CallFunc_IsLocallyControlled_ReturnValue) == 0x000019, "Member 'AC_CharacterNamePlate_C_IsOwnerCharacterLocallyControlled::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.ModifyVisibilityBasedOnDistanceState
// 0x0008 (0x0008 - 0x0000)
struct AC_CharacterNamePlate_C_ModifyVisibilityBasedOnDistanceState final
{
public:
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_ModifyVisibilityBasedOnDistanceState) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_ModifyVisibilityBasedOnDistanceState");
static_assert(sizeof(AC_CharacterNamePlate_C_ModifyVisibilityBasedOnDistanceState) == 0x000008, "Wrong size on AC_CharacterNamePlate_C_ModifyVisibilityBasedOnDistanceState");
static_assert(offsetof(AC_CharacterNamePlate_C_ModifyVisibilityBasedOnDistanceState, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate) == 0x000000, "Member 'AC_CharacterNamePlate_C_ModifyVisibilityBasedOnDistanceState::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.OnStealthToggle
// 0x0002 (0x0002 - 0x0000)
struct AC_CharacterNamePlate_C_OnStealthToggle final
{
public:
	bool                                          StealthActive;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnemyToLocalPlayer;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_OnStealthToggle) == 0x000001, "Wrong alignment on AC_CharacterNamePlate_C_OnStealthToggle");
static_assert(sizeof(AC_CharacterNamePlate_C_OnStealthToggle) == 0x000002, "Wrong size on AC_CharacterNamePlate_C_OnStealthToggle");
static_assert(offsetof(AC_CharacterNamePlate_C_OnStealthToggle, StealthActive) == 0x000000, "Member 'AC_CharacterNamePlate_C_OnStealthToggle::StealthActive' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_OnStealthToggle, IsEnemyToLocalPlayer) == 0x000001, "Member 'AC_CharacterNamePlate_C_OnStealthToggle::IsEnemyToLocalPlayer' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct AC_CharacterNamePlate_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on AC_CharacterNamePlate_C_ReceiveEndPlay");
static_assert(sizeof(AC_CharacterNamePlate_C_ReceiveEndPlay) == 0x000001, "Wrong size on AC_CharacterNamePlate_C_ReceiveEndPlay");
static_assert(offsetof(AC_CharacterNamePlate_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'AC_CharacterNamePlate_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct AC_CharacterNamePlate_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_ReceiveTick) == 0x000004, "Wrong alignment on AC_CharacterNamePlate_C_ReceiveTick");
static_assert(sizeof(AC_CharacterNamePlate_C_ReceiveTick) == 0x000004, "Wrong size on AC_CharacterNamePlate_C_ReceiveTick");
static_assert(offsetof(AC_CharacterNamePlate_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'AC_CharacterNamePlate_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.ScaleWidgetAccordingToDistance
// 0x0030 (0x0030 - 0x0000)
struct AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance final
{
public:
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_InRangeA_ImplicitCast;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_InRangeB_ImplicitCast;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeA_ImplicitCast;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance");
static_assert(sizeof(AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance) == 0x000030, "Wrong size on AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance");
static_assert(offsetof(AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate) == 0x000000, "Member 'AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast) == 0x000010, "Member 'AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance, CallFunc_MapRangeClamped_InRangeA_ImplicitCast) == 0x000018, "Member 'AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance::CallFunc_MapRangeClamped_InRangeA_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance, CallFunc_MapRangeClamped_InRangeB_ImplicitCast) == 0x000020, "Member 'AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance::CallFunc_MapRangeClamped_InRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance, CallFunc_MapRangeClamped_OutRangeA_ImplicitCast) == 0x000028, "Member 'AC_CharacterNamePlate_C_ScaleWidgetAccordingToDistance::CallFunc_MapRangeClamped_OutRangeA_ImplicitCast' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.SetCurrentHealth
// 0x0008 (0x0008 - 0x0000)
struct AC_CharacterNamePlate_C_SetCurrentHealth final
{
public:
	double                                        CurrentHealth_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_SetCurrentHealth) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_SetCurrentHealth");
static_assert(sizeof(AC_CharacterNamePlate_C_SetCurrentHealth) == 0x000008, "Wrong size on AC_CharacterNamePlate_C_SetCurrentHealth");
static_assert(offsetof(AC_CharacterNamePlate_C_SetCurrentHealth, CurrentHealth_0) == 0x000000, "Member 'AC_CharacterNamePlate_C_SetCurrentHealth::CurrentHealth_0' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.SetDistanceState
// 0x0003 (0x0003 - 0x0000)
struct AC_CharacterNamePlate_C_SetDistanceState final
{
public:
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_SetDistanceState) == 0x000001, "Wrong alignment on AC_CharacterNamePlate_C_SetDistanceState");
static_assert(sizeof(AC_CharacterNamePlate_C_SetDistanceState) == 0x000003, "Wrong size on AC_CharacterNamePlate_C_SetDistanceState");
static_assert(offsetof(AC_CharacterNamePlate_C_SetDistanceState, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000000, "Member 'AC_CharacterNamePlate_C_SetDistanceState::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetDistanceState, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000001, "Member 'AC_CharacterNamePlate_C_SetDistanceState::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetDistanceState, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x000002, "Member 'AC_CharacterNamePlate_C_SetDistanceState::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.SetForcedStealth
// 0x0001 (0x0001 - 0x0000)
struct AC_CharacterNamePlate_C_SetForcedStealth final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_SetForcedStealth) == 0x000001, "Wrong alignment on AC_CharacterNamePlate_C_SetForcedStealth");
static_assert(sizeof(AC_CharacterNamePlate_C_SetForcedStealth) == 0x000001, "Wrong size on AC_CharacterNamePlate_C_SetForcedStealth");
static_assert(offsetof(AC_CharacterNamePlate_C_SetForcedStealth, Enable) == 0x000000, "Member 'AC_CharacterNamePlate_C_SetForcedStealth::Enable' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.SetFriendlyOwner
// 0x0048 (0x0048 - 0x0000)
struct AC_CharacterNamePlate_C_SetFriendlyOwner final
{
public:
	uint8                                         Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ITeamableInterface>    K2Node_DynamicCast_AsTeamable_Interface;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITeamableInterface>    K2Node_DynamicCast_AsTeamable_Interface_1;         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue_1;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_SetFriendlyOwner) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_SetFriendlyOwner");
static_assert(sizeof(AC_CharacterNamePlate_C_SetFriendlyOwner) == 0x000048, "Wrong size on AC_CharacterNamePlate_C_SetFriendlyOwner");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, Temp_byte_Variable) == 0x000000, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, Temp_byte_Variable_1) == 0x000001, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, K2Node_DynamicCast_AsTeamable_Interface) == 0x000018, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::K2Node_DynamicCast_AsTeamable_Interface' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, K2Node_DynamicCast_AsTeamable_Interface_1) == 0x000030, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::K2Node_DynamicCast_AsTeamable_Interface_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, CallFunc_GetTeamID_ReturnValue) == 0x000041, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetFriendlyOwner, CallFunc_GetTeamID_ReturnValue_1) == 0x000042, "Member 'AC_CharacterNamePlate_C_SetFriendlyOwner::CallFunc_GetTeamID_ReturnValue_1' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.SetIsTalking
// 0x0010 (0x0010 - 0x0000)
struct AC_CharacterNamePlate_C_SetIsTalking final
{
public:
	bool                                          IsTalking;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_SetIsTalking) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_SetIsTalking");
static_assert(sizeof(AC_CharacterNamePlate_C_SetIsTalking) == 0x000010, "Wrong size on AC_CharacterNamePlate_C_SetIsTalking");
static_assert(offsetof(AC_CharacterNamePlate_C_SetIsTalking, IsTalking) == 0x000000, "Member 'AC_CharacterNamePlate_C_SetIsTalking::IsTalking' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetIsTalking, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate) == 0x000008, "Member 'AC_CharacterNamePlate_C_SetIsTalking::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.SetMaxHealth
// 0x0008 (0x0008 - 0x0000)
struct AC_CharacterNamePlate_C_SetMaxHealth final
{
public:
	double                                        MaxHealth_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_SetMaxHealth) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_SetMaxHealth");
static_assert(sizeof(AC_CharacterNamePlate_C_SetMaxHealth) == 0x000008, "Wrong size on AC_CharacterNamePlate_C_SetMaxHealth");
static_assert(offsetof(AC_CharacterNamePlate_C_SetMaxHealth, MaxHealth_0) == 0x000000, "Member 'AC_CharacterNamePlate_C_SetMaxHealth::MaxHealth_0' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.SetOwnerInLocator
// 0x0010 (0x0010 - 0x0000)
struct AC_CharacterNamePlate_C_SetOwnerInLocator final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWI_CharacterLocator_C*                 CallFunc_GetCharacterLocatorWidget_WI_CharacterLocator; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_SetOwnerInLocator) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_SetOwnerInLocator");
static_assert(sizeof(AC_CharacterNamePlate_C_SetOwnerInLocator) == 0x000010, "Wrong size on AC_CharacterNamePlate_C_SetOwnerInLocator");
static_assert(offsetof(AC_CharacterNamePlate_C_SetOwnerInLocator, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AC_CharacterNamePlate_C_SetOwnerInLocator::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_SetOwnerInLocator, CallFunc_GetCharacterLocatorWidget_WI_CharacterLocator) == 0x000008, "Member 'AC_CharacterNamePlate_C_SetOwnerInLocator::CallFunc_GetCharacterLocatorWidget_WI_CharacterLocator' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.SetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct AC_CharacterNamePlate_C_SetPlayerName final
{
public:
	class FString                                 PlayerName_0;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_SetPlayerName) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_SetPlayerName");
static_assert(sizeof(AC_CharacterNamePlate_C_SetPlayerName) == 0x000010, "Wrong size on AC_CharacterNamePlate_C_SetPlayerName");
static_assert(offsetof(AC_CharacterNamePlate_C_SetPlayerName, PlayerName_0) == 0x000000, "Member 'AC_CharacterNamePlate_C_SetPlayerName::PlayerName_0' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.StoreVisibilityComponent
// 0x0028 (0x0028 - 0x0000)
struct AC_CharacterNamePlate_C_StoreVisibilityComponent final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_ActorWithHealth_C>  K2Node_DynamicCast_AsI_Actor_with_Health;          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_GetVisibilityComponentToTraceFor_Component; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_StoreVisibilityComponent) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_StoreVisibilityComponent");
static_assert(sizeof(AC_CharacterNamePlate_C_StoreVisibilityComponent) == 0x000028, "Wrong size on AC_CharacterNamePlate_C_StoreVisibilityComponent");
static_assert(offsetof(AC_CharacterNamePlate_C_StoreVisibilityComponent, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AC_CharacterNamePlate_C_StoreVisibilityComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_StoreVisibilityComponent, K2Node_DynamicCast_AsI_Actor_with_Health) == 0x000008, "Member 'AC_CharacterNamePlate_C_StoreVisibilityComponent::K2Node_DynamicCast_AsI_Actor_with_Health' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_StoreVisibilityComponent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AC_CharacterNamePlate_C_StoreVisibilityComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_StoreVisibilityComponent, CallFunc_GetVisibilityComponentToTraceFor_Component) == 0x000020, "Member 'AC_CharacterNamePlate_C_StoreVisibilityComponent::CallFunc_GetVisibilityComponentToTraceFor_Component' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.ToggleInCombatVisuals
// 0x0010 (0x0010 - 0x0000)
struct AC_CharacterNamePlate_C_ToggleInCombatVisuals final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_CharacterLocator_C*                 CallFunc_GetCharacterLocatorWidget_WI_CharacterLocator; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_ToggleInCombatVisuals) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_ToggleInCombatVisuals");
static_assert(sizeof(AC_CharacterNamePlate_C_ToggleInCombatVisuals) == 0x000010, "Wrong size on AC_CharacterNamePlate_C_ToggleInCombatVisuals");
static_assert(offsetof(AC_CharacterNamePlate_C_ToggleInCombatVisuals, Active) == 0x000000, "Member 'AC_CharacterNamePlate_C_ToggleInCombatVisuals::Active' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_ToggleInCombatVisuals, CallFunc_GetCharacterLocatorWidget_WI_CharacterLocator) == 0x000008, "Member 'AC_CharacterNamePlate_C_ToggleInCombatVisuals::CallFunc_GetCharacterLocatorWidget_WI_CharacterLocator' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.Try Repositioning WidgetIfOffScreen
// 0x0260 (0x0260 - 0x0000)
struct AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen final
{
public:
	class APlayerCameraManager*                   PlayerCameraManager;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInfrontOfCamera_InfrontOfCamera;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsComponentAboveCameraCenter_ReturnValue; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0030(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSceneComponentOnScreen_ReturnValue;     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x0150(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Get_Distance_To_Camera_Distance_To_Camera; // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen");
static_assert(sizeof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen) == 0x000260, "Wrong size on AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, PlayerCameraManager) == 0x000000, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::PlayerCameraManager' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_IsInfrontOfCamera_InfrontOfCamera) == 0x000008, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_IsInfrontOfCamera_InfrontOfCamera' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_IsComponentAboveCameraCenter_ReturnValue) == 0x000009, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_IsComponentAboveCameraCenter_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_BreakVector_X) == 0x000018, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_BreakVector_Y) == 0x000020, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_BreakVector_Z) == 0x000028, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000030, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000128, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_MakeVector_ReturnValue) == 0x000130, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_IsSceneComponentOnScreen_ReturnValue) == 0x000148, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_IsSceneComponentOnScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x000150, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_Not_PreBool_ReturnValue) == 0x000248, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_Get_Distance_To_Camera_Distance_To_Camera) == 0x000250, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_Get_Distance_To_Camera_Distance_To_Camera' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000258, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen, CallFunc_BooleanAND_ReturnValue) == 0x000259, "Member 'AC_CharacterNamePlate_C_Try_Repositioning_WidgetIfOffScreen::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.TryReadHealthStateVariablesFromCharacter
// 0x0038 (0x0038 - 0x0000)
struct AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_ActorWithHealth_C>  K2Node_DynamicCast_AsI_Actor_with_Health;          // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetCurrentHealth_Current_Health;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMaxHealth_Max_Health;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter");
static_assert(sizeof(AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter) == 0x000038, "Wrong size on AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter, Success) == 0x000000, "Member 'AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter::Success' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter, K2Node_DynamicCast_AsI_Actor_with_Health) == 0x000010, "Member 'AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter::K2Node_DynamicCast_AsI_Actor_with_Health' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter, CallFunc_GetCurrentHealth_Current_Health) == 0x000028, "Member 'AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter::CallFunc_GetCurrentHealth_Current_Health' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter, CallFunc_GetMaxHealth_Max_Health) == 0x000030, "Member 'AC_CharacterNamePlate_C_TryReadHealthStateVariablesFromCharacter::CallFunc_GetMaxHealth_Max_Health' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.TryReadNameStateVariablesFromCharacter
// 0x0038 (0x0038 - 0x0000)
struct AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_ActorWithName_C>    K2Node_DynamicCast_AsI_Actor_with_Name;            // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetName_Name;                             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter");
static_assert(sizeof(AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter) == 0x000038, "Wrong size on AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter, Success) == 0x000000, "Member 'AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter::Success' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter, K2Node_DynamicCast_AsI_Actor_with_Name) == 0x000010, "Member 'AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter::K2Node_DynamicCast_AsI_Actor_with_Name' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter, CallFunc_GetName_Name) == 0x000028, "Member 'AC_CharacterNamePlate_C_TryReadNameStateVariablesFromCharacter::CallFunc_GetName_Name' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.TryReadTeamStateVariablesFromCharacter
// 0x0028 (0x0028 - 0x0000)
struct AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamType                                     CallFunc_GetTeamTypeFromTeamId_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ITeamableInterface>    K2Node_DynamicCast_AsTeamable_Interface;           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetTeamID_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter");
static_assert(sizeof(AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter) == 0x000028, "Wrong size on AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter, Success) == 0x000000, "Member 'AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter::Success' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter, CallFunc_GetTeamTypeFromTeamId_ReturnValue) == 0x000001, "Member 'AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter::CallFunc_GetTeamTypeFromTeamId_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter, K2Node_DynamicCast_AsTeamable_Interface) == 0x000010, "Member 'AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter::K2Node_DynamicCast_AsTeamable_Interface' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter, CallFunc_GetTeamID_ReturnValue) == 0x000021, "Member 'AC_CharacterNamePlate_C_TryReadTeamStateVariablesFromCharacter::CallFunc_GetTeamID_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.UnbindHealthChangedListeners
// 0x0030 (0x0030 - 0x0000)
struct AC_CharacterNamePlate_C_UnbindHealthChangedListeners final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_ActorWithHealth_C>  K2Node_DynamicCast_AsI_Actor_with_Health;          // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_ActorWithHealth_HealthChangedReceiver_C> CallFunc_RemoveOnHealthChangedListener_Listener_CastInput; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_UnbindHealthChangedListeners) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_UnbindHealthChangedListeners");
static_assert(sizeof(AC_CharacterNamePlate_C_UnbindHealthChangedListeners) == 0x000030, "Wrong size on AC_CharacterNamePlate_C_UnbindHealthChangedListeners");
static_assert(offsetof(AC_CharacterNamePlate_C_UnbindHealthChangedListeners, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AC_CharacterNamePlate_C_UnbindHealthChangedListeners::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UnbindHealthChangedListeners, K2Node_DynamicCast_AsI_Actor_with_Health) == 0x000008, "Member 'AC_CharacterNamePlate_C_UnbindHealthChangedListeners::K2Node_DynamicCast_AsI_Actor_with_Health' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UnbindHealthChangedListeners, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AC_CharacterNamePlate_C_UnbindHealthChangedListeners::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UnbindHealthChangedListeners, CallFunc_RemoveOnHealthChangedListener_Listener_CastInput) == 0x000020, "Member 'AC_CharacterNamePlate_C_UnbindHealthChangedListeners::CallFunc_RemoveOnHealthChangedListener_Listener_CastInput' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.UnbindTeamChangedListeners
// 0x0030 (0x0030 - 0x0000)
struct AC_CharacterNamePlate_C_UnbindTeamChangedListeners final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_ActorWithChangeableTeam_C> K2Node_DynamicCast_AsI_Actor_with_Changeable_Team; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_ActorWithChangeableTeam_TeamChangedReceiver_C> CallFunc_RemoveOnTeamChangedListener_Listener_CastInput; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_UnbindTeamChangedListeners) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_UnbindTeamChangedListeners");
static_assert(sizeof(AC_CharacterNamePlate_C_UnbindTeamChangedListeners) == 0x000030, "Wrong size on AC_CharacterNamePlate_C_UnbindTeamChangedListeners");
static_assert(offsetof(AC_CharacterNamePlate_C_UnbindTeamChangedListeners, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AC_CharacterNamePlate_C_UnbindTeamChangedListeners::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UnbindTeamChangedListeners, K2Node_DynamicCast_AsI_Actor_with_Changeable_Team) == 0x000008, "Member 'AC_CharacterNamePlate_C_UnbindTeamChangedListeners::K2Node_DynamicCast_AsI_Actor_with_Changeable_Team' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UnbindTeamChangedListeners, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AC_CharacterNamePlate_C_UnbindTeamChangedListeners::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UnbindTeamChangedListeners, CallFunc_RemoveOnTeamChangedListener_Listener_CastInput) == 0x000020, "Member 'AC_CharacterNamePlate_C_UnbindTeamChangedListeners::CallFunc_RemoveOnTeamChangedListener_Listener_CastInput' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.Update Widget Player Name
// 0x0020 (0x0020 - 0x0000)
struct AC_CharacterNamePlate_C_Update_Widget_Player_Name final
{
public:
	class FString                                 NewLocalVar;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_Update_Widget_Player_Name) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_Update_Widget_Player_Name");
static_assert(sizeof(AC_CharacterNamePlate_C_Update_Widget_Player_Name) == 0x000020, "Wrong size on AC_CharacterNamePlate_C_Update_Widget_Player_Name");
static_assert(offsetof(AC_CharacterNamePlate_C_Update_Widget_Player_Name, NewLocalVar) == 0x000000, "Member 'AC_CharacterNamePlate_C_Update_Widget_Player_Name::NewLocalVar' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Update_Widget_Player_Name, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate) == 0x000010, "Member 'AC_CharacterNamePlate_C_Update_Widget_Player_Name::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_Update_Widget_Player_Name, CallFunc_NotEqual_StrStr_ReturnValue) == 0x000018, "Member 'AC_CharacterNamePlate_C_Update_Widget_Player_Name::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.UpdateLocatorScale
// 0x0030 (0x0030 - 0x0000)
struct AC_CharacterNamePlate_C_UpdateLocatorScale final
{
public:
	class UWI_CharacterLocator_C*                 CallFunc_GetCharacterLocatorWidget_WI_CharacterLocator; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeA_ImplicitCast;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_InRangeB_ImplicitCast;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_InRangeA_ImplicitCast;    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_UpdateLocatorScale) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_UpdateLocatorScale");
static_assert(sizeof(AC_CharacterNamePlate_C_UpdateLocatorScale) == 0x000030, "Wrong size on AC_CharacterNamePlate_C_UpdateLocatorScale");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateLocatorScale, CallFunc_GetCharacterLocatorWidget_WI_CharacterLocator) == 0x000000, "Member 'AC_CharacterNamePlate_C_UpdateLocatorScale::CallFunc_GetCharacterLocatorWidget_WI_CharacterLocator' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateLocatorScale, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_UpdateLocatorScale::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateLocatorScale, CallFunc_MapRangeClamped_OutRangeA_ImplicitCast) == 0x000010, "Member 'AC_CharacterNamePlate_C_UpdateLocatorScale::CallFunc_MapRangeClamped_OutRangeA_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateLocatorScale, CallFunc_MapRangeClamped_InRangeB_ImplicitCast) == 0x000018, "Member 'AC_CharacterNamePlate_C_UpdateLocatorScale::CallFunc_MapRangeClamped_InRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateLocatorScale, CallFunc_MapRangeClamped_InRangeA_ImplicitCast) == 0x000020, "Member 'AC_CharacterNamePlate_C_UpdateLocatorScale::CallFunc_MapRangeClamped_InRangeA_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateLocatorScale, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast) == 0x000028, "Member 'AC_CharacterNamePlate_C_UpdateLocatorScale::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.UpdateStateVariables
// 0x0018 (0x0018 - 0x0000)
struct AC_CharacterNamePlate_C_UpdateStateVariables final
{
public:
	class APlayerCameraManager*                   Player_Camera_Manager;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Get_Distance_To_Camera_Distance_To_Camera; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHasLineOfSight_Has_Line_Of_Sight;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_UpdateStateVariables) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_UpdateStateVariables");
static_assert(sizeof(AC_CharacterNamePlate_C_UpdateStateVariables) == 0x000018, "Wrong size on AC_CharacterNamePlate_C_UpdateStateVariables");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateStateVariables, Player_Camera_Manager) == 0x000000, "Member 'AC_CharacterNamePlate_C_UpdateStateVariables::Player_Camera_Manager' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateStateVariables, CallFunc_Get_Distance_To_Camera_Distance_To_Camera) == 0x000008, "Member 'AC_CharacterNamePlate_C_UpdateStateVariables::CallFunc_Get_Distance_To_Camera_Distance_To_Camera' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateStateVariables, CallFunc_GetHasLineOfSight_Has_Line_Of_Sight) == 0x000010, "Member 'AC_CharacterNamePlate_C_UpdateStateVariables::CallFunc_GetHasLineOfSight_Has_Line_Of_Sight' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateStateVariables, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000011, "Member 'AC_CharacterNamePlate_C_UpdateStateVariables::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateStateVariables, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'AC_CharacterNamePlate_C_UpdateStateVariables::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.UpdateTeam
// 0x0001 (0x0001 - 0x0000)
struct AC_CharacterNamePlate_C_UpdateTeam final
{
public:
	bool                                          CallFunc_TryReadTeamStateVariablesFromCharacter_Success; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_UpdateTeam) == 0x000001, "Wrong alignment on AC_CharacterNamePlate_C_UpdateTeam");
static_assert(sizeof(AC_CharacterNamePlate_C_UpdateTeam) == 0x000001, "Wrong size on AC_CharacterNamePlate_C_UpdateTeam");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateTeam, CallFunc_TryReadTeamStateVariablesFromCharacter_Success) == 0x000000, "Member 'AC_CharacterNamePlate_C_UpdateTeam::CallFunc_TryReadTeamStateVariablesFromCharacter_Success' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.UpdateWidgetActivationState
// 0x0030 (0x0030 - 0x0000)
struct AC_CharacterNamePlate_C_UpdateWidgetActivationState final
{
public:
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate_1; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActivated_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate_2; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActivated_ReturnValue_1;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate_3; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_UpdateWidgetActivationState) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_UpdateWidgetActivationState");
static_assert(sizeof(AC_CharacterNamePlate_C_UpdateWidgetActivationState) == 0x000030, "Wrong size on AC_CharacterNamePlate_C_UpdateWidgetActivationState");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetActivationState, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate) == 0x000000, "Member 'AC_CharacterNamePlate_C_UpdateWidgetActivationState::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetActivationState, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate_1) == 0x000008, "Member 'AC_CharacterNamePlate_C_UpdateWidgetActivationState::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetActivationState, CallFunc_IsActivated_ReturnValue) == 0x000010, "Member 'AC_CharacterNamePlate_C_UpdateWidgetActivationState::CallFunc_IsActivated_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetActivationState, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate_2) == 0x000018, "Member 'AC_CharacterNamePlate_C_UpdateWidgetActivationState::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate_2' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetActivationState, CallFunc_IsActivated_ReturnValue_1) == 0x000020, "Member 'AC_CharacterNamePlate_C_UpdateWidgetActivationState::CallFunc_IsActivated_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetActivationState, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'AC_CharacterNamePlate_C_UpdateWidgetActivationState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetActivationState, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate_3) == 0x000028, "Member 'AC_CharacterNamePlate_C_UpdateWidgetActivationState::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate_3' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.UpdateWidgetHealthBar
// 0x0018 (0x0018 - 0x0000)
struct AC_CharacterNamePlate_C_UpdateWidgetHealthBar final
{
public:
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxHealth_Value_ImplicitCast;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_UpdateWidgetHealthBar) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_UpdateWidgetHealthBar");
static_assert(sizeof(AC_CharacterNamePlate_C_UpdateWidgetHealthBar) == 0x000018, "Wrong size on AC_CharacterNamePlate_C_UpdateWidgetHealthBar");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetHealthBar, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate) == 0x000000, "Member 'AC_CharacterNamePlate_C_UpdateWidgetHealthBar::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetHealthBar, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_UpdateWidgetHealthBar::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetHealthBar, CallFunc_SetMaxHealth_Value_ImplicitCast) == 0x000010, "Member 'AC_CharacterNamePlate_C_UpdateWidgetHealthBar::CallFunc_SetMaxHealth_Value_ImplicitCast' has a wrong offset!");

// Function AC_CharacterNamePlate.AC_CharacterNamePlate_C.UpdateWidgetTeam
// 0x0010 (0x0010 - 0x0000)
struct AC_CharacterNamePlate_C_UpdateWidgetTeam final
{
public:
	class UWI_CharacterNamePlate_C*               CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_CharacterNamePlate_C_UpdateWidgetTeam) == 0x000008, "Wrong alignment on AC_CharacterNamePlate_C_UpdateWidgetTeam");
static_assert(sizeof(AC_CharacterNamePlate_C_UpdateWidgetTeam) == 0x000010, "Wrong size on AC_CharacterNamePlate_C_UpdateWidgetTeam");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetTeam, CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate) == 0x000000, "Member 'AC_CharacterNamePlate_C_UpdateWidgetTeam::CallFunc_GetCharacterNamePlateWidget_Character_Name_Plate' has a wrong offset!");
static_assert(offsetof(AC_CharacterNamePlate_C_UpdateWidgetTeam, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'AC_CharacterNamePlate_C_UpdateWidgetTeam::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

