#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWTwitch

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "IWTwitch_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class IWTwitch.TwitchApi
// 0x0088 (0x00B8 - 0x0030)
class UTwitchApi final : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnAuthenticated;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AuthenticationFailed;                              // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FTwitchAuthResponse                    Auth;                                              // 0x0050(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 OverrideChannel;                                   // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTwitchAuth*                            TwitchAuth;                                        // 0x00A8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTwitchIRC*                             TwitchIRC;                                         // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetChatMode(ETwitchChatMode ChatMode);
	void SetTwitchAuth(class UTwitchAuth* TwitchAuthIn);
	void TwitchAuthCompleted();
	void TwitchAuthFailed(const struct FTwitchAuthResponse& AuthResponse, const struct FTwitchError& TwitchError);
	void TwitchAuthValidated(const struct FTwitchAuthResponse& AuthResponse, const struct FTwitchError& TwitchError);

	class FText GetAccessTokenAsText() const;
	class UTwitchAuth* GetTwitchAuth() const;
	class UTwitchIRC* GetTwitchIrc() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwitchApi">();
	}
	static class UTwitchApi* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwitchApi>();
	}
};
static_assert(alignof(UTwitchApi) == 0x000008, "Wrong alignment on UTwitchApi");
static_assert(sizeof(UTwitchApi) == 0x0000B8, "Wrong size on UTwitchApi");
static_assert(offsetof(UTwitchApi, OnAuthenticated) == 0x000030, "Member 'UTwitchApi::OnAuthenticated' has a wrong offset!");
static_assert(offsetof(UTwitchApi, AuthenticationFailed) == 0x000040, "Member 'UTwitchApi::AuthenticationFailed' has a wrong offset!");
static_assert(offsetof(UTwitchApi, Auth) == 0x000050, "Member 'UTwitchApi::Auth' has a wrong offset!");
static_assert(offsetof(UTwitchApi, OverrideChannel) == 0x000098, "Member 'UTwitchApi::OverrideChannel' has a wrong offset!");
static_assert(offsetof(UTwitchApi, TwitchAuth) == 0x0000A8, "Member 'UTwitchApi::TwitchAuth' has a wrong offset!");
static_assert(offsetof(UTwitchApi, TwitchIRC) == 0x0000B0, "Member 'UTwitchApi::TwitchIRC' has a wrong offset!");

// Class IWTwitch.TwitchSaveGame
// 0x0040 (0x0068 - 0x0028)
class UTwitchSaveGame final : public USaveGame
{
public:
	class FString                                 SaveSlotName;                                      // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UserIndex;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AccessToken;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpiresAt;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RefreshToken;                                      // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwitchSaveGame">();
	}
	static class UTwitchSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwitchSaveGame>();
	}
};
static_assert(alignof(UTwitchSaveGame) == 0x000008, "Wrong alignment on UTwitchSaveGame");
static_assert(sizeof(UTwitchSaveGame) == 0x000068, "Wrong size on UTwitchSaveGame");
static_assert(offsetof(UTwitchSaveGame, SaveSlotName) == 0x000028, "Member 'UTwitchSaveGame::SaveSlotName' has a wrong offset!");
static_assert(offsetof(UTwitchSaveGame, UserIndex) == 0x000038, "Member 'UTwitchSaveGame::UserIndex' has a wrong offset!");
static_assert(offsetof(UTwitchSaveGame, AccessToken) == 0x000040, "Member 'UTwitchSaveGame::AccessToken' has a wrong offset!");
static_assert(offsetof(UTwitchSaveGame, ExpiresAt) == 0x000050, "Member 'UTwitchSaveGame::ExpiresAt' has a wrong offset!");
static_assert(offsetof(UTwitchSaveGame, RefreshToken) == 0x000058, "Member 'UTwitchSaveGame::RefreshToken' has a wrong offset!");

// Class IWTwitch.TwitchApiAsyncDelegateBase
// 0x0008 (0x0038 - 0x0030)
class UTwitchApiAsyncDelegateBase : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwitchApiAsyncDelegateBase">();
	}
	static class UTwitchApiAsyncDelegateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwitchApiAsyncDelegateBase>();
	}
};
static_assert(alignof(UTwitchApiAsyncDelegateBase) == 0x000008, "Wrong alignment on UTwitchApiAsyncDelegateBase");
static_assert(sizeof(UTwitchApiAsyncDelegateBase) == 0x000038, "Wrong size on UTwitchApiAsyncDelegateBase");

// Class IWTwitch.TwitchDropEntitlementsAsyncDelegate
// 0x0030 (0x0068 - 0x0038)
class UTwitchDropEntitlementsAsyncDelegate final : public UTwitchApiAsyncDelegateBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UTwitchDropEntitlementsAsyncDelegate* GetTwitchDropsEntitlements(class UObject* WorldContextObject, const class FString& Cursor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwitchDropEntitlementsAsyncDelegate">();
	}
	static class UTwitchDropEntitlementsAsyncDelegate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwitchDropEntitlementsAsyncDelegate>();
	}
};
static_assert(alignof(UTwitchDropEntitlementsAsyncDelegate) == 0x000008, "Wrong alignment on UTwitchDropEntitlementsAsyncDelegate");
static_assert(sizeof(UTwitchDropEntitlementsAsyncDelegate) == 0x000068, "Wrong size on UTwitchDropEntitlementsAsyncDelegate");
static_assert(offsetof(UTwitchDropEntitlementsAsyncDelegate, OnSuccess) == 0x000038, "Member 'UTwitchDropEntitlementsAsyncDelegate::OnSuccess' has a wrong offset!");
static_assert(offsetof(UTwitchDropEntitlementsAsyncDelegate, OnFailure) == 0x000048, "Member 'UTwitchDropEntitlementsAsyncDelegate::OnFailure' has a wrong offset!");

// Class IWTwitch.TwitchAuthValidateAsyncDelegate
// 0x0020 (0x0058 - 0x0038)
class UTwitchAuthValidateAsyncDelegate final : public UTwitchApiAsyncDelegateBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UTwitchAuthValidateAsyncDelegate* ValidateTwitchAccessToken(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwitchAuthValidateAsyncDelegate">();
	}
	static class UTwitchAuthValidateAsyncDelegate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwitchAuthValidateAsyncDelegate>();
	}
};
static_assert(alignof(UTwitchAuthValidateAsyncDelegate) == 0x000008, "Wrong alignment on UTwitchAuthValidateAsyncDelegate");
static_assert(sizeof(UTwitchAuthValidateAsyncDelegate) == 0x000058, "Wrong size on UTwitchAuthValidateAsyncDelegate");
static_assert(offsetof(UTwitchAuthValidateAsyncDelegate, OnSuccess) == 0x000038, "Member 'UTwitchAuthValidateAsyncDelegate::OnSuccess' has a wrong offset!");
static_assert(offsetof(UTwitchAuthValidateAsyncDelegate, OnFailure) == 0x000048, "Member 'UTwitchAuthValidateAsyncDelegate::OnFailure' has a wrong offset!");

// Class IWTwitch.TwitchRefreshTokenAsyncDelegate
// 0x0040 (0x0078 - 0x0038)
class UTwitchRefreshTokenAsyncDelegate final : public UTwitchApiAsyncDelegateBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x20];                                      // 0x0058(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UTwitchRefreshTokenAsyncDelegate* SetAndRefreshTwitchAccessToken(class UObject* WorldContextObject, const class FString& AccessToken, const class FString& RefreshToken);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwitchRefreshTokenAsyncDelegate">();
	}
	static class UTwitchRefreshTokenAsyncDelegate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwitchRefreshTokenAsyncDelegate>();
	}
};
static_assert(alignof(UTwitchRefreshTokenAsyncDelegate) == 0x000008, "Wrong alignment on UTwitchRefreshTokenAsyncDelegate");
static_assert(sizeof(UTwitchRefreshTokenAsyncDelegate) == 0x000078, "Wrong size on UTwitchRefreshTokenAsyncDelegate");
static_assert(offsetof(UTwitchRefreshTokenAsyncDelegate, OnSuccess) == 0x000038, "Member 'UTwitchRefreshTokenAsyncDelegate::OnSuccess' has a wrong offset!");
static_assert(offsetof(UTwitchRefreshTokenAsyncDelegate, OnFailure) == 0x000048, "Member 'UTwitchRefreshTokenAsyncDelegate::OnFailure' has a wrong offset!");

// Class IWTwitch.TwitchAuth
// 0x0080 (0x00A8 - 0x0028)
class UTwitchAuth final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AuthCode;                                          // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccessToken;                                       // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpiresIn;                                         // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RefreshToken;                                      // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             TwitchAuthCompleted;                               // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x18];                                      // 0x0090(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndAuth(class UObject* WorldContextObject);
	void PollForConnection();
	void StartAuth(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwitchAuth">();
	}
	static class UTwitchAuth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwitchAuth>();
	}
};
static_assert(alignof(UTwitchAuth) == 0x000008, "Wrong alignment on UTwitchAuth");
static_assert(sizeof(UTwitchAuth) == 0x0000A8, "Wrong size on UTwitchAuth");
static_assert(offsetof(UTwitchAuth, AuthCode) == 0x000048, "Member 'UTwitchAuth::AuthCode' has a wrong offset!");
static_assert(offsetof(UTwitchAuth, AccessToken) == 0x000058, "Member 'UTwitchAuth::AccessToken' has a wrong offset!");
static_assert(offsetof(UTwitchAuth, ExpiresIn) == 0x000068, "Member 'UTwitchAuth::ExpiresIn' has a wrong offset!");
static_assert(offsetof(UTwitchAuth, RefreshToken) == 0x000070, "Member 'UTwitchAuth::RefreshToken' has a wrong offset!");
static_assert(offsetof(UTwitchAuth, TwitchAuthCompleted) == 0x000080, "Member 'UTwitchAuth::TwitchAuthCompleted' has a wrong offset!");

// Class IWTwitch.TwitchIRC
// 0x0058 (0x0080 - 0x0028)
class UTwitchIRC final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMessageReceived;                                 // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x40];                                      // 0x0040(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Connect(class FString* ErrorOut);
	void Disconnect();
	bool SendIRCMessage(const class FString& Message, bool bSendTo, const class FString& InChannel);
	void SetUserInfo(const class FString& OAuth, const class FString& InUsername, const class FString& InChannel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwitchIRC">();
	}
	static class UTwitchIRC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwitchIRC>();
	}
};
static_assert(alignof(UTwitchIRC) == 0x000008, "Wrong alignment on UTwitchIRC");
static_assert(sizeof(UTwitchIRC) == 0x000080, "Wrong size on UTwitchIRC");
static_assert(offsetof(UTwitchIRC, OnMessageReceived) == 0x000030, "Member 'UTwitchIRC::OnMessageReceived' has a wrong offset!");

// Class IWTwitch.TwitchPluginSettings
// 0x0030 (0x0058 - 0x0028)
class UTwitchPluginSettings final : public UObject
{
public:
	class FString                                 ClientId;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TwitchBaseUrl;                                     // 0x0038(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientSecret;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TwitchPluginSettings">();
	}
	static class UTwitchPluginSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTwitchPluginSettings>();
	}
};
static_assert(alignof(UTwitchPluginSettings) == 0x000008, "Wrong alignment on UTwitchPluginSettings");
static_assert(sizeof(UTwitchPluginSettings) == 0x000058, "Wrong size on UTwitchPluginSettings");
static_assert(offsetof(UTwitchPluginSettings, ClientId) == 0x000028, "Member 'UTwitchPluginSettings::ClientId' has a wrong offset!");
static_assert(offsetof(UTwitchPluginSettings, TwitchBaseUrl) == 0x000038, "Member 'UTwitchPluginSettings::TwitchBaseUrl' has a wrong offset!");
static_assert(offsetof(UTwitchPluginSettings, ClientSecret) == 0x000048, "Member 'UTwitchPluginSettings::ClientSecret' has a wrong offset!");

}

