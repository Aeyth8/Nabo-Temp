#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RoomManager

#include "Basic.hpp"

#include "JP_structs.hpp"
#include "JP_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RoomManager.BP_RoomManager_C
// 0x0180 (0x0440 - 0x02C0)
class ABP_RoomManager_C : public ARoomManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box1;                                              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroundskeeperReference*                GroundskeeperReference;                            // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<ERooms, int32>                           RequiredRoomsForLevel2;                            // 0x02E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<ERooms, int32>                           RequiredRoomsForLevel3;                            // 0x0338(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         MoneyCostLevel2;                                   // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MoneyCostLevel3;                                   // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResourceCostLevel2;                                // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ResourceCostLevel3;                                // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequiredHouseLevelForLevel2;                       // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequiredHouseLevelForLevel3;                       // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRoomData                              RoomData;                                          // 0x03A0(0x0018)(Edit, BlueprintVisible, Net, RepNotify)
	bool                                          FullyUpgraded;                                     // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             RoomFullyUpgraded;                                 // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Upgrading;                                         // 0x03D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_StoreBase_C*                        AssociatedStoreBase;                               // 0x03D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LocalUpgradeTimer;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             RoomDataUpdated;                                   // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Upgradable;                                        // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEconomyDefinition*                     Economy_Cost_Level_2;                              // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UEconomyDefinition*                     Economy_Cost_Level_3;                              // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           PlayerStateWhoUpgradedToLevel2;                    // 0x0410(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           PlayerStateWhoUpgradedToLevel3;                    // 0x0418(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             On_RoomUpgradeStarted;                             // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             On_RoomUpgradeComplete;                            // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AddRoomToGroundskeeper();
	void ApplyCost();
	void Audio_Upgrade_Succes();
	void Auth_Upgrade_Room();
	void ExecuteUbergraph_BP_RoomManager(int32 EntryPoint);
	void GetNextLevelHouseLevelRequirement(int32* RoomTypeAndLevel);
	int32 GetNextLevelMoneyCost();
	void GetNextLevelRequiredRooms(TMap<ERooms, int32>* RoomTypeAndLevel);
	void GetUpgradeTime(double* Shop_Upgrade_Duration);
	void K2_RoomUpgradeApproved(class APlayerState* InstigatingPlayer);
	void Local_Upgrade_Timer_Elapsed();
	void On_Level2Reached();
	void On_Level3Reached();
	void On_RoomUpgradeComplete__DelegateSignature();
	void On_RoomUpgradeStarted__DelegateSignature(uint8 NewLevel);
	void OnEnded_45E1EE9B41DFD93B5BBA28B95E2AC27F();
	void OnRep_RoomData();
	void OnRep_Upgrading();
	void ReceiveBeginPlay();
	void ReloadAfterHousesLoaded(bool* Return);
	void RoomDataUpdated__DelegateSignature();
	void RoomFullyUpgraded__DelegateSignature();
	void SendEventlogMessage();
	void SendShopUpgradedImportantNotification(int32 ToLevel, class APlayerState* PlayerStateWhoUpgraded);
	void SetLevelActorVisibility(TArray<class AActor*>& LevelActors, bool Hidden);
	void UpdateShopManagerViewModel();
	void UpdateShopManagerViewModel_RemoveUpgrade();
	void UserConstructionScript();

	void GetNextLevelEconomyCost(class UEconomyDefinition** EconomyCost) const;
	int32 GetNextLevelResourceCost() const;
	uint8 GetTeamID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RoomManager_C">();
	}
	static class ABP_RoomManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RoomManager_C>();
	}
};
static_assert(alignof(ABP_RoomManager_C) == 0x000008, "Wrong alignment on ABP_RoomManager_C");
static_assert(sizeof(ABP_RoomManager_C) == 0x000440, "Wrong size on ABP_RoomManager_C");
static_assert(offsetof(ABP_RoomManager_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_RoomManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, Box1) == 0x0002C8, "Member 'ABP_RoomManager_C::Box1' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, GroundskeeperReference) == 0x0002D0, "Member 'ABP_RoomManager_C::GroundskeeperReference' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, Billboard) == 0x0002D8, "Member 'ABP_RoomManager_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, Box) == 0x0002E0, "Member 'ABP_RoomManager_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, RequiredRoomsForLevel2) == 0x0002E8, "Member 'ABP_RoomManager_C::RequiredRoomsForLevel2' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, RequiredRoomsForLevel3) == 0x000338, "Member 'ABP_RoomManager_C::RequiredRoomsForLevel3' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, MoneyCostLevel2) == 0x000388, "Member 'ABP_RoomManager_C::MoneyCostLevel2' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, MoneyCostLevel3) == 0x00038C, "Member 'ABP_RoomManager_C::MoneyCostLevel3' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, ResourceCostLevel2) == 0x000390, "Member 'ABP_RoomManager_C::ResourceCostLevel2' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, ResourceCostLevel3) == 0x000394, "Member 'ABP_RoomManager_C::ResourceCostLevel3' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, RequiredHouseLevelForLevel2) == 0x000398, "Member 'ABP_RoomManager_C::RequiredHouseLevelForLevel2' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, RequiredHouseLevelForLevel3) == 0x00039C, "Member 'ABP_RoomManager_C::RequiredHouseLevelForLevel3' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, RoomData) == 0x0003A0, "Member 'ABP_RoomManager_C::RoomData' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, FullyUpgraded) == 0x0003B8, "Member 'ABP_RoomManager_C::FullyUpgraded' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, RoomFullyUpgraded) == 0x0003C0, "Member 'ABP_RoomManager_C::RoomFullyUpgraded' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, Upgrading) == 0x0003D0, "Member 'ABP_RoomManager_C::Upgrading' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, AssociatedStoreBase) == 0x0003D8, "Member 'ABP_RoomManager_C::AssociatedStoreBase' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, LocalUpgradeTimer) == 0x0003E0, "Member 'ABP_RoomManager_C::LocalUpgradeTimer' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, RoomDataUpdated) == 0x0003E8, "Member 'ABP_RoomManager_C::RoomDataUpdated' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, Upgradable) == 0x0003F8, "Member 'ABP_RoomManager_C::Upgradable' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, Economy_Cost_Level_2) == 0x000400, "Member 'ABP_RoomManager_C::Economy_Cost_Level_2' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, Economy_Cost_Level_3) == 0x000408, "Member 'ABP_RoomManager_C::Economy_Cost_Level_3' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, PlayerStateWhoUpgradedToLevel2) == 0x000410, "Member 'ABP_RoomManager_C::PlayerStateWhoUpgradedToLevel2' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, PlayerStateWhoUpgradedToLevel3) == 0x000418, "Member 'ABP_RoomManager_C::PlayerStateWhoUpgradedToLevel3' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, On_RoomUpgradeStarted) == 0x000420, "Member 'ABP_RoomManager_C::On_RoomUpgradeStarted' has a wrong offset!");
static_assert(offsetof(ABP_RoomManager_C, On_RoomUpgradeComplete) == 0x000430, "Member 'ABP_RoomManager_C::On_RoomUpgradeComplete' has a wrong offset!");

}

