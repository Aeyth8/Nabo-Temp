#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_POI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_POI.AC_POI_C
// 0x0080 (0x0710 - 0x0690)
#pragma pack(push, 0x1)
class alignas(0x10) UAC_POI_C : public UWidgetComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0690(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTexture2D*                             Image;                                             // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   Description;                                       // 0x06A0(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          LineOfSightVisibility;                             // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Force_Hidden;                                      // 0x06B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_6B2[0x2];                                      // 0x06B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorImage;                                        // 0x06B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           ColorText;                                         // 0x06C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxDistance;                                       // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinDistance;                                       // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisibleOnlyForTeam;                                // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E9[0x7];                                      // 0x06E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerController*>              Controllers;                                       // 0x06F0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          VisibleOnlyForEnemy;                               // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Check_LOS_and_Range(class APlayerController* Controller, bool* SetVisibile);
	void Check_LOS_and_Range_Team(const struct FVector& Location, bool* Hide);
	void ExecuteUbergraph_AC_POI(int32 EntryPoint);
	void GetTeamFromOwningPlayer(TArray<class APlayerStateJP*>* PlayerStates);
	void IsOwnerSameAsCurrentPlayer(bool* SameOwner);
	bool IsSpectatorPawn();
	void ReceiveBeginPlay();
	void Set_Values();
	void Set_Visibility_Based_on_LOS_All();
	void Set_Visibility_Based_on_LOS_Team();
	void UpdateValues(class UTexture2D* Image_0, const class FText& Description_0, const struct FLinearColor& ColorImage_0, const struct FLinearColor& ColorText_0);
	void UpdateVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_POI_C">();
	}
	static class UAC_POI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_POI_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UAC_POI_C) == 0x000010, "Wrong alignment on UAC_POI_C");
static_assert(sizeof(UAC_POI_C) == 0x000710, "Wrong size on UAC_POI_C");
static_assert(offsetof(UAC_POI_C, UberGraphFrame) == 0x000690, "Member 'UAC_POI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, Image) == 0x000698, "Member 'UAC_POI_C::Image' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, Description) == 0x0006A0, "Member 'UAC_POI_C::Description' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, LineOfSightVisibility) == 0x0006B0, "Member 'UAC_POI_C::LineOfSightVisibility' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, Force_Hidden) == 0x0006B1, "Member 'UAC_POI_C::Force_Hidden' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, ColorImage) == 0x0006B4, "Member 'UAC_POI_C::ColorImage' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, ColorText) == 0x0006C4, "Member 'UAC_POI_C::ColorText' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, MaxDistance) == 0x0006D8, "Member 'UAC_POI_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, MinDistance) == 0x0006E0, "Member 'UAC_POI_C::MinDistance' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, VisibleOnlyForTeam) == 0x0006E8, "Member 'UAC_POI_C::VisibleOnlyForTeam' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, Controllers) == 0x0006F0, "Member 'UAC_POI_C::Controllers' has a wrong offset!");
static_assert(offsetof(UAC_POI_C, VisibleOnlyForEnemy) == 0x000700, "Member 'UAC_POI_C::VisibleOnlyForEnemy' has a wrong offset!");

}

