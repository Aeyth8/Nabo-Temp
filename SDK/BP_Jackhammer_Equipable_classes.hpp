#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Jackhammer_Equipable

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_TimeOfDay_structs.hpp"
#include "BP_Equipable_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Jackhammer_Equipable.BP_Jackhammer_Equipable_C
// 0x0028 (0x02E8 - 0x02C0)
class ABP_Jackhammer_Equipable_C final : public ABP_Equipable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Jackhammer_Equipable_C;          // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Niagara;                                           // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDistanceScalingWidgetComponent*        DistanceScalingWidget;                             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        JackhammerMusic;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Jackhammer_Equipable(int32 EntryPoint);
	void On_Client_TimeOfDayChange_Event(bool InitialState, E_TimeOfDay TimeOfDay);
	void PlayPunchCosmetics();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Jackhammer_Equipable_C">();
	}
	static class ABP_Jackhammer_Equipable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Jackhammer_Equipable_C>();
	}
};
static_assert(alignof(ABP_Jackhammer_Equipable_C) == 0x000008, "Wrong alignment on ABP_Jackhammer_Equipable_C");
static_assert(sizeof(ABP_Jackhammer_Equipable_C) == 0x0002E8, "Wrong size on ABP_Jackhammer_Equipable_C");
static_assert(offsetof(ABP_Jackhammer_Equipable_C, UberGraphFrame_BP_Jackhammer_Equipable_C) == 0x0002C0, "Member 'ABP_Jackhammer_Equipable_C::UberGraphFrame_BP_Jackhammer_Equipable_C' has a wrong offset!");
static_assert(offsetof(ABP_Jackhammer_Equipable_C, Niagara) == 0x0002C8, "Member 'ABP_Jackhammer_Equipable_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_Jackhammer_Equipable_C, DistanceScalingWidget) == 0x0002D0, "Member 'ABP_Jackhammer_Equipable_C::DistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(ABP_Jackhammer_Equipable_C, SkeletalMesh) == 0x0002D8, "Member 'ABP_Jackhammer_Equipable_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Jackhammer_Equipable_C, JackhammerMusic) == 0x0002E0, "Member 'ABP_Jackhammer_Equipable_C::JackhammerMusic' has a wrong offset!");

}

