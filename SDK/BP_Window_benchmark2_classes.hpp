#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Window_benchmark2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HouseActorBase_classes.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Window_benchmark2.BP_Window_benchmark2_C
// 0x00E8 (0x04D8 - 0x03F0)
class ABP_Window_benchmark2_C final : public AHouseActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Window_benchmark2_C;             // 0x03F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_PingableComponent_C*                BP_PingableComponent;                              // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_DefenceUpgrade_C*                   AC_DefenceUpgrade;                                 // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneDestroyed;                                    // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FrameBroken;                                       // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Windows_B_Broken;                               // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMeshOK;                                    // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioOpenClose;                                    // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxPrimaryBlocker;                                 // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxInteract;                                       // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroundskeeperReference*                GroundskeeperReference1;                           // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FrameOK;                                           // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneBroken;                                       // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneOK;                                           // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Opened;                                            // 0x0468(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterIsInFront;                                // 0x0469(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WindowOpenInwards;                                 // 0x046A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46B[0x5];                                      // 0x046B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstance*>              GlassHitMaterials;                                 // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           GlassHits;                                         // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UGeometryCollectionComponent*>   ShatteredGeometry;                                 // 0x0490(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                Last_Impulse;                                      // 0x04A0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             LockedSound;                                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AudioMultiplierApplied;                            // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastDamageCauser;                                  // 0x04C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoClose;                                         // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddImpulseToBrokenWindow();
	void AddMeshBounceComponents();
	void ApplyDebugDamage();
	void Attempt_Auto_Close();
	void Audio_Close();
	void Audio_Open();
	void Benchmark_Window_Smash();
	void Close_Window();
	void Cosmetics_State_Repaired();
	void Cosmetics_State_Sabotaged();
	void Event_Apply_Audio_Multiplier(class AActor* InteractingActor);
	void ExecuteUbergraph_BP_Window_benchmark2(int32 EntryPoint);
	void GetCenterLocation(struct FVector* Location);
	void GetLockPickDuration(int32* Return);
	void GetWidgetLocation(struct FVector* Location);
	void GetWindowBaseHealth(double* Health);
	void HideInteractionWidget(bool* Return);
	void House_Actor_Impact_Cosmetics(const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect);
	void IsCharacterInFront();
	void IsClosed(bool* Open);
	void IsInteractable(bool* Interactable);
	void IsInteractingActorATeamMember(class AActor* Actor, bool* Return);
	void IsNotLockpickable(bool* IsNotLockpickable_0);
	void LockpickBegin(class APlayerController* PickerController);
	void LockpickSuccess(class APlayerController* PickerController);
	void Multi_Audio_Locked();
	void OnDamaged(float Delta, class AActor* Causer, const struct FCombatParticipant& CombatParticipant, const struct FKillMethod& KillMethod, const struct FVector_NetQuantize& Location);
	void OnRep_Opened();
	void Open_Window();
	void PostInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void PutRigidBodiesToSleep();
	void ReceiveBeginPlay();
	void ReloadAfterHousesLoaded(bool* Return);
	void RemoveGlassDecal();
	void Repair();
	void Sabotage(class AActor* SabotagingActor);
	void SetInitialWindowHealth();
	void Spawn_destroyed_window();
	void SpawnRandomGlassHit(const struct FVector& Location);
	void Start_Auto_Close_Timer();
	void UpdateWindowCrackEffect();
	void UserConstructionScript();
	void WindowImpactCosmetics(const struct FVector& Location, E_ImpactEffect Selection, const struct FVector& HitImpulse);
	void WindowSabotaged(bool TURR);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Window_benchmark2_C">();
	}
	static class ABP_Window_benchmark2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Window_benchmark2_C>();
	}
};
static_assert(alignof(ABP_Window_benchmark2_C) == 0x000008, "Wrong alignment on ABP_Window_benchmark2_C");
static_assert(sizeof(ABP_Window_benchmark2_C) == 0x0004D8, "Wrong size on ABP_Window_benchmark2_C");
static_assert(offsetof(ABP_Window_benchmark2_C, UberGraphFrame_BP_Window_benchmark2_C) == 0x0003F0, "Member 'ABP_Window_benchmark2_C::UberGraphFrame_BP_Window_benchmark2_C' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, BP_PingableComponent) == 0x0003F8, "Member 'ABP_Window_benchmark2_C::BP_PingableComponent' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, AC_DefenceUpgrade) == 0x000400, "Member 'ABP_Window_benchmark2_C::AC_DefenceUpgrade' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, SceneDestroyed) == 0x000408, "Member 'ABP_Window_benchmark2_C::SceneDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, FrameBroken) == 0x000410, "Member 'ABP_Window_benchmark2_C::FrameBroken' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, SK_Windows_B_Broken) == 0x000418, "Member 'ABP_Window_benchmark2_C::SK_Windows_B_Broken' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, SkeletalMeshOK) == 0x000420, "Member 'ABP_Window_benchmark2_C::SkeletalMeshOK' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, AudioOpenClose) == 0x000428, "Member 'ABP_Window_benchmark2_C::AudioOpenClose' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, Arrow) == 0x000430, "Member 'ABP_Window_benchmark2_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, BoxPrimaryBlocker) == 0x000438, "Member 'ABP_Window_benchmark2_C::BoxPrimaryBlocker' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, BoxInteract) == 0x000440, "Member 'ABP_Window_benchmark2_C::BoxInteract' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, GroundskeeperReference1) == 0x000448, "Member 'ABP_Window_benchmark2_C::GroundskeeperReference1' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, FrameOK) == 0x000450, "Member 'ABP_Window_benchmark2_C::FrameOK' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, SceneBroken) == 0x000458, "Member 'ABP_Window_benchmark2_C::SceneBroken' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, SceneOK) == 0x000460, "Member 'ABP_Window_benchmark2_C::SceneOK' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, Opened) == 0x000468, "Member 'ABP_Window_benchmark2_C::Opened' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, CharacterIsInFront) == 0x000469, "Member 'ABP_Window_benchmark2_C::CharacterIsInFront' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, WindowOpenInwards) == 0x00046A, "Member 'ABP_Window_benchmark2_C::WindowOpenInwards' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, GlassHitMaterials) == 0x000470, "Member 'ABP_Window_benchmark2_C::GlassHitMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, GlassHits) == 0x000480, "Member 'ABP_Window_benchmark2_C::GlassHits' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, ShatteredGeometry) == 0x000490, "Member 'ABP_Window_benchmark2_C::ShatteredGeometry' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, Last_Impulse) == 0x0004A0, "Member 'ABP_Window_benchmark2_C::Last_Impulse' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, LockedSound) == 0x0004B8, "Member 'ABP_Window_benchmark2_C::LockedSound' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, AudioMultiplierApplied) == 0x0004C0, "Member 'ABP_Window_benchmark2_C::AudioMultiplierApplied' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, LastDamageCauser) == 0x0004C8, "Member 'ABP_Window_benchmark2_C::LastDamageCauser' has a wrong offset!");
static_assert(offsetof(ABP_Window_benchmark2_C, AutoClose) == 0x0004D0, "Member 'ABP_Window_benchmark2_C::AutoClose' has a wrong offset!");

}

