#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Wrench_Projectile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_ProjectileBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Wrench_Projectile.BP_Wrench_Projectile_C
// 0x0028 (0x0550 - 0x0528)
class ABP_Wrench_Projectile_C final : public ABP_ProjectileBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Wrench_Projectile_C;             // 0x0528(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HomingTarget;                                      // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         HomingRange;                                       // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingRadius;                                      // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ParticleTimer;                                     // 0x0548(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Wrench_Projectile(int32 EntryPoint);
	void LookForTargetsInFront(class UCameraComponent** HeadComponent);
	void On_Particle_Timer_Elapsed();
	void SetHomingVariables();
	void DeactivatePooledActor();
	void PlayImpactEffect(const struct FHitResult& Hit);
	void PooledBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Wrench_Projectile_C">();
	}
	static class ABP_Wrench_Projectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Wrench_Projectile_C>();
	}
};
static_assert(alignof(ABP_Wrench_Projectile_C) == 0x000008, "Wrong alignment on ABP_Wrench_Projectile_C");
static_assert(sizeof(ABP_Wrench_Projectile_C) == 0x000550, "Wrong size on ABP_Wrench_Projectile_C");
static_assert(offsetof(ABP_Wrench_Projectile_C, UberGraphFrame_BP_Wrench_Projectile_C) == 0x000528, "Member 'ABP_Wrench_Projectile_C::UberGraphFrame_BP_Wrench_Projectile_C' has a wrong offset!");
static_assert(offsetof(ABP_Wrench_Projectile_C, RotatingMovement) == 0x000530, "Member 'ABP_Wrench_Projectile_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_Wrench_Projectile_C, HomingTarget) == 0x000538, "Member 'ABP_Wrench_Projectile_C::HomingTarget' has a wrong offset!");
static_assert(offsetof(ABP_Wrench_Projectile_C, HomingRange) == 0x000540, "Member 'ABP_Wrench_Projectile_C::HomingRange' has a wrong offset!");
static_assert(offsetof(ABP_Wrench_Projectile_C, HomingRadius) == 0x000544, "Member 'ABP_Wrench_Projectile_C::HomingRadius' has a wrong offset!");
static_assert(offsetof(ABP_Wrench_Projectile_C, ParticleTimer) == 0x000548, "Member 'ABP_Wrench_Projectile_C::ParticleTimer' has a wrong offset!");

}

