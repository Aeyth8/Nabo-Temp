#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HouseAdditionCrate

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "BP_MessItem_classes.hpp"
#include "SlateCore_structs.hpp"
#include "JP_structs.hpp"
#include "EAmmoState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HouseAdditionCrate.BP_HouseAdditionCrate_C
// 0x00F0 (0x06F0 - 0x0600)
class ABP_HouseAdditionCrate_C : public ABP_MessItem_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_HouseAdditionCrate_C;            // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAC_Indicator_C*                        AC_Indicator;                                      // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_AmmoGranter_C*                      AC_ItemGranter;                                    // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        InteractWidgetLocation;                            // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroundskeeperReference*                GroundskeeperReference;                            // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          DoNotLaunch;                                       // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 HouseAdditionToSpawn;                              // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x0640(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTeam                                  Team;                                              // 0x0650(0x0038)(Edit, BlueprintVisible, Net, NoDestructor)
	bool                                          Delivered;                                         // 0x0688(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CacheLocalHolder;                                  // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SnappedToHouseAdditionZone;                        // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         TeamId;                                            // 0x0699(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_69A[0x6];                                      // 0x069A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Sticker;                                           // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            FreeInventoryColor;                                // 0x06A8(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_6BC[0x4];                                      // 0x06BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InventoryStatus;                                   // 0x06C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            WidgetColor;                                       // 0x06D0(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_6E4[0x4];                                      // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryComponent*                    Inventory;                                         // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void CheckIfItemAlreadyInInventory(class UInventoryComponent* Inventory_0, bool* ItemAlreadyInInventory);
	void ExecuteUbergraph_BP_HouseAdditionCrate(int32 EntryPoint);
	void GetItemColor(struct FSlateColor* SlateColor, int32* StencilValue);
	void GetNewWidgetColor(struct FSlateColor* NewColor);
	void GetOptionalText(class FText* Return, class FText* Optional_Second_Line);
	void GetWidgetLocation(struct FVector* Location);
	void HideInteractionWidget(bool* Return);
	void IsInFocus(class AActor* Focusing_Actor);
	void IsInteractable(bool* Interactable);
	bool IsInventoryNotFull(class UInventoryComponent* Inventory_0);
	void MakePOIVisibleForOwningTeam();
	void On_All_Teams_Created();
	void OnDropped();
	void OnEnded_A2CE3DA6467272FA4F4FB09343BD0FAA();
	void OnEnded_AF6215DB4DF0EB2D1FA46B95C333F257();
	void OnGrabbed();
	void OnIndicatorInitialised();
	void OnRep_Delivered();
	void Owner_PlayAudioError();
	void Owner_PlayPickupAudio();
	void PostInteract(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent);
	void ReceiveBeginPlay();
	void ReloadAfterHousesLoaded(bool* Return);
	void SetTeamFromGroundskeeper();
	void UpdateInventoryWidget(class AActor* InteractingActor);

	float GetInteractionDuration(class UPrimitiveComponent* InteractionComponent) const;
	void GetPostInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	void GetPreInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	struct FTeam GetTeam() const;
	uint8 GetTeamID() const;
	bool HasTeam() const;
	bool IsAvailableForEnemyTeam(class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForInteraction(class AActor* InteractingActor, class UPrimitiveComponent* InteractionComponent) const;
	bool TakeDamageFromAllTeams() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HouseAdditionCrate_C">();
	}
	static class ABP_HouseAdditionCrate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HouseAdditionCrate_C>();
	}
};
static_assert(alignof(ABP_HouseAdditionCrate_C) == 0x000010, "Wrong alignment on ABP_HouseAdditionCrate_C");
static_assert(sizeof(ABP_HouseAdditionCrate_C) == 0x0006F0, "Wrong size on ABP_HouseAdditionCrate_C");
static_assert(offsetof(ABP_HouseAdditionCrate_C, UberGraphFrame_BP_HouseAdditionCrate_C) == 0x000600, "Member 'ABP_HouseAdditionCrate_C::UberGraphFrame_BP_HouseAdditionCrate_C' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, AC_Indicator) == 0x000608, "Member 'ABP_HouseAdditionCrate_C::AC_Indicator' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, AC_ItemGranter) == 0x000610, "Member 'ABP_HouseAdditionCrate_C::AC_ItemGranter' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, SpringArm) == 0x000618, "Member 'ABP_HouseAdditionCrate_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, InteractWidgetLocation) == 0x000620, "Member 'ABP_HouseAdditionCrate_C::InteractWidgetLocation' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, GroundskeeperReference) == 0x000628, "Member 'ABP_HouseAdditionCrate_C::GroundskeeperReference' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, DoNotLaunch) == 0x000630, "Member 'ABP_HouseAdditionCrate_C::DoNotLaunch' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, HouseAdditionToSpawn) == 0x000638, "Member 'ABP_HouseAdditionCrate_C::HouseAdditionToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, Name_0) == 0x000640, "Member 'ABP_HouseAdditionCrate_C::Name_0' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, Team) == 0x000650, "Member 'ABP_HouseAdditionCrate_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, Delivered) == 0x000688, "Member 'ABP_HouseAdditionCrate_C::Delivered' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, CacheLocalHolder) == 0x000690, "Member 'ABP_HouseAdditionCrate_C::CacheLocalHolder' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, SnappedToHouseAdditionZone) == 0x000698, "Member 'ABP_HouseAdditionCrate_C::SnappedToHouseAdditionZone' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, TeamId) == 0x000699, "Member 'ABP_HouseAdditionCrate_C::TeamId' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, Sticker) == 0x0006A0, "Member 'ABP_HouseAdditionCrate_C::Sticker' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, FreeInventoryColor) == 0x0006A8, "Member 'ABP_HouseAdditionCrate_C::FreeInventoryColor' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, InventoryStatus) == 0x0006C0, "Member 'ABP_HouseAdditionCrate_C::InventoryStatus' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, WidgetColor) == 0x0006D0, "Member 'ABP_HouseAdditionCrate_C::WidgetColor' has a wrong offset!");
static_assert(offsetof(ABP_HouseAdditionCrate_C, Inventory) == 0x0006E8, "Member 'ABP_HouseAdditionCrate_C::Inventory' has a wrong offset!");

}

