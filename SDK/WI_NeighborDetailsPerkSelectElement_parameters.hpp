#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_NeighborDetailsPerkSelectElement

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.BndEvt__WI_NeighborDetailsPerkSelectElement_WI_PerkButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_BndEvt__WI_NeighborDetailsPerkSelectElement_WI_PerkButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_BndEvt__WI_NeighborDetailsPerkSelectElement_WI_PerkButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_BndEvt__WI_NeighborDetailsPerkSelectElement_WI_PerkButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_BndEvt__WI_NeighborDetailsPerkSelectElement_WI_PerkButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_BndEvt__WI_NeighborDetailsPerkSelectElement_WI_PerkButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_BndEvt__WI_NeighborDetailsPerkSelectElement_WI_PerkButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_BndEvt__WI_NeighborDetailsPerkSelectElement_WI_PerkButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement
// 0x0018 (0x0018 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement) == 0x000008, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement) == 0x000018, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement, EntryPoint) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement, K2Node_ComponentBoundEvent_Button) == 0x000008, "Member 'WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'WI_NeighborDetailsPerkSelectElement_C_ExecuteUbergraph_WI_NeighborDetailsPerkSelectElement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.GetIsEquipped
// 0x0001 (0x0001 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_GetIsEquipped final
{
public:
	bool                                          IsEquipped_0;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_GetIsEquipped) == 0x000001, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_GetIsEquipped");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_GetIsEquipped) == 0x000001, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_GetIsEquipped");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_GetIsEquipped, IsEquipped_0) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_GetIsEquipped::IsEquipped_0' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.GetNeighborLevel
// 0x0004 (0x0004 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_GetNeighborLevel final
{
public:
	int32                                         NeighborLevel_0;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_GetNeighborLevel) == 0x000004, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_GetNeighborLevel");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_GetNeighborLevel) == 0x000004, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_GetNeighborLevel");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_GetNeighborLevel, NeighborLevel_0) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_GetNeighborLevel::NeighborLevel_0' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.GetPerkID
// 0x0008 (0x0008 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_GetPerkID final
{
public:
	struct FGameplayTag                           PerkID_0;                                          // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_GetPerkID) == 0x000004, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_GetPerkID");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_GetPerkID) == 0x000008, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_GetPerkID");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_GetPerkID, PerkID_0) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_GetPerkID::PerkID_0' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.GetRequiredLevel
// 0x0004 (0x0004 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_GetRequiredLevel final
{
public:
	int32                                         RequiredLevel_0;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_GetRequiredLevel) == 0x000004, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_GetRequiredLevel");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_GetRequiredLevel) == 0x000004, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_GetRequiredLevel");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_GetRequiredLevel, RequiredLevel_0) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_GetRequiredLevel::RequiredLevel_0' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_OnClicked__DelegateSignature final
{
public:
	class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_OnClicked__DelegateSignature");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_OnClicked__DelegateSignature) == 0x000008, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_OnClicked__DelegateSignature");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_OnClicked__DelegateSignature, PerkSelectElement) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_OnClicked__DelegateSignature::PerkSelectElement' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.OnNewPerkActivated__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_OnNewPerkActivated__DelegateSignature final
{
public:
	class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_OnNewPerkActivated__DelegateSignature) == 0x000008, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_OnNewPerkActivated__DelegateSignature");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_OnNewPerkActivated__DelegateSignature) == 0x000008, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_OnNewPerkActivated__DelegateSignature");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_OnNewPerkActivated__DelegateSignature, PerkSelectElement) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_OnNewPerkActivated__DelegateSignature::PerkSelectElement' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.OnNewPerkEquipped__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_OnNewPerkEquipped__DelegateSignature final
{
public:
	class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_OnNewPerkEquipped__DelegateSignature) == 0x000008, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_OnNewPerkEquipped__DelegateSignature");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_OnNewPerkEquipped__DelegateSignature) == 0x000008, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_OnNewPerkEquipped__DelegateSignature");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_OnNewPerkEquipped__DelegateSignature, PerkSelectElement) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_OnNewPerkEquipped__DelegateSignature::PerkSelectElement' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_PreConstruct) == 0x000001, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_PreConstruct");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_PreConstruct) == 0x000001, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_PreConstruct");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.SetButtonAndIconDiameter
// 0x0010 (0x0010 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_SetButtonAndIconDiameter final
{
public:
	double                                        ButtonDiameter_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IconDiameter_0;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_SetButtonAndIconDiameter) == 0x000008, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_SetButtonAndIconDiameter");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_SetButtonAndIconDiameter) == 0x000010, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_SetButtonAndIconDiameter");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetButtonAndIconDiameter, ButtonDiameter_0) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetButtonAndIconDiameter::ButtonDiameter_0' has a wrong offset!");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetButtonAndIconDiameter, IconDiameter_0) == 0x000008, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetButtonAndIconDiameter::IconDiameter_0' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.SetIsActive
// 0x0002 (0x0002 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_SetIsActive final
{
public:
	bool                                          IsActive_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_SetIsActive) == 0x000001, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_SetIsActive");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_SetIsActive) == 0x000002, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_SetIsActive");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetIsActive, IsActive_0) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetIsActive::IsActive_0' has a wrong offset!");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetIsActive, CallFunc_BooleanXOR_ReturnValue) == 0x000001, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetIsActive::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.SetIsEquipped
// 0x0002 (0x0002 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_SetIsEquipped final
{
public:
	bool                                          IsEquipped_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_SetIsEquipped) == 0x000001, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_SetIsEquipped");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_SetIsEquipped) == 0x000002, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_SetIsEquipped");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetIsEquipped, IsEquipped_0) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetIsEquipped::IsEquipped_0' has a wrong offset!");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetIsEquipped, CallFunc_BooleanXOR_ReturnValue) == 0x000001, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetIsEquipped::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.SetLevelRequirement
// 0x0020 (0x0020 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement final
{
public:
	int32                                         LevelRequirement;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeighborLevel_0;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0010)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement) == 0x000008, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement) == 0x000020, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement, LevelRequirement) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement::LevelRequirement' has a wrong offset!");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement, NeighborLevel_0) == 0x000004, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement::NeighborLevel_0' has a wrong offset!");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetLevelRequirement::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function WI_NeighborDetailsPerkSelectElement.WI_NeighborDetailsPerkSelectElement_C.SetPerkID
// 0x0008 (0x0008 - 0x0000)
struct WI_NeighborDetailsPerkSelectElement_C_SetPerkID final
{
public:
	struct FGameplayTag                           PerkID_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_NeighborDetailsPerkSelectElement_C_SetPerkID) == 0x000004, "Wrong alignment on WI_NeighborDetailsPerkSelectElement_C_SetPerkID");
static_assert(sizeof(WI_NeighborDetailsPerkSelectElement_C_SetPerkID) == 0x000008, "Wrong size on WI_NeighborDetailsPerkSelectElement_C_SetPerkID");
static_assert(offsetof(WI_NeighborDetailsPerkSelectElement_C_SetPerkID, PerkID_0) == 0x000000, "Member 'WI_NeighborDetailsPerkSelectElement_C_SetPerkID::PerkID_0' has a wrong offset!");

}

