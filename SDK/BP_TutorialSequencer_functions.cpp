#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TutorialSequencer

#include "Basic.hpp"

#include "BP_TutorialSequencer_classes.hpp"
#include "BP_TutorialSequencer_parameters.hpp"


namespace SDK
{

// Function BP_TutorialSequencer.BP_TutorialSequencer_C.ArrivedAtDestination
// (BlueprintCallable, BlueprintEvent)

void ABP_TutorialSequencer_C::ArrivedAtDestination()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "ArrivedAtDestination");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.CreateSequenceCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Camera                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialSequencer_C::CreateSequenceCamera(const struct FTransform& SpawnTransform, class AActor** Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "CreateSequenceCamera");

	Params::BP_TutorialSequencer_C_CreateSequenceCamera Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (Camera != nullptr)
		*Camera = Parms.Camera;
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.EndSequence
// (BlueprintCallable, BlueprintEvent)

void ABP_TutorialSequencer_C::EndSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "EndSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.ExecuteUbergraph_BP_TutorialSequencer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialSequencer_C::ExecuteUbergraph_BP_TutorialSequencer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "ExecuteUbergraph_BP_TutorialSequencer");

	Params::BP_TutorialSequencer_C_ExecuteUbergraph_BP_TutorialSequencer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.GetFirstSequencePosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FTransform                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

const struct FTransform ABP_TutorialSequencer_C::GetFirstSequencePosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "GetFirstSequencePosition");

	Params::BP_TutorialSequencer_C_GetFirstSequencePosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.GiveCameraBackToPlayer
// (BlueprintCallable, BlueprintEvent)

void ABP_TutorialSequencer_C::GiveCameraBackToPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "GiveCameraBackToPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.GoToNextCameraPosition
// (BlueprintCallable, BlueprintEvent)

void ABP_TutorialSequencer_C::GoToNextCameraPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "GoToNextCameraPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.GoToPreviousCameraPosition
// (BlueprintCallable, BlueprintEvent)

void ABP_TutorialSequencer_C::GoToPreviousCameraPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "GoToPreviousCameraPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.OnSequenceEnded__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_TutorialSequencer_C::OnSequenceEnded__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "OnSequenceEnded__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialSequencer_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "ReceiveTick");

	Params::BP_TutorialSequencer_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.StartLerping
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TargetIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SequenceEnded                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialSequencer_C::StartLerping(int32 TargetIndex, bool* SequenceEnded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "StartLerping");

	Params::BP_TutorialSequencer_C_StartLerping Parms{};

	Parms.TargetIndex = TargetIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (SequenceEnded != nullptr)
		*SequenceEnded = Parms.SequenceEnded;
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.StartSequence
// (BlueprintCallable, BlueprintEvent)

void ABP_TutorialSequencer_C::StartSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "StartSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TutorialSequencer.BP_TutorialSequencer_C.TakeCameraAwayFromPlayer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Camera                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_TutorialSequencer_C::TakeCameraAwayFromPlayer(class AActor* Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TutorialSequencer_C", "TakeCameraAwayFromPlayer");

	Params::BP_TutorialSequencer_C_TakeCameraAwayFromPlayer Parms{};

	Parms.Camera = Camera;

	UObject::ProcessEvent(Func, &Parms);
}

}

