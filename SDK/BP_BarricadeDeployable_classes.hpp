#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BarricadeDeployable

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_MaterialTypes_structs.hpp"
#include "E_ImpactEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BarricadeDeployable.BP_BarricadeDeployable_C
// 0x00A8 (0x0338 - 0x0290)
class ABP_BarricadeDeployable_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       SphereDistanceScalingWidget;                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDistanceScalingWidgetComponent*        DistanceScalingWidget;                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMeshCollider;                                // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Nail1;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Nail2;                                             // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMeshBounceComponent_C*                 MeshBounceComponent;                               // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponentIW*              AbilitySystemComponentIW;                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UItemCompatibleInfoWI_C*                As_Item_Compatible_Info_WI;                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLength;                                     // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Destination;                                       // 0x02F0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FVector>                        PointsAlongMesh;                                   // 0x0308(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	float                                         Health;                                            // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    PlankMeshes;                                       // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         TeamId;                                            // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BndEvt__HouseActorBase_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__HouseActorBase_Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_BP_BarricadeDeployable(int32 EntryPoint);
	void GetDurabilityCostWhenHit(double* Amount);
	void GetLengthAdjustedMesh(int32* Group, double* Scale);
	void GetMaterialType(E_MaterialTypes* MaterialType);
	void HitInterface(const struct FVector& Direction);
	bool HitTeammate(TArray<struct FHitResult>& Array);
	void ImpactCosmetic(const struct FVector& Location, const struct FVector& HitImpact);
	void ImpactCosmetics(class APawn* ImpactCauser, const struct FVector& Location, const struct FVector& HitImpulse, E_ImpactEffect ImpactEffect, class FName BoneName, bool* ChangedAttributes);
	void MeleeHit(const class AActor*& AttackingActor);
	void OnDamaged(float Delta, class AActor* Causer, const struct FCombatParticipant& CombatParticipant, const struct FKillMethod& KillMethod, const struct FVector_NetQuantize& Location);
	void OnHealthChanged(float Health_0, float MaxHealth);
	void OrientTowardsPoint();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetInitialBarricadeHealth();
	void SetPointsAlongMesh();
	void SpawnCosmetics();
	void TakeDamage();
	void UpdateProgressbar(double Value, double Max);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BarricadeDeployable_C">();
	}
	static class ABP_BarricadeDeployable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BarricadeDeployable_C>();
	}
};
static_assert(alignof(ABP_BarricadeDeployable_C) == 0x000008, "Wrong alignment on ABP_BarricadeDeployable_C");
static_assert(sizeof(ABP_BarricadeDeployable_C) == 0x000338, "Wrong size on ABP_BarricadeDeployable_C");
static_assert(offsetof(ABP_BarricadeDeployable_C, UberGraphFrame) == 0x000290, "Member 'ABP_BarricadeDeployable_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, SphereDistanceScalingWidget) == 0x000298, "Member 'ABP_BarricadeDeployable_C::SphereDistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, DistanceScalingWidget) == 0x0002A0, "Member 'ABP_BarricadeDeployable_C::DistanceScalingWidget' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, StaticMeshCollider) == 0x0002A8, "Member 'ABP_BarricadeDeployable_C::StaticMeshCollider' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, Nail1) == 0x0002B0, "Member 'ABP_BarricadeDeployable_C::Nail1' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, Nail2) == 0x0002B8, "Member 'ABP_BarricadeDeployable_C::Nail2' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, MeshBounceComponent) == 0x0002C0, "Member 'ABP_BarricadeDeployable_C::MeshBounceComponent' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, AbilitySystemComponentIW) == 0x0002C8, "Member 'ABP_BarricadeDeployable_C::AbilitySystemComponentIW' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, StaticMesh) == 0x0002D0, "Member 'ABP_BarricadeDeployable_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, Scene) == 0x0002D8, "Member 'ABP_BarricadeDeployable_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, As_Item_Compatible_Info_WI) == 0x0002E0, "Member 'ABP_BarricadeDeployable_C::As_Item_Compatible_Info_WI' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, CurrentLength) == 0x0002E8, "Member 'ABP_BarricadeDeployable_C::CurrentLength' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, Destination) == 0x0002F0, "Member 'ABP_BarricadeDeployable_C::Destination' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, PointsAlongMesh) == 0x000308, "Member 'ABP_BarricadeDeployable_C::PointsAlongMesh' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, Health) == 0x000318, "Member 'ABP_BarricadeDeployable_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, PlankMeshes) == 0x000320, "Member 'ABP_BarricadeDeployable_C::PlankMeshes' has a wrong offset!");
static_assert(offsetof(ABP_BarricadeDeployable_C, TeamId) == 0x000330, "Member 'ABP_BarricadeDeployable_C::TeamId' has a wrong offset!");

}

