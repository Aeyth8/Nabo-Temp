#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWTwitch

#include "Basic.hpp"

#include "IWTwitch_classes.hpp"
#include "IWTwitch_parameters.hpp"


namespace SDK
{

// Function IWTwitch.TwitchApi.SetChatMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETwitchChatMode                         ChatMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwitchApi::SetChatMode(ETwitchChatMode ChatMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchApi", "SetChatMode");

	Params::TwitchApi_SetChatMode Parms{};

	Parms.ChatMode = ChatMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWTwitch.TwitchApi.SetTwitchAuth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTwitchAuth*                      TwitchAuthIn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwitchApi::SetTwitchAuth(class UTwitchAuth* TwitchAuthIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchApi", "SetTwitchAuth");

	Params::TwitchApi_SetTwitchAuth Parms{};

	Parms.TwitchAuthIn = TwitchAuthIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWTwitch.TwitchApi.TwitchAuthCompleted
// (Final, Native, Public)

void UTwitchApi::TwitchAuthCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchApi", "TwitchAuthCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function IWTwitch.TwitchApi.TwitchAuthFailed
// (Final, Native, Public)
// Parameters:
// struct FTwitchAuthResponse              AuthResponse                                           (Parm, NativeAccessSpecifierPublic)
// struct FTwitchError                     TwitchError                                            (Parm, NativeAccessSpecifierPublic)

void UTwitchApi::TwitchAuthFailed(const struct FTwitchAuthResponse& AuthResponse, const struct FTwitchError& TwitchError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchApi", "TwitchAuthFailed");

	Params::TwitchApi_TwitchAuthFailed Parms{};

	Parms.AuthResponse = std::move(AuthResponse);
	Parms.TwitchError = std::move(TwitchError);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWTwitch.TwitchApi.TwitchAuthValidated
// (Final, Native, Public)
// Parameters:
// struct FTwitchAuthResponse              AuthResponse                                           (Parm, NativeAccessSpecifierPublic)
// struct FTwitchError                     TwitchError                                            (Parm, NativeAccessSpecifierPublic)

void UTwitchApi::TwitchAuthValidated(const struct FTwitchAuthResponse& AuthResponse, const struct FTwitchError& TwitchError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchApi", "TwitchAuthValidated");

	Params::TwitchApi_TwitchAuthValidated Parms{};

	Parms.AuthResponse = std::move(AuthResponse);
	Parms.TwitchError = std::move(TwitchError);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWTwitch.TwitchApi.GetAccessTokenAsText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTwitchApi::GetAccessTokenAsText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchApi", "GetAccessTokenAsText");

	Params::TwitchApi_GetAccessTokenAsText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function IWTwitch.TwitchApi.GetTwitchAuth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTwitchAuth*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTwitchAuth* UTwitchApi::GetTwitchAuth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchApi", "GetTwitchAuth");

	Params::TwitchApi_GetTwitchAuth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function IWTwitch.TwitchApi.GetTwitchIrc
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTwitchIRC*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTwitchIRC* UTwitchApi::GetTwitchIrc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchApi", "GetTwitchIrc");

	Params::TwitchApi_GetTwitchIrc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function IWTwitch.TwitchDropEntitlementsAsyncDelegate.GetTwitchDropsEntitlements
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Cursor                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTwitchDropEntitlementsAsyncDelegate*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTwitchDropEntitlementsAsyncDelegate* UTwitchDropEntitlementsAsyncDelegate::GetTwitchDropsEntitlements(class UObject* WorldContextObject, const class FString& Cursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TwitchDropEntitlementsAsyncDelegate", "GetTwitchDropsEntitlements");

	Params::TwitchDropEntitlementsAsyncDelegate_GetTwitchDropsEntitlements Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Cursor = std::move(Cursor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function IWTwitch.TwitchAuthValidateAsyncDelegate.ValidateTwitchAccessToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTwitchAuthValidateAsyncDelegate* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTwitchAuthValidateAsyncDelegate* UTwitchAuthValidateAsyncDelegate::ValidateTwitchAccessToken(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TwitchAuthValidateAsyncDelegate", "ValidateTwitchAccessToken");

	Params::TwitchAuthValidateAsyncDelegate_ValidateTwitchAccessToken Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function IWTwitch.TwitchRefreshTokenAsyncDelegate.SetAndRefreshTwitchAccessToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           RefreshToken                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTwitchRefreshTokenAsyncDelegate* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTwitchRefreshTokenAsyncDelegate* UTwitchRefreshTokenAsyncDelegate::SetAndRefreshTwitchAccessToken(class UObject* WorldContextObject, const class FString& AccessToken, const class FString& RefreshToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TwitchRefreshTokenAsyncDelegate", "SetAndRefreshTwitchAccessToken");

	Params::TwitchRefreshTokenAsyncDelegate_SetAndRefreshTwitchAccessToken Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AccessToken = std::move(AccessToken);
	Parms.RefreshToken = std::move(RefreshToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function IWTwitch.TwitchAuth.EndAuth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwitchAuth::EndAuth(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchAuth", "EndAuth");

	Params::TwitchAuth_EndAuth Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWTwitch.TwitchAuth.PollForConnection
// (Final, Native, Private)

void UTwitchAuth::PollForConnection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchAuth", "PollForConnection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function IWTwitch.TwitchAuth.StartAuth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwitchAuth::StartAuth(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchAuth", "StartAuth");

	Params::TwitchAuth_StartAuth Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWTwitch.TwitchIRC.Connect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ErrorOut                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTwitchIRC::Connect(class FString* ErrorOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchIRC", "Connect");

	Params::TwitchIRC_Connect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ErrorOut != nullptr)
		*ErrorOut = std::move(Parms.ErrorOut);

	return Parms.ReturnValue;
}


// Function IWTwitch.TwitchIRC.Disconnect
// (Final, Native, Public, BlueprintCallable)

void UTwitchIRC::Disconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchIRC", "Disconnect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function IWTwitch.TwitchIRC.SendIRCMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSendTo                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InChannel                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTwitchIRC::SendIRCMessage(const class FString& Message, bool bSendTo, const class FString& InChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchIRC", "SendIRCMessage");

	Params::TwitchIRC_SendIRCMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.bSendTo = bSendTo;
	Parms.InChannel = std::move(InChannel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function IWTwitch.TwitchIRC.SetUserInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           OAuth                                                  (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InUsername                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InChannel                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwitchIRC::SetUserInfo(const class FString& OAuth, const class FString& InUsername, const class FString& InChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwitchIRC", "SetUserInfo");

	Params::TwitchIRC_SetUserInfo Parms{};

	Parms.OAuth = std::move(OAuth);
	Parms.InUsername = std::move(InUsername);
	Parms.InChannel = std::move(InChannel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

