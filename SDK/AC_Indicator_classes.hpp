#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_Indicator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_IndicatorType_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "S_IndicatorData_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_Indicator.AC_Indicator_C
// 0x01D0 (0x0860 - 0x0690)
class UAC_Indicator_C final : public UWidgetComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0690(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDataTable*                             DataTable;                                         // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_IndicatorType                               IndicatorType;                                     // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_6A1[0x7];                                      // 0x06A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_IndicatorData                       IndicatorData;                                     // 0x06A8(0x00D8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TMap<class APlayerControllerJP_Match*, class UWI_OffscreenIndicator_C*> OffscreenWidgetOwners;                             // 0x0780(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, ContainsInstancedReference)
	uint8                                         TeamOwner;                                         // 0x07D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D1[0x7];                                      // 0x07D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class APlayerControllerJP_Match*, class UUserWidget*> OnscreenWidgetOwners;                              // 0x07D8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          ShouldUpdate;                                      // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ManualInitialization;                              // 0x0829(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_82A[0x6];                                      // 0x082A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ForcedVisibilityDurationOnStart;                   // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           OnscreenUpdateTimer;                               // 0x0838(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultOnscreenWidgetScale;                        // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnIndicatorInitialised;                            // 0x0848(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ActivateOffscreenWidget();
	void CacheOriginalScale();
	void CheckLineOfSight(bool* In_Line_Of_Sight);
	void DelayStoponScreen(double ShowForSeconds);
	void ExecuteUbergraph_AC_Indicator(int32 EntryPoint);
	void GetColorToUse(const struct FS_IndicatorData& IndicatorData_0, struct FLinearColor* Color);
	void IndicatorsHiddenByCheat();
	void InitComponent(uint8 TeamToShow);
	void Is_In_Acceptable_Range(bool* InRange);
	void IsOnSameTeam(bool* SameTeam);
	void OnEnded_9C2783B3416F9B076B58C692B6CA6687();
	void OnGameEnded_Event();
	void OnIndicatorInitialised__DelegateSignature();
	void OverrideOnscreenWidgetScale(double NewScale, class APlayerController* PlayerController);
	void OverrideOnscreenWidgetText(const class FText& NewText);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void RemoveAllSpawnedOffscreenWidgets();
	void Reset_Damaged_Sound();
	void ResetOnscreenWidgetScale(class APlayerController* PlayerController);
	void Set_OffscreenWidget_Visuals(class UWI_OffscreenIndicator_C* Indicator);
	void SetIndicatorData();
	void SetOffscreenArrowVisibility(bool OnScreen);
	void SetOffscreenElements();
	void SetOffscreenLocationAndRotation(const struct FVector2D& Location, double Angle);
	void SetOnscreenWidgetVisuals();
	void StartOnscreenUpdate();
	void StopOnscreenUpdate(ESlateVisibility NewVisibility);
	void TeamIsValid(bool* Valid);
	void ToggleOnscreenVisibility();
	void Try_Create_Offscreen_Widget();
	void TryActivateBrokenEffect();
	void TurnOff();
	void UpdateOnscreenIndicator();
	void VisibleForCurrentPlayer(bool* Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_Indicator_C">();
	}
	static class UAC_Indicator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_Indicator_C>();
	}
};
static_assert(alignof(UAC_Indicator_C) == 0x000010, "Wrong alignment on UAC_Indicator_C");
static_assert(sizeof(UAC_Indicator_C) == 0x000860, "Wrong size on UAC_Indicator_C");
static_assert(offsetof(UAC_Indicator_C, UberGraphFrame) == 0x000690, "Member 'UAC_Indicator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, DataTable) == 0x000698, "Member 'UAC_Indicator_C::DataTable' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, IndicatorType) == 0x0006A0, "Member 'UAC_Indicator_C::IndicatorType' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, IndicatorData) == 0x0006A8, "Member 'UAC_Indicator_C::IndicatorData' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, OffscreenWidgetOwners) == 0x000780, "Member 'UAC_Indicator_C::OffscreenWidgetOwners' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, TeamOwner) == 0x0007D0, "Member 'UAC_Indicator_C::TeamOwner' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, OnscreenWidgetOwners) == 0x0007D8, "Member 'UAC_Indicator_C::OnscreenWidgetOwners' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, ShouldUpdate) == 0x000828, "Member 'UAC_Indicator_C::ShouldUpdate' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, ManualInitialization) == 0x000829, "Member 'UAC_Indicator_C::ManualInitialization' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, ForcedVisibilityDurationOnStart) == 0x000830, "Member 'UAC_Indicator_C::ForcedVisibilityDurationOnStart' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, OnscreenUpdateTimer) == 0x000838, "Member 'UAC_Indicator_C::OnscreenUpdateTimer' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, DefaultOnscreenWidgetScale) == 0x000840, "Member 'UAC_Indicator_C::DefaultOnscreenWidgetScale' has a wrong offset!");
static_assert(offsetof(UAC_Indicator_C, OnIndicatorInitialised) == 0x000848, "Member 'UAC_Indicator_C::OnIndicatorInitialised' has a wrong offset!");

}

