#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWGamePhases

#include "Basic.hpp"

#include "IWGamePhases_classes.hpp"
#include "IWGamePhases_parameters.hpp"


namespace SDK
{

// Function IWGamePhases.PhaseSubsystem.K2_StartPhase
// (Final, BlueprintAuthorityOnly, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UPhaseAbility>        Phase                                                  (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UPhaseAbility* Phase)>PhaseEnded                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhaseSubsystem::K2_StartPhase(TSubclassOf<class UPhaseAbility> Phase, const TDelegate<void(class UPhaseAbility* Phase)>& PhaseEnded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhaseSubsystem", "K2_StartPhase");

	Params::PhaseSubsystem_K2_StartPhase Parms{};

	Parms.Phase = Phase;
	Parms.PhaseEnded = PhaseEnded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWGamePhases.PhaseSubsystem.K2_WhenPhaseEnds
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     PhaseTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhaseTagMatchType                      MatchType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FGameplayTag& PhaseTag)>WhenPhaseEnd                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhaseSubsystem::K2_WhenPhaseEnds(const struct FGameplayTag& PhaseTag, EPhaseTagMatchType MatchType, TDelegate<void(struct FGameplayTag& PhaseTag)> WhenPhaseEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhaseSubsystem", "K2_WhenPhaseEnds");

	Params::PhaseSubsystem_K2_WhenPhaseEnds Parms{};

	Parms.PhaseTag = std::move(PhaseTag);
	Parms.MatchType = MatchType;
	Parms.WhenPhaseEnd = WhenPhaseEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWGamePhases.PhaseSubsystem.K2_WhenPhaseStartsOrIsActive
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     PhaseTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhaseTagMatchType                      MatchType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FGameplayTag& PhaseTag)>WhenPhaseActive                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhaseSubsystem::K2_WhenPhaseStartsOrIsActive(const struct FGameplayTag& PhaseTag, EPhaseTagMatchType MatchType, TDelegate<void(struct FGameplayTag& PhaseTag)> WhenPhaseActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhaseSubsystem", "K2_WhenPhaseStartsOrIsActive");

	Params::PhaseSubsystem_K2_WhenPhaseStartsOrIsActive Parms{};

	Parms.PhaseTag = std::move(PhaseTag);
	Parms.MatchType = MatchType;
	Parms.WhenPhaseActive = WhenPhaseActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWGamePhases.PhaseSubsystem.IsPhaseActive
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// struct FGameplayTag                     PhaseTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhaseSubsystem::IsPhaseActive(const struct FGameplayTag& PhaseTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhaseSubsystem", "IsPhaseActive");

	Params::PhaseSubsystem_IsPhaseActive Parms{};

	Parms.PhaseTag = std::move(PhaseTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

