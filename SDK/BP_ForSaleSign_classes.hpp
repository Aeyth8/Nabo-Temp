#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ForSaleSign

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ForSaleSign.BP_ForSaleSign_C
// 0x0030 (0x02C0 - 0x0290)
class ABP_ForSaleSign_C final : public AActor
{
public:
	class UNiagaraComponent*                      SoldParticles;                                     // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_For_sale_sign;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSold;                                            // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnIsSoldChanged;                                   // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void GetIsSold(bool* IsSold_0);
	void OnIsSoldChanged__DelegateSignature(class ABP_ForSaleSign_C* ForSaleSign);
	void SetIsSold(bool IsSold_0, bool PlayAnimation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ForSaleSign_C">();
	}
	static class ABP_ForSaleSign_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ForSaleSign_C>();
	}
};
static_assert(alignof(ABP_ForSaleSign_C) == 0x000008, "Wrong alignment on ABP_ForSaleSign_C");
static_assert(sizeof(ABP_ForSaleSign_C) == 0x0002C0, "Wrong size on ABP_ForSaleSign_C");
static_assert(offsetof(ABP_ForSaleSign_C, SoldParticles) == 0x000290, "Member 'ABP_ForSaleSign_C::SoldParticles' has a wrong offset!");
static_assert(offsetof(ABP_ForSaleSign_C, SK_For_sale_sign) == 0x000298, "Member 'ABP_ForSaleSign_C::SK_For_sale_sign' has a wrong offset!");
static_assert(offsetof(ABP_ForSaleSign_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_ForSaleSign_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ForSaleSign_C, IsSold) == 0x0002A8, "Member 'ABP_ForSaleSign_C::IsSold' has a wrong offset!");
static_assert(offsetof(ABP_ForSaleSign_C, OnIsSoldChanged) == 0x0002B0, "Member 'ABP_ForSaleSign_C::OnIsSoldChanged' has a wrong offset!");

}

