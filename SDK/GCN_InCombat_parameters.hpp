#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GCN_InCombat

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GCN_InCombat.GCN_InCombat_C.ExecuteUbergraph_GCN_InCombat
// 0x0118 (0x0118 - 0x0000)
struct GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_MyTarget;                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGameplayCueEvent                             K2Node_Event_EventType;                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 K2Node_Event_Parameters;                           // 0x0018(0x00D8)(ConstParm, ContainsInstancedReference)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character_1;      // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat) == 0x000008, "Wrong alignment on GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat");
static_assert(sizeof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat) == 0x000118, "Wrong size on GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat");
static_assert(offsetof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat, EntryPoint) == 0x000000, "Member 'GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat::EntryPoint' has a wrong offset!");
static_assert(offsetof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat, K2Node_Event_MyTarget) == 0x000008, "Member 'GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat::K2Node_Event_MyTarget' has a wrong offset!");
static_assert(offsetof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat, K2Node_Event_EventType) == 0x000010, "Member 'GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat::K2Node_Event_EventType' has a wrong offset!");
static_assert(offsetof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat, K2Node_Event_Parameters) == 0x000018, "Member 'GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat::K2Node_Event_Parameters' has a wrong offset!");
static_assert(offsetof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat, K2Node_SwitchEnum_CmpSuccess) == 0x0000F0, "Member 'GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat, K2Node_DynamicCast_AsBP_Resident_Character) == 0x0000F8, "Member 'GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat, K2Node_DynamicCast_bSuccess) == 0x000100, "Member 'GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat, K2Node_DynamicCast_AsBP_Resident_Character_1) == 0x000108, "Member 'GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat::K2Node_DynamicCast_AsBP_Resident_Character_1' has a wrong offset!");
static_assert(offsetof(GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat, K2Node_DynamicCast_bSuccess_1) == 0x000110, "Member 'GCN_InCombat_C_ExecuteUbergraph_GCN_InCombat::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function GCN_InCombat.GCN_InCombat_C.K2_HandleGameplayCue
// 0x00E8 (0x00E8 - 0x0000)
struct GCN_InCombat_C_K2_HandleGameplayCue final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGameplayCueEvent                             EventType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0010(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(GCN_InCombat_C_K2_HandleGameplayCue) == 0x000008, "Wrong alignment on GCN_InCombat_C_K2_HandleGameplayCue");
static_assert(sizeof(GCN_InCombat_C_K2_HandleGameplayCue) == 0x0000E8, "Wrong size on GCN_InCombat_C_K2_HandleGameplayCue");
static_assert(offsetof(GCN_InCombat_C_K2_HandleGameplayCue, MyTarget) == 0x000000, "Member 'GCN_InCombat_C_K2_HandleGameplayCue::MyTarget' has a wrong offset!");
static_assert(offsetof(GCN_InCombat_C_K2_HandleGameplayCue, EventType) == 0x000008, "Member 'GCN_InCombat_C_K2_HandleGameplayCue::EventType' has a wrong offset!");
static_assert(offsetof(GCN_InCombat_C_K2_HandleGameplayCue, Parameters) == 0x000010, "Member 'GCN_InCombat_C_K2_HandleGameplayCue::Parameters' has a wrong offset!");

}

