#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InteractableBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass InteractableBase.InteractableBase_C
// 0x0050 (0x02E0 - 0x0290)
class AInteractableBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        InteractWidgetLocation;                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Priority;                                          // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnCooldown;                                        // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CoolDownTime;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Interactable;                                      // 0x02B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InteractingActor;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ReloadWhenHousesLoaded;                            // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CancelInteraction(class UPrimitiveComponent* InteractionComponent);
	void ExecuteUbergraph_InteractableBase(int32 EntryPoint);
	void GetInteractSound();
	void GetNewWidgetColor(struct FSlateColor* NewColor);
	void GetOptionalText(class FText* Return, class FText* Optional_Second_Line);
	void GetPriority(int32* Priority_0);
	void GetWidgetLocation(struct FVector* Location);
	void HideInteractionWidget(bool* Return);
	void Interact_Pressed_Succes(class AActor* InteractingActor_0);
	void Interactable_Cosmetics(bool Interactable_0);
	void Interactable_In_Focus(bool InFocus);
	void InteractableCancelInteraction(class UPrimitiveComponent* InteractionComponent);
	void InteractPressed(class AActor* InteractingActor_0);
	void InteractReleased(class AActor* InteractingActor_0);
	void IsInFocus(class AActor* Focusing_Actor);
	void IsInteractable(bool* Interactable_0);
	void Multi_Interact_Pressed_Cosmetics();
	void OnRep_Interactable();
	void PostInteract(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent);
	void PreInteract(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent);
	void ReceiveBeginPlay();
	void RegisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor_0);
	void ReloadAfterHousesLoaded(bool* Return);
	void Reset_Cooldown();
	void Set_Interact_Visibility(bool Visibility);
	void SetHoveredComponent(class UInteractionComponent_C* HoveredComponent, bool* Void);
	void SetInteractable(bool Interactable_0);
	void UnregisterInteracter(class UPrimitiveComponent* InteractionComponent, class AActor* InteractingActor_0);

	float GetInteractionDuration(class UPrimitiveComponent* InteractionComponent) const;
	void GetPostInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	void GetPreInteractSyncType(bool* bShouldSync, EAbilityTaskNetSyncType* Type, class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForEnemyTeam(class UPrimitiveComponent* InteractionComponent) const;
	bool IsAvailableForInteraction(class AActor* InteractingActor_0, class UPrimitiveComponent* InteractionComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"InteractableBase_C">();
	}
	static class AInteractableBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInteractableBase_C>();
	}
};
static_assert(alignof(AInteractableBase_C) == 0x000008, "Wrong alignment on AInteractableBase_C");
static_assert(sizeof(AInteractableBase_C) == 0x0002E0, "Wrong size on AInteractableBase_C");
static_assert(offsetof(AInteractableBase_C, UberGraphFrame) == 0x000290, "Member 'AInteractableBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AInteractableBase_C, InteractWidgetLocation) == 0x000298, "Member 'AInteractableBase_C::InteractWidgetLocation' has a wrong offset!");
static_assert(offsetof(AInteractableBase_C, DefaultSceneRoot) == 0x0002A0, "Member 'AInteractableBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AInteractableBase_C, Priority) == 0x0002A8, "Member 'AInteractableBase_C::Priority' has a wrong offset!");
static_assert(offsetof(AInteractableBase_C, OnCooldown) == 0x0002AC, "Member 'AInteractableBase_C::OnCooldown' has a wrong offset!");
static_assert(offsetof(AInteractableBase_C, CoolDownTime) == 0x0002B0, "Member 'AInteractableBase_C::CoolDownTime' has a wrong offset!");
static_assert(offsetof(AInteractableBase_C, Interactable) == 0x0002B8, "Member 'AInteractableBase_C::Interactable' has a wrong offset!");
static_assert(offsetof(AInteractableBase_C, InteractingActor) == 0x0002C0, "Member 'AInteractableBase_C::InteractingActor' has a wrong offset!");
static_assert(offsetof(AInteractableBase_C, Name_0) == 0x0002C8, "Member 'AInteractableBase_C::Name_0' has a wrong offset!");
static_assert(offsetof(AInteractableBase_C, ReloadWhenHousesLoaded) == 0x0002D8, "Member 'AInteractableBase_C::ReloadWhenHousesLoaded' has a wrong offset!");

}

