#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Interactable

#include "Basic.hpp"

#include "I_Interactable_classes.hpp"
#include "I_Interactable_parameters.hpp"


namespace SDK
{

// Function I_Interactable.I_Interactable_C.GetInteractSound
// (Public, BlueprintCallable, BlueprintEvent)

void II_Interactable_C::GetInteractSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "GetInteractSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function I_Interactable.I_Interactable_C.GetNewWidgetColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSlateColor                      NewColor                                               (Parm, OutParm)

void II_Interactable_C::GetNewWidgetColor(struct FSlateColor* NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "GetNewWidgetColor");

	Params::I_Interactable_C_GetNewWidgetColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewColor != nullptr)
		*NewColor = std::move(Parms.NewColor);
}


// Function I_Interactable.I_Interactable_C.GetOptionalText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Return                                                 (Parm, OutParm)
// class FText                             Optional_Second_Line                                   (Parm, OutParm)

void II_Interactable_C::GetOptionalText(class FText* Return, class FText* Optional_Second_Line)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "GetOptionalText");

	Params::I_Interactable_C_GetOptionalText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = std::move(Parms.Return);

	if (Optional_Second_Line != nullptr)
		*Optional_Second_Line = std::move(Parms.Optional_Second_Line);
}


// Function I_Interactable.I_Interactable_C.GetPriority
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Priority                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Interactable_C::GetPriority(int32* Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "GetPriority");

	Params::I_Interactable_C_GetPriority Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Priority != nullptr)
		*Priority = Parms.Priority;
}


// Function I_Interactable.I_Interactable_C.GetWidgetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Interactable_C::GetWidgetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "GetWidgetLocation");

	Params::I_Interactable_C_GetWidgetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function I_Interactable.I_Interactable_C.HideInteractionWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Interactable_C::HideInteractionWidget(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "HideInteractionWidget");

	Params::I_Interactable_C_HideInteractionWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function I_Interactable.I_Interactable_C.InteractPressed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Interactable_C::InteractPressed(class AActor* InteractingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "InteractPressed");

	Params::I_Interactable_C_InteractPressed Parms{};

	Parms.InteractingActor = InteractingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function I_Interactable.I_Interactable_C.InteractReleased
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Interactable_C::InteractReleased(class AActor* InteractingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "InteractReleased");

	Params::I_Interactable_C_InteractReleased Parms{};

	Parms.InteractingActor = InteractingActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function I_Interactable.I_Interactable_C.IsInFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Focusing_Actor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Interactable_C::IsInFocus(class AActor* Focusing_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "IsInFocus");

	Params::I_Interactable_C_IsInFocus Parms{};

	Parms.Focusing_Actor = Focusing_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function I_Interactable.I_Interactable_C.IsInteractable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interactable                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Interactable_C::IsInteractable(bool* Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "IsInteractable");

	Params::I_Interactable_C_IsInteractable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Interactable != nullptr)
		*Interactable = Parms.Interactable;
}


// Function I_Interactable.I_Interactable_C.SetHoveredComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInteractionComponent_C*          HoveredComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Void                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Interactable_C::SetHoveredComponent(class UInteractionComponent_C* HoveredComponent, bool* Void)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "SetHoveredComponent");

	Params::I_Interactable_C_SetHoveredComponent Parms{};

	Parms.HoveredComponent = HoveredComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (Void != nullptr)
		*Void = Parms.Void;
}


// Function I_Interactable.I_Interactable_C.SetInteractable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interactable                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Interactable_C::SetInteractable(bool Interactable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Interactable_C", "SetInteractable");

	Params::I_Interactable_C_SetInteractable Parms{};

	Parms.Interactable = Interactable;

	UObject::ProcessEvent(Func, &Parms);
}

}

