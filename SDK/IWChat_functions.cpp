#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IWChat

#include "Basic.hpp"

#include "IWChat_classes.hpp"
#include "IWChat_parameters.hpp"


namespace SDK
{

// Function IWChat.ChatMessageWidget.ApplyViewModel
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FChatMessageWidgetViewModel      InViewModel                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UChatMessageWidget::ApplyViewModel(const struct FChatMessageWidgetViewModel& InViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatMessageWidget", "ApplyViewModel");

	Params::ChatMessageWidget_ApplyViewModel Parms{};

	Parms.InViewModel = std::move(InViewModel);

	UObject::ProcessEvent(Func, &Parms);
}


// Function IWChat.ChatReplicationComponent.Multicast_Message
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FChatMessage                     InMessage                                              (Parm, NativeAccessSpecifierPublic)

void UChatReplicationComponent::Multicast_Message(const struct FChatMessage& InMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatReplicationComponent", "Multicast_Message");

	Params::ChatReplicationComponent_Multicast_Message Parms{};

	Parms.InMessage = std::move(InMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWChat.ChatReplicationComponent.Server_Message
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FChatMessage                     InMessage                                              (Parm, NativeAccessSpecifierPublic)

void UChatReplicationComponent::Server_Message(const struct FChatMessage& InMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatReplicationComponent", "Server_Message");

	Params::ChatReplicationComponent_Server_Message Parms{};

	Parms.InMessage = std::move(InMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWChat.ChatWidget.Catchup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InCount                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChatWidget::Catchup(int32 InCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "Catchup");

	Params::ChatWidget_Catchup Parms{};

	Parms.InCount = InCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IWChat.ChatWidget.ClearChatSubsystem
// (Final, Native, Public, BlueprintCallable)

void UChatWidget::ClearChatSubsystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "ClearChatSubsystem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function IWChat.ChatWidget.OnMessageAdded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FChatMessage                     InMessage                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UChatWidget::OnMessageAdded(const struct FChatMessage& InMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "OnMessageAdded");

	Params::ChatWidget_OnMessageAdded Parms{};

	Parms.InMessage = std::move(InMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function IWChat.ChatWidget.SendMessage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InMessage                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EChatMessageType                        InScope                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChatWidget::SendMessage(const class FText& InMessage, EChatMessageType InScope)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChatWidget", "SendMessage");

	Params::ChatWidget_SendMessage Parms{};

	Parms.InMessage = std::move(InMessage);
	Parms.InScope = InScope;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

