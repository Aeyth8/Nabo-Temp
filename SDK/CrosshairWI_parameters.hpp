#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CrosshairWI

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function CrosshairWI.CrosshairWI_C.ExecuteUbergraph_CrosshairWI
// 0x0138 (0x0138 - 0x0000)
struct CrosshairWI_C_ExecuteUbergraph_CrosshairWI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchEnded_ReturnValue;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UEquipmentInstance* Instance)> K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class APawn* OldPawn, class APawn* NewPawn)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Amount;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0048(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSize_ReturnValue;                      // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ResidentCharacter_C*                K2Node_DynamicCast_AsBP_Resident_Character;        // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEquipmentManagerComponent*             CallFunc_GetComponentByClass_ReturnValue;          // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetInstanceFromSlot_IsInstanceValid;      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEquipmentInstance*                     CallFunc_GetInstanceFromSlot_ReturnValue;          // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEquipmentInstance*                     K2Node_CustomEvent_Instance;                       // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerControllerFromID_ReturnValue;    // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_OldPawn;                        // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_NewPawn;                        // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast;         // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI) == 0x000008, "Wrong alignment on CrosshairWI_C_ExecuteUbergraph_CrosshairWI");
static_assert(sizeof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI) == 0x000138, "Wrong size on CrosshairWI_C_ExecuteUbergraph_CrosshairWI");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, EntryPoint) == 0x000000, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::EntryPoint' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_HasMatchEnded_ReturnValue) == 0x000010, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_HasMatchEnded_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, K2Node_CustomEvent_Amount) == 0x000038, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::K2Node_CustomEvent_Amount' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000040, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, K2Node_Event_MyGeometry) == 0x000048, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, K2Node_Event_InDeltaTime) == 0x000080, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000088, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_GetOwningPlayer_ReturnValue) == 0x000090, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_GetSize_ReturnValue) == 0x000098, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_GetSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_K2_GetPawn_ReturnValue) == 0x0000A8, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_BreakVector2D_X) == 0x0000B0, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_BreakVector2D_Y) == 0x0000B8, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_FInterpTo_ReturnValue) == 0x0000C8, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_MakeVector2D_ReturnValue) == 0x0000D0, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, K2Node_DynamicCast_AsBP_Resident_Character) == 0x0000E0, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::K2Node_DynamicCast_AsBP_Resident_Character' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_GetComponentByClass_ReturnValue) == 0x0000F0, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_GetInstanceFromSlot_IsInstanceValid) == 0x0000F8, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_GetInstanceFromSlot_IsInstanceValid' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_GetInstanceFromSlot_ReturnValue) == 0x000100, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_GetInstanceFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, K2Node_CustomEvent_Instance) == 0x000108, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::K2Node_CustomEvent_Instance' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_GetPlayerControllerFromID_ReturnValue) == 0x000110, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_GetPlayerControllerFromID_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, K2Node_CustomEvent_OldPawn) == 0x000118, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::K2Node_CustomEvent_OldPawn' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, K2Node_CustomEvent_NewPawn) == 0x000120, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::K2Node_CustomEvent_NewPawn' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_IsValid_ReturnValue_1) == 0x000128, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_ExecuteUbergraph_CrosshairWI, CallFunc_FInterpTo_DeltaTime_ImplicitCast) == 0x000130, "Member 'CrosshairWI_C_ExecuteUbergraph_CrosshairWI::CallFunc_FInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");

// Function CrosshairWI.CrosshairWI_C.GetCrosshairVisibility
// 0x0058 (0x0058 - 0x0000)
struct CrosshairWI_C_GetCrosshairVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0004(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_GetOwnedGameplayTags_self_CastInput;      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_GetOwnedGameplayTags_TagContainer;        // 0x0020(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0040(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CrosshairWI_C_GetCrosshairVisibility) == 0x000008, "Wrong alignment on CrosshairWI_C_GetCrosshairVisibility");
static_assert(sizeof(CrosshairWI_C_GetCrosshairVisibility) == 0x000058, "Wrong size on CrosshairWI_C_GetCrosshairVisibility");
static_assert(offsetof(CrosshairWI_C_GetCrosshairVisibility, ReturnValue) == 0x000000, "Member 'CrosshairWI_C_GetCrosshairVisibility::ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_GetCrosshairVisibility, Temp_struct_Variable) == 0x000004, "Member 'CrosshairWI_C_GetCrosshairVisibility::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_GetCrosshairVisibility, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'CrosshairWI_C_GetCrosshairVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_GetCrosshairVisibility, CallFunc_GetOwnedGameplayTags_self_CastInput) == 0x000010, "Member 'CrosshairWI_C_GetCrosshairVisibility::CallFunc_GetOwnedGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_GetCrosshairVisibility, CallFunc_GetOwnedGameplayTags_TagContainer) == 0x000020, "Member 'CrosshairWI_C_GetCrosshairVisibility::CallFunc_GetOwnedGameplayTags_TagContainer' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_GetCrosshairVisibility, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000040, "Member 'CrosshairWI_C_GetCrosshairVisibility::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_GetCrosshairVisibility, CallFunc_Array_Contains_ReturnValue) == 0x000050, "Member 'CrosshairWI_C_GetCrosshairVisibility::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function CrosshairWI.CrosshairWI_C.OnEquippedItem
// 0x0008 (0x0008 - 0x0000)
struct CrosshairWI_C_OnEquippedItem final
{
public:
	class UEquipmentInstance*                     Instance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CrosshairWI_C_OnEquippedItem) == 0x000008, "Wrong alignment on CrosshairWI_C_OnEquippedItem");
static_assert(sizeof(CrosshairWI_C_OnEquippedItem) == 0x000008, "Wrong size on CrosshairWI_C_OnEquippedItem");
static_assert(offsetof(CrosshairWI_C_OnEquippedItem, Instance) == 0x000000, "Member 'CrosshairWI_C_OnEquippedItem::Instance' has a wrong offset!");

// Function CrosshairWI.CrosshairWI_C.Reconstruct
// 0x0010 (0x0010 - 0x0000)
struct CrosshairWI_C_Reconstruct final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CrosshairWI_C_Reconstruct) == 0x000008, "Wrong alignment on CrosshairWI_C_Reconstruct");
static_assert(sizeof(CrosshairWI_C_Reconstruct) == 0x000010, "Wrong size on CrosshairWI_C_Reconstruct");
static_assert(offsetof(CrosshairWI_C_Reconstruct, OldPawn) == 0x000000, "Member 'CrosshairWI_C_Reconstruct::OldPawn' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_Reconstruct, NewPawn) == 0x000008, "Member 'CrosshairWI_C_Reconstruct::NewPawn' has a wrong offset!");

// Function CrosshairWI.CrosshairWI_C.Set Deviation
// 0x0008 (0x0008 - 0x0000)
struct CrosshairWI_C_Set_Deviation final
{
public:
	double                                        Amount_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CrosshairWI_C_Set_Deviation) == 0x000008, "Wrong alignment on CrosshairWI_C_Set_Deviation");
static_assert(sizeof(CrosshairWI_C_Set_Deviation) == 0x000008, "Wrong size on CrosshairWI_C_Set_Deviation");
static_assert(offsetof(CrosshairWI_C_Set_Deviation, Amount_0) == 0x000000, "Member 'CrosshairWI_C_Set_Deviation::Amount_0' has a wrong offset!");

// Function CrosshairWI.CrosshairWI_C.Tick
// 0x003C (0x003C - 0x0000)
struct CrosshairWI_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CrosshairWI_C_Tick) == 0x000004, "Wrong alignment on CrosshairWI_C_Tick");
static_assert(sizeof(CrosshairWI_C_Tick) == 0x00003C, "Wrong size on CrosshairWI_C_Tick");
static_assert(offsetof(CrosshairWI_C_Tick, MyGeometry) == 0x000000, "Member 'CrosshairWI_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(CrosshairWI_C_Tick, InDeltaTime) == 0x000038, "Member 'CrosshairWI_C_Tick::InDeltaTime' has a wrong offset!");

}

