#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_EULA_EndUserLicenseAgreement

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WI_EULA_EndUserLicenseAgreement.WI_EULA_EndUserLicenseAgreement_C.BndEvt__WI_EULA_EndUserLicenseAgreement_AgreeButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_EULA_EndUserLicenseAgreement_AgreeButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_EULA_EndUserLicenseAgreement_AgreeButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_EULA_EndUserLicenseAgreement_AgreeButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_EULA_EndUserLicenseAgreement_AgreeButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_EULA_EndUserLicenseAgreement_AgreeButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_EULA_EndUserLicenseAgreement_AgreeButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_EULA_EndUserLicenseAgreement_AgreeButton_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WI_EULA_EndUserLicenseAgreement.WI_EULA_EndUserLicenseAgreement_C.BndEvt__WI_PlaytestFinished_CloseGameButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_PlaytestFinished_CloseGameButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_PlaytestFinished_CloseGameButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_PlaytestFinished_CloseGameButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_PlaytestFinished_CloseGameButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_PlaytestFinished_CloseGameButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_PlaytestFinished_CloseGameButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WI_EULA_EndUserLicenseAgreement_C_BndEvt__WI_PlaytestFinished_CloseGameButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WI_EULA_EndUserLicenseAgreement.WI_EULA_EndUserLicenseAgreement_C.ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement
// 0x0080 (0x0080 - 0x0000)
struct WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_1;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0018(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULoadingScreenManager*                  CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0070(0x0010)()
};
static_assert(alignof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement) == 0x000008, "Wrong alignment on WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement");
static_assert(sizeof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement) == 0x000080, "Wrong size on WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement, EntryPoint) == 0x000000, "Member 'WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement::EntryPoint' has a wrong offset!");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement, K2Node_ComponentBoundEvent_Button_1) == 0x000010, "Member 'WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement, K2Node_Event_MyGeometry) == 0x000018, "Member 'WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement, K2Node_Event_InDeltaTime) == 0x000050, "Member 'WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement, CallFunc_GetPlayerController_ReturnValue_1) == 0x000058, "Member 'WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000060, "Member 'WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement, K2Node_ComponentBoundEvent_Button) == 0x000068, "Member 'WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement, CallFunc_Conv_StringToText_ReturnValue) == 0x000070, "Member 'WI_EULA_EndUserLicenseAgreement_C_ExecuteUbergraph_WI_EULA_EndUserLicenseAgreement::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WI_EULA_EndUserLicenseAgreement.WI_EULA_EndUserLicenseAgreement_C.Tick
// 0x003C (0x003C - 0x0000)
struct WI_EULA_EndUserLicenseAgreement_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WI_EULA_EndUserLicenseAgreement_C_Tick) == 0x000004, "Wrong alignment on WI_EULA_EndUserLicenseAgreement_C_Tick");
static_assert(sizeof(WI_EULA_EndUserLicenseAgreement_C_Tick) == 0x00003C, "Wrong size on WI_EULA_EndUserLicenseAgreement_C_Tick");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_Tick, MyGeometry) == 0x000000, "Member 'WI_EULA_EndUserLicenseAgreement_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WI_EULA_EndUserLicenseAgreement_C_Tick, InDeltaTime) == 0x000038, "Member 'WI_EULA_EndUserLicenseAgreement_C_Tick::InDeltaTime' has a wrong offset!");

}

