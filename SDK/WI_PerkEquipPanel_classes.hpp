#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_PerkEquipPanel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WI_PerkEquipPanel.WI_PerkEquipPanel_C
// 0x00A8 (0x0388 - 0x02E0)
class UWI_PerkEquipPanel_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWI_JPArrowButton_C*                    NextPerkSelector;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_PerkButton_C*                       PerkButton;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       PerkDescriptionText;                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       PerkNameText;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       PerkTypeText;                                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_JPArrowButton_C*                    PrevPerkSelector;                                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       RequiredLevelText;                                 // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWI_JPButton_C*                         ToggleEquipButton;                                 // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FGameplayTag                           NeighborID;                                        // 0x0328(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PerkID;                                            // 0x0330(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   PerkType;                                          // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   PerkName;                                          // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   PerkDescription;                                   // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         RequiredLevel;                                     // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPerkEquipped;                                    // 0x036C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D[0x3];                                      // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement;                                 // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnLoadoutUpdated;                                  // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BndEvt__WI_PerkEquipPanel_NextNeighborSelector_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__WI_PerkEquipPanel_PrevNeighborSelector_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__WI_PerkEquipPanel_ToggleEquipButton_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void ExecuteUbergraph_WI_PerkEquipPanel(int32 EntryPoint);
	void GetParentWidgetAndChildIndex(class UWrapBox** ParentWidget, int32* ChildIndex);
	void OnLoaded_3E7516644B33167501BE548EA195C154(class UObject* Loaded);
	void OnLoadoutUpdated__DelegateSignature();
	void SetIsPerkEquipped(bool IsEquipped);
	void SetLevelRequirement(int32 RequiredLevel_0, int32 NeighborLevel);
	void SetNeighborID(const struct FGameplayTag& NeighborID_0);
	void SetPerkDescription(const class FText& PerkDescription_0);
	void SetPerkID(const struct FGameplayTag& PerkID_0, TSoftObjectPtr<class UPerkDefinition>* SoftPerkDefinition, bool* HasPerkDefinition);
	void SetPerkInfo(class UWI_NeighborDetailsPerkSelectElement_C* PerkSelectElement_0);
	void SetPerkName(const class FText& PerkName_0);
	void SetPerkType(const struct FGameplayTag& PerkID_0);
	void SetRequiredLevelTextAndVisibility(int32 RequiredLevel_0, bool IsVisible_0);
	void ToggleEquipPerk();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WI_PerkEquipPanel_C">();
	}
	static class UWI_PerkEquipPanel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWI_PerkEquipPanel_C>();
	}
};
static_assert(alignof(UWI_PerkEquipPanel_C) == 0x000008, "Wrong alignment on UWI_PerkEquipPanel_C");
static_assert(sizeof(UWI_PerkEquipPanel_C) == 0x000388, "Wrong size on UWI_PerkEquipPanel_C");
static_assert(offsetof(UWI_PerkEquipPanel_C, UberGraphFrame) == 0x0002E0, "Member 'UWI_PerkEquipPanel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, NextPerkSelector) == 0x0002E8, "Member 'UWI_PerkEquipPanel_C::NextPerkSelector' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, PerkButton) == 0x0002F0, "Member 'UWI_PerkEquipPanel_C::PerkButton' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, PerkDescriptionText) == 0x0002F8, "Member 'UWI_PerkEquipPanel_C::PerkDescriptionText' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, PerkNameText) == 0x000300, "Member 'UWI_PerkEquipPanel_C::PerkNameText' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, PerkTypeText) == 0x000308, "Member 'UWI_PerkEquipPanel_C::PerkTypeText' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, PrevPerkSelector) == 0x000310, "Member 'UWI_PerkEquipPanel_C::PrevPerkSelector' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, RequiredLevelText) == 0x000318, "Member 'UWI_PerkEquipPanel_C::RequiredLevelText' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, ToggleEquipButton) == 0x000320, "Member 'UWI_PerkEquipPanel_C::ToggleEquipButton' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, NeighborID) == 0x000328, "Member 'UWI_PerkEquipPanel_C::NeighborID' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, PerkID) == 0x000330, "Member 'UWI_PerkEquipPanel_C::PerkID' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, PerkType) == 0x000338, "Member 'UWI_PerkEquipPanel_C::PerkType' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, PerkName) == 0x000348, "Member 'UWI_PerkEquipPanel_C::PerkName' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, PerkDescription) == 0x000358, "Member 'UWI_PerkEquipPanel_C::PerkDescription' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, RequiredLevel) == 0x000368, "Member 'UWI_PerkEquipPanel_C::RequiredLevel' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, IsPerkEquipped) == 0x00036C, "Member 'UWI_PerkEquipPanel_C::IsPerkEquipped' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, PerkSelectElement) == 0x000370, "Member 'UWI_PerkEquipPanel_C::PerkSelectElement' has a wrong offset!");
static_assert(offsetof(UWI_PerkEquipPanel_C, OnLoadoutUpdated) == 0x000378, "Member 'UWI_PerkEquipPanel_C::OnLoadoutUpdated' has a wrong offset!");

}

